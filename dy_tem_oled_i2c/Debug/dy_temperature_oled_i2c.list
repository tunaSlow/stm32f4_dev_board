
dy_temperature_oled_i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b4c  08007430  08007430  00008430  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f7c  08007f7c  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f7c  08007f7c  00008f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f84  08007f84  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f84  08007f84  00008f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f88  08007f88  00008f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007f8c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000006d0  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008a4  200008a4  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a313  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fdd  00000000  00000000  00013517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a28  00000000  00000000  000154f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079e  00000000  00000000  00015f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023245  00000000  00000000  000166be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000df1e  00000000  00000000  00039903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20fc  00000000  00000000  00047821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011991d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000393c  00000000  00000000  00119960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011d29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007418 	.word	0x08007418

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007418 	.word	0x08007418

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f14:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <MX_ADC1_Init+0xa0>)
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f34:	f000 ffec 	bl	8001f10 <HAL_ADC_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 fba3 	bl	8001688 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f42:	230d      	movs	r3, #13
 8000f44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f54:	f001 f98a 	bl	800226c <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f5e:	f000 fb93 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001f0 	.word	0x200001f0
 8000f70:	40012000 	.word	0x40012000
 8000f74:	0f000001 	.word	0x0f000001

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_ADC_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d127      	bne.n	8000fea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_ADC_MspInit+0x84>)
 8000fe6:	f001 fc45 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800

08001000 <Read_ADC_Channel>:
  }
}

/* USER CODE BEGIN 1 */
uint32_t Read_ADC_Channel(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001004:	4808      	ldr	r0, [pc, #32]	@ (8001028 <Read_ADC_Channel+0x28>)
 8001006:	f000 ffc7 	bl	8001f98 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800100a:	210a      	movs	r1, #10
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <Read_ADC_Channel+0x28>)
 800100e:	f001 f895 	bl	800213c <HAL_ADC_PollForConversion>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <Read_ADC_Channel+0x22>
    {
        return HAL_ADC_GetValue(&hadc1);
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <Read_ADC_Channel+0x28>)
 800101a:	f001 f91a 	bl	8002252 <HAL_ADC_GetValue>
 800101e:	4603      	mov	r3, r0
 8001020:	e000      	b.n	8001024 <Read_ADC_Channel+0x24>
    }
    return 0; // Read failed
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200001f0 	.word	0x200001f0

0800102c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b2c      	ldr	r3, [pc, #176]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a2b      	ldr	r2, [pc, #172]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 800104c:	f043 0320 	orr.w	r3, r3, #32
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0320 	and.w	r3, r3, #32
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a24      	ldr	r2, [pc, #144]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b22      	ldr	r3, [pc, #136]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b1e      	ldr	r3, [pc, #120]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0301 	and.w	r3, r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	603b      	str	r3, [r7, #0]
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 80010bc:	f043 0302 	orr.w	r3, r3, #2
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MX_GPIO_Init+0xcc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80010ce:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010dc:	2303      	movs	r3, #3
 80010de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010e0:	230a      	movs	r3, #10
 80010e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	4804      	ldr	r0, [pc, #16]	@ (80010fc <MX_GPIO_Init+0xd0>)
 80010ec:	f001 fbc2 	bl	8002874 <HAL_GPIO_Init>

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	@ 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001104:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <MX_I2C1_Init+0x50>)
 8001106:	4a13      	ldr	r2, [pc, #76]	@ (8001154 <MX_I2C1_Init+0x54>)
 8001108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800110a:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <MX_I2C1_Init+0x50>)
 800110c:	4a12      	ldr	r2, [pc, #72]	@ (8001158 <MX_I2C1_Init+0x58>)
 800110e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <MX_I2C1_Init+0x50>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <MX_I2C1_Init+0x50>)
 8001118:	2200      	movs	r2, #0
 800111a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800111c:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <MX_I2C1_Init+0x50>)
 800111e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001122:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <MX_I2C1_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001136:	4b06      	ldr	r3, [pc, #24]	@ (8001150 <MX_I2C1_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800113c:	4804      	ldr	r0, [pc, #16]	@ (8001150 <MX_I2C1_Init+0x50>)
 800113e:	f001 fd35 	bl	8002bac <HAL_I2C_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001148:	f000 fa9e 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000238 	.word	0x20000238
 8001154:	40005400 	.word	0x40005400
 8001158:	000186a0 	.word	0x000186a0

0800115c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001160:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <MX_I2C2_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	@ (80011b0 <MX_I2C2_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001166:	4b11      	ldr	r3, [pc, #68]	@ (80011ac <MX_I2C2_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	@ (80011b4 <MX_I2C2_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <MX_I2C2_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <MX_I2C2_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <MX_I2C2_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <MX_I2C2_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_I2C2_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <MX_I2C2_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_I2C2_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	@ (80011ac <MX_I2C2_Init+0x50>)
 800119a:	f001 fd07 	bl	8002bac <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 fa70 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000028c 	.word	0x2000028c
 80011b0:	40005800 	.word	0x40005800
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011bc:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011be:	4a13      	ldr	r2, [pc, #76]	@ (800120c <MX_I2C3_Init+0x54>)
 80011c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011c4:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_I2C3_Init+0x58>)
 80011c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80011e2:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011f4:	4804      	ldr	r0, [pc, #16]	@ (8001208 <MX_I2C3_Init+0x50>)
 80011f6:	f001 fcd9 	bl	8002bac <HAL_I2C_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001200:	f000 fa42 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200002e0 	.word	0x200002e0
 800120c:	40005c00 	.word	0x40005c00
 8001210:	000186a0 	.word	0x000186a0

08001214 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08e      	sub	sp, #56	@ 0x38
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a5b      	ldr	r2, [pc, #364]	@ (80013a0 <HAL_I2C_MspInit+0x18c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d12c      	bne.n	8001290 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
 800123a:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a59      	ldr	r2, [pc, #356]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	623b      	str	r3, [r7, #32]
 8001250:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001252:	23c0      	movs	r3, #192	@ 0xc0
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001256:	2312      	movs	r3, #18
 8001258:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001262:	2304      	movs	r3, #4
 8001264:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800126a:	4619      	mov	r1, r3
 800126c:	484e      	ldr	r0, [pc, #312]	@ (80013a8 <HAL_I2C_MspInit+0x194>)
 800126e:	f001 fb01 	bl	8002874 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	4b4b      	ldr	r3, [pc, #300]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	4a4a      	ldr	r2, [pc, #296]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 800127c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001280:	6413      	str	r3, [r2, #64]	@ 0x40
 8001282:	4b48      	ldr	r3, [pc, #288]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800128e:	e082      	b.n	8001396 <HAL_I2C_MspInit+0x182>
  else if(i2cHandle->Instance==I2C2)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a45      	ldr	r2, [pc, #276]	@ (80013ac <HAL_I2C_MspInit+0x198>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d12c      	bne.n	80012f4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	61bb      	str	r3, [r7, #24]
 800129e:	4b41      	ldr	r3, [pc, #260]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a40      	ldr	r2, [pc, #256]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 80012a4:	f043 0320 	orr.w	r3, r3, #32
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b3e      	ldr	r3, [pc, #248]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0320 	and.w	r3, r3, #32
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012b6:	2303      	movs	r3, #3
 80012b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012ba:	2312      	movs	r3, #18
 80012bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012c6:	2304      	movs	r3, #4
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ce:	4619      	mov	r1, r3
 80012d0:	4837      	ldr	r0, [pc, #220]	@ (80013b0 <HAL_I2C_MspInit+0x19c>)
 80012d2:	f001 facf 	bl	8002874 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	4b32      	ldr	r3, [pc, #200]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012de:	4a31      	ldr	r2, [pc, #196]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 80012e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e6:	4b2f      	ldr	r3, [pc, #188]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ee:	617b      	str	r3, [r7, #20]
 80012f0:	697b      	ldr	r3, [r7, #20]
}
 80012f2:	e050      	b.n	8001396 <HAL_I2C_MspInit+0x182>
  else if(i2cHandle->Instance==I2C3)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a2e      	ldr	r2, [pc, #184]	@ (80013b4 <HAL_I2C_MspInit+0x1a0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d14b      	bne.n	8001396 <HAL_I2C_MspInit+0x182>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b28      	ldr	r3, [pc, #160]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a27      	ldr	r2, [pc, #156]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001308:	f043 0304 	orr.w	r3, r3, #4
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b25      	ldr	r3, [pc, #148]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0304 	and.w	r3, r3, #4
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a20      	ldr	r2, [pc, #128]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800133a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133c:	2312      	movs	r3, #18
 800133e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001344:	2303      	movs	r3, #3
 8001346:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001348:	2304      	movs	r3, #4
 800134a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001350:	4619      	mov	r1, r3
 8001352:	4819      	ldr	r0, [pc, #100]	@ (80013b8 <HAL_I2C_MspInit+0x1a4>)
 8001354:	f001 fa8e 	bl	8002874 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001358:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800135e:	2312      	movs	r3, #18
 8001360:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800136a:	2304      	movs	r3, #4
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001372:	4619      	mov	r1, r3
 8001374:	4811      	ldr	r0, [pc, #68]	@ (80013bc <HAL_I2C_MspInit+0x1a8>)
 8001376:	f001 fa7d 	bl	8002874 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 8001384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001388:	6413      	str	r3, [r2, #64]	@ 0x40
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_I2C_MspInit+0x190>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
}
 8001396:	bf00      	nop
 8001398:	3738      	adds	r7, #56	@ 0x38
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40005400 	.word	0x40005400
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40005800 	.word	0x40005800
 80013b0:	40021400 	.word	0x40021400
 80013b4:	40005c00 	.word	0x40005c00
 80013b8:	40020800 	.word	0x40020800
 80013bc:	40020000 	.word	0x40020000

080013c0 <I2C_ScanAndFindLM75A>:

#define LM75A_TEMP_REG  0x00
uint8_t lm75a_addr = 0; // Will be set after scan

void I2C_ScanAndFindLM75A(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
	for (uint8_t addr = 1; addr < 127; addr++)
 80013c6:	2301      	movs	r3, #1
 80013c8:	71fb      	strb	r3, [r7, #7]
 80013ca:	e017      	b.n	80013fc <I2C_ScanAndFindLM75A+0x3c>
	{
		if (HAL_I2C_IsDeviceReady(&hi2c2, (addr << 1), 3, 5) == HAL_OK)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	b299      	uxth	r1, r3
 80013d4:	2305      	movs	r3, #5
 80013d6:	2203      	movs	r2, #3
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <I2C_ScanAndFindLM75A+0x4c>)
 80013da:	f002 f857 	bl	800348c <HAL_I2C_IsDeviceReady>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <I2C_ScanAndFindLM75A+0x36>
		{
			if (addr == 0x4F) // Found LM75A
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80013e8:	d105      	bne.n	80013f6 <I2C_ScanAndFindLM75A+0x36>
			{
				lm75a_addr = addr << 1; // Save 8-bit form for HAL
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <I2C_ScanAndFindLM75A+0x50>)
 80013f2:	701a      	strb	r2, [r3, #0]
				break;
 80013f4:	e006      	b.n	8001404 <I2C_ScanAndFindLM75A+0x44>
	for (uint8_t addr = 1; addr < 127; addr++)
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	3301      	adds	r3, #1
 80013fa:	71fb      	strb	r3, [r7, #7]
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	2b7e      	cmp	r3, #126	@ 0x7e
 8001400:	d9e4      	bls.n	80013cc <I2C_ScanAndFindLM75A+0xc>
			}
		}
	}
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	2000028c 	.word	0x2000028c
 8001410:	20000334 	.word	0x20000334

08001414 <LM75A_ReadTemperature_Fine>:

float LM75A_ReadTemperature_Fine(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af04      	add	r7, sp, #16
	uint8_t temp_data[2];
	int16_t raw_temp;
	float temperature;

	if (HAL_I2C_Mem_Read(&hi2c2, lm75a_addr, LM75A_TEMP_REG,
 800141a:	4b1f      	ldr	r3, [pc, #124]	@ (8001498 <LM75A_ReadTemperature_Fine+0x84>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2302      	movs	r3, #2
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	2200      	movs	r2, #0
 8001432:	481a      	ldr	r0, [pc, #104]	@ (800149c <LM75A_ReadTemperature_Fine+0x88>)
 8001434:	f001 fdf8 	bl	8003028 <HAL_I2C_Mem_Read>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <LM75A_ReadTemperature_Fine+0x2e>
			I2C_MEMADD_SIZE_8BIT, temp_data, 2, HAL_MAX_DELAY) != HAL_OK)
	{
		return -1000.0f; // Error
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <LM75A_ReadTemperature_Fine+0x8c>)
 8001440:	e023      	b.n	800148a <LM75A_ReadTemperature_Fine+0x76>
	}

	// Combine MSB and LSB
	raw_temp = (temp_data[0] << 8) | temp_data[1];
 8001442:	793b      	ldrb	r3, [r7, #4]
 8001444:	b21b      	sxth	r3, r3
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	797b      	ldrb	r3, [r7, #5]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	81fb      	strh	r3, [r7, #14]

	// Shift right by 5 to get rid of unused bits (bits 4..0)
	raw_temp >>= 5;
 8001452:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001456:	115b      	asrs	r3, r3, #5
 8001458:	81fb      	strh	r3, [r7, #14]

	// Sign extend 11-bit signed number if needed
	if (raw_temp & 0x400) // Check sign bit (bit 10)
 800145a:	89fb      	ldrh	r3, [r7, #14]
 800145c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001460:	2b00      	cmp	r3, #0
 8001462:	d005      	beq.n	8001470 <LM75A_ReadTemperature_Fine+0x5c>
	{
		raw_temp |= 0xF800; // Set upper bits to 1 for negative numbers
 8001464:	89fb      	ldrh	r3, [r7, #14]
 8001466:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800146a:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 800146e:	81fb      	strh	r3, [r7, #14]
	}

	temperature = raw_temp * 0.125f;
 8001470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001484:	edc7 7a02 	vstr	s15, [r7, #8]

	return temperature;
 8001488:	68bb      	ldr	r3, [r7, #8]
}
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000334 	.word	0x20000334
 800149c:	2000028c 	.word	0x2000028c
 80014a0:	c47a0000 	.word	0xc47a0000

080014a4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80014aa:	f000 fc9b 	bl	8001de4 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80014ae:	f000 f87f 	bl	80015b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80014b2:	f7ff fdbb 	bl	800102c <MX_GPIO_Init>
	MX_I2C2_Init();
 80014b6:	f7ff fe51 	bl	800115c <MX_I2C2_Init>
	MX_USB_OTG_FS_USB_Init();
 80014ba:	f000 fa1b 	bl	80018f4 <MX_USB_OTG_FS_USB_Init>
	MX_I2C1_Init();
 80014be:	f7ff fe1f 	bl	8001100 <MX_I2C1_Init>
	MX_I2C3_Init();
 80014c2:	f7ff fe79 	bl	80011b8 <MX_I2C3_Init>
	MX_ADC1_Init();
 80014c6:	f7ff fd05 	bl	8000ed4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */


	ssd1306_Init();
 80014ca:	f000 fa53 	bl	8001974 <ssd1306_Init>
	//	ssd1306_Fill(Black);
	//	ssd1306_SetCursor(0, 0);
	//	ssd1306_WriteString("Scanning I2C...", Font_7x10, White);
	//	ssd1306_UpdateScreen();
	//
	I2C_ScanAndFindLM75A();
 80014ce:	f7ff ff77 	bl	80013c0 <I2C_ScanAndFindLM75A>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		float temp = LM75A_ReadTemperature_Fine();
 80014d2:	f7ff ff9f 	bl	8001414 <LM75A_ReadTemperature_Fine>
 80014d6:	ed87 0a07 	vstr	s0, [r7, #28]
		uint32_t adc_val = Read_ADC_Channel();
 80014da:	f7ff fd91 	bl	8001000 <Read_ADC_Channel>
 80014de:	61b8      	str	r0, [r7, #24]
		float voltage = adc_val * 3.3f / 4095.0f;
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	ee07 3a90 	vmov	s15, r3
 80014e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ea:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001598 <main+0xf4>
 80014ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014f2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800159c <main+0xf8>
 80014f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014fa:	edc7 7a05 	vstr	s15, [r7, #20]

		ssd1306_Fill(Black);
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 faa2 	bl	8001a48 <ssd1306_Fill>

		ssd1306_SetCursor(2, 0);
 8001504:	2100      	movs	r1, #0
 8001506:	2002      	movs	r0, #2
 8001508:	f000 fbf8 	bl	8001cfc <ssd1306_SetCursor>
		snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C",
 800150c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001510:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int)temp, (int)((temp - (int)temp) * 100));
 8001514:	edd7 7a07 	vldr	s15, [r7, #28]
 8001518:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800151c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001520:	ed97 7a07 	vldr	s14, [r7, #28]
 8001524:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001528:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80015a0 <main+0xfc>
 800152c:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C",
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	ee17 3a90 	vmov	r3, s15
 8001538:	4638      	mov	r0, r7
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	ee16 3a90 	vmov	r3, s13
 8001540:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <main+0x100>)
 8001542:	2114      	movs	r1, #20
 8001544:	f003 fe20 	bl	8005188 <sniprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8001548:	4b17      	ldr	r3, [pc, #92]	@ (80015a8 <main+0x104>)
 800154a:	4638      	mov	r0, r7
 800154c:	2201      	movs	r2, #1
 800154e:	9200      	str	r2, [sp, #0]
 8001550:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001552:	f000 fbad 	bl	8001cb0 <ssd1306_WriteString>

		ssd1306_SetCursor(2, 20);
 8001556:	2114      	movs	r1, #20
 8001558:	2002      	movs	r0, #2
 800155a:	f000 fbcf 	bl	8001cfc <ssd1306_SetCursor>
		snprintf(buffer, sizeof(buffer), "Pot: %ld (%.2fV)", adc_val, voltage);
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7fe fff2 	bl	8000548 <__aeabi_f2d>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4638      	mov	r0, r7
 800156a:	e9cd 2300 	strd	r2, r3, [sp]
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <main+0x108>)
 8001572:	2114      	movs	r1, #20
 8001574:	f003 fe08 	bl	8005188 <sniprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <main+0x104>)
 800157a:	4638      	mov	r0, r7
 800157c:	2201      	movs	r2, #1
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001582:	f000 fb95 	bl	8001cb0 <ssd1306_WriteString>

		ssd1306_UpdateScreen();
 8001586:	f000 fa77 	bl	8001a78 <ssd1306_UpdateScreen>

		HAL_Delay(1000);
 800158a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800158e:	f000 fc9b 	bl	8001ec8 <HAL_Delay>
	{
 8001592:	bf00      	nop
 8001594:	e79d      	b.n	80014d2 <main+0x2e>
 8001596:	bf00      	nop
 8001598:	40533333 	.word	0x40533333
 800159c:	457ff000 	.word	0x457ff000
 80015a0:	42c80000 	.word	0x42c80000
 80015a4:	08007450 	.word	0x08007450
 80015a8:	08007bf8 	.word	0x08007bf8
 80015ac:	08007460 	.word	0x08007460

080015b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b094      	sub	sp, #80	@ 0x50
 80015b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2230      	movs	r2, #48	@ 0x30
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f003 fe75 	bl	80052ae <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c4:	f107 030c 	add.w	r3, r7, #12
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	4b29      	ldr	r3, [pc, #164]	@ (8001680 <SystemClock_Config+0xd0>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	4a28      	ldr	r2, [pc, #160]	@ (8001680 <SystemClock_Config+0xd0>)
 80015de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e4:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <SystemClock_Config+0xd0>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f0:	2300      	movs	r3, #0
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	4b23      	ldr	r3, [pc, #140]	@ (8001684 <SystemClock_Config+0xd4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a22      	ldr	r2, [pc, #136]	@ (8001684 <SystemClock_Config+0xd4>)
 80015fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b20      	ldr	r3, [pc, #128]	@ (8001684 <SystemClock_Config+0xd4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800160c:	2303      	movs	r3, #3
 800160e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001610:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001616:	2301      	movs	r3, #1
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800161a:	2310      	movs	r3, #16
 800161c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800161e:	2302      	movs	r3, #2
 8001620:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001622:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001626:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001628:	2304      	movs	r3, #4
 800162a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 800162c:	2348      	movs	r3, #72	@ 0x48
 800162e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001630:	2302      	movs	r3, #2
 8001632:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001634:	2303      	movs	r3, #3
 8001636:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001638:	f107 0320 	add.w	r3, r7, #32
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fc07 	bl	8003e50 <HAL_RCC_OscConfig>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001648:	f000 f81e 	bl	8001688 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800164c:	230f      	movs	r3, #15
 800164e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001650:	2300      	movs	r3, #0
 8001652:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001658:	2300      	movs	r3, #0
 800165a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2100      	movs	r1, #0
 8001666:	4618      	mov	r0, r3
 8001668:	f002 fe6a 	bl	8004340 <HAL_RCC_ClockConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 8001672:	f000 f809 	bl	8001688 <Error_Handler>
	}
}
 8001676:	bf00      	nop
 8001678:	3750      	adds	r7, #80	@ 0x50
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40007000 	.word	0x40007000

08001688 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <Error_Handler+0x8>

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b10      	ldr	r3, [pc, #64]	@ (80016e0 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	4a0f      	ldr	r2, [pc, #60]	@ (80016e0 <HAL_MspInit+0x4c>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016aa:	4b0d      	ldr	r3, [pc, #52]	@ (80016e0 <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_MspInit+0x4c>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <NMI_Handler+0x4>

080016ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <HardFault_Handler+0x4>

080016f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <MemManage_Handler+0x4>

080016fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <BusFault_Handler+0x4>

08001704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001708:	bf00      	nop
 800170a:	e7fd      	b.n	8001708 <UsageFault_Handler+0x4>

0800170c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800173a:	f000 fba5 	bl	8001e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}

08001742 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0
  return 1;
 8001746:	2301      	movs	r3, #1
}
 8001748:	4618      	mov	r0, r3
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr

08001752 <_kill>:

int _kill(int pid, int sig)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
 800175a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175c:	f003 fdfa 	bl	8005354 <__errno>
 8001760:	4603      	mov	r3, r0
 8001762:	2216      	movs	r2, #22
 8001764:	601a      	str	r2, [r3, #0]
  return -1;
 8001766:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_exit>:

void _exit (int status)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800177a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff ffe7 	bl	8001752 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001784:	bf00      	nop
 8001786:	e7fd      	b.n	8001784 <_exit+0x12>

08001788 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e00a      	b.n	80017b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800179a:	f3af 8000 	nop.w
 800179e:	4601      	mov	r1, r0
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	60ba      	str	r2, [r7, #8]
 80017a6:	b2ca      	uxtb	r2, r1
 80017a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	3301      	adds	r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbf0      	blt.n	800179a <_read+0x12>
  }

  return len;
 80017b8:	687b      	ldr	r3, [r7, #4]
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e009      	b.n	80017e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	60ba      	str	r2, [r7, #8]
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	4618      	mov	r0, r3
 80017de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	3301      	adds	r3, #1
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697a      	ldr	r2, [r7, #20]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	dbf1      	blt.n	80017d4 <_write+0x12>
  }
  return len;
 80017f0:	687b      	ldr	r3, [r7, #4]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3718      	adds	r7, #24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_close>:

int _close(int file)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001822:	605a      	str	r2, [r3, #4]
  return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <_isatty>:

int _isatty(int file)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800183a:	2301      	movs	r3, #1
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800186c:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <_sbrk+0x5c>)
 800186e:	4b15      	ldr	r3, [pc, #84]	@ (80018c4 <_sbrk+0x60>)
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001878:	4b13      	ldr	r3, [pc, #76]	@ (80018c8 <_sbrk+0x64>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d102      	bne.n	8001886 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001880:	4b11      	ldr	r3, [pc, #68]	@ (80018c8 <_sbrk+0x64>)
 8001882:	4a12      	ldr	r2, [pc, #72]	@ (80018cc <_sbrk+0x68>)
 8001884:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <_sbrk+0x64>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	429a      	cmp	r2, r3
 8001892:	d207      	bcs.n	80018a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001894:	f003 fd5e 	bl	8005354 <__errno>
 8001898:	4603      	mov	r3, r0
 800189a:	220c      	movs	r2, #12
 800189c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018a2:	e009      	b.n	80018b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <_sbrk+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <_sbrk+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b6:	68fb      	ldr	r3, [r7, #12]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20020000 	.word	0x20020000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	20000338 	.word	0x20000338
 80018cc:	200008a8 	.word	0x200008a8

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af04      	add	r7, sp, #16
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2301      	movs	r3, #1
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	1dfb      	adds	r3, r7, #7
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2301      	movs	r3, #1
 800192a:	2200      	movs	r2, #0
 800192c:	2178      	movs	r1, #120	@ 0x78
 800192e:	4803      	ldr	r0, [pc, #12]	@ (800193c <ssd1306_WriteCommand+0x2c>)
 8001930:	f001 fa80 	bl	8002e34 <HAL_I2C_Mem_Write>
}
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	2000028c 	.word	0x2000028c

08001940 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af04      	add	r7, sp, #16
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001952:	9202      	str	r2, [sp, #8]
 8001954:	9301      	str	r3, [sp, #4]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	2240      	movs	r2, #64	@ 0x40
 800195e:	2178      	movs	r1, #120	@ 0x78
 8001960:	4803      	ldr	r0, [pc, #12]	@ (8001970 <ssd1306_WriteData+0x30>)
 8001962:	f001 fa67 	bl	8002e34 <HAL_I2C_Mem_Write>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000028c 	.word	0x2000028c

08001974 <ssd1306_Init>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Init(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001978:	f7ff ffc3 	bl	8001902 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800197c:	2064      	movs	r0, #100	@ 0x64
 800197e:	f000 faa3 	bl	8001ec8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001982:	2000      	movs	r0, #0
 8001984:	f000 f9e6 	bl	8001d54 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001988:	2020      	movs	r0, #32
 800198a:	f7ff ffc1 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff ffbe 	bl	8001910 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid
//    ssd1306_WriteCommand(0x02); // low column start
//    ssd1306_WriteCommand(0x10); // high column start

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001994:	20b0      	movs	r0, #176	@ 0xb0
 8001996:	f7ff ffbb 	bl	8001910 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800199a:	20c8      	movs	r0, #200	@ 0xc8
 800199c:	f7ff ffb8 	bl	8001910 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff ffb5 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80019a6:	2010      	movs	r0, #16
 80019a8:	f7ff ffb2 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80019ac:	2040      	movs	r0, #64	@ 0x40
 80019ae:	f7ff ffaf 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80019b2:	20ff      	movs	r0, #255	@ 0xff
 80019b4:	f000 f9ba 	bl	8001d2c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80019b8:	20a1      	movs	r0, #161	@ 0xa1
 80019ba:	f7ff ffa9 	bl	8001910 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80019be:	20a6      	movs	r0, #166	@ 0xa6
 80019c0:	f7ff ffa6 	bl	8001910 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80019c4:	20a8      	movs	r0, #168	@ 0xa8
 80019c6:	f7ff ffa3 	bl	8001910 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80019ca:	203f      	movs	r0, #63	@ 0x3f
 80019cc:	f7ff ffa0 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80019d0:	20a4      	movs	r0, #164	@ 0xa4
 80019d2:	f7ff ff9d 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80019d6:	20d3      	movs	r0, #211	@ 0xd3
 80019d8:	f7ff ff9a 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80019dc:	2000      	movs	r0, #0
 80019de:	f7ff ff97 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80019e2:	20d5      	movs	r0, #213	@ 0xd5
 80019e4:	f7ff ff94 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80019e8:	20f0      	movs	r0, #240	@ 0xf0
 80019ea:	f7ff ff91 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80019ee:	20d9      	movs	r0, #217	@ 0xd9
 80019f0:	f7ff ff8e 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80019f4:	2022      	movs	r0, #34	@ 0x22
 80019f6:	f7ff ff8b 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80019fa:	20da      	movs	r0, #218	@ 0xda
 80019fc:	f7ff ff88 	bl	8001910 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001a00:	2012      	movs	r0, #18
 8001a02:	f7ff ff85 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001a06:	20db      	movs	r0, #219	@ 0xdb
 8001a08:	f7ff ff82 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001a0c:	2020      	movs	r0, #32
 8001a0e:	f7ff ff7f 	bl	8001910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001a12:	208d      	movs	r0, #141	@ 0x8d
 8001a14:	f7ff ff7c 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001a18:	2014      	movs	r0, #20
 8001a1a:	f7ff ff79 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001a1e:	2001      	movs	r0, #1
 8001a20:	f000 f998 	bl	8001d54 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001a24:	2000      	movs	r0, #0
 8001a26:	f000 f80f 	bl	8001a48 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001a2a:	f000 f825 	bl	8001a78 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <ssd1306_Init+0xd0>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001a34:	4b03      	ldr	r3, [pc, #12]	@ (8001a44 <ssd1306_Init+0xd0>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001a3a:	4b02      	ldr	r3, [pc, #8]	@ (8001a44 <ssd1306_Init+0xd0>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	711a      	strb	r2, [r3, #4]
}
 8001a40:	bf00      	nop
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2000074c 	.word	0x2000074c

08001a48 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d101      	bne.n	8001a5c <ssd1306_Fill+0x14>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <ssd1306_Fill+0x16>
 8001a5c:	23ff      	movs	r3, #255	@ 0xff
 8001a5e:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 8001a62:	4619      	mov	r1, r3
 8001a64:	4803      	ldr	r0, [pc, #12]	@ (8001a74 <ssd1306_Fill+0x2c>)
 8001a66:	f003 fc22 	bl	80052ae <memset>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000033c 	.word	0x2000033c

08001a78 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a7e:	2300      	movs	r3, #0
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	e01a      	b.n	8001aba <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	3b50      	subs	r3, #80	@ 0x50
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff40 	bl	8001910 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a90:	2000      	movs	r0, #0
 8001a92:	f7ff ff3d 	bl	8001910 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a96:	2010      	movs	r0, #16
 8001a98:	f7ff ff3a 	bl	8001910 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a9c:	79fa      	ldrb	r2, [r7, #7]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	019b      	lsls	r3, r3, #6
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <ssd1306_UpdateScreen+0x54>)
 8001aaa:	4413      	add	r3, r2
 8001aac:	2182      	movs	r1, #130	@ 0x82
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff46 	bl	8001940 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	71fb      	strb	r3, [r7, #7]
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	2b07      	cmp	r3, #7
 8001abe:	d9e1      	bls.n	8001a84 <ssd1306_UpdateScreen+0xc>
    }
}
 8001ac0:	bf00      	nop
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	2000033c 	.word	0x2000033c

08001ad0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001ad0:	b490      	push	{r4, r7}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	460b      	mov	r3, r1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b81      	cmp	r3, #129	@ 0x81
 8001ae6:	d849      	bhi.n	8001b7c <ssd1306_DrawPixel+0xac>
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	2b3f      	cmp	r3, #63	@ 0x3f
 8001aec:	d846      	bhi.n	8001b7c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d120      	bne.n	8001b36 <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001af4:	79fa      	ldrb	r2, [r7, #7]
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4601      	mov	r1, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	019b      	lsls	r3, r3, #6
 8001b02:	440b      	add	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	4a1f      	ldr	r2, [pc, #124]	@ (8001b88 <ssd1306_DrawPixel+0xb8>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b25c      	sxtb	r4, r3
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	4601      	mov	r1, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	019b      	lsls	r3, r3, #6
 8001b28:	440b      	add	r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b2e1      	uxtb	r1, r4
 8001b30:	4a15      	ldr	r2, [pc, #84]	@ (8001b88 <ssd1306_DrawPixel+0xb8>)
 8001b32:	54d1      	strb	r1, [r2, r3]
 8001b34:	e023      	b.n	8001b7e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001b36:	79fa      	ldrb	r2, [r7, #7]
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	08db      	lsrs	r3, r3, #3
 8001b3c:	b2d8      	uxtb	r0, r3
 8001b3e:	4601      	mov	r1, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	019b      	lsls	r3, r3, #6
 8001b44:	440b      	add	r3, r1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	4413      	add	r3, r2
 8001b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001b88 <ssd1306_DrawPixel+0xb8>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	b25a      	sxtb	r2, r3
 8001b50:	79bb      	ldrb	r3, [r7, #6]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	2101      	movs	r1, #1
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	b25b      	sxtb	r3, r3
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	b25b      	sxtb	r3, r3
 8001b62:	4013      	ands	r3, r2
 8001b64:	b25c      	sxtb	r4, r3
 8001b66:	79fa      	ldrb	r2, [r7, #7]
 8001b68:	4601      	mov	r1, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	440b      	add	r3, r1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	b2e1      	uxtb	r1, r4
 8001b76:	4a04      	ldr	r2, [pc, #16]	@ (8001b88 <ssd1306_DrawPixel+0xb8>)
 8001b78:	54d1      	strb	r1, [r2, r3]
 8001b7a:	e000      	b.n	8001b7e <ssd1306_DrawPixel+0xae>
        return;
 8001b7c:	bf00      	nop
    }
}
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc90      	pop	{r4, r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000033c 	.word	0x2000033c

08001b8c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4604      	mov	r4, r0
 8001b94:	4638      	mov	r0, r7
 8001b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b1f      	cmp	r3, #31
 8001ba2:	d902      	bls.n	8001baa <ssd1306_WriteChar+0x1e>
 8001ba4:	7bfb      	ldrb	r3, [r7, #15]
 8001ba6:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ba8:	d901      	bls.n	8001bae <ssd1306_WriteChar+0x22>
        return 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e079      	b.n	8001ca2 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <ssd1306_WriteChar+0x34>
 8001bb4:	68ba      	ldr	r2, [r7, #8]
 8001bb6:	7bfb      	ldrb	r3, [r7, #15]
 8001bb8:	3b20      	subs	r3, #32
 8001bba:	4413      	add	r3, r2
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	e000      	b.n	8001bc2 <ssd1306_WriteChar+0x36>
 8001bc0:	783b      	ldrb	r3, [r7, #0]
 8001bc2:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001bc4:	4b39      	ldr	r3, [pc, #228]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	4413      	add	r3, r2
 8001bce:	2b82      	cmp	r3, #130	@ 0x82
 8001bd0:	dc06      	bgt.n	8001be0 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001bd2:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001bd4:	885b      	ldrh	r3, [r3, #2]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	787b      	ldrb	r3, [r7, #1]
 8001bda:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001bdc:	2b40      	cmp	r3, #64	@ 0x40
 8001bde:	dd01      	ble.n	8001be4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e05e      	b.n	8001ca2 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	e04d      	b.n	8001c86 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	7bfb      	ldrb	r3, [r7, #15]
 8001bee:	3b20      	subs	r3, #32
 8001bf0:	7879      	ldrb	r1, [r7, #1]
 8001bf2:	fb01 f303 	mul.w	r3, r1, r3
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	440b      	add	r3, r1
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	4413      	add	r3, r2
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001c04:	2300      	movs	r3, #0
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	e036      	b.n	8001c78 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d013      	beq.n	8001c42 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	4413      	add	r3, r2
 8001c26:	b2d8      	uxtb	r0, r3
 8001c28:	4b20      	ldr	r3, [pc, #128]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001c2a:	885b      	ldrh	r3, [r3, #2]
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7ff ff48 	bl	8001ad0 <ssd1306_DrawPixel>
 8001c40:	e017      	b.n	8001c72 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001c42:	4b1a      	ldr	r3, [pc, #104]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001c44:	881b      	ldrh	r3, [r3, #0]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	b2d8      	uxtb	r0, r3
 8001c50:	4b16      	ldr	r3, [pc, #88]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001c52:	885b      	ldrh	r3, [r3, #2]
 8001c54:	b2da      	uxtb	r2, r3
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	4413      	add	r3, r2
 8001c5c:	b2d9      	uxtb	r1, r3
 8001c5e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	f7ff ff2f 	bl	8001ad0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	7dfb      	ldrb	r3, [r7, #23]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d3c4      	bcc.n	8001c0a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	3301      	adds	r3, #1
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	787b      	ldrb	r3, [r7, #1]
 8001c88:	461a      	mov	r2, r3
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d3ac      	bcc.n	8001bea <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001c90:	4b06      	ldr	r3, [pc, #24]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	7dfb      	ldrb	r3, [r7, #23]
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	4413      	add	r3, r2
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	4b03      	ldr	r3, [pc, #12]	@ (8001cac <ssd1306_WriteChar+0x120>)
 8001c9e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3724      	adds	r7, #36	@ 0x24
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000074c 	.word	0x2000074c

08001cb0 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	4638      	mov	r0, r7
 8001cba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001cbe:	e013      	b.n	8001ce8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	7818      	ldrb	r0, [r3, #0]
 8001cc4:	7e3b      	ldrb	r3, [r7, #24]
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	463b      	mov	r3, r7
 8001cca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ccc:	f7ff ff5e 	bl	8001b8c <ssd1306_WriteChar>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d002      	beq.n	8001ce2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	e008      	b.n	8001cf4 <ssd1306_WriteString+0x44>
        }
        str++;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1e7      	bne.n	8001cc0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	460a      	mov	r2, r1
 8001d06:	71fb      	strb	r3, [r7, #7]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <ssd1306_SetCursor+0x2c>)
 8001d12:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001d14:	79bb      	ldrb	r3, [r7, #6]
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <ssd1306_SetCursor+0x2c>)
 8001d1a:	805a      	strh	r2, [r3, #2]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	2000074c 	.word	0x2000074c

08001d2c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001d36:	2381      	movs	r3, #129	@ 0x81
 8001d38:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fde7 	bl	8001910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fde3 	bl	8001910 <ssd1306_WriteCommand>
}
 8001d4a:	bf00      	nop
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
	...

08001d54 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001d64:	23af      	movs	r3, #175	@ 0xaf
 8001d66:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <ssd1306_SetDisplayOn+0x38>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	715a      	strb	r2, [r3, #5]
 8001d6e:	e004      	b.n	8001d7a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001d70:	23ae      	movs	r3, #174	@ 0xae
 8001d72:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001d74:	4b05      	ldr	r3, [pc, #20]	@ (8001d8c <ssd1306_SetDisplayOn+0x38>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fdc7 	bl	8001910 <ssd1306_WriteCommand>
}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000074c 	.word	0x2000074c

08001d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d94:	f7ff fd9c 	bl	80018d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d98:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9a:	490d      	ldr	r1, [pc, #52]	@ (8001dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da0:	e002      	b.n	8001da8 <LoopCopyDataInit>

08001da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001da6:	3304      	adds	r3, #4

08001da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dac:	d3f9      	bcc.n	8001da2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dae:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db4:	e001      	b.n	8001dba <LoopFillZerobss>

08001db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db8:	3204      	adds	r2, #4

08001dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dbc:	d3fb      	bcc.n	8001db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dbe:	f003 facf 	bl	8005360 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc2:	f7ff fb6f 	bl	80014a4 <main>
  bx  lr    
 8001dc6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dc8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001dd4:	08007f8c 	.word	0x08007f8c
  ldr r2, =_sbss
 8001dd8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001ddc:	200008a4 	.word	0x200008a4

08001de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de0:	e7fe      	b.n	8001de0 <ADC_IRQHandler>
	...

08001de4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <HAL_Init+0x40>)
 8001dee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e24 <HAL_Init+0x40>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_Init+0x40>)
 8001dfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_Init+0x40>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a07      	ldr	r2, [pc, #28]	@ (8001e24 <HAL_Init+0x40>)
 8001e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f000 fcfd 	bl	800280c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e12:	200f      	movs	r0, #15
 8001e14:	f000 f808 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e18:	f7ff fc3c 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e1c:	2300      	movs	r3, #0
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023c00 	.word	0x40023c00

08001e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_InitTick+0x54>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_InitTick+0x58>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fd07 	bl	800285a <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e00e      	b.n	8001e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b0f      	cmp	r3, #15
 8001e5a:	d80a      	bhi.n	8001e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e64:	f000 fcdd 	bl	8002822 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e68:	4a06      	ldr	r2, [pc, #24]	@ (8001e84 <HAL_InitTick+0x5c>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000008 	.word	0x20000008
 8001e84:	20000004 	.word	0x20000004

08001e88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e8c:	4b06      	ldr	r3, [pc, #24]	@ (8001ea8 <HAL_IncTick+0x20>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x24>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <HAL_IncTick+0x24>)
 8001e9a:	6013      	str	r3, [r2, #0]
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	20000008 	.word	0x20000008
 8001eac:	20000754 	.word	0x20000754

08001eb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <HAL_GetTick+0x14>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000754 	.word	0x20000754

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff ffee 	bl	8001eb0 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffde 	bl	8001eb0 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000008 	.word	0x20000008

08001f10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e033      	b.n	8001f8e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff f822 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d118      	bne.n	8001f80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f56:	f023 0302 	bic.w	r3, r3, #2
 8001f5a:	f043 0202 	orr.w	r2, r3, #2
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 faa4 	bl	80024b0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	f023 0303 	bic.w	r3, r3, #3
 8001f76:	f043 0201 	orr.w	r2, r3, #1
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f7e:	e001      	b.n	8001f84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_Start+0x1a>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e0b2      	b.n	8002118 <HAL_ADC_Start+0x180>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d018      	beq.n	8001ffa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	689a      	ldr	r2, [r3, #8]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 0201 	orr.w	r2, r2, #1
 8001fd6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001fd8:	4b52      	ldr	r3, [pc, #328]	@ (8002124 <HAL_ADC_Start+0x18c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	@ (8002128 <HAL_ADC_Start+0x190>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0c9a      	lsrs	r2, r3, #18
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	4413      	add	r3, r2
 8001fea:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001fec:	e002      	b.n	8001ff4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1f9      	bne.n	8001fee <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b01      	cmp	r3, #1
 8002006:	d17a      	bne.n	80020fe <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002010:	f023 0301 	bic.w	r3, r3, #1
 8002014:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002026:	2b00      	cmp	r3, #0
 8002028:	d007      	beq.n	800203a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002032:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002046:	d106      	bne.n	8002056 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204c:	f023 0206 	bic.w	r2, r3, #6
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	645a      	str	r2, [r3, #68]	@ 0x44
 8002054:	e002      	b.n	800205c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002064:	4b31      	ldr	r3, [pc, #196]	@ (800212c <HAL_ADC_Start+0x194>)
 8002066:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002070:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 031f 	and.w	r3, r3, #31
 800207a:	2b00      	cmp	r3, #0
 800207c:	d12a      	bne.n	80020d4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2b      	ldr	r2, [pc, #172]	@ (8002130 <HAL_ADC_Start+0x198>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d015      	beq.n	80020b4 <HAL_ADC_Start+0x11c>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a29      	ldr	r2, [pc, #164]	@ (8002134 <HAL_ADC_Start+0x19c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d105      	bne.n	800209e <HAL_ADC_Start+0x106>
 8002092:	4b26      	ldr	r3, [pc, #152]	@ (800212c <HAL_ADC_Start+0x194>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00a      	beq.n	80020b4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a25      	ldr	r2, [pc, #148]	@ (8002138 <HAL_ADC_Start+0x1a0>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d136      	bne.n	8002116 <HAL_ADC_Start+0x17e>
 80020a8:	4b20      	ldr	r3, [pc, #128]	@ (800212c <HAL_ADC_Start+0x194>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d130      	bne.n	8002116 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d129      	bne.n	8002116 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	e020      	b.n	8002116 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a15      	ldr	r2, [pc, #84]	@ (8002130 <HAL_ADC_Start+0x198>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d11b      	bne.n	8002116 <HAL_ADC_Start+0x17e>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d114      	bne.n	8002116 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e00b      	b.n	8002116 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002102:	f043 0210 	orr.w	r2, r3, #16
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f043 0201 	orr.w	r2, r3, #1
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20000000 	.word	0x20000000
 8002128:	431bde83 	.word	0x431bde83
 800212c:	40012300 	.word	0x40012300
 8002130:	40012000 	.word	0x40012000
 8002134:	40012100 	.word	0x40012100
 8002138:	40012200 	.word	0x40012200

0800213c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002158:	d113      	bne.n	8002182 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002168:	d10b      	bne.n	8002182 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e063      	b.n	800224a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002182:	f7ff fe95 	bl	8001eb0 <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002188:	e021      	b.n	80021ce <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002190:	d01d      	beq.n	80021ce <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_ADC_PollForConversion+0x6c>
 8002198:	f7ff fe8a 	bl	8001eb0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d212      	bcs.n	80021ce <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d00b      	beq.n	80021ce <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f043 0204 	orr.w	r2, r3, #4
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e03d      	b.n	800224a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d1d6      	bne.n	800218a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0212 	mvn.w	r2, #18
 80021e4:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d123      	bne.n	8002248 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002204:	2b00      	cmp	r3, #0
 8002206:	d11f      	bne.n	8002248 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002212:	2b00      	cmp	r3, #0
 8002214:	d006      	beq.n	8002224 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002220:	2b00      	cmp	r3, #0
 8002222:	d111      	bne.n	8002248 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002228:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002252:	b480      	push	{r7}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_ADC_ConfigChannel+0x1c>
 8002284:	2302      	movs	r3, #2
 8002286:	e105      	b.n	8002494 <HAL_ADC_ConfigChannel+0x228>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b09      	cmp	r3, #9
 8002296:	d925      	bls.n	80022e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68d9      	ldr	r1, [r3, #12]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	461a      	mov	r2, r3
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	3b1e      	subs	r3, #30
 80022ae:	2207      	movs	r2, #7
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43da      	mvns	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	400a      	ands	r2, r1
 80022bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68d9      	ldr	r1, [r3, #12]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	4618      	mov	r0, r3
 80022d0:	4603      	mov	r3, r0
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4403      	add	r3, r0
 80022d6:	3b1e      	subs	r3, #30
 80022d8:	409a      	lsls	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	430a      	orrs	r2, r1
 80022e0:	60da      	str	r2, [r3, #12]
 80022e2:	e022      	b.n	800232a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6919      	ldr	r1, [r3, #16]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	2207      	movs	r2, #7
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	400a      	ands	r2, r1
 8002306:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6919      	ldr	r1, [r3, #16]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	b29b      	uxth	r3, r3
 8002318:	4618      	mov	r0, r3
 800231a:	4603      	mov	r3, r0
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4403      	add	r3, r0
 8002320:	409a      	lsls	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b06      	cmp	r3, #6
 8002330:	d824      	bhi.n	800237c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	3b05      	subs	r3, #5
 8002344:	221f      	movs	r2, #31
 8002346:	fa02 f303 	lsl.w	r3, r2, r3
 800234a:	43da      	mvns	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	400a      	ands	r2, r1
 8002352:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	4413      	add	r3, r2
 800236c:	3b05      	subs	r3, #5
 800236e:	fa00 f203 	lsl.w	r2, r0, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	635a      	str	r2, [r3, #52]	@ 0x34
 800237a:	e04c      	b.n	8002416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2b0c      	cmp	r3, #12
 8002382:	d824      	bhi.n	80023ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	3b23      	subs	r3, #35	@ 0x23
 8002396:	221f      	movs	r2, #31
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43da      	mvns	r2, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	400a      	ands	r2, r1
 80023a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	4618      	mov	r0, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	3b23      	subs	r3, #35	@ 0x23
 80023c0:	fa00 f203 	lsl.w	r2, r0, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80023cc:	e023      	b.n	8002416 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	3b41      	subs	r3, #65	@ 0x41
 80023e0:	221f      	movs	r2, #31
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43da      	mvns	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	400a      	ands	r2, r1
 80023ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	4618      	mov	r0, r3
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	4413      	add	r3, r2
 8002408:	3b41      	subs	r3, #65	@ 0x41
 800240a:	fa00 f203 	lsl.w	r2, r0, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002416:	4b22      	ldr	r3, [pc, #136]	@ (80024a0 <HAL_ADC_ConfigChannel+0x234>)
 8002418:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a21      	ldr	r2, [pc, #132]	@ (80024a4 <HAL_ADC_ConfigChannel+0x238>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d109      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1cc>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2b12      	cmp	r3, #18
 800242a:	d105      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a19      	ldr	r2, [pc, #100]	@ (80024a4 <HAL_ADC_ConfigChannel+0x238>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d123      	bne.n	800248a <HAL_ADC_ConfigChannel+0x21e>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2b10      	cmp	r3, #16
 8002448:	d003      	beq.n	8002452 <HAL_ADC_ConfigChannel+0x1e6>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b11      	cmp	r3, #17
 8002450:	d11b      	bne.n	800248a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b10      	cmp	r3, #16
 8002464:	d111      	bne.n	800248a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_ADC_ConfigChannel+0x23c>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a10      	ldr	r2, [pc, #64]	@ (80024ac <HAL_ADC_ConfigChannel+0x240>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	0c9a      	lsrs	r2, r3, #18
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800247c:	e002      	b.n	8002484 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	3b01      	subs	r3, #1
 8002482:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f9      	bne.n	800247e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	40012300 	.word	0x40012300
 80024a4:	40012000 	.word	0x40012000
 80024a8:	20000000 	.word	0x20000000
 80024ac:	431bde83 	.word	0x431bde83

080024b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024b8:	4b79      	ldr	r3, [pc, #484]	@ (80026a0 <ADC_Init+0x1f0>)
 80024ba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6859      	ldr	r1, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	021a      	lsls	r2, r3, #8
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6859      	ldr	r1, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800252a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6899      	ldr	r1, [r3, #8]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	430a      	orrs	r2, r1
 800253c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	4a58      	ldr	r2, [pc, #352]	@ (80026a4 <ADC_Init+0x1f4>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d022      	beq.n	800258e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002556:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	430a      	orrs	r2, r1
 8002568:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002578:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6899      	ldr	r1, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	e00f      	b.n	80025ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800259c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80025ac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0202 	bic.w	r2, r2, #2
 80025bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	7e1b      	ldrb	r3, [r3, #24]
 80025c8:	005a      	lsls	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80025ea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80025fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6859      	ldr	r1, [r3, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	3b01      	subs	r3, #1
 8002608:	035a      	lsls	r2, r3, #13
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	e007      	b.n	8002624 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002622:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002632:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	3b01      	subs	r3, #1
 8002640:	051a      	lsls	r2, r3, #20
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002658:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6899      	ldr	r1, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002666:	025a      	lsls	r2, r3, #9
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	430a      	orrs	r2, r1
 800266e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800267e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6899      	ldr	r1, [r3, #8]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	029a      	lsls	r2, r3, #10
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	609a      	str	r2, [r3, #8]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	40012300 	.word	0x40012300
 80026a4:	0f000001 	.word	0x0f000001

080026a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026b8:	4b0c      	ldr	r3, [pc, #48]	@ (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026c4:	4013      	ands	r3, r2
 80026c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026da:	4a04      	ldr	r2, [pc, #16]	@ (80026ec <__NVIC_SetPriorityGrouping+0x44>)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	60d3      	str	r3, [r2, #12]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	e000ed00 	.word	0xe000ed00

080026f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026f4:	4b04      	ldr	r3, [pc, #16]	@ (8002708 <__NVIC_GetPriorityGrouping+0x18>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	0a1b      	lsrs	r3, r3, #8
 80026fa:	f003 0307 	and.w	r3, r3, #7
}
 80026fe:	4618      	mov	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	e000ed00 	.word	0xe000ed00

0800270c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	6039      	str	r1, [r7, #0]
 8002716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	db0a      	blt.n	8002736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	b2da      	uxtb	r2, r3
 8002724:	490c      	ldr	r1, [pc, #48]	@ (8002758 <__NVIC_SetPriority+0x4c>)
 8002726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272a:	0112      	lsls	r2, r2, #4
 800272c:	b2d2      	uxtb	r2, r2
 800272e:	440b      	add	r3, r1
 8002730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002734:	e00a      	b.n	800274c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4908      	ldr	r1, [pc, #32]	@ (800275c <__NVIC_SetPriority+0x50>)
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	3b04      	subs	r3, #4
 8002744:	0112      	lsls	r2, r2, #4
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	440b      	add	r3, r1
 800274a:	761a      	strb	r2, [r3, #24]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000e100 	.word	0xe000e100
 800275c:	e000ed00 	.word	0xe000ed00

08002760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	@ 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	f1c3 0307 	rsb	r3, r3, #7
 800277a:	2b04      	cmp	r3, #4
 800277c:	bf28      	it	cs
 800277e:	2304      	movcs	r3, #4
 8002780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3304      	adds	r3, #4
 8002786:	2b06      	cmp	r3, #6
 8002788:	d902      	bls.n	8002790 <NVIC_EncodePriority+0x30>
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3b03      	subs	r3, #3
 800278e:	e000      	b.n	8002792 <NVIC_EncodePriority+0x32>
 8002790:	2300      	movs	r3, #0
 8002792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002794:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	43da      	mvns	r2, r3
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	401a      	ands	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	fa01 f303 	lsl.w	r3, r1, r3
 80027b2:	43d9      	mvns	r1, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027b8:	4313      	orrs	r3, r2
         );
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3724      	adds	r7, #36	@ 0x24
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d8:	d301      	bcc.n	80027de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027da:	2301      	movs	r3, #1
 80027dc:	e00f      	b.n	80027fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027de:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <SysTick_Config+0x40>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3b01      	subs	r3, #1
 80027e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027e6:	210f      	movs	r1, #15
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80027ec:	f7ff ff8e 	bl	800270c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027f0:	4b05      	ldr	r3, [pc, #20]	@ (8002808 <SysTick_Config+0x40>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027f6:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <SysTick_Config+0x40>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	e000e010 	.word	0xe000e010

0800280c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff47 	bl	80026a8 <__NVIC_SetPriorityGrouping>
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002822:	b580      	push	{r7, lr}
 8002824:	b086      	sub	sp, #24
 8002826:	af00      	add	r7, sp, #0
 8002828:	4603      	mov	r3, r0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002834:	f7ff ff5c 	bl	80026f0 <__NVIC_GetPriorityGrouping>
 8002838:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	6978      	ldr	r0, [r7, #20]
 8002840:	f7ff ff8e 	bl	8002760 <NVIC_EncodePriority>
 8002844:	4602      	mov	r2, r0
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff5d 	bl	800270c <__NVIC_SetPriority>
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff ffb0 	bl	80027c8 <SysTick_Config>
 8002868:	4603      	mov	r3, r0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	@ 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002882:	2300      	movs	r3, #0
 8002884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002886:	2300      	movs	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
 800288e:	e16b      	b.n	8002b68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002890:	2201      	movs	r2, #1
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	4013      	ands	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	f040 815a 	bne.w	8002b62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d005      	beq.n	80028c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d130      	bne.n	8002928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	2203      	movs	r2, #3
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028fc:	2201      	movs	r2, #1
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 0201 	and.w	r2, r3, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4313      	orrs	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f003 0303 	and.w	r3, r3, #3
 8002930:	2b03      	cmp	r3, #3
 8002932:	d017      	beq.n	8002964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	2203      	movs	r2, #3
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4013      	ands	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d123      	bne.n	80029b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	08da      	lsrs	r2, r3, #3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3208      	adds	r2, #8
 8002978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	220f      	movs	r2, #15
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	08da      	lsrs	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3208      	adds	r2, #8
 80029b2:	69b9      	ldr	r1, [r7, #24]
 80029b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0203 	and.w	r2, r3, #3
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80b4 	beq.w	8002b62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	4b60      	ldr	r3, [pc, #384]	@ (8002b80 <HAL_GPIO_Init+0x30c>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	4a5f      	ldr	r2, [pc, #380]	@ (8002b80 <HAL_GPIO_Init+0x30c>)
 8002a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002b80 <HAL_GPIO_Init+0x30c>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a16:	4a5b      	ldr	r2, [pc, #364]	@ (8002b84 <HAL_GPIO_Init+0x310>)
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	3302      	adds	r3, #2
 8002a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f003 0303 	and.w	r3, r3, #3
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	220f      	movs	r2, #15
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	@ (8002b88 <HAL_GPIO_Init+0x314>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d02b      	beq.n	8002a9a <HAL_GPIO_Init+0x226>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a51      	ldr	r2, [pc, #324]	@ (8002b8c <HAL_GPIO_Init+0x318>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d025      	beq.n	8002a96 <HAL_GPIO_Init+0x222>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a50      	ldr	r2, [pc, #320]	@ (8002b90 <HAL_GPIO_Init+0x31c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d01f      	beq.n	8002a92 <HAL_GPIO_Init+0x21e>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a4f      	ldr	r2, [pc, #316]	@ (8002b94 <HAL_GPIO_Init+0x320>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d019      	beq.n	8002a8e <HAL_GPIO_Init+0x21a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4e      	ldr	r2, [pc, #312]	@ (8002b98 <HAL_GPIO_Init+0x324>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_Init+0x216>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4d      	ldr	r2, [pc, #308]	@ (8002b9c <HAL_GPIO_Init+0x328>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ba0 <HAL_GPIO_Init+0x32c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_GPIO_Init+0x20e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba4 <HAL_GPIO_Init+0x330>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_GPIO_Init+0x20a>
 8002a7a:	2307      	movs	r3, #7
 8002a7c:	e00e      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a7e:	2308      	movs	r3, #8
 8002a80:	e00c      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a82:	2306      	movs	r3, #6
 8002a84:	e00a      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a86:	2305      	movs	r3, #5
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x228>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aac:	4935      	ldr	r1, [pc, #212]	@ (8002b84 <HAL_GPIO_Init+0x310>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a32      	ldr	r2, [pc, #200]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b30      	ldr	r3, [pc, #192]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a27      	ldr	r2, [pc, #156]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0e:	4b26      	ldr	r3, [pc, #152]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b38:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b5c:	4a12      	ldr	r2, [pc, #72]	@ (8002ba8 <HAL_GPIO_Init+0x334>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f67f ae90 	bls.w	8002890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40021400 	.word	0x40021400
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40021c00 	.word	0x40021c00
 8002ba8:	40013c00 	.word	0x40013c00

08002bac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e12b      	b.n	8002e16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe fb1e 	bl	8001214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2224      	movs	r2, #36	@ 0x24
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c10:	f001 fd8e 	bl	8004730 <HAL_RCC_GetPCLK1Freq>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4a81      	ldr	r2, [pc, #516]	@ (8002e20 <HAL_I2C_Init+0x274>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d807      	bhi.n	8002c30 <HAL_I2C_Init+0x84>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4a80      	ldr	r2, [pc, #512]	@ (8002e24 <HAL_I2C_Init+0x278>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	bf94      	ite	ls
 8002c28:	2301      	movls	r3, #1
 8002c2a:	2300      	movhi	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	e006      	b.n	8002c3e <HAL_I2C_Init+0x92>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a7d      	ldr	r2, [pc, #500]	@ (8002e28 <HAL_I2C_Init+0x27c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	bf94      	ite	ls
 8002c38:	2301      	movls	r3, #1
 8002c3a:	2300      	movhi	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0e7      	b.n	8002e16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	4a78      	ldr	r2, [pc, #480]	@ (8002e2c <HAL_I2C_Init+0x280>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	0c9b      	lsrs	r3, r3, #18
 8002c50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
 8002c6c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a6a      	ldr	r2, [pc, #424]	@ (8002e20 <HAL_I2C_Init+0x274>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d802      	bhi.n	8002c80 <HAL_I2C_Init+0xd4>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	e009      	b.n	8002c94 <HAL_I2C_Init+0xe8>
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002c86:	fb02 f303 	mul.w	r3, r2, r3
 8002c8a:	4a69      	ldr	r2, [pc, #420]	@ (8002e30 <HAL_I2C_Init+0x284>)
 8002c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c90:	099b      	lsrs	r3, r3, #6
 8002c92:	3301      	adds	r3, #1
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ca6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	495c      	ldr	r1, [pc, #368]	@ (8002e20 <HAL_I2C_Init+0x274>)
 8002cb0:	428b      	cmp	r3, r1
 8002cb2:	d819      	bhi.n	8002ce8 <HAL_I2C_Init+0x13c>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1e59      	subs	r1, r3, #1
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc2:	1c59      	adds	r1, r3, #1
 8002cc4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cc8:	400b      	ands	r3, r1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_I2C_Init+0x138>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1e59      	subs	r1, r3, #1
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cdc:	3301      	adds	r3, #1
 8002cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce2:	e051      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	e04f      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d111      	bne.n	8002d14 <HAL_I2C_Init+0x168>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	440b      	add	r3, r1
 8002cfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d02:	3301      	adds	r3, #1
 8002d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	bf0c      	ite	eq
 8002d0c:	2301      	moveq	r3, #1
 8002d0e:	2300      	movne	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e012      	b.n	8002d3a <HAL_I2C_Init+0x18e>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1e58      	subs	r0, r3, #1
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6859      	ldr	r1, [r3, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	0099      	lsls	r1, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Init+0x196>
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e022      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10e      	bne.n	8002d68 <HAL_I2C_Init+0x1bc>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	1e58      	subs	r0, r3, #1
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	460b      	mov	r3, r1
 8002d54:	005b      	lsls	r3, r3, #1
 8002d56:	440b      	add	r3, r1
 8002d58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d66:	e00f      	b.n	8002d88 <HAL_I2C_Init+0x1dc>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1e58      	subs	r0, r3, #1
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6859      	ldr	r1, [r3, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	0099      	lsls	r1, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	6809      	ldr	r1, [r1, #0]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002db6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	6911      	ldr	r1, [r2, #16]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68d2      	ldr	r2, [r2, #12]
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	430b      	orrs	r3, r1
 8002dca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695a      	ldr	r2, [r3, #20]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2220      	movs	r2, #32
 8002e02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	000186a0 	.word	0x000186a0
 8002e24:	001e847f 	.word	0x001e847f
 8002e28:	003d08ff 	.word	0x003d08ff
 8002e2c:	431bde83 	.word	0x431bde83
 8002e30:	10624dd3 	.word	0x10624dd3

08002e34 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af02      	add	r7, sp, #8
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	4608      	mov	r0, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	461a      	mov	r2, r3
 8002e42:	4603      	mov	r3, r0
 8002e44:	817b      	strh	r3, [r7, #10]
 8002e46:	460b      	mov	r3, r1
 8002e48:	813b      	strh	r3, [r7, #8]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e4e:	f7ff f82f 	bl	8001eb0 <HAL_GetTick>
 8002e52:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	f040 80d9 	bne.w	8003014 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	2319      	movs	r3, #25
 8002e68:	2201      	movs	r2, #1
 8002e6a:	496d      	ldr	r1, [pc, #436]	@ (8003020 <HAL_I2C_Mem_Write+0x1ec>)
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fdb9 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	e0cc      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Mem_Write+0x56>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e0c5      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d007      	beq.n	8002eb0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ebe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2221      	movs	r2, #33	@ 0x21
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <HAL_I2C_Mem_Write+0x1f0>)
 8002ef0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ef2:	88f8      	ldrh	r0, [r7, #6]
 8002ef4:	893a      	ldrh	r2, [r7, #8]
 8002ef6:	8979      	ldrh	r1, [r7, #10]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	9301      	str	r3, [sp, #4]
 8002efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	4603      	mov	r3, r0
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 fbf0 	bl	80036e8 <I2C_RequestMemoryWrite>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d052      	beq.n	8002fb4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e081      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 fe7e 	bl	8003c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00d      	beq.n	8002f3e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d107      	bne.n	8002f3a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f38:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e06b      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	781a      	ldrb	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4e:	1c5a      	adds	r2, r3, #1
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	f003 0304 	and.w	r3, r3, #4
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d11b      	bne.n	8002fb4 <HAL_I2C_Mem_Write+0x180>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1aa      	bne.n	8002f12 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fe71 	bl	8003ca8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00d      	beq.n	8002fe8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fe2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e016      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	e000      	b.n	8003016 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
  }
}
 8003016:	4618      	mov	r0, r3
 8003018:	3718      	adds	r7, #24
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	00100002 	.word	0x00100002
 8003024:	ffff0000 	.word	0xffff0000

08003028 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08c      	sub	sp, #48	@ 0x30
 800302c:	af02      	add	r7, sp, #8
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	817b      	strh	r3, [r7, #10]
 800303a:	460b      	mov	r3, r1
 800303c:	813b      	strh	r3, [r7, #8]
 800303e:	4613      	mov	r3, r2
 8003040:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003042:	f7fe ff35 	bl	8001eb0 <HAL_GetTick>
 8003046:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b20      	cmp	r3, #32
 8003052:	f040 8214 	bne.w	800347e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	2319      	movs	r3, #25
 800305c:	2201      	movs	r2, #1
 800305e:	497b      	ldr	r1, [pc, #492]	@ (800324c <HAL_I2C_Mem_Read+0x224>)
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fcbf 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d001      	beq.n	8003070 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800306c:	2302      	movs	r3, #2
 800306e:	e207      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_I2C_Mem_Read+0x56>
 800307a:	2302      	movs	r3, #2
 800307c:	e200      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d007      	beq.n	80030a4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2222      	movs	r2, #34	@ 0x22
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2240      	movs	r2, #64	@ 0x40
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80030d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003250 <HAL_I2C_Mem_Read+0x228>)
 80030e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030e6:	88f8      	ldrh	r0, [r7, #6]
 80030e8:	893a      	ldrh	r2, [r7, #8]
 80030ea:	8979      	ldrh	r1, [r7, #10]
 80030ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ee:	9301      	str	r3, [sp, #4]
 80030f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	4603      	mov	r3, r0
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f000 fb8c 	bl	8003814 <I2C_RequestMemoryRead>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e1bc      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800310a:	2b00      	cmp	r3, #0
 800310c:	d113      	bne.n	8003136 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310e:	2300      	movs	r3, #0
 8003110:	623b      	str	r3, [r7, #32]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	623b      	str	r3, [r7, #32]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	623b      	str	r3, [r7, #32]
 8003122:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e190      	b.n	8003458 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800313a:	2b01      	cmp	r3, #1
 800313c:	d11b      	bne.n	8003176 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800314c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	61fb      	str	r3, [r7, #28]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	61fb      	str	r3, [r7, #28]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	61fb      	str	r3, [r7, #28]
 8003162:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e170      	b.n	8003458 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317a:	2b02      	cmp	r3, #2
 800317c:	d11b      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800318c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800319c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	e150      	b.n	8003458 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	617b      	str	r3, [r7, #20]
 80031ca:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031cc:	e144      	b.n	8003458 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d2:	2b03      	cmp	r3, #3
 80031d4:	f200 80f1 	bhi.w	80033ba <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d123      	bne.n	8003228 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 fda7 	bl	8003d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d001      	beq.n	80031f4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e145      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	3b01      	subs	r3, #1
 8003212:	b29a      	uxth	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003226:	e117      	b.n	8003458 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b02      	cmp	r3, #2
 800322e:	d14e      	bne.n	80032ce <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003236:	2200      	movs	r2, #0
 8003238:	4906      	ldr	r1, [pc, #24]	@ (8003254 <HAL_I2C_Mem_Read+0x22c>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 fbd2 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d008      	beq.n	8003258 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e11a      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
 800324a:	bf00      	nop
 800324c:	00100002 	.word	0x00100002
 8003250:	ffff0000 	.word	0xffff0000
 8003254:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003266:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691a      	ldr	r2, [r3, #16]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	1c5a      	adds	r2, r3, #1
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003290:	b29b      	uxth	r3, r3
 8003292:	3b01      	subs	r3, #1
 8003294:	b29a      	uxth	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	b2d2      	uxtb	r2, r2
 80032a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29a      	uxth	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032cc:	e0c4      	b.n	8003458 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d4:	2200      	movs	r2, #0
 80032d6:	496c      	ldr	r1, [pc, #432]	@ (8003488 <HAL_I2C_Mem_Read+0x460>)
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 fb83 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0cb      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003314:	3b01      	subs	r3, #1
 8003316:	b29a      	uxth	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003330:	2200      	movs	r2, #0
 8003332:	4955      	ldr	r1, [pc, #340]	@ (8003488 <HAL_I2C_Mem_Read+0x460>)
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 fb55 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e09d      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003352:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033b8:	e04e      	b.n	8003458 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033bc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fcba 	bl	8003d38 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e058      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	691a      	ldr	r2, [r3, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e0:	1c5a      	adds	r2, r3, #1
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033ea:	3b01      	subs	r3, #1
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b04      	cmp	r3, #4
 800340c:	d124      	bne.n	8003458 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003412:	2b03      	cmp	r3, #3
 8003414:	d107      	bne.n	8003426 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003424:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800345c:	2b00      	cmp	r3, #0
 800345e:	f47f aeb6 	bne.w	80031ce <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e000      	b.n	8003480 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800347e:	2302      	movs	r3, #2
  }
}
 8003480:	4618      	mov	r0, r3
 8003482:	3728      	adds	r7, #40	@ 0x28
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	00010004 	.word	0x00010004

0800348c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af02      	add	r7, sp, #8
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	607a      	str	r2, [r7, #4]
 8003496:	603b      	str	r3, [r7, #0]
 8003498:	460b      	mov	r3, r1
 800349a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7fe fd08 	bl	8001eb0 <HAL_GetTick>
 80034a0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b20      	cmp	r3, #32
 80034b0:	f040 8111 	bne.w	80036d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	2319      	movs	r3, #25
 80034ba:	2201      	movs	r2, #1
 80034bc:	4988      	ldr	r1, [pc, #544]	@ (80036e0 <HAL_I2C_IsDeviceReady+0x254>)
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa90 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80034ca:	2302      	movs	r3, #2
 80034cc:	e104      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d101      	bne.n	80034dc <HAL_I2C_IsDeviceReady+0x50>
 80034d8:	2302      	movs	r3, #2
 80034da:	e0fd      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d007      	beq.n	8003502 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f042 0201 	orr.w	r2, r2, #1
 8003500:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2224      	movs	r2, #36	@ 0x24
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4a70      	ldr	r2, [pc, #448]	@ (80036e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003524:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003534:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2200      	movs	r2, #0
 800353e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 fa4e 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00d      	beq.n	800356a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800355c:	d103      	bne.n	8003566 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003564:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0b6      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800356a:	897b      	ldrh	r3, [r7, #10]
 800356c:	b2db      	uxtb	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003578:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800357a:	f7fe fc99 	bl	8001eb0 <HAL_GetTick>
 800357e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b02      	cmp	r3, #2
 800358c:	bf0c      	ite	eq
 800358e:	2301      	moveq	r3, #1
 8003590:	2300      	movne	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a4:	bf0c      	ite	eq
 80035a6:	2301      	moveq	r3, #1
 80035a8:	2300      	movne	r3, #0
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035ae:	e025      	b.n	80035fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035b0:	f7fe fc7e 	bl	8001eb0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d302      	bcc.n	80035c6 <HAL_I2C_IsDeviceReady+0x13a>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d103      	bne.n	80035ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	22a0      	movs	r2, #160	@ 0xa0
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b02      	cmp	r3, #2
 80035da:	bf0c      	ite	eq
 80035dc:	2301      	moveq	r3, #1
 80035de:	2300      	movne	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2ba0      	cmp	r3, #160	@ 0xa0
 8003606:	d005      	beq.n	8003614 <HAL_I2C_IsDeviceReady+0x188>
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d102      	bne.n	8003614 <HAL_I2C_IsDeviceReady+0x188>
 800360e:	7dbb      	ldrb	r3, [r7, #22]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0cd      	beq.n	80035b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d129      	bne.n	800367e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003638:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	613b      	str	r3, [r7, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	613b      	str	r3, [r7, #16]
 800364e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	2319      	movs	r3, #25
 8003656:	2201      	movs	r2, #1
 8003658:	4921      	ldr	r1, [pc, #132]	@ (80036e0 <HAL_I2C_IsDeviceReady+0x254>)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f9c2 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e036      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800367a:	2300      	movs	r3, #0
 800367c:	e02c      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003696:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	2319      	movs	r3, #25
 800369e:	2201      	movs	r2, #1
 80036a0:	490f      	ldr	r1, [pc, #60]	@ (80036e0 <HAL_I2C_IsDeviceReady+0x254>)
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 f99e 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e012      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	f4ff af32 	bcc.w	8003526 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80036d6:	2302      	movs	r3, #2
  }
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3720      	adds	r7, #32
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	00100002 	.word	0x00100002
 80036e4:	ffff0000 	.word	0xffff0000

080036e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	4608      	mov	r0, r1
 80036f2:	4611      	mov	r1, r2
 80036f4:	461a      	mov	r2, r3
 80036f6:	4603      	mov	r3, r0
 80036f8:	817b      	strh	r3, [r7, #10]
 80036fa:	460b      	mov	r3, r1
 80036fc:	813b      	strh	r3, [r7, #8]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6a3b      	ldr	r3, [r7, #32]
 8003718:	2200      	movs	r2, #0
 800371a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f960 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00d      	beq.n	8003746 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003734:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003738:	d103      	bne.n	8003742 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003740:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e05f      	b.n	8003806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003746:	897b      	ldrh	r3, [r7, #10]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	492d      	ldr	r1, [pc, #180]	@ (8003810 <I2C_RequestMemoryWrite+0x128>)
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f000 f9bb 	bl	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e04c      	b.n	8003806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800376c:	2300      	movs	r3, #0
 800376e:	617b      	str	r3, [r7, #20]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003784:	6a39      	ldr	r1, [r7, #32]
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 fa46 	bl	8003c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d00d      	beq.n	80037ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003796:	2b04      	cmp	r3, #4
 8003798:	d107      	bne.n	80037aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02b      	b.n	8003806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d105      	bne.n	80037c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037b4:	893b      	ldrh	r3, [r7, #8]
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	611a      	str	r2, [r3, #16]
 80037be:	e021      	b.n	8003804 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037c0:	893b      	ldrh	r3, [r7, #8]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d0:	6a39      	ldr	r1, [r7, #32]
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 fa20 	bl	8003c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00d      	beq.n	80037fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	2b04      	cmp	r3, #4
 80037e4:	d107      	bne.n	80037f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e005      	b.n	8003806 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037fa:	893b      	ldrh	r3, [r7, #8]
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3718      	adds	r7, #24
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	00010002 	.word	0x00010002

08003814 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	4608      	mov	r0, r1
 800381e:	4611      	mov	r1, r2
 8003820:	461a      	mov	r2, r3
 8003822:	4603      	mov	r3, r0
 8003824:	817b      	strh	r3, [r7, #10]
 8003826:	460b      	mov	r3, r1
 8003828:	813b      	strh	r3, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800383c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800384c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	2200      	movs	r2, #0
 8003856:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f8c2 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00d      	beq.n	8003882 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003874:	d103      	bne.n	800387e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0aa      	b.n	80039d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003882:	897b      	ldrh	r3, [r7, #10]
 8003884:	b2db      	uxtb	r3, r3
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003890:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	4952      	ldr	r1, [pc, #328]	@ (80039e0 <I2C_RequestMemoryRead+0x1cc>)
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f91d 	bl	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e097      	b.n	80039d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]
 80038bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c0:	6a39      	ldr	r1, [r7, #32]
 80038c2:	68f8      	ldr	r0, [r7, #12]
 80038c4:	f000 f9a8 	bl	8003c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00d      	beq.n	80038ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d107      	bne.n	80038e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e076      	b.n	80039d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038ea:	88fb      	ldrh	r3, [r7, #6]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038f0:	893b      	ldrh	r3, [r7, #8]
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	611a      	str	r2, [r3, #16]
 80038fa:	e021      	b.n	8003940 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038fc:	893b      	ldrh	r3, [r7, #8]
 80038fe:	0a1b      	lsrs	r3, r3, #8
 8003900:	b29b      	uxth	r3, r3
 8003902:	b2da      	uxtb	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800390a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390c:	6a39      	ldr	r1, [r7, #32]
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 f982 	bl	8003c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00d      	beq.n	8003936 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391e:	2b04      	cmp	r3, #4
 8003920:	d107      	bne.n	8003932 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003930:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e050      	b.n	80039d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003936:	893b      	ldrh	r3, [r7, #8]
 8003938:	b2da      	uxtb	r2, r3
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003942:	6a39      	ldr	r1, [r7, #32]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f967 	bl	8003c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00d      	beq.n	800396c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003954:	2b04      	cmp	r3, #4
 8003956:	d107      	bne.n	8003968 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003966:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e035      	b.n	80039d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800397a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800397c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	2200      	movs	r2, #0
 8003984:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f000 f82b 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00d      	beq.n	80039b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a2:	d103      	bne.n	80039ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e013      	b.n	80039d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80039b0:	897b      	ldrh	r3, [r7, #10]
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	6a3a      	ldr	r2, [r7, #32]
 80039c4:	4906      	ldr	r1, [pc, #24]	@ (80039e0 <I2C_RequestMemoryRead+0x1cc>)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f886 	bl	8003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	00010002 	.word	0x00010002

080039e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	603b      	str	r3, [r7, #0]
 80039f0:	4613      	mov	r3, r2
 80039f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f4:	e048      	b.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039fc:	d044      	beq.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fe fa57 	bl	8001eb0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d139      	bne.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	0c1b      	lsrs	r3, r3, #16
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d10d      	bne.n	8003a3a <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	43da      	mvns	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	bf0c      	ite	eq
 8003a30:	2301      	moveq	r3, #1
 8003a32:	2300      	movne	r3, #0
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	461a      	mov	r2, r3
 8003a38:	e00c      	b.n	8003a54 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	43da      	mvns	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	4013      	ands	r3, r2
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	461a      	mov	r2, r3
 8003a54:	79fb      	ldrb	r3, [r7, #7]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d116      	bne.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e023      	b.n	8003ad0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	0c1b      	lsrs	r3, r3, #16
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10d      	bne.n	8003aae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	e00c      	b.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d093      	beq.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ae6:	e071      	b.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	695b      	ldr	r3, [r3, #20]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af6:	d123      	bne.n	8003b40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b06:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e067      	b.n	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b46:	d041      	beq.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b48:	f7fe f9b2 	bl	8001eb0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d302      	bcc.n	8003b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d136      	bne.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	0c1b      	lsrs	r3, r3, #16
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d10c      	bne.n	8003b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	43da      	mvns	r2, r3
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	bf14      	ite	ne
 8003b7a:	2301      	movne	r3, #1
 8003b7c:	2300      	moveq	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	e00b      	b.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	43da      	mvns	r2, r3
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d016      	beq.n	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	f043 0220 	orr.w	r2, r3, #32
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e021      	b.n	8003c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	0c1b      	lsrs	r3, r3, #16
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d10c      	bne.n	8003bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	e00b      	b.n	8003c08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699b      	ldr	r3, [r3, #24]
 8003bf6:	43da      	mvns	r2, r3
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf14      	ite	ne
 8003c02:	2301      	movne	r3, #1
 8003c04:	2300      	moveq	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f af6d 	bne.w	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c24:	e034      	b.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f8e3 	bl	8003df2 <I2C_IsAcknowledgeFailed>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e034      	b.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c3c:	d028      	beq.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7fe f937 	bl	8001eb0 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d11d      	bne.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c5e:	2b80      	cmp	r3, #128	@ 0x80
 8003c60:	d016      	beq.n	8003c90 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e007      	b.n	8003ca0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9a:	2b80      	cmp	r3, #128	@ 0x80
 8003c9c:	d1c3      	bne.n	8003c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3710      	adds	r7, #16
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cb4:	e034      	b.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f000 f89b 	bl	8003df2 <I2C_IsAcknowledgeFailed>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e034      	b.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ccc:	d028      	beq.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cce:	f7fe f8ef 	bl	8001eb0 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d302      	bcc.n	8003ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d11d      	bne.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d016      	beq.n	8003d20 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	f043 0220 	orr.w	r2, r3, #32
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d1c3      	bne.n	8003cb6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d44:	e049      	b.n	8003dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d119      	bne.n	8003d88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0210 	mvn.w	r2, #16
 8003d5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2220      	movs	r2, #32
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e030      	b.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d88:	f7fe f892 	bl	8001eb0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	68ba      	ldr	r2, [r7, #8]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d302      	bcc.n	8003d9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11d      	bne.n	8003dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da8:	2b40      	cmp	r3, #64	@ 0x40
 8003daa:	d016      	beq.n	8003dda <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc6:	f043 0220 	orr.w	r2, r3, #32
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e007      	b.n	8003dea <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de4:	2b40      	cmp	r3, #64	@ 0x40
 8003de6:	d1ae      	bne.n	8003d46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}

08003df2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e08:	d11b      	bne.n	8003e42 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e12:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f043 0204 	orr.w	r2, r3, #4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e267      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e6e:	4b88      	ldr	r3, [pc, #544]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d00c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e7a:	4b85      	ldr	r3, [pc, #532]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d112      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e86:	4b82      	ldr	r3, [pc, #520]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e92:	d10b      	bne.n	8003eac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e94:	4b7e      	ldr	r3, [pc, #504]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d05b      	beq.n	8003f58 <HAL_RCC_OscConfig+0x108>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d157      	bne.n	8003f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e242      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb4:	d106      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x74>
 8003eb6:	4b76      	ldr	r3, [pc, #472]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a75      	ldr	r2, [pc, #468]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e01d      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ecc:	d10c      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x98>
 8003ece:	4b70      	ldr	r3, [pc, #448]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a6f      	ldr	r2, [pc, #444]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ed4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ed8:	6013      	str	r3, [r2, #0]
 8003eda:	4b6d      	ldr	r3, [pc, #436]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a6c      	ldr	r2, [pc, #432]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ee4:	6013      	str	r3, [r2, #0]
 8003ee6:	e00b      	b.n	8003f00 <HAL_RCC_OscConfig+0xb0>
 8003ee8:	4b69      	ldr	r3, [pc, #420]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a68      	ldr	r2, [pc, #416]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef2:	6013      	str	r3, [r2, #0]
 8003ef4:	4b66      	ldr	r3, [pc, #408]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a65      	ldr	r2, [pc, #404]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003efa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d013      	beq.n	8003f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd ffd2 	bl	8001eb0 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd ffce 	bl	8001eb0 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	@ 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e207      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f22:	4b5b      	ldr	r3, [pc, #364]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0f0      	beq.n	8003f10 <HAL_RCC_OscConfig+0xc0>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7fd ffbe 	bl	8001eb0 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f38:	f7fd ffba 	bl	8001eb0 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b64      	cmp	r3, #100	@ 0x64
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e1f3      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f4a:	4b51      	ldr	r3, [pc, #324]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe8>
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d063      	beq.n	800402e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f66:	4b4a      	ldr	r3, [pc, #296]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f72:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d11c      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7e:	4b44      	ldr	r3, [pc, #272]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d116      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8a:	4b41      	ldr	r3, [pc, #260]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d005      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68db      	ldr	r3, [r3, #12]
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d001      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e1c7      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4937      	ldr	r1, [pc, #220]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fb6:	e03a      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d020      	beq.n	8004002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc0:	4b34      	ldr	r3, [pc, #208]	@ (8004094 <HAL_RCC_OscConfig+0x244>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fd ff73 	bl	8001eb0 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fce:	f7fd ff6f 	bl	8001eb0 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e1a8      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fec:	4b28      	ldr	r3, [pc, #160]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	691b      	ldr	r3, [r3, #16]
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4925      	ldr	r1, [pc, #148]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	600b      	str	r3, [r1, #0]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004002:	4b24      	ldr	r3, [pc, #144]	@ (8004094 <HAL_RCC_OscConfig+0x244>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fd ff52 	bl	8001eb0 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004010:	f7fd ff4e 	bl	8001eb0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e187      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d036      	beq.n	80040a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b15      	ldr	r3, [pc, #84]	@ (8004098 <HAL_RCC_OscConfig+0x248>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd ff32 	bl	8001eb0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004050:	f7fd ff2e 	bl	8001eb0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e167      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004062:	4b0b      	ldr	r3, [pc, #44]	@ (8004090 <HAL_RCC_OscConfig+0x240>)
 8004064:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x200>
 800406e:	e01b      	b.n	80040a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b09      	ldr	r3, [pc, #36]	@ (8004098 <HAL_RCC_OscConfig+0x248>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fd ff1b 	bl	8001eb0 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800407c:	e00e      	b.n	800409c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800407e:	f7fd ff17 	bl	8001eb0 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d907      	bls.n	800409c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e150      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 8004090:	40023800 	.word	0x40023800
 8004094:	42470000 	.word	0x42470000
 8004098:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800409c:	4b88      	ldr	r3, [pc, #544]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ea      	bne.n	800407e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8097 	beq.w	80041e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b81      	ldr	r3, [pc, #516]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10f      	bne.n	80040e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	2300      	movs	r3, #0
 80040c8:	60bb      	str	r3, [r7, #8]
 80040ca:	4b7d      	ldr	r3, [pc, #500]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ce:	4a7c      	ldr	r2, [pc, #496]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040d6:	4b7a      	ldr	r3, [pc, #488]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80040d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b77      	ldr	r3, [pc, #476]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d118      	bne.n	8004124 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b74      	ldr	r3, [pc, #464]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a73      	ldr	r2, [pc, #460]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fd fed7 	bl	8001eb0 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004104:	e008      	b.n	8004118 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004106:	f7fd fed3 	bl	8001eb0 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e10c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <HAL_RCC_OscConfig+0x474>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f0      	beq.n	8004106 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x2ea>
 800412c:	4b64      	ldr	r3, [pc, #400]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004130:	4a63      	ldr	r2, [pc, #396]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	@ 0x70
 8004138:	e01c      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b05      	cmp	r3, #5
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x30c>
 8004142:	4b5f      	ldr	r3, [pc, #380]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004146:	4a5e      	ldr	r2, [pc, #376]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	6713      	str	r3, [r2, #112]	@ 0x70
 800414e:	4b5c      	ldr	r3, [pc, #368]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004152:	4a5b      	ldr	r2, [pc, #364]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004154:	f043 0301 	orr.w	r3, r3, #1
 8004158:	6713      	str	r3, [r2, #112]	@ 0x70
 800415a:	e00b      	b.n	8004174 <HAL_RCC_OscConfig+0x324>
 800415c:	4b58      	ldr	r3, [pc, #352]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800415e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004160:	4a57      	ldr	r2, [pc, #348]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004162:	f023 0301 	bic.w	r3, r3, #1
 8004166:	6713      	str	r3, [r2, #112]	@ 0x70
 8004168:	4b55      	ldr	r3, [pc, #340]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800416c:	4a54      	ldr	r2, [pc, #336]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800416e:	f023 0304 	bic.w	r3, r3, #4
 8004172:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d015      	beq.n	80041a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd fe98 	bl	8001eb0 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004182:	e00a      	b.n	800419a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004184:	f7fd fe94 	bl	8001eb0 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004192:	4293      	cmp	r3, r2
 8004194:	d901      	bls.n	800419a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	e0cb      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419a:	4b49      	ldr	r3, [pc, #292]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d0ee      	beq.n	8004184 <HAL_RCC_OscConfig+0x334>
 80041a6:	e014      	b.n	80041d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a8:	f7fd fe82 	bl	8001eb0 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b0:	f7fd fe7e 	bl	8001eb0 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e0b5      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c6:	4b3e      	ldr	r3, [pc, #248]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ca:	f003 0302 	and.w	r3, r3, #2
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1ee      	bne.n	80041b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b39      	ldr	r3, [pc, #228]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	4a38      	ldr	r2, [pc, #224]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 80a1 	beq.w	8004330 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041ee:	4b34      	ldr	r3, [pc, #208]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 030c 	and.w	r3, r3, #12
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d05c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d141      	bne.n	8004286 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b31      	ldr	r3, [pc, #196]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004204:	2200      	movs	r2, #0
 8004206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004208:	f7fd fe52 	bl	8001eb0 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd fe4e 	bl	8001eb0 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e087      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004222:	4b27      	ldr	r3, [pc, #156]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	019b      	lsls	r3, r3, #6
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	3b01      	subs	r3, #1
 8004248:	041b      	lsls	r3, r3, #16
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004250:	061b      	lsls	r3, r3, #24
 8004252:	491b      	ldr	r1, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fd fe27 	bl	8001eb0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fd fe23 	bl	8001eb0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e05c      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x416>
 8004284:	e054      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <HAL_RCC_OscConfig+0x478>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7fd fe10 	bl	8001eb0 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd fe0c 	bl	8001eb0 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e045      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_RCC_OscConfig+0x470>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x444>
 80042b2:	e03d      	b.n	8004330 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e038      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042cc:	4b1b      	ldr	r3, [pc, #108]	@ (800433c <HAL_RCC_OscConfig+0x4ec>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d028      	beq.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d121      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d11a      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d111      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d107      	bne.n	800432c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d001      	beq.n	8004330 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}
 800433a:	bf00      	nop
 800433c:	40023800 	.word	0x40023800

08004340 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0cc      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004354:	4b68      	ldr	r3, [pc, #416]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	683a      	ldr	r2, [r7, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d90c      	bls.n	800437c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004362:	4b65      	ldr	r3, [pc, #404]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800436a:	4b63      	ldr	r3, [pc, #396]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d001      	beq.n	800437c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e0b8      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d020      	beq.n	80043ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004394:	4b59      	ldr	r3, [pc, #356]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	4a58      	ldr	r2, [pc, #352]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800439e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d005      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043ac:	4b53      	ldr	r3, [pc, #332]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a52      	ldr	r2, [pc, #328]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80043b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b50      	ldr	r3, [pc, #320]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	494d      	ldr	r1, [pc, #308]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d044      	beq.n	8004460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043de:	4b47      	ldr	r3, [pc, #284]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d119      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e07f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d107      	bne.n	800440e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043fe:	4b3f      	ldr	r3, [pc, #252]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d109      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e06f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440e:	4b3b      	ldr	r3, [pc, #236]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e067      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f023 0203 	bic.w	r2, r3, #3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4934      	ldr	r1, [pc, #208]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004430:	f7fd fd3e 	bl	8001eb0 <HAL_GetTick>
 8004434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	e00a      	b.n	800444e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004438:	f7fd fd3a 	bl	8001eb0 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004446:	4293      	cmp	r3, r2
 8004448:	d901      	bls.n	800444e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e04f      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444e:	4b2b      	ldr	r3, [pc, #172]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 020c 	and.w	r2, r3, #12
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	429a      	cmp	r2, r3
 800445e:	d1eb      	bne.n	8004438 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004460:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d20c      	bcs.n	8004488 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b22      	ldr	r3, [pc, #136]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b20      	ldr	r3, [pc, #128]	@ (80044f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0307 	and.w	r3, r3, #7
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e032      	b.n	80044ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004494:	4b19      	ldr	r3, [pc, #100]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	4916      	ldr	r1, [pc, #88]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d009      	beq.n	80044c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	490e      	ldr	r1, [pc, #56]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80044c6:	f000 f821 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ca:	4602      	mov	r2, r0
 80044cc:	4b0b      	ldr	r3, [pc, #44]	@ (80044fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	490a      	ldr	r1, [pc, #40]	@ (8004500 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	5ccb      	ldrb	r3, [r1, r3]
 80044da:	fa22 f303 	lsr.w	r3, r2, r3
 80044de:	4a09      	ldr	r2, [pc, #36]	@ (8004504 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80044e2:	4b09      	ldr	r3, [pc, #36]	@ (8004508 <HAL_RCC_ClockConfig+0x1c8>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fc9e 	bl	8001e28 <HAL_InitTick>

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40023c00 	.word	0x40023c00
 80044fc:	40023800 	.word	0x40023800
 8004500:	08007474 	.word	0x08007474
 8004504:	20000000 	.word	0x20000000
 8004508:	20000004 	.word	0x20000004

0800450c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004510:	b094      	sub	sp, #80	@ 0x50
 8004512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004514:	2300      	movs	r3, #0
 8004516:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800451c:	2300      	movs	r3, #0
 800451e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004524:	4b79      	ldr	r3, [pc, #484]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 030c 	and.w	r3, r3, #12
 800452c:	2b08      	cmp	r3, #8
 800452e:	d00d      	beq.n	800454c <HAL_RCC_GetSysClockFreq+0x40>
 8004530:	2b08      	cmp	r3, #8
 8004532:	f200 80e1 	bhi.w	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0x34>
 800453a:	2b04      	cmp	r3, #4
 800453c:	d003      	beq.n	8004546 <HAL_RCC_GetSysClockFreq+0x3a>
 800453e:	e0db      	b.n	80046f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004540:	4b73      	ldr	r3, [pc, #460]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 8004542:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004544:	e0db      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004546:	4b73      	ldr	r3, [pc, #460]	@ (8004714 <HAL_RCC_GetSysClockFreq+0x208>)
 8004548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800454a:	e0d8      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800454c:	4b6f      	ldr	r3, [pc, #444]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004554:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004556:	4b6d      	ldr	r3, [pc, #436]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004562:	4b6a      	ldr	r3, [pc, #424]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	099b      	lsrs	r3, r3, #6
 8004568:	2200      	movs	r2, #0
 800456a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800456c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800456e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004570:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004574:	633b      	str	r3, [r7, #48]	@ 0x30
 8004576:	2300      	movs	r3, #0
 8004578:	637b      	str	r3, [r7, #52]	@ 0x34
 800457a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800457e:	4622      	mov	r2, r4
 8004580:	462b      	mov	r3, r5
 8004582:	f04f 0000 	mov.w	r0, #0
 8004586:	f04f 0100 	mov.w	r1, #0
 800458a:	0159      	lsls	r1, r3, #5
 800458c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004590:	0150      	lsls	r0, r2, #5
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4621      	mov	r1, r4
 8004598:	1a51      	subs	r1, r2, r1
 800459a:	6139      	str	r1, [r7, #16]
 800459c:	4629      	mov	r1, r5
 800459e:	eb63 0301 	sbc.w	r3, r3, r1
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b0:	4659      	mov	r1, fp
 80045b2:	018b      	lsls	r3, r1, #6
 80045b4:	4651      	mov	r1, sl
 80045b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80045ba:	4651      	mov	r1, sl
 80045bc:	018a      	lsls	r2, r1, #6
 80045be:	4651      	mov	r1, sl
 80045c0:	ebb2 0801 	subs.w	r8, r2, r1
 80045c4:	4659      	mov	r1, fp
 80045c6:	eb63 0901 	sbc.w	r9, r3, r1
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	f04f 0300 	mov.w	r3, #0
 80045d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045de:	4690      	mov	r8, r2
 80045e0:	4699      	mov	r9, r3
 80045e2:	4623      	mov	r3, r4
 80045e4:	eb18 0303 	adds.w	r3, r8, r3
 80045e8:	60bb      	str	r3, [r7, #8]
 80045ea:	462b      	mov	r3, r5
 80045ec:	eb49 0303 	adc.w	r3, r9, r3
 80045f0:	60fb      	str	r3, [r7, #12]
 80045f2:	f04f 0200 	mov.w	r2, #0
 80045f6:	f04f 0300 	mov.w	r3, #0
 80045fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045fe:	4629      	mov	r1, r5
 8004600:	024b      	lsls	r3, r1, #9
 8004602:	4621      	mov	r1, r4
 8004604:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004608:	4621      	mov	r1, r4
 800460a:	024a      	lsls	r2, r1, #9
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004612:	2200      	movs	r2, #0
 8004614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004616:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004618:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800461c:	f7fc fac4 	bl	8000ba8 <__aeabi_uldivmod>
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	4613      	mov	r3, r2
 8004626:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004628:	e058      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800462a:	4b38      	ldr	r3, [pc, #224]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	099b      	lsrs	r3, r3, #6
 8004630:	2200      	movs	r2, #0
 8004632:	4618      	mov	r0, r3
 8004634:	4611      	mov	r1, r2
 8004636:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	2300      	movs	r3, #0
 800463e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004640:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004644:	4642      	mov	r2, r8
 8004646:	464b      	mov	r3, r9
 8004648:	f04f 0000 	mov.w	r0, #0
 800464c:	f04f 0100 	mov.w	r1, #0
 8004650:	0159      	lsls	r1, r3, #5
 8004652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004656:	0150      	lsls	r0, r2, #5
 8004658:	4602      	mov	r2, r0
 800465a:	460b      	mov	r3, r1
 800465c:	4641      	mov	r1, r8
 800465e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004662:	4649      	mov	r1, r9
 8004664:	eb63 0b01 	sbc.w	fp, r3, r1
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004674:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004678:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800467c:	ebb2 040a 	subs.w	r4, r2, sl
 8004680:	eb63 050b 	sbc.w	r5, r3, fp
 8004684:	f04f 0200 	mov.w	r2, #0
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	00eb      	lsls	r3, r5, #3
 800468e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004692:	00e2      	lsls	r2, r4, #3
 8004694:	4614      	mov	r4, r2
 8004696:	461d      	mov	r5, r3
 8004698:	4643      	mov	r3, r8
 800469a:	18e3      	adds	r3, r4, r3
 800469c:	603b      	str	r3, [r7, #0]
 800469e:	464b      	mov	r3, r9
 80046a0:	eb45 0303 	adc.w	r3, r5, r3
 80046a4:	607b      	str	r3, [r7, #4]
 80046a6:	f04f 0200 	mov.w	r2, #0
 80046aa:	f04f 0300 	mov.w	r3, #0
 80046ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80046b2:	4629      	mov	r1, r5
 80046b4:	028b      	lsls	r3, r1, #10
 80046b6:	4621      	mov	r1, r4
 80046b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80046bc:	4621      	mov	r1, r4
 80046be:	028a      	lsls	r2, r1, #10
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046c6:	2200      	movs	r2, #0
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	61fa      	str	r2, [r7, #28]
 80046cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d0:	f7fc fa6a 	bl	8000ba8 <__aeabi_uldivmod>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	4613      	mov	r3, r2
 80046da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80046dc:	4b0b      	ldr	r3, [pc, #44]	@ (800470c <HAL_RCC_GetSysClockFreq+0x200>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f6:	e002      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_RCC_GetSysClockFreq+0x204>)
 80046fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004700:	4618      	mov	r0, r3
 8004702:	3750      	adds	r7, #80	@ 0x50
 8004704:	46bd      	mov	sp, r7
 8004706:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800470a:	bf00      	nop
 800470c:	40023800 	.word	0x40023800
 8004710:	00f42400 	.word	0x00f42400
 8004714:	007a1200 	.word	0x007a1200

08004718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_RCC_GetHCLKFreq+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000000 	.word	0x20000000

08004730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004734:	f7ff fff0 	bl	8004718 <HAL_RCC_GetHCLKFreq>
 8004738:	4602      	mov	r2, r0
 800473a:	4b05      	ldr	r3, [pc, #20]	@ (8004750 <HAL_RCC_GetPCLK1Freq+0x20>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	0a9b      	lsrs	r3, r3, #10
 8004740:	f003 0307 	and.w	r3, r3, #7
 8004744:	4903      	ldr	r1, [pc, #12]	@ (8004754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004746:	5ccb      	ldrb	r3, [r1, r3]
 8004748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800474c:	4618      	mov	r0, r3
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40023800 	.word	0x40023800
 8004754:	08007484 	.word	0x08007484

08004758 <__cvt>:
 8004758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800475c:	ec57 6b10 	vmov	r6, r7, d0
 8004760:	2f00      	cmp	r7, #0
 8004762:	460c      	mov	r4, r1
 8004764:	4619      	mov	r1, r3
 8004766:	463b      	mov	r3, r7
 8004768:	bfbb      	ittet	lt
 800476a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800476e:	461f      	movlt	r7, r3
 8004770:	2300      	movge	r3, #0
 8004772:	232d      	movlt	r3, #45	@ 0x2d
 8004774:	700b      	strb	r3, [r1, #0]
 8004776:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004778:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800477c:	4691      	mov	r9, r2
 800477e:	f023 0820 	bic.w	r8, r3, #32
 8004782:	bfbc      	itt	lt
 8004784:	4632      	movlt	r2, r6
 8004786:	4616      	movlt	r6, r2
 8004788:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800478c:	d005      	beq.n	800479a <__cvt+0x42>
 800478e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004792:	d100      	bne.n	8004796 <__cvt+0x3e>
 8004794:	3401      	adds	r4, #1
 8004796:	2102      	movs	r1, #2
 8004798:	e000      	b.n	800479c <__cvt+0x44>
 800479a:	2103      	movs	r1, #3
 800479c:	ab03      	add	r3, sp, #12
 800479e:	9301      	str	r3, [sp, #4]
 80047a0:	ab02      	add	r3, sp, #8
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	ec47 6b10 	vmov	d0, r6, r7
 80047a8:	4653      	mov	r3, sl
 80047aa:	4622      	mov	r2, r4
 80047ac:	f000 fe98 	bl	80054e0 <_dtoa_r>
 80047b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80047b4:	4605      	mov	r5, r0
 80047b6:	d119      	bne.n	80047ec <__cvt+0x94>
 80047b8:	f019 0f01 	tst.w	r9, #1
 80047bc:	d00e      	beq.n	80047dc <__cvt+0x84>
 80047be:	eb00 0904 	add.w	r9, r0, r4
 80047c2:	2200      	movs	r2, #0
 80047c4:	2300      	movs	r3, #0
 80047c6:	4630      	mov	r0, r6
 80047c8:	4639      	mov	r1, r7
 80047ca:	f7fc f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 80047ce:	b108      	cbz	r0, 80047d4 <__cvt+0x7c>
 80047d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80047d4:	2230      	movs	r2, #48	@ 0x30
 80047d6:	9b03      	ldr	r3, [sp, #12]
 80047d8:	454b      	cmp	r3, r9
 80047da:	d31e      	bcc.n	800481a <__cvt+0xc2>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80047e0:	1b5b      	subs	r3, r3, r5
 80047e2:	4628      	mov	r0, r5
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	b004      	add	sp, #16
 80047e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80047f0:	eb00 0904 	add.w	r9, r0, r4
 80047f4:	d1e5      	bne.n	80047c2 <__cvt+0x6a>
 80047f6:	7803      	ldrb	r3, [r0, #0]
 80047f8:	2b30      	cmp	r3, #48	@ 0x30
 80047fa:	d10a      	bne.n	8004812 <__cvt+0xba>
 80047fc:	2200      	movs	r2, #0
 80047fe:	2300      	movs	r3, #0
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	f7fc f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8004808:	b918      	cbnz	r0, 8004812 <__cvt+0xba>
 800480a:	f1c4 0401 	rsb	r4, r4, #1
 800480e:	f8ca 4000 	str.w	r4, [sl]
 8004812:	f8da 3000 	ldr.w	r3, [sl]
 8004816:	4499      	add	r9, r3
 8004818:	e7d3      	b.n	80047c2 <__cvt+0x6a>
 800481a:	1c59      	adds	r1, r3, #1
 800481c:	9103      	str	r1, [sp, #12]
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e7d9      	b.n	80047d6 <__cvt+0x7e>

08004822 <__exponent>:
 8004822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004824:	2900      	cmp	r1, #0
 8004826:	bfba      	itte	lt
 8004828:	4249      	neglt	r1, r1
 800482a:	232d      	movlt	r3, #45	@ 0x2d
 800482c:	232b      	movge	r3, #43	@ 0x2b
 800482e:	2909      	cmp	r1, #9
 8004830:	7002      	strb	r2, [r0, #0]
 8004832:	7043      	strb	r3, [r0, #1]
 8004834:	dd29      	ble.n	800488a <__exponent+0x68>
 8004836:	f10d 0307 	add.w	r3, sp, #7
 800483a:	461d      	mov	r5, r3
 800483c:	270a      	movs	r7, #10
 800483e:	461a      	mov	r2, r3
 8004840:	fbb1 f6f7 	udiv	r6, r1, r7
 8004844:	fb07 1416 	mls	r4, r7, r6, r1
 8004848:	3430      	adds	r4, #48	@ 0x30
 800484a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800484e:	460c      	mov	r4, r1
 8004850:	2c63      	cmp	r4, #99	@ 0x63
 8004852:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004856:	4631      	mov	r1, r6
 8004858:	dcf1      	bgt.n	800483e <__exponent+0x1c>
 800485a:	3130      	adds	r1, #48	@ 0x30
 800485c:	1e94      	subs	r4, r2, #2
 800485e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004862:	1c41      	adds	r1, r0, #1
 8004864:	4623      	mov	r3, r4
 8004866:	42ab      	cmp	r3, r5
 8004868:	d30a      	bcc.n	8004880 <__exponent+0x5e>
 800486a:	f10d 0309 	add.w	r3, sp, #9
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	42ac      	cmp	r4, r5
 8004872:	bf88      	it	hi
 8004874:	2300      	movhi	r3, #0
 8004876:	3302      	adds	r3, #2
 8004878:	4403      	add	r3, r0
 800487a:	1a18      	subs	r0, r3, r0
 800487c:	b003      	add	sp, #12
 800487e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004880:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004884:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004888:	e7ed      	b.n	8004866 <__exponent+0x44>
 800488a:	2330      	movs	r3, #48	@ 0x30
 800488c:	3130      	adds	r1, #48	@ 0x30
 800488e:	7083      	strb	r3, [r0, #2]
 8004890:	70c1      	strb	r1, [r0, #3]
 8004892:	1d03      	adds	r3, r0, #4
 8004894:	e7f1      	b.n	800487a <__exponent+0x58>
	...

08004898 <_printf_float>:
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	b08d      	sub	sp, #52	@ 0x34
 800489e:	460c      	mov	r4, r1
 80048a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80048a4:	4616      	mov	r6, r2
 80048a6:	461f      	mov	r7, r3
 80048a8:	4605      	mov	r5, r0
 80048aa:	f000 fd09 	bl	80052c0 <_localeconv_r>
 80048ae:	6803      	ldr	r3, [r0, #0]
 80048b0:	9304      	str	r3, [sp, #16]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fb fcdc 	bl	8000270 <strlen>
 80048b8:	2300      	movs	r3, #0
 80048ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80048bc:	f8d8 3000 	ldr.w	r3, [r8]
 80048c0:	9005      	str	r0, [sp, #20]
 80048c2:	3307      	adds	r3, #7
 80048c4:	f023 0307 	bic.w	r3, r3, #7
 80048c8:	f103 0208 	add.w	r2, r3, #8
 80048cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80048d0:	f8d4 b000 	ldr.w	fp, [r4]
 80048d4:	f8c8 2000 	str.w	r2, [r8]
 80048d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80048dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80048e0:	9307      	str	r3, [sp, #28]
 80048e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80048e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80048ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004b60 <_printf_float+0x2c8>)
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80048f4:	f7fc f91a 	bl	8000b2c <__aeabi_dcmpun>
 80048f8:	bb70      	cbnz	r0, 8004958 <_printf_float+0xc0>
 80048fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048fe:	4b98      	ldr	r3, [pc, #608]	@ (8004b60 <_printf_float+0x2c8>)
 8004900:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004904:	f7fc f8f4 	bl	8000af0 <__aeabi_dcmple>
 8004908:	bb30      	cbnz	r0, 8004958 <_printf_float+0xc0>
 800490a:	2200      	movs	r2, #0
 800490c:	2300      	movs	r3, #0
 800490e:	4640      	mov	r0, r8
 8004910:	4649      	mov	r1, r9
 8004912:	f7fc f8e3 	bl	8000adc <__aeabi_dcmplt>
 8004916:	b110      	cbz	r0, 800491e <_printf_float+0x86>
 8004918:	232d      	movs	r3, #45	@ 0x2d
 800491a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800491e:	4a91      	ldr	r2, [pc, #580]	@ (8004b64 <_printf_float+0x2cc>)
 8004920:	4b91      	ldr	r3, [pc, #580]	@ (8004b68 <_printf_float+0x2d0>)
 8004922:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004926:	bf8c      	ite	hi
 8004928:	4690      	movhi	r8, r2
 800492a:	4698      	movls	r8, r3
 800492c:	2303      	movs	r3, #3
 800492e:	6123      	str	r3, [r4, #16]
 8004930:	f02b 0304 	bic.w	r3, fp, #4
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	f04f 0900 	mov.w	r9, #0
 800493a:	9700      	str	r7, [sp, #0]
 800493c:	4633      	mov	r3, r6
 800493e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004940:	4621      	mov	r1, r4
 8004942:	4628      	mov	r0, r5
 8004944:	f000 f9d2 	bl	8004cec <_printf_common>
 8004948:	3001      	adds	r0, #1
 800494a:	f040 808d 	bne.w	8004a68 <_printf_float+0x1d0>
 800494e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004952:	b00d      	add	sp, #52	@ 0x34
 8004954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	4640      	mov	r0, r8
 800495e:	4649      	mov	r1, r9
 8004960:	f7fc f8e4 	bl	8000b2c <__aeabi_dcmpun>
 8004964:	b140      	cbz	r0, 8004978 <_printf_float+0xe0>
 8004966:	464b      	mov	r3, r9
 8004968:	2b00      	cmp	r3, #0
 800496a:	bfbc      	itt	lt
 800496c:	232d      	movlt	r3, #45	@ 0x2d
 800496e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004972:	4a7e      	ldr	r2, [pc, #504]	@ (8004b6c <_printf_float+0x2d4>)
 8004974:	4b7e      	ldr	r3, [pc, #504]	@ (8004b70 <_printf_float+0x2d8>)
 8004976:	e7d4      	b.n	8004922 <_printf_float+0x8a>
 8004978:	6863      	ldr	r3, [r4, #4]
 800497a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800497e:	9206      	str	r2, [sp, #24]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	d13b      	bne.n	80049fc <_printf_float+0x164>
 8004984:	2306      	movs	r3, #6
 8004986:	6063      	str	r3, [r4, #4]
 8004988:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800498c:	2300      	movs	r3, #0
 800498e:	6022      	str	r2, [r4, #0]
 8004990:	9303      	str	r3, [sp, #12]
 8004992:	ab0a      	add	r3, sp, #40	@ 0x28
 8004994:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004998:	ab09      	add	r3, sp, #36	@ 0x24
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	6861      	ldr	r1, [r4, #4]
 800499e:	ec49 8b10 	vmov	d0, r8, r9
 80049a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80049a6:	4628      	mov	r0, r5
 80049a8:	f7ff fed6 	bl	8004758 <__cvt>
 80049ac:	9b06      	ldr	r3, [sp, #24]
 80049ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049b0:	2b47      	cmp	r3, #71	@ 0x47
 80049b2:	4680      	mov	r8, r0
 80049b4:	d129      	bne.n	8004a0a <_printf_float+0x172>
 80049b6:	1cc8      	adds	r0, r1, #3
 80049b8:	db02      	blt.n	80049c0 <_printf_float+0x128>
 80049ba:	6863      	ldr	r3, [r4, #4]
 80049bc:	4299      	cmp	r1, r3
 80049be:	dd41      	ble.n	8004a44 <_printf_float+0x1ac>
 80049c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80049c4:	fa5f fa8a 	uxtb.w	sl, sl
 80049c8:	3901      	subs	r1, #1
 80049ca:	4652      	mov	r2, sl
 80049cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80049d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80049d2:	f7ff ff26 	bl	8004822 <__exponent>
 80049d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049d8:	1813      	adds	r3, r2, r0
 80049da:	2a01      	cmp	r2, #1
 80049dc:	4681      	mov	r9, r0
 80049de:	6123      	str	r3, [r4, #16]
 80049e0:	dc02      	bgt.n	80049e8 <_printf_float+0x150>
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	07d2      	lsls	r2, r2, #31
 80049e6:	d501      	bpl.n	80049ec <_printf_float+0x154>
 80049e8:	3301      	adds	r3, #1
 80049ea:	6123      	str	r3, [r4, #16]
 80049ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d0a2      	beq.n	800493a <_printf_float+0xa2>
 80049f4:	232d      	movs	r3, #45	@ 0x2d
 80049f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049fa:	e79e      	b.n	800493a <_printf_float+0xa2>
 80049fc:	9a06      	ldr	r2, [sp, #24]
 80049fe:	2a47      	cmp	r2, #71	@ 0x47
 8004a00:	d1c2      	bne.n	8004988 <_printf_float+0xf0>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1c0      	bne.n	8004988 <_printf_float+0xf0>
 8004a06:	2301      	movs	r3, #1
 8004a08:	e7bd      	b.n	8004986 <_printf_float+0xee>
 8004a0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a0e:	d9db      	bls.n	80049c8 <_printf_float+0x130>
 8004a10:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004a14:	d118      	bne.n	8004a48 <_printf_float+0x1b0>
 8004a16:	2900      	cmp	r1, #0
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	dd0b      	ble.n	8004a34 <_printf_float+0x19c>
 8004a1c:	6121      	str	r1, [r4, #16]
 8004a1e:	b913      	cbnz	r3, 8004a26 <_printf_float+0x18e>
 8004a20:	6822      	ldr	r2, [r4, #0]
 8004a22:	07d0      	lsls	r0, r2, #31
 8004a24:	d502      	bpl.n	8004a2c <_printf_float+0x194>
 8004a26:	3301      	adds	r3, #1
 8004a28:	440b      	add	r3, r1
 8004a2a:	6123      	str	r3, [r4, #16]
 8004a2c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004a2e:	f04f 0900 	mov.w	r9, #0
 8004a32:	e7db      	b.n	80049ec <_printf_float+0x154>
 8004a34:	b913      	cbnz	r3, 8004a3c <_printf_float+0x1a4>
 8004a36:	6822      	ldr	r2, [r4, #0]
 8004a38:	07d2      	lsls	r2, r2, #31
 8004a3a:	d501      	bpl.n	8004a40 <_printf_float+0x1a8>
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	e7f4      	b.n	8004a2a <_printf_float+0x192>
 8004a40:	2301      	movs	r3, #1
 8004a42:	e7f2      	b.n	8004a2a <_printf_float+0x192>
 8004a44:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004a48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	db05      	blt.n	8004a5a <_printf_float+0x1c2>
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	6121      	str	r1, [r4, #16]
 8004a52:	07d8      	lsls	r0, r3, #31
 8004a54:	d5ea      	bpl.n	8004a2c <_printf_float+0x194>
 8004a56:	1c4b      	adds	r3, r1, #1
 8004a58:	e7e7      	b.n	8004a2a <_printf_float+0x192>
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	bfd4      	ite	le
 8004a5e:	f1c1 0202 	rsble	r2, r1, #2
 8004a62:	2201      	movgt	r2, #1
 8004a64:	4413      	add	r3, r2
 8004a66:	e7e0      	b.n	8004a2a <_printf_float+0x192>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	055a      	lsls	r2, r3, #21
 8004a6c:	d407      	bmi.n	8004a7e <_printf_float+0x1e6>
 8004a6e:	6923      	ldr	r3, [r4, #16]
 8004a70:	4642      	mov	r2, r8
 8004a72:	4631      	mov	r1, r6
 8004a74:	4628      	mov	r0, r5
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d12b      	bne.n	8004ad4 <_printf_float+0x23c>
 8004a7c:	e767      	b.n	800494e <_printf_float+0xb6>
 8004a7e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004a82:	f240 80dd 	bls.w	8004c40 <_printf_float+0x3a8>
 8004a86:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f7fc f81b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d033      	beq.n	8004afe <_printf_float+0x266>
 8004a96:	4a37      	ldr	r2, [pc, #220]	@ (8004b74 <_printf_float+0x2dc>)
 8004a98:	2301      	movs	r3, #1
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	47b8      	blx	r7
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	f43f af54 	beq.w	800494e <_printf_float+0xb6>
 8004aa6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004aaa:	4543      	cmp	r3, r8
 8004aac:	db02      	blt.n	8004ab4 <_printf_float+0x21c>
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	07d8      	lsls	r0, r3, #31
 8004ab2:	d50f      	bpl.n	8004ad4 <_printf_float+0x23c>
 8004ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ab8:	4631      	mov	r1, r6
 8004aba:	4628      	mov	r0, r5
 8004abc:	47b8      	blx	r7
 8004abe:	3001      	adds	r0, #1
 8004ac0:	f43f af45 	beq.w	800494e <_printf_float+0xb6>
 8004ac4:	f04f 0900 	mov.w	r9, #0
 8004ac8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004acc:	f104 0a1a 	add.w	sl, r4, #26
 8004ad0:	45c8      	cmp	r8, r9
 8004ad2:	dc09      	bgt.n	8004ae8 <_printf_float+0x250>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	079b      	lsls	r3, r3, #30
 8004ad8:	f100 8103 	bmi.w	8004ce2 <_printf_float+0x44a>
 8004adc:	68e0      	ldr	r0, [r4, #12]
 8004ade:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ae0:	4298      	cmp	r0, r3
 8004ae2:	bfb8      	it	lt
 8004ae4:	4618      	movlt	r0, r3
 8004ae6:	e734      	b.n	8004952 <_printf_float+0xba>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	4652      	mov	r2, sl
 8004aec:	4631      	mov	r1, r6
 8004aee:	4628      	mov	r0, r5
 8004af0:	47b8      	blx	r7
 8004af2:	3001      	adds	r0, #1
 8004af4:	f43f af2b 	beq.w	800494e <_printf_float+0xb6>
 8004af8:	f109 0901 	add.w	r9, r9, #1
 8004afc:	e7e8      	b.n	8004ad0 <_printf_float+0x238>
 8004afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	dc39      	bgt.n	8004b78 <_printf_float+0x2e0>
 8004b04:	4a1b      	ldr	r2, [pc, #108]	@ (8004b74 <_printf_float+0x2dc>)
 8004b06:	2301      	movs	r3, #1
 8004b08:	4631      	mov	r1, r6
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	f43f af1d 	beq.w	800494e <_printf_float+0xb6>
 8004b14:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004b18:	ea59 0303 	orrs.w	r3, r9, r3
 8004b1c:	d102      	bne.n	8004b24 <_printf_float+0x28c>
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	07d9      	lsls	r1, r3, #31
 8004b22:	d5d7      	bpl.n	8004ad4 <_printf_float+0x23c>
 8004b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b28:	4631      	mov	r1, r6
 8004b2a:	4628      	mov	r0, r5
 8004b2c:	47b8      	blx	r7
 8004b2e:	3001      	adds	r0, #1
 8004b30:	f43f af0d 	beq.w	800494e <_printf_float+0xb6>
 8004b34:	f04f 0a00 	mov.w	sl, #0
 8004b38:	f104 0b1a 	add.w	fp, r4, #26
 8004b3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b3e:	425b      	negs	r3, r3
 8004b40:	4553      	cmp	r3, sl
 8004b42:	dc01      	bgt.n	8004b48 <_printf_float+0x2b0>
 8004b44:	464b      	mov	r3, r9
 8004b46:	e793      	b.n	8004a70 <_printf_float+0x1d8>
 8004b48:	2301      	movs	r3, #1
 8004b4a:	465a      	mov	r2, fp
 8004b4c:	4631      	mov	r1, r6
 8004b4e:	4628      	mov	r0, r5
 8004b50:	47b8      	blx	r7
 8004b52:	3001      	adds	r0, #1
 8004b54:	f43f aefb 	beq.w	800494e <_printf_float+0xb6>
 8004b58:	f10a 0a01 	add.w	sl, sl, #1
 8004b5c:	e7ee      	b.n	8004b3c <_printf_float+0x2a4>
 8004b5e:	bf00      	nop
 8004b60:	7fefffff 	.word	0x7fefffff
 8004b64:	08007c08 	.word	0x08007c08
 8004b68:	08007c04 	.word	0x08007c04
 8004b6c:	08007c10 	.word	0x08007c10
 8004b70:	08007c0c 	.word	0x08007c0c
 8004b74:	08007c14 	.word	0x08007c14
 8004b78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b7a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004b7e:	4553      	cmp	r3, sl
 8004b80:	bfa8      	it	ge
 8004b82:	4653      	movge	r3, sl
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	4699      	mov	r9, r3
 8004b88:	dc36      	bgt.n	8004bf8 <_printf_float+0x360>
 8004b8a:	f04f 0b00 	mov.w	fp, #0
 8004b8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b92:	f104 021a 	add.w	r2, r4, #26
 8004b96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004b98:	9306      	str	r3, [sp, #24]
 8004b9a:	eba3 0309 	sub.w	r3, r3, r9
 8004b9e:	455b      	cmp	r3, fp
 8004ba0:	dc31      	bgt.n	8004c06 <_printf_float+0x36e>
 8004ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ba4:	459a      	cmp	sl, r3
 8004ba6:	dc3a      	bgt.n	8004c1e <_printf_float+0x386>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	07da      	lsls	r2, r3, #31
 8004bac:	d437      	bmi.n	8004c1e <_printf_float+0x386>
 8004bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bb0:	ebaa 0903 	sub.w	r9, sl, r3
 8004bb4:	9b06      	ldr	r3, [sp, #24]
 8004bb6:	ebaa 0303 	sub.w	r3, sl, r3
 8004bba:	4599      	cmp	r9, r3
 8004bbc:	bfa8      	it	ge
 8004bbe:	4699      	movge	r9, r3
 8004bc0:	f1b9 0f00 	cmp.w	r9, #0
 8004bc4:	dc33      	bgt.n	8004c2e <_printf_float+0x396>
 8004bc6:	f04f 0800 	mov.w	r8, #0
 8004bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004bce:	f104 0b1a 	add.w	fp, r4, #26
 8004bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bd4:	ebaa 0303 	sub.w	r3, sl, r3
 8004bd8:	eba3 0309 	sub.w	r3, r3, r9
 8004bdc:	4543      	cmp	r3, r8
 8004bde:	f77f af79 	ble.w	8004ad4 <_printf_float+0x23c>
 8004be2:	2301      	movs	r3, #1
 8004be4:	465a      	mov	r2, fp
 8004be6:	4631      	mov	r1, r6
 8004be8:	4628      	mov	r0, r5
 8004bea:	47b8      	blx	r7
 8004bec:	3001      	adds	r0, #1
 8004bee:	f43f aeae 	beq.w	800494e <_printf_float+0xb6>
 8004bf2:	f108 0801 	add.w	r8, r8, #1
 8004bf6:	e7ec      	b.n	8004bd2 <_printf_float+0x33a>
 8004bf8:	4642      	mov	r2, r8
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	47b8      	blx	r7
 8004c00:	3001      	adds	r0, #1
 8004c02:	d1c2      	bne.n	8004b8a <_printf_float+0x2f2>
 8004c04:	e6a3      	b.n	800494e <_printf_float+0xb6>
 8004c06:	2301      	movs	r3, #1
 8004c08:	4631      	mov	r1, r6
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	9206      	str	r2, [sp, #24]
 8004c0e:	47b8      	blx	r7
 8004c10:	3001      	adds	r0, #1
 8004c12:	f43f ae9c 	beq.w	800494e <_printf_float+0xb6>
 8004c16:	9a06      	ldr	r2, [sp, #24]
 8004c18:	f10b 0b01 	add.w	fp, fp, #1
 8004c1c:	e7bb      	b.n	8004b96 <_printf_float+0x2fe>
 8004c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c22:	4631      	mov	r1, r6
 8004c24:	4628      	mov	r0, r5
 8004c26:	47b8      	blx	r7
 8004c28:	3001      	adds	r0, #1
 8004c2a:	d1c0      	bne.n	8004bae <_printf_float+0x316>
 8004c2c:	e68f      	b.n	800494e <_printf_float+0xb6>
 8004c2e:	9a06      	ldr	r2, [sp, #24]
 8004c30:	464b      	mov	r3, r9
 8004c32:	4442      	add	r2, r8
 8004c34:	4631      	mov	r1, r6
 8004c36:	4628      	mov	r0, r5
 8004c38:	47b8      	blx	r7
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d1c3      	bne.n	8004bc6 <_printf_float+0x32e>
 8004c3e:	e686      	b.n	800494e <_printf_float+0xb6>
 8004c40:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c44:	f1ba 0f01 	cmp.w	sl, #1
 8004c48:	dc01      	bgt.n	8004c4e <_printf_float+0x3b6>
 8004c4a:	07db      	lsls	r3, r3, #31
 8004c4c:	d536      	bpl.n	8004cbc <_printf_float+0x424>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	4642      	mov	r2, r8
 8004c52:	4631      	mov	r1, r6
 8004c54:	4628      	mov	r0, r5
 8004c56:	47b8      	blx	r7
 8004c58:	3001      	adds	r0, #1
 8004c5a:	f43f ae78 	beq.w	800494e <_printf_float+0xb6>
 8004c5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c62:	4631      	mov	r1, r6
 8004c64:	4628      	mov	r0, r5
 8004c66:	47b8      	blx	r7
 8004c68:	3001      	adds	r0, #1
 8004c6a:	f43f ae70 	beq.w	800494e <_printf_float+0xb6>
 8004c6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004c72:	2200      	movs	r2, #0
 8004c74:	2300      	movs	r3, #0
 8004c76:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004c7a:	f7fb ff25 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c7e:	b9c0      	cbnz	r0, 8004cb2 <_printf_float+0x41a>
 8004c80:	4653      	mov	r3, sl
 8004c82:	f108 0201 	add.w	r2, r8, #1
 8004c86:	4631      	mov	r1, r6
 8004c88:	4628      	mov	r0, r5
 8004c8a:	47b8      	blx	r7
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d10c      	bne.n	8004caa <_printf_float+0x412>
 8004c90:	e65d      	b.n	800494e <_printf_float+0xb6>
 8004c92:	2301      	movs	r3, #1
 8004c94:	465a      	mov	r2, fp
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	f43f ae56 	beq.w	800494e <_printf_float+0xb6>
 8004ca2:	f108 0801 	add.w	r8, r8, #1
 8004ca6:	45d0      	cmp	r8, sl
 8004ca8:	dbf3      	blt.n	8004c92 <_printf_float+0x3fa>
 8004caa:	464b      	mov	r3, r9
 8004cac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004cb0:	e6df      	b.n	8004a72 <_printf_float+0x1da>
 8004cb2:	f04f 0800 	mov.w	r8, #0
 8004cb6:	f104 0b1a 	add.w	fp, r4, #26
 8004cba:	e7f4      	b.n	8004ca6 <_printf_float+0x40e>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4642      	mov	r2, r8
 8004cc0:	e7e1      	b.n	8004c86 <_printf_float+0x3ee>
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	464a      	mov	r2, r9
 8004cc6:	4631      	mov	r1, r6
 8004cc8:	4628      	mov	r0, r5
 8004cca:	47b8      	blx	r7
 8004ccc:	3001      	adds	r0, #1
 8004cce:	f43f ae3e 	beq.w	800494e <_printf_float+0xb6>
 8004cd2:	f108 0801 	add.w	r8, r8, #1
 8004cd6:	68e3      	ldr	r3, [r4, #12]
 8004cd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004cda:	1a5b      	subs	r3, r3, r1
 8004cdc:	4543      	cmp	r3, r8
 8004cde:	dcf0      	bgt.n	8004cc2 <_printf_float+0x42a>
 8004ce0:	e6fc      	b.n	8004adc <_printf_float+0x244>
 8004ce2:	f04f 0800 	mov.w	r8, #0
 8004ce6:	f104 0919 	add.w	r9, r4, #25
 8004cea:	e7f4      	b.n	8004cd6 <_printf_float+0x43e>

08004cec <_printf_common>:
 8004cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cf0:	4616      	mov	r6, r2
 8004cf2:	4698      	mov	r8, r3
 8004cf4:	688a      	ldr	r2, [r1, #8]
 8004cf6:	690b      	ldr	r3, [r1, #16]
 8004cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	bfb8      	it	lt
 8004d00:	4613      	movlt	r3, r2
 8004d02:	6033      	str	r3, [r6, #0]
 8004d04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d08:	4607      	mov	r7, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	b10a      	cbz	r2, 8004d12 <_printf_common+0x26>
 8004d0e:	3301      	adds	r3, #1
 8004d10:	6033      	str	r3, [r6, #0]
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	0699      	lsls	r1, r3, #26
 8004d16:	bf42      	ittt	mi
 8004d18:	6833      	ldrmi	r3, [r6, #0]
 8004d1a:	3302      	addmi	r3, #2
 8004d1c:	6033      	strmi	r3, [r6, #0]
 8004d1e:	6825      	ldr	r5, [r4, #0]
 8004d20:	f015 0506 	ands.w	r5, r5, #6
 8004d24:	d106      	bne.n	8004d34 <_printf_common+0x48>
 8004d26:	f104 0a19 	add.w	sl, r4, #25
 8004d2a:	68e3      	ldr	r3, [r4, #12]
 8004d2c:	6832      	ldr	r2, [r6, #0]
 8004d2e:	1a9b      	subs	r3, r3, r2
 8004d30:	42ab      	cmp	r3, r5
 8004d32:	dc26      	bgt.n	8004d82 <_printf_common+0x96>
 8004d34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004d38:	6822      	ldr	r2, [r4, #0]
 8004d3a:	3b00      	subs	r3, #0
 8004d3c:	bf18      	it	ne
 8004d3e:	2301      	movne	r3, #1
 8004d40:	0692      	lsls	r2, r2, #26
 8004d42:	d42b      	bmi.n	8004d9c <_printf_common+0xb0>
 8004d44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004d48:	4641      	mov	r1, r8
 8004d4a:	4638      	mov	r0, r7
 8004d4c:	47c8      	blx	r9
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d01e      	beq.n	8004d90 <_printf_common+0xa4>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	6922      	ldr	r2, [r4, #16]
 8004d56:	f003 0306 	and.w	r3, r3, #6
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	bf02      	ittt	eq
 8004d5e:	68e5      	ldreq	r5, [r4, #12]
 8004d60:	6833      	ldreq	r3, [r6, #0]
 8004d62:	1aed      	subeq	r5, r5, r3
 8004d64:	68a3      	ldr	r3, [r4, #8]
 8004d66:	bf0c      	ite	eq
 8004d68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d6c:	2500      	movne	r5, #0
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	bfc4      	itt	gt
 8004d72:	1a9b      	subgt	r3, r3, r2
 8004d74:	18ed      	addgt	r5, r5, r3
 8004d76:	2600      	movs	r6, #0
 8004d78:	341a      	adds	r4, #26
 8004d7a:	42b5      	cmp	r5, r6
 8004d7c:	d11a      	bne.n	8004db4 <_printf_common+0xc8>
 8004d7e:	2000      	movs	r0, #0
 8004d80:	e008      	b.n	8004d94 <_printf_common+0xa8>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4652      	mov	r2, sl
 8004d86:	4641      	mov	r1, r8
 8004d88:	4638      	mov	r0, r7
 8004d8a:	47c8      	blx	r9
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d103      	bne.n	8004d98 <_printf_common+0xac>
 8004d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d98:	3501      	adds	r5, #1
 8004d9a:	e7c6      	b.n	8004d2a <_printf_common+0x3e>
 8004d9c:	18e1      	adds	r1, r4, r3
 8004d9e:	1c5a      	adds	r2, r3, #1
 8004da0:	2030      	movs	r0, #48	@ 0x30
 8004da2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004da6:	4422      	add	r2, r4
 8004da8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004dac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004db0:	3302      	adds	r3, #2
 8004db2:	e7c7      	b.n	8004d44 <_printf_common+0x58>
 8004db4:	2301      	movs	r3, #1
 8004db6:	4622      	mov	r2, r4
 8004db8:	4641      	mov	r1, r8
 8004dba:	4638      	mov	r0, r7
 8004dbc:	47c8      	blx	r9
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d0e6      	beq.n	8004d90 <_printf_common+0xa4>
 8004dc2:	3601      	adds	r6, #1
 8004dc4:	e7d9      	b.n	8004d7a <_printf_common+0x8e>
	...

08004dc8 <_printf_i>:
 8004dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	7e0f      	ldrb	r7, [r1, #24]
 8004dce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004dd0:	2f78      	cmp	r7, #120	@ 0x78
 8004dd2:	4691      	mov	r9, r2
 8004dd4:	4680      	mov	r8, r0
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	469a      	mov	sl, r3
 8004dda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004dde:	d807      	bhi.n	8004df0 <_printf_i+0x28>
 8004de0:	2f62      	cmp	r7, #98	@ 0x62
 8004de2:	d80a      	bhi.n	8004dfa <_printf_i+0x32>
 8004de4:	2f00      	cmp	r7, #0
 8004de6:	f000 80d1 	beq.w	8004f8c <_printf_i+0x1c4>
 8004dea:	2f58      	cmp	r7, #88	@ 0x58
 8004dec:	f000 80b8 	beq.w	8004f60 <_printf_i+0x198>
 8004df0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004df4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004df8:	e03a      	b.n	8004e70 <_printf_i+0xa8>
 8004dfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004dfe:	2b15      	cmp	r3, #21
 8004e00:	d8f6      	bhi.n	8004df0 <_printf_i+0x28>
 8004e02:	a101      	add	r1, pc, #4	@ (adr r1, 8004e08 <_printf_i+0x40>)
 8004e04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e08:	08004e61 	.word	0x08004e61
 8004e0c:	08004e75 	.word	0x08004e75
 8004e10:	08004df1 	.word	0x08004df1
 8004e14:	08004df1 	.word	0x08004df1
 8004e18:	08004df1 	.word	0x08004df1
 8004e1c:	08004df1 	.word	0x08004df1
 8004e20:	08004e75 	.word	0x08004e75
 8004e24:	08004df1 	.word	0x08004df1
 8004e28:	08004df1 	.word	0x08004df1
 8004e2c:	08004df1 	.word	0x08004df1
 8004e30:	08004df1 	.word	0x08004df1
 8004e34:	08004f73 	.word	0x08004f73
 8004e38:	08004e9f 	.word	0x08004e9f
 8004e3c:	08004f2d 	.word	0x08004f2d
 8004e40:	08004df1 	.word	0x08004df1
 8004e44:	08004df1 	.word	0x08004df1
 8004e48:	08004f95 	.word	0x08004f95
 8004e4c:	08004df1 	.word	0x08004df1
 8004e50:	08004e9f 	.word	0x08004e9f
 8004e54:	08004df1 	.word	0x08004df1
 8004e58:	08004df1 	.word	0x08004df1
 8004e5c:	08004f35 	.word	0x08004f35
 8004e60:	6833      	ldr	r3, [r6, #0]
 8004e62:	1d1a      	adds	r2, r3, #4
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6032      	str	r2, [r6, #0]
 8004e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004e70:	2301      	movs	r3, #1
 8004e72:	e09c      	b.n	8004fae <_printf_i+0x1e6>
 8004e74:	6833      	ldr	r3, [r6, #0]
 8004e76:	6820      	ldr	r0, [r4, #0]
 8004e78:	1d19      	adds	r1, r3, #4
 8004e7a:	6031      	str	r1, [r6, #0]
 8004e7c:	0606      	lsls	r6, r0, #24
 8004e7e:	d501      	bpl.n	8004e84 <_printf_i+0xbc>
 8004e80:	681d      	ldr	r5, [r3, #0]
 8004e82:	e003      	b.n	8004e8c <_printf_i+0xc4>
 8004e84:	0645      	lsls	r5, r0, #25
 8004e86:	d5fb      	bpl.n	8004e80 <_printf_i+0xb8>
 8004e88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	da03      	bge.n	8004e98 <_printf_i+0xd0>
 8004e90:	232d      	movs	r3, #45	@ 0x2d
 8004e92:	426d      	negs	r5, r5
 8004e94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e98:	4858      	ldr	r0, [pc, #352]	@ (8004ffc <_printf_i+0x234>)
 8004e9a:	230a      	movs	r3, #10
 8004e9c:	e011      	b.n	8004ec2 <_printf_i+0xfa>
 8004e9e:	6821      	ldr	r1, [r4, #0]
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	0608      	lsls	r0, r1, #24
 8004ea4:	f853 5b04 	ldr.w	r5, [r3], #4
 8004ea8:	d402      	bmi.n	8004eb0 <_printf_i+0xe8>
 8004eaa:	0649      	lsls	r1, r1, #25
 8004eac:	bf48      	it	mi
 8004eae:	b2ad      	uxthmi	r5, r5
 8004eb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8004eb2:	4852      	ldr	r0, [pc, #328]	@ (8004ffc <_printf_i+0x234>)
 8004eb4:	6033      	str	r3, [r6, #0]
 8004eb6:	bf14      	ite	ne
 8004eb8:	230a      	movne	r3, #10
 8004eba:	2308      	moveq	r3, #8
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004ec2:	6866      	ldr	r6, [r4, #4]
 8004ec4:	60a6      	str	r6, [r4, #8]
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	db05      	blt.n	8004ed6 <_printf_i+0x10e>
 8004eca:	6821      	ldr	r1, [r4, #0]
 8004ecc:	432e      	orrs	r6, r5
 8004ece:	f021 0104 	bic.w	r1, r1, #4
 8004ed2:	6021      	str	r1, [r4, #0]
 8004ed4:	d04b      	beq.n	8004f6e <_printf_i+0x1a6>
 8004ed6:	4616      	mov	r6, r2
 8004ed8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004edc:	fb03 5711 	mls	r7, r3, r1, r5
 8004ee0:	5dc7      	ldrb	r7, [r0, r7]
 8004ee2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ee6:	462f      	mov	r7, r5
 8004ee8:	42bb      	cmp	r3, r7
 8004eea:	460d      	mov	r5, r1
 8004eec:	d9f4      	bls.n	8004ed8 <_printf_i+0x110>
 8004eee:	2b08      	cmp	r3, #8
 8004ef0:	d10b      	bne.n	8004f0a <_printf_i+0x142>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	07df      	lsls	r7, r3, #31
 8004ef6:	d508      	bpl.n	8004f0a <_printf_i+0x142>
 8004ef8:	6923      	ldr	r3, [r4, #16]
 8004efa:	6861      	ldr	r1, [r4, #4]
 8004efc:	4299      	cmp	r1, r3
 8004efe:	bfde      	ittt	le
 8004f00:	2330      	movle	r3, #48	@ 0x30
 8004f02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f06:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004f0a:	1b92      	subs	r2, r2, r6
 8004f0c:	6122      	str	r2, [r4, #16]
 8004f0e:	f8cd a000 	str.w	sl, [sp]
 8004f12:	464b      	mov	r3, r9
 8004f14:	aa03      	add	r2, sp, #12
 8004f16:	4621      	mov	r1, r4
 8004f18:	4640      	mov	r0, r8
 8004f1a:	f7ff fee7 	bl	8004cec <_printf_common>
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d14a      	bne.n	8004fb8 <_printf_i+0x1f0>
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f26:	b004      	add	sp, #16
 8004f28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	f043 0320 	orr.w	r3, r3, #32
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	4832      	ldr	r0, [pc, #200]	@ (8005000 <_printf_i+0x238>)
 8004f36:	2778      	movs	r7, #120	@ 0x78
 8004f38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004f3c:	6823      	ldr	r3, [r4, #0]
 8004f3e:	6831      	ldr	r1, [r6, #0]
 8004f40:	061f      	lsls	r7, r3, #24
 8004f42:	f851 5b04 	ldr.w	r5, [r1], #4
 8004f46:	d402      	bmi.n	8004f4e <_printf_i+0x186>
 8004f48:	065f      	lsls	r7, r3, #25
 8004f4a:	bf48      	it	mi
 8004f4c:	b2ad      	uxthmi	r5, r5
 8004f4e:	6031      	str	r1, [r6, #0]
 8004f50:	07d9      	lsls	r1, r3, #31
 8004f52:	bf44      	itt	mi
 8004f54:	f043 0320 	orrmi.w	r3, r3, #32
 8004f58:	6023      	strmi	r3, [r4, #0]
 8004f5a:	b11d      	cbz	r5, 8004f64 <_printf_i+0x19c>
 8004f5c:	2310      	movs	r3, #16
 8004f5e:	e7ad      	b.n	8004ebc <_printf_i+0xf4>
 8004f60:	4826      	ldr	r0, [pc, #152]	@ (8004ffc <_printf_i+0x234>)
 8004f62:	e7e9      	b.n	8004f38 <_printf_i+0x170>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	f023 0320 	bic.w	r3, r3, #32
 8004f6a:	6023      	str	r3, [r4, #0]
 8004f6c:	e7f6      	b.n	8004f5c <_printf_i+0x194>
 8004f6e:	4616      	mov	r6, r2
 8004f70:	e7bd      	b.n	8004eee <_printf_i+0x126>
 8004f72:	6833      	ldr	r3, [r6, #0]
 8004f74:	6825      	ldr	r5, [r4, #0]
 8004f76:	6961      	ldr	r1, [r4, #20]
 8004f78:	1d18      	adds	r0, r3, #4
 8004f7a:	6030      	str	r0, [r6, #0]
 8004f7c:	062e      	lsls	r6, r5, #24
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	d501      	bpl.n	8004f86 <_printf_i+0x1be>
 8004f82:	6019      	str	r1, [r3, #0]
 8004f84:	e002      	b.n	8004f8c <_printf_i+0x1c4>
 8004f86:	0668      	lsls	r0, r5, #25
 8004f88:	d5fb      	bpl.n	8004f82 <_printf_i+0x1ba>
 8004f8a:	8019      	strh	r1, [r3, #0]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	6123      	str	r3, [r4, #16]
 8004f90:	4616      	mov	r6, r2
 8004f92:	e7bc      	b.n	8004f0e <_printf_i+0x146>
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	1d1a      	adds	r2, r3, #4
 8004f98:	6032      	str	r2, [r6, #0]
 8004f9a:	681e      	ldr	r6, [r3, #0]
 8004f9c:	6862      	ldr	r2, [r4, #4]
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f7fb f915 	bl	80001d0 <memchr>
 8004fa6:	b108      	cbz	r0, 8004fac <_printf_i+0x1e4>
 8004fa8:	1b80      	subs	r0, r0, r6
 8004faa:	6060      	str	r0, [r4, #4]
 8004fac:	6863      	ldr	r3, [r4, #4]
 8004fae:	6123      	str	r3, [r4, #16]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fb6:	e7aa      	b.n	8004f0e <_printf_i+0x146>
 8004fb8:	6923      	ldr	r3, [r4, #16]
 8004fba:	4632      	mov	r2, r6
 8004fbc:	4649      	mov	r1, r9
 8004fbe:	4640      	mov	r0, r8
 8004fc0:	47d0      	blx	sl
 8004fc2:	3001      	adds	r0, #1
 8004fc4:	d0ad      	beq.n	8004f22 <_printf_i+0x15a>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	079b      	lsls	r3, r3, #30
 8004fca:	d413      	bmi.n	8004ff4 <_printf_i+0x22c>
 8004fcc:	68e0      	ldr	r0, [r4, #12]
 8004fce:	9b03      	ldr	r3, [sp, #12]
 8004fd0:	4298      	cmp	r0, r3
 8004fd2:	bfb8      	it	lt
 8004fd4:	4618      	movlt	r0, r3
 8004fd6:	e7a6      	b.n	8004f26 <_printf_i+0x15e>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4632      	mov	r2, r6
 8004fdc:	4649      	mov	r1, r9
 8004fde:	4640      	mov	r0, r8
 8004fe0:	47d0      	blx	sl
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d09d      	beq.n	8004f22 <_printf_i+0x15a>
 8004fe6:	3501      	adds	r5, #1
 8004fe8:	68e3      	ldr	r3, [r4, #12]
 8004fea:	9903      	ldr	r1, [sp, #12]
 8004fec:	1a5b      	subs	r3, r3, r1
 8004fee:	42ab      	cmp	r3, r5
 8004ff0:	dcf2      	bgt.n	8004fd8 <_printf_i+0x210>
 8004ff2:	e7eb      	b.n	8004fcc <_printf_i+0x204>
 8004ff4:	2500      	movs	r5, #0
 8004ff6:	f104 0619 	add.w	r6, r4, #25
 8004ffa:	e7f5      	b.n	8004fe8 <_printf_i+0x220>
 8004ffc:	08007c16 	.word	0x08007c16
 8005000:	08007c27 	.word	0x08007c27

08005004 <std>:
 8005004:	2300      	movs	r3, #0
 8005006:	b510      	push	{r4, lr}
 8005008:	4604      	mov	r4, r0
 800500a:	e9c0 3300 	strd	r3, r3, [r0]
 800500e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005012:	6083      	str	r3, [r0, #8]
 8005014:	8181      	strh	r1, [r0, #12]
 8005016:	6643      	str	r3, [r0, #100]	@ 0x64
 8005018:	81c2      	strh	r2, [r0, #14]
 800501a:	6183      	str	r3, [r0, #24]
 800501c:	4619      	mov	r1, r3
 800501e:	2208      	movs	r2, #8
 8005020:	305c      	adds	r0, #92	@ 0x5c
 8005022:	f000 f944 	bl	80052ae <memset>
 8005026:	4b0d      	ldr	r3, [pc, #52]	@ (800505c <std+0x58>)
 8005028:	6263      	str	r3, [r4, #36]	@ 0x24
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <std+0x5c>)
 800502c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800502e:	4b0d      	ldr	r3, [pc, #52]	@ (8005064 <std+0x60>)
 8005030:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005032:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <std+0x64>)
 8005034:	6323      	str	r3, [r4, #48]	@ 0x30
 8005036:	4b0d      	ldr	r3, [pc, #52]	@ (800506c <std+0x68>)
 8005038:	6224      	str	r4, [r4, #32]
 800503a:	429c      	cmp	r4, r3
 800503c:	d006      	beq.n	800504c <std+0x48>
 800503e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005042:	4294      	cmp	r4, r2
 8005044:	d002      	beq.n	800504c <std+0x48>
 8005046:	33d0      	adds	r3, #208	@ 0xd0
 8005048:	429c      	cmp	r4, r3
 800504a:	d105      	bne.n	8005058 <std+0x54>
 800504c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005054:	f000 b9a8 	b.w	80053a8 <__retarget_lock_init_recursive>
 8005058:	bd10      	pop	{r4, pc}
 800505a:	bf00      	nop
 800505c:	080051f5 	.word	0x080051f5
 8005060:	08005217 	.word	0x08005217
 8005064:	0800524f 	.word	0x0800524f
 8005068:	08005273 	.word	0x08005273
 800506c:	20000758 	.word	0x20000758

08005070 <stdio_exit_handler>:
 8005070:	4a02      	ldr	r2, [pc, #8]	@ (800507c <stdio_exit_handler+0xc>)
 8005072:	4903      	ldr	r1, [pc, #12]	@ (8005080 <stdio_exit_handler+0x10>)
 8005074:	4803      	ldr	r0, [pc, #12]	@ (8005084 <stdio_exit_handler+0x14>)
 8005076:	f000 b869 	b.w	800514c <_fwalk_sglue>
 800507a:	bf00      	nop
 800507c:	2000000c 	.word	0x2000000c
 8005080:	08006d2d 	.word	0x08006d2d
 8005084:	2000001c 	.word	0x2000001c

08005088 <cleanup_stdio>:
 8005088:	6841      	ldr	r1, [r0, #4]
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <cleanup_stdio+0x34>)
 800508c:	4299      	cmp	r1, r3
 800508e:	b510      	push	{r4, lr}
 8005090:	4604      	mov	r4, r0
 8005092:	d001      	beq.n	8005098 <cleanup_stdio+0x10>
 8005094:	f001 fe4a 	bl	8006d2c <_fflush_r>
 8005098:	68a1      	ldr	r1, [r4, #8]
 800509a:	4b09      	ldr	r3, [pc, #36]	@ (80050c0 <cleanup_stdio+0x38>)
 800509c:	4299      	cmp	r1, r3
 800509e:	d002      	beq.n	80050a6 <cleanup_stdio+0x1e>
 80050a0:	4620      	mov	r0, r4
 80050a2:	f001 fe43 	bl	8006d2c <_fflush_r>
 80050a6:	68e1      	ldr	r1, [r4, #12]
 80050a8:	4b06      	ldr	r3, [pc, #24]	@ (80050c4 <cleanup_stdio+0x3c>)
 80050aa:	4299      	cmp	r1, r3
 80050ac:	d004      	beq.n	80050b8 <cleanup_stdio+0x30>
 80050ae:	4620      	mov	r0, r4
 80050b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050b4:	f001 be3a 	b.w	8006d2c <_fflush_r>
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	bf00      	nop
 80050bc:	20000758 	.word	0x20000758
 80050c0:	200007c0 	.word	0x200007c0
 80050c4:	20000828 	.word	0x20000828

080050c8 <global_stdio_init.part.0>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <global_stdio_init.part.0+0x30>)
 80050cc:	4c0b      	ldr	r4, [pc, #44]	@ (80050fc <global_stdio_init.part.0+0x34>)
 80050ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005100 <global_stdio_init.part.0+0x38>)
 80050d0:	601a      	str	r2, [r3, #0]
 80050d2:	4620      	mov	r0, r4
 80050d4:	2200      	movs	r2, #0
 80050d6:	2104      	movs	r1, #4
 80050d8:	f7ff ff94 	bl	8005004 <std>
 80050dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050e0:	2201      	movs	r2, #1
 80050e2:	2109      	movs	r1, #9
 80050e4:	f7ff ff8e 	bl	8005004 <std>
 80050e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050ec:	2202      	movs	r2, #2
 80050ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050f2:	2112      	movs	r1, #18
 80050f4:	f7ff bf86 	b.w	8005004 <std>
 80050f8:	20000890 	.word	0x20000890
 80050fc:	20000758 	.word	0x20000758
 8005100:	08005071 	.word	0x08005071

08005104 <__sfp_lock_acquire>:
 8005104:	4801      	ldr	r0, [pc, #4]	@ (800510c <__sfp_lock_acquire+0x8>)
 8005106:	f000 b950 	b.w	80053aa <__retarget_lock_acquire_recursive>
 800510a:	bf00      	nop
 800510c:	20000899 	.word	0x20000899

08005110 <__sfp_lock_release>:
 8005110:	4801      	ldr	r0, [pc, #4]	@ (8005118 <__sfp_lock_release+0x8>)
 8005112:	f000 b94b 	b.w	80053ac <__retarget_lock_release_recursive>
 8005116:	bf00      	nop
 8005118:	20000899 	.word	0x20000899

0800511c <__sinit>:
 800511c:	b510      	push	{r4, lr}
 800511e:	4604      	mov	r4, r0
 8005120:	f7ff fff0 	bl	8005104 <__sfp_lock_acquire>
 8005124:	6a23      	ldr	r3, [r4, #32]
 8005126:	b11b      	cbz	r3, 8005130 <__sinit+0x14>
 8005128:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800512c:	f7ff bff0 	b.w	8005110 <__sfp_lock_release>
 8005130:	4b04      	ldr	r3, [pc, #16]	@ (8005144 <__sinit+0x28>)
 8005132:	6223      	str	r3, [r4, #32]
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <__sinit+0x2c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f5      	bne.n	8005128 <__sinit+0xc>
 800513c:	f7ff ffc4 	bl	80050c8 <global_stdio_init.part.0>
 8005140:	e7f2      	b.n	8005128 <__sinit+0xc>
 8005142:	bf00      	nop
 8005144:	08005089 	.word	0x08005089
 8005148:	20000890 	.word	0x20000890

0800514c <_fwalk_sglue>:
 800514c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005150:	4607      	mov	r7, r0
 8005152:	4688      	mov	r8, r1
 8005154:	4614      	mov	r4, r2
 8005156:	2600      	movs	r6, #0
 8005158:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800515c:	f1b9 0901 	subs.w	r9, r9, #1
 8005160:	d505      	bpl.n	800516e <_fwalk_sglue+0x22>
 8005162:	6824      	ldr	r4, [r4, #0]
 8005164:	2c00      	cmp	r4, #0
 8005166:	d1f7      	bne.n	8005158 <_fwalk_sglue+0xc>
 8005168:	4630      	mov	r0, r6
 800516a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800516e:	89ab      	ldrh	r3, [r5, #12]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d907      	bls.n	8005184 <_fwalk_sglue+0x38>
 8005174:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005178:	3301      	adds	r3, #1
 800517a:	d003      	beq.n	8005184 <_fwalk_sglue+0x38>
 800517c:	4629      	mov	r1, r5
 800517e:	4638      	mov	r0, r7
 8005180:	47c0      	blx	r8
 8005182:	4306      	orrs	r6, r0
 8005184:	3568      	adds	r5, #104	@ 0x68
 8005186:	e7e9      	b.n	800515c <_fwalk_sglue+0x10>

08005188 <sniprintf>:
 8005188:	b40c      	push	{r2, r3}
 800518a:	b530      	push	{r4, r5, lr}
 800518c:	4b18      	ldr	r3, [pc, #96]	@ (80051f0 <sniprintf+0x68>)
 800518e:	1e0c      	subs	r4, r1, #0
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	b09d      	sub	sp, #116	@ 0x74
 8005194:	da08      	bge.n	80051a8 <sniprintf+0x20>
 8005196:	238b      	movs	r3, #139	@ 0x8b
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800519e:	b01d      	add	sp, #116	@ 0x74
 80051a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051a4:	b002      	add	sp, #8
 80051a6:	4770      	bx	lr
 80051a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80051ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80051b6:	bf14      	ite	ne
 80051b8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80051bc:	4623      	moveq	r3, r4
 80051be:	9304      	str	r3, [sp, #16]
 80051c0:	9307      	str	r3, [sp, #28]
 80051c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80051c6:	9002      	str	r0, [sp, #8]
 80051c8:	9006      	str	r0, [sp, #24]
 80051ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051ce:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80051d0:	ab21      	add	r3, sp, #132	@ 0x84
 80051d2:	a902      	add	r1, sp, #8
 80051d4:	4628      	mov	r0, r5
 80051d6:	9301      	str	r3, [sp, #4]
 80051d8:	f001 fc28 	bl	8006a2c <_svfiprintf_r>
 80051dc:	1c43      	adds	r3, r0, #1
 80051de:	bfbc      	itt	lt
 80051e0:	238b      	movlt	r3, #139	@ 0x8b
 80051e2:	602b      	strlt	r3, [r5, #0]
 80051e4:	2c00      	cmp	r4, #0
 80051e6:	d0da      	beq.n	800519e <sniprintf+0x16>
 80051e8:	9b02      	ldr	r3, [sp, #8]
 80051ea:	2200      	movs	r2, #0
 80051ec:	701a      	strb	r2, [r3, #0]
 80051ee:	e7d6      	b.n	800519e <sniprintf+0x16>
 80051f0:	20000018 	.word	0x20000018

080051f4 <__sread>:
 80051f4:	b510      	push	{r4, lr}
 80051f6:	460c      	mov	r4, r1
 80051f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fc:	f000 f886 	bl	800530c <_read_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	bfab      	itete	ge
 8005204:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005206:	89a3      	ldrhlt	r3, [r4, #12]
 8005208:	181b      	addge	r3, r3, r0
 800520a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800520e:	bfac      	ite	ge
 8005210:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005212:	81a3      	strhlt	r3, [r4, #12]
 8005214:	bd10      	pop	{r4, pc}

08005216 <__swrite>:
 8005216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800521a:	461f      	mov	r7, r3
 800521c:	898b      	ldrh	r3, [r1, #12]
 800521e:	05db      	lsls	r3, r3, #23
 8005220:	4605      	mov	r5, r0
 8005222:	460c      	mov	r4, r1
 8005224:	4616      	mov	r6, r2
 8005226:	d505      	bpl.n	8005234 <__swrite+0x1e>
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	2302      	movs	r3, #2
 800522e:	2200      	movs	r2, #0
 8005230:	f000 f85a 	bl	80052e8 <_lseek_r>
 8005234:	89a3      	ldrh	r3, [r4, #12]
 8005236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800523a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800523e:	81a3      	strh	r3, [r4, #12]
 8005240:	4632      	mov	r2, r6
 8005242:	463b      	mov	r3, r7
 8005244:	4628      	mov	r0, r5
 8005246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	f000 b871 	b.w	8005330 <_write_r>

0800524e <__sseek>:
 800524e:	b510      	push	{r4, lr}
 8005250:	460c      	mov	r4, r1
 8005252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005256:	f000 f847 	bl	80052e8 <_lseek_r>
 800525a:	1c43      	adds	r3, r0, #1
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	bf15      	itete	ne
 8005260:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005262:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005266:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800526a:	81a3      	strheq	r3, [r4, #12]
 800526c:	bf18      	it	ne
 800526e:	81a3      	strhne	r3, [r4, #12]
 8005270:	bd10      	pop	{r4, pc}

08005272 <__sclose>:
 8005272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005276:	f000 b827 	b.w	80052c8 <_close_r>

0800527a <memmove>:
 800527a:	4288      	cmp	r0, r1
 800527c:	b510      	push	{r4, lr}
 800527e:	eb01 0402 	add.w	r4, r1, r2
 8005282:	d902      	bls.n	800528a <memmove+0x10>
 8005284:	4284      	cmp	r4, r0
 8005286:	4623      	mov	r3, r4
 8005288:	d807      	bhi.n	800529a <memmove+0x20>
 800528a:	1e43      	subs	r3, r0, #1
 800528c:	42a1      	cmp	r1, r4
 800528e:	d008      	beq.n	80052a2 <memmove+0x28>
 8005290:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005294:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005298:	e7f8      	b.n	800528c <memmove+0x12>
 800529a:	4402      	add	r2, r0
 800529c:	4601      	mov	r1, r0
 800529e:	428a      	cmp	r2, r1
 80052a0:	d100      	bne.n	80052a4 <memmove+0x2a>
 80052a2:	bd10      	pop	{r4, pc}
 80052a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052ac:	e7f7      	b.n	800529e <memmove+0x24>

080052ae <memset>:
 80052ae:	4402      	add	r2, r0
 80052b0:	4603      	mov	r3, r0
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d100      	bne.n	80052b8 <memset+0xa>
 80052b6:	4770      	bx	lr
 80052b8:	f803 1b01 	strb.w	r1, [r3], #1
 80052bc:	e7f9      	b.n	80052b2 <memset+0x4>
	...

080052c0 <_localeconv_r>:
 80052c0:	4800      	ldr	r0, [pc, #0]	@ (80052c4 <_localeconv_r+0x4>)
 80052c2:	4770      	bx	lr
 80052c4:	20000158 	.word	0x20000158

080052c8 <_close_r>:
 80052c8:	b538      	push	{r3, r4, r5, lr}
 80052ca:	4d06      	ldr	r5, [pc, #24]	@ (80052e4 <_close_r+0x1c>)
 80052cc:	2300      	movs	r3, #0
 80052ce:	4604      	mov	r4, r0
 80052d0:	4608      	mov	r0, r1
 80052d2:	602b      	str	r3, [r5, #0]
 80052d4:	f7fc fa91 	bl	80017fa <_close>
 80052d8:	1c43      	adds	r3, r0, #1
 80052da:	d102      	bne.n	80052e2 <_close_r+0x1a>
 80052dc:	682b      	ldr	r3, [r5, #0]
 80052de:	b103      	cbz	r3, 80052e2 <_close_r+0x1a>
 80052e0:	6023      	str	r3, [r4, #0]
 80052e2:	bd38      	pop	{r3, r4, r5, pc}
 80052e4:	20000894 	.word	0x20000894

080052e8 <_lseek_r>:
 80052e8:	b538      	push	{r3, r4, r5, lr}
 80052ea:	4d07      	ldr	r5, [pc, #28]	@ (8005308 <_lseek_r+0x20>)
 80052ec:	4604      	mov	r4, r0
 80052ee:	4608      	mov	r0, r1
 80052f0:	4611      	mov	r1, r2
 80052f2:	2200      	movs	r2, #0
 80052f4:	602a      	str	r2, [r5, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	f7fc faa6 	bl	8001848 <_lseek>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_lseek_r+0x1e>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_lseek_r+0x1e>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	20000894 	.word	0x20000894

0800530c <_read_r>:
 800530c:	b538      	push	{r3, r4, r5, lr}
 800530e:	4d07      	ldr	r5, [pc, #28]	@ (800532c <_read_r+0x20>)
 8005310:	4604      	mov	r4, r0
 8005312:	4608      	mov	r0, r1
 8005314:	4611      	mov	r1, r2
 8005316:	2200      	movs	r2, #0
 8005318:	602a      	str	r2, [r5, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	f7fc fa34 	bl	8001788 <_read>
 8005320:	1c43      	adds	r3, r0, #1
 8005322:	d102      	bne.n	800532a <_read_r+0x1e>
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	b103      	cbz	r3, 800532a <_read_r+0x1e>
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	bd38      	pop	{r3, r4, r5, pc}
 800532c:	20000894 	.word	0x20000894

08005330 <_write_r>:
 8005330:	b538      	push	{r3, r4, r5, lr}
 8005332:	4d07      	ldr	r5, [pc, #28]	@ (8005350 <_write_r+0x20>)
 8005334:	4604      	mov	r4, r0
 8005336:	4608      	mov	r0, r1
 8005338:	4611      	mov	r1, r2
 800533a:	2200      	movs	r2, #0
 800533c:	602a      	str	r2, [r5, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	f7fc fa3f 	bl	80017c2 <_write>
 8005344:	1c43      	adds	r3, r0, #1
 8005346:	d102      	bne.n	800534e <_write_r+0x1e>
 8005348:	682b      	ldr	r3, [r5, #0]
 800534a:	b103      	cbz	r3, 800534e <_write_r+0x1e>
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	bd38      	pop	{r3, r4, r5, pc}
 8005350:	20000894 	.word	0x20000894

08005354 <__errno>:
 8005354:	4b01      	ldr	r3, [pc, #4]	@ (800535c <__errno+0x8>)
 8005356:	6818      	ldr	r0, [r3, #0]
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	20000018 	.word	0x20000018

08005360 <__libc_init_array>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4d0d      	ldr	r5, [pc, #52]	@ (8005398 <__libc_init_array+0x38>)
 8005364:	4c0d      	ldr	r4, [pc, #52]	@ (800539c <__libc_init_array+0x3c>)
 8005366:	1b64      	subs	r4, r4, r5
 8005368:	10a4      	asrs	r4, r4, #2
 800536a:	2600      	movs	r6, #0
 800536c:	42a6      	cmp	r6, r4
 800536e:	d109      	bne.n	8005384 <__libc_init_array+0x24>
 8005370:	4d0b      	ldr	r5, [pc, #44]	@ (80053a0 <__libc_init_array+0x40>)
 8005372:	4c0c      	ldr	r4, [pc, #48]	@ (80053a4 <__libc_init_array+0x44>)
 8005374:	f002 f850 	bl	8007418 <_init>
 8005378:	1b64      	subs	r4, r4, r5
 800537a:	10a4      	asrs	r4, r4, #2
 800537c:	2600      	movs	r6, #0
 800537e:	42a6      	cmp	r6, r4
 8005380:	d105      	bne.n	800538e <__libc_init_array+0x2e>
 8005382:	bd70      	pop	{r4, r5, r6, pc}
 8005384:	f855 3b04 	ldr.w	r3, [r5], #4
 8005388:	4798      	blx	r3
 800538a:	3601      	adds	r6, #1
 800538c:	e7ee      	b.n	800536c <__libc_init_array+0xc>
 800538e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005392:	4798      	blx	r3
 8005394:	3601      	adds	r6, #1
 8005396:	e7f2      	b.n	800537e <__libc_init_array+0x1e>
 8005398:	08007f84 	.word	0x08007f84
 800539c:	08007f84 	.word	0x08007f84
 80053a0:	08007f84 	.word	0x08007f84
 80053a4:	08007f88 	.word	0x08007f88

080053a8 <__retarget_lock_init_recursive>:
 80053a8:	4770      	bx	lr

080053aa <__retarget_lock_acquire_recursive>:
 80053aa:	4770      	bx	lr

080053ac <__retarget_lock_release_recursive>:
 80053ac:	4770      	bx	lr

080053ae <memcpy>:
 80053ae:	440a      	add	r2, r1
 80053b0:	4291      	cmp	r1, r2
 80053b2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80053b6:	d100      	bne.n	80053ba <memcpy+0xc>
 80053b8:	4770      	bx	lr
 80053ba:	b510      	push	{r4, lr}
 80053bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c4:	4291      	cmp	r1, r2
 80053c6:	d1f9      	bne.n	80053bc <memcpy+0xe>
 80053c8:	bd10      	pop	{r4, pc}

080053ca <quorem>:
 80053ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ce:	6903      	ldr	r3, [r0, #16]
 80053d0:	690c      	ldr	r4, [r1, #16]
 80053d2:	42a3      	cmp	r3, r4
 80053d4:	4607      	mov	r7, r0
 80053d6:	db7e      	blt.n	80054d6 <quorem+0x10c>
 80053d8:	3c01      	subs	r4, #1
 80053da:	f101 0814 	add.w	r8, r1, #20
 80053de:	00a3      	lsls	r3, r4, #2
 80053e0:	f100 0514 	add.w	r5, r0, #20
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80053f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80053f4:	3301      	adds	r3, #1
 80053f6:	429a      	cmp	r2, r3
 80053f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80053fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005400:	d32e      	bcc.n	8005460 <quorem+0x96>
 8005402:	f04f 0a00 	mov.w	sl, #0
 8005406:	46c4      	mov	ip, r8
 8005408:	46ae      	mov	lr, r5
 800540a:	46d3      	mov	fp, sl
 800540c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005410:	b298      	uxth	r0, r3
 8005412:	fb06 a000 	mla	r0, r6, r0, sl
 8005416:	0c02      	lsrs	r2, r0, #16
 8005418:	0c1b      	lsrs	r3, r3, #16
 800541a:	fb06 2303 	mla	r3, r6, r3, r2
 800541e:	f8de 2000 	ldr.w	r2, [lr]
 8005422:	b280      	uxth	r0, r0
 8005424:	b292      	uxth	r2, r2
 8005426:	1a12      	subs	r2, r2, r0
 8005428:	445a      	add	r2, fp
 800542a:	f8de 0000 	ldr.w	r0, [lr]
 800542e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005432:	b29b      	uxth	r3, r3
 8005434:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005438:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800543c:	b292      	uxth	r2, r2
 800543e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005442:	45e1      	cmp	r9, ip
 8005444:	f84e 2b04 	str.w	r2, [lr], #4
 8005448:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800544c:	d2de      	bcs.n	800540c <quorem+0x42>
 800544e:	9b00      	ldr	r3, [sp, #0]
 8005450:	58eb      	ldr	r3, [r5, r3]
 8005452:	b92b      	cbnz	r3, 8005460 <quorem+0x96>
 8005454:	9b01      	ldr	r3, [sp, #4]
 8005456:	3b04      	subs	r3, #4
 8005458:	429d      	cmp	r5, r3
 800545a:	461a      	mov	r2, r3
 800545c:	d32f      	bcc.n	80054be <quorem+0xf4>
 800545e:	613c      	str	r4, [r7, #16]
 8005460:	4638      	mov	r0, r7
 8005462:	f001 f97f 	bl	8006764 <__mcmp>
 8005466:	2800      	cmp	r0, #0
 8005468:	db25      	blt.n	80054b6 <quorem+0xec>
 800546a:	4629      	mov	r1, r5
 800546c:	2000      	movs	r0, #0
 800546e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005472:	f8d1 c000 	ldr.w	ip, [r1]
 8005476:	fa1f fe82 	uxth.w	lr, r2
 800547a:	fa1f f38c 	uxth.w	r3, ip
 800547e:	eba3 030e 	sub.w	r3, r3, lr
 8005482:	4403      	add	r3, r0
 8005484:	0c12      	lsrs	r2, r2, #16
 8005486:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800548a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800548e:	b29b      	uxth	r3, r3
 8005490:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005494:	45c1      	cmp	r9, r8
 8005496:	f841 3b04 	str.w	r3, [r1], #4
 800549a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800549e:	d2e6      	bcs.n	800546e <quorem+0xa4>
 80054a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054a8:	b922      	cbnz	r2, 80054b4 <quorem+0xea>
 80054aa:	3b04      	subs	r3, #4
 80054ac:	429d      	cmp	r5, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	d30b      	bcc.n	80054ca <quorem+0x100>
 80054b2:	613c      	str	r4, [r7, #16]
 80054b4:	3601      	adds	r6, #1
 80054b6:	4630      	mov	r0, r6
 80054b8:	b003      	add	sp, #12
 80054ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	2a00      	cmp	r2, #0
 80054c4:	d1cb      	bne.n	800545e <quorem+0x94>
 80054c6:	3c01      	subs	r4, #1
 80054c8:	e7c6      	b.n	8005458 <quorem+0x8e>
 80054ca:	6812      	ldr	r2, [r2, #0]
 80054cc:	3b04      	subs	r3, #4
 80054ce:	2a00      	cmp	r2, #0
 80054d0:	d1ef      	bne.n	80054b2 <quorem+0xe8>
 80054d2:	3c01      	subs	r4, #1
 80054d4:	e7ea      	b.n	80054ac <quorem+0xe2>
 80054d6:	2000      	movs	r0, #0
 80054d8:	e7ee      	b.n	80054b8 <quorem+0xee>
 80054da:	0000      	movs	r0, r0
 80054dc:	0000      	movs	r0, r0
	...

080054e0 <_dtoa_r>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	69c7      	ldr	r7, [r0, #28]
 80054e6:	b097      	sub	sp, #92	@ 0x5c
 80054e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80054ec:	ec55 4b10 	vmov	r4, r5, d0
 80054f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80054f2:	9107      	str	r1, [sp, #28]
 80054f4:	4681      	mov	r9, r0
 80054f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80054f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80054fa:	b97f      	cbnz	r7, 800551c <_dtoa_r+0x3c>
 80054fc:	2010      	movs	r0, #16
 80054fe:	f000 fe09 	bl	8006114 <malloc>
 8005502:	4602      	mov	r2, r0
 8005504:	f8c9 001c 	str.w	r0, [r9, #28]
 8005508:	b920      	cbnz	r0, 8005514 <_dtoa_r+0x34>
 800550a:	4ba9      	ldr	r3, [pc, #676]	@ (80057b0 <_dtoa_r+0x2d0>)
 800550c:	21ef      	movs	r1, #239	@ 0xef
 800550e:	48a9      	ldr	r0, [pc, #676]	@ (80057b4 <_dtoa_r+0x2d4>)
 8005510:	f001 fc44 	bl	8006d9c <__assert_func>
 8005514:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005518:	6007      	str	r7, [r0, #0]
 800551a:	60c7      	str	r7, [r0, #12]
 800551c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	b159      	cbz	r1, 800553c <_dtoa_r+0x5c>
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	604a      	str	r2, [r1, #4]
 8005528:	2301      	movs	r3, #1
 800552a:	4093      	lsls	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
 800552e:	4648      	mov	r0, r9
 8005530:	f000 fee6 	bl	8006300 <_Bfree>
 8005534:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	1e2b      	subs	r3, r5, #0
 800553e:	bfb9      	ittee	lt
 8005540:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005544:	9305      	strlt	r3, [sp, #20]
 8005546:	2300      	movge	r3, #0
 8005548:	6033      	strge	r3, [r6, #0]
 800554a:	9f05      	ldr	r7, [sp, #20]
 800554c:	4b9a      	ldr	r3, [pc, #616]	@ (80057b8 <_dtoa_r+0x2d8>)
 800554e:	bfbc      	itt	lt
 8005550:	2201      	movlt	r2, #1
 8005552:	6032      	strlt	r2, [r6, #0]
 8005554:	43bb      	bics	r3, r7
 8005556:	d112      	bne.n	800557e <_dtoa_r+0x9e>
 8005558:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800555a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800555e:	6013      	str	r3, [r2, #0]
 8005560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005564:	4323      	orrs	r3, r4
 8005566:	f000 855a 	beq.w	800601e <_dtoa_r+0xb3e>
 800556a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800556c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80057cc <_dtoa_r+0x2ec>
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 855c 	beq.w	800602e <_dtoa_r+0xb4e>
 8005576:	f10a 0303 	add.w	r3, sl, #3
 800557a:	f000 bd56 	b.w	800602a <_dtoa_r+0xb4a>
 800557e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005582:	2200      	movs	r2, #0
 8005584:	ec51 0b17 	vmov	r0, r1, d7
 8005588:	2300      	movs	r3, #0
 800558a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800558e:	f7fb fa9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005592:	4680      	mov	r8, r0
 8005594:	b158      	cbz	r0, 80055ae <_dtoa_r+0xce>
 8005596:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005598:	2301      	movs	r3, #1
 800559a:	6013      	str	r3, [r2, #0]
 800559c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800559e:	b113      	cbz	r3, 80055a6 <_dtoa_r+0xc6>
 80055a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80055a2:	4b86      	ldr	r3, [pc, #536]	@ (80057bc <_dtoa_r+0x2dc>)
 80055a4:	6013      	str	r3, [r2, #0]
 80055a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80057d0 <_dtoa_r+0x2f0>
 80055aa:	f000 bd40 	b.w	800602e <_dtoa_r+0xb4e>
 80055ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80055b2:	aa14      	add	r2, sp, #80	@ 0x50
 80055b4:	a915      	add	r1, sp, #84	@ 0x54
 80055b6:	4648      	mov	r0, r9
 80055b8:	f001 f984 	bl	80068c4 <__d2b>
 80055bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80055c0:	9002      	str	r0, [sp, #8]
 80055c2:	2e00      	cmp	r6, #0
 80055c4:	d078      	beq.n	80056b8 <_dtoa_r+0x1d8>
 80055c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80055cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80055d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80055d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80055dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80055e0:	4619      	mov	r1, r3
 80055e2:	2200      	movs	r2, #0
 80055e4:	4b76      	ldr	r3, [pc, #472]	@ (80057c0 <_dtoa_r+0x2e0>)
 80055e6:	f7fa fe4f 	bl	8000288 <__aeabi_dsub>
 80055ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8005798 <_dtoa_r+0x2b8>)
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f7fb f802 	bl	80005f8 <__aeabi_dmul>
 80055f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80057a0 <_dtoa_r+0x2c0>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	f7fa fe47 	bl	800028c <__adddf3>
 80055fe:	4604      	mov	r4, r0
 8005600:	4630      	mov	r0, r6
 8005602:	460d      	mov	r5, r1
 8005604:	f7fa ff8e 	bl	8000524 <__aeabi_i2d>
 8005608:	a367      	add	r3, pc, #412	@ (adr r3, 80057a8 <_dtoa_r+0x2c8>)
 800560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560e:	f7fa fff3 	bl	80005f8 <__aeabi_dmul>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4620      	mov	r0, r4
 8005618:	4629      	mov	r1, r5
 800561a:	f7fa fe37 	bl	800028c <__adddf3>
 800561e:	4604      	mov	r4, r0
 8005620:	460d      	mov	r5, r1
 8005622:	f7fb fa99 	bl	8000b58 <__aeabi_d2iz>
 8005626:	2200      	movs	r2, #0
 8005628:	4607      	mov	r7, r0
 800562a:	2300      	movs	r3, #0
 800562c:	4620      	mov	r0, r4
 800562e:	4629      	mov	r1, r5
 8005630:	f7fb fa54 	bl	8000adc <__aeabi_dcmplt>
 8005634:	b140      	cbz	r0, 8005648 <_dtoa_r+0x168>
 8005636:	4638      	mov	r0, r7
 8005638:	f7fa ff74 	bl	8000524 <__aeabi_i2d>
 800563c:	4622      	mov	r2, r4
 800563e:	462b      	mov	r3, r5
 8005640:	f7fb fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8005644:	b900      	cbnz	r0, 8005648 <_dtoa_r+0x168>
 8005646:	3f01      	subs	r7, #1
 8005648:	2f16      	cmp	r7, #22
 800564a:	d852      	bhi.n	80056f2 <_dtoa_r+0x212>
 800564c:	4b5d      	ldr	r3, [pc, #372]	@ (80057c4 <_dtoa_r+0x2e4>)
 800564e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005656:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800565a:	f7fb fa3f 	bl	8000adc <__aeabi_dcmplt>
 800565e:	2800      	cmp	r0, #0
 8005660:	d049      	beq.n	80056f6 <_dtoa_r+0x216>
 8005662:	3f01      	subs	r7, #1
 8005664:	2300      	movs	r3, #0
 8005666:	9310      	str	r3, [sp, #64]	@ 0x40
 8005668:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800566a:	1b9b      	subs	r3, r3, r6
 800566c:	1e5a      	subs	r2, r3, #1
 800566e:	bf45      	ittet	mi
 8005670:	f1c3 0301 	rsbmi	r3, r3, #1
 8005674:	9300      	strmi	r3, [sp, #0]
 8005676:	2300      	movpl	r3, #0
 8005678:	2300      	movmi	r3, #0
 800567a:	9206      	str	r2, [sp, #24]
 800567c:	bf54      	ite	pl
 800567e:	9300      	strpl	r3, [sp, #0]
 8005680:	9306      	strmi	r3, [sp, #24]
 8005682:	2f00      	cmp	r7, #0
 8005684:	db39      	blt.n	80056fa <_dtoa_r+0x21a>
 8005686:	9b06      	ldr	r3, [sp, #24]
 8005688:	970d      	str	r7, [sp, #52]	@ 0x34
 800568a:	443b      	add	r3, r7
 800568c:	9306      	str	r3, [sp, #24]
 800568e:	2300      	movs	r3, #0
 8005690:	9308      	str	r3, [sp, #32]
 8005692:	9b07      	ldr	r3, [sp, #28]
 8005694:	2b09      	cmp	r3, #9
 8005696:	d863      	bhi.n	8005760 <_dtoa_r+0x280>
 8005698:	2b05      	cmp	r3, #5
 800569a:	bfc4      	itt	gt
 800569c:	3b04      	subgt	r3, #4
 800569e:	9307      	strgt	r3, [sp, #28]
 80056a0:	9b07      	ldr	r3, [sp, #28]
 80056a2:	f1a3 0302 	sub.w	r3, r3, #2
 80056a6:	bfcc      	ite	gt
 80056a8:	2400      	movgt	r4, #0
 80056aa:	2401      	movle	r4, #1
 80056ac:	2b03      	cmp	r3, #3
 80056ae:	d863      	bhi.n	8005778 <_dtoa_r+0x298>
 80056b0:	e8df f003 	tbb	[pc, r3]
 80056b4:	2b375452 	.word	0x2b375452
 80056b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80056bc:	441e      	add	r6, r3
 80056be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80056c2:	2b20      	cmp	r3, #32
 80056c4:	bfc1      	itttt	gt
 80056c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80056ca:	409f      	lslgt	r7, r3
 80056cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80056d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80056d4:	bfd6      	itet	le
 80056d6:	f1c3 0320 	rsble	r3, r3, #32
 80056da:	ea47 0003 	orrgt.w	r0, r7, r3
 80056de:	fa04 f003 	lslle.w	r0, r4, r3
 80056e2:	f7fa ff0f 	bl	8000504 <__aeabi_ui2d>
 80056e6:	2201      	movs	r2, #1
 80056e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80056ec:	3e01      	subs	r6, #1
 80056ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80056f0:	e776      	b.n	80055e0 <_dtoa_r+0x100>
 80056f2:	2301      	movs	r3, #1
 80056f4:	e7b7      	b.n	8005666 <_dtoa_r+0x186>
 80056f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80056f8:	e7b6      	b.n	8005668 <_dtoa_r+0x188>
 80056fa:	9b00      	ldr	r3, [sp, #0]
 80056fc:	1bdb      	subs	r3, r3, r7
 80056fe:	9300      	str	r3, [sp, #0]
 8005700:	427b      	negs	r3, r7
 8005702:	9308      	str	r3, [sp, #32]
 8005704:	2300      	movs	r3, #0
 8005706:	930d      	str	r3, [sp, #52]	@ 0x34
 8005708:	e7c3      	b.n	8005692 <_dtoa_r+0x1b2>
 800570a:	2301      	movs	r3, #1
 800570c:	9309      	str	r3, [sp, #36]	@ 0x24
 800570e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005710:	eb07 0b03 	add.w	fp, r7, r3
 8005714:	f10b 0301 	add.w	r3, fp, #1
 8005718:	2b01      	cmp	r3, #1
 800571a:	9303      	str	r3, [sp, #12]
 800571c:	bfb8      	it	lt
 800571e:	2301      	movlt	r3, #1
 8005720:	e006      	b.n	8005730 <_dtoa_r+0x250>
 8005722:	2301      	movs	r3, #1
 8005724:	9309      	str	r3, [sp, #36]	@ 0x24
 8005726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005728:	2b00      	cmp	r3, #0
 800572a:	dd28      	ble.n	800577e <_dtoa_r+0x29e>
 800572c:	469b      	mov	fp, r3
 800572e:	9303      	str	r3, [sp, #12]
 8005730:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005734:	2100      	movs	r1, #0
 8005736:	2204      	movs	r2, #4
 8005738:	f102 0514 	add.w	r5, r2, #20
 800573c:	429d      	cmp	r5, r3
 800573e:	d926      	bls.n	800578e <_dtoa_r+0x2ae>
 8005740:	6041      	str	r1, [r0, #4]
 8005742:	4648      	mov	r0, r9
 8005744:	f000 fd9c 	bl	8006280 <_Balloc>
 8005748:	4682      	mov	sl, r0
 800574a:	2800      	cmp	r0, #0
 800574c:	d142      	bne.n	80057d4 <_dtoa_r+0x2f4>
 800574e:	4b1e      	ldr	r3, [pc, #120]	@ (80057c8 <_dtoa_r+0x2e8>)
 8005750:	4602      	mov	r2, r0
 8005752:	f240 11af 	movw	r1, #431	@ 0x1af
 8005756:	e6da      	b.n	800550e <_dtoa_r+0x2e>
 8005758:	2300      	movs	r3, #0
 800575a:	e7e3      	b.n	8005724 <_dtoa_r+0x244>
 800575c:	2300      	movs	r3, #0
 800575e:	e7d5      	b.n	800570c <_dtoa_r+0x22c>
 8005760:	2401      	movs	r4, #1
 8005762:	2300      	movs	r3, #0
 8005764:	9307      	str	r3, [sp, #28]
 8005766:	9409      	str	r4, [sp, #36]	@ 0x24
 8005768:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800576c:	2200      	movs	r2, #0
 800576e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005772:	2312      	movs	r3, #18
 8005774:	920c      	str	r2, [sp, #48]	@ 0x30
 8005776:	e7db      	b.n	8005730 <_dtoa_r+0x250>
 8005778:	2301      	movs	r3, #1
 800577a:	9309      	str	r3, [sp, #36]	@ 0x24
 800577c:	e7f4      	b.n	8005768 <_dtoa_r+0x288>
 800577e:	f04f 0b01 	mov.w	fp, #1
 8005782:	f8cd b00c 	str.w	fp, [sp, #12]
 8005786:	465b      	mov	r3, fp
 8005788:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800578c:	e7d0      	b.n	8005730 <_dtoa_r+0x250>
 800578e:	3101      	adds	r1, #1
 8005790:	0052      	lsls	r2, r2, #1
 8005792:	e7d1      	b.n	8005738 <_dtoa_r+0x258>
 8005794:	f3af 8000 	nop.w
 8005798:	636f4361 	.word	0x636f4361
 800579c:	3fd287a7 	.word	0x3fd287a7
 80057a0:	8b60c8b3 	.word	0x8b60c8b3
 80057a4:	3fc68a28 	.word	0x3fc68a28
 80057a8:	509f79fb 	.word	0x509f79fb
 80057ac:	3fd34413 	.word	0x3fd34413
 80057b0:	08007c45 	.word	0x08007c45
 80057b4:	08007c5c 	.word	0x08007c5c
 80057b8:	7ff00000 	.word	0x7ff00000
 80057bc:	08007c15 	.word	0x08007c15
 80057c0:	3ff80000 	.word	0x3ff80000
 80057c4:	08007db0 	.word	0x08007db0
 80057c8:	08007cb4 	.word	0x08007cb4
 80057cc:	08007c41 	.word	0x08007c41
 80057d0:	08007c14 	.word	0x08007c14
 80057d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80057d8:	6018      	str	r0, [r3, #0]
 80057da:	9b03      	ldr	r3, [sp, #12]
 80057dc:	2b0e      	cmp	r3, #14
 80057de:	f200 80a1 	bhi.w	8005924 <_dtoa_r+0x444>
 80057e2:	2c00      	cmp	r4, #0
 80057e4:	f000 809e 	beq.w	8005924 <_dtoa_r+0x444>
 80057e8:	2f00      	cmp	r7, #0
 80057ea:	dd33      	ble.n	8005854 <_dtoa_r+0x374>
 80057ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005a60 <_dtoa_r+0x580>)
 80057ee:	f007 020f 	and.w	r2, r7, #15
 80057f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057f6:	ed93 7b00 	vldr	d7, [r3]
 80057fa:	05f8      	lsls	r0, r7, #23
 80057fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005800:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005804:	d516      	bpl.n	8005834 <_dtoa_r+0x354>
 8005806:	4b97      	ldr	r3, [pc, #604]	@ (8005a64 <_dtoa_r+0x584>)
 8005808:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800580c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005810:	f7fb f81c 	bl	800084c <__aeabi_ddiv>
 8005814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005818:	f004 040f 	and.w	r4, r4, #15
 800581c:	2603      	movs	r6, #3
 800581e:	4d91      	ldr	r5, [pc, #580]	@ (8005a64 <_dtoa_r+0x584>)
 8005820:	b954      	cbnz	r4, 8005838 <_dtoa_r+0x358>
 8005822:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800582a:	f7fb f80f 	bl	800084c <__aeabi_ddiv>
 800582e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005832:	e028      	b.n	8005886 <_dtoa_r+0x3a6>
 8005834:	2602      	movs	r6, #2
 8005836:	e7f2      	b.n	800581e <_dtoa_r+0x33e>
 8005838:	07e1      	lsls	r1, r4, #31
 800583a:	d508      	bpl.n	800584e <_dtoa_r+0x36e>
 800583c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005840:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005844:	f7fa fed8 	bl	80005f8 <__aeabi_dmul>
 8005848:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800584c:	3601      	adds	r6, #1
 800584e:	1064      	asrs	r4, r4, #1
 8005850:	3508      	adds	r5, #8
 8005852:	e7e5      	b.n	8005820 <_dtoa_r+0x340>
 8005854:	f000 80af 	beq.w	80059b6 <_dtoa_r+0x4d6>
 8005858:	427c      	negs	r4, r7
 800585a:	4b81      	ldr	r3, [pc, #516]	@ (8005a60 <_dtoa_r+0x580>)
 800585c:	4d81      	ldr	r5, [pc, #516]	@ (8005a64 <_dtoa_r+0x584>)
 800585e:	f004 020f 	and.w	r2, r4, #15
 8005862:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800586e:	f7fa fec3 	bl	80005f8 <__aeabi_dmul>
 8005872:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005876:	1124      	asrs	r4, r4, #4
 8005878:	2300      	movs	r3, #0
 800587a:	2602      	movs	r6, #2
 800587c:	2c00      	cmp	r4, #0
 800587e:	f040 808f 	bne.w	80059a0 <_dtoa_r+0x4c0>
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1d3      	bne.n	800582e <_dtoa_r+0x34e>
 8005886:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005888:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8094 	beq.w	80059ba <_dtoa_r+0x4da>
 8005892:	4b75      	ldr	r3, [pc, #468]	@ (8005a68 <_dtoa_r+0x588>)
 8005894:	2200      	movs	r2, #0
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fb f91f 	bl	8000adc <__aeabi_dcmplt>
 800589e:	2800      	cmp	r0, #0
 80058a0:	f000 808b 	beq.w	80059ba <_dtoa_r+0x4da>
 80058a4:	9b03      	ldr	r3, [sp, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f000 8087 	beq.w	80059ba <_dtoa_r+0x4da>
 80058ac:	f1bb 0f00 	cmp.w	fp, #0
 80058b0:	dd34      	ble.n	800591c <_dtoa_r+0x43c>
 80058b2:	4620      	mov	r0, r4
 80058b4:	4b6d      	ldr	r3, [pc, #436]	@ (8005a6c <_dtoa_r+0x58c>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	4629      	mov	r1, r5
 80058ba:	f7fa fe9d 	bl	80005f8 <__aeabi_dmul>
 80058be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058c2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80058c6:	3601      	adds	r6, #1
 80058c8:	465c      	mov	r4, fp
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7fa fe2a 	bl	8000524 <__aeabi_i2d>
 80058d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058d4:	f7fa fe90 	bl	80005f8 <__aeabi_dmul>
 80058d8:	4b65      	ldr	r3, [pc, #404]	@ (8005a70 <_dtoa_r+0x590>)
 80058da:	2200      	movs	r2, #0
 80058dc:	f7fa fcd6 	bl	800028c <__adddf3>
 80058e0:	4605      	mov	r5, r0
 80058e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d16a      	bne.n	80059c0 <_dtoa_r+0x4e0>
 80058ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058ee:	4b61      	ldr	r3, [pc, #388]	@ (8005a74 <_dtoa_r+0x594>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	f7fa fcc9 	bl	8000288 <__aeabi_dsub>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058fe:	462a      	mov	r2, r5
 8005900:	4633      	mov	r3, r6
 8005902:	f7fb f909 	bl	8000b18 <__aeabi_dcmpgt>
 8005906:	2800      	cmp	r0, #0
 8005908:	f040 8298 	bne.w	8005e3c <_dtoa_r+0x95c>
 800590c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005910:	462a      	mov	r2, r5
 8005912:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005916:	f7fb f8e1 	bl	8000adc <__aeabi_dcmplt>
 800591a:	bb38      	cbnz	r0, 800596c <_dtoa_r+0x48c>
 800591c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005920:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005924:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005926:	2b00      	cmp	r3, #0
 8005928:	f2c0 8157 	blt.w	8005bda <_dtoa_r+0x6fa>
 800592c:	2f0e      	cmp	r7, #14
 800592e:	f300 8154 	bgt.w	8005bda <_dtoa_r+0x6fa>
 8005932:	4b4b      	ldr	r3, [pc, #300]	@ (8005a60 <_dtoa_r+0x580>)
 8005934:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005938:	ed93 7b00 	vldr	d7, [r3]
 800593c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800593e:	2b00      	cmp	r3, #0
 8005940:	ed8d 7b00 	vstr	d7, [sp]
 8005944:	f280 80e5 	bge.w	8005b12 <_dtoa_r+0x632>
 8005948:	9b03      	ldr	r3, [sp, #12]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f300 80e1 	bgt.w	8005b12 <_dtoa_r+0x632>
 8005950:	d10c      	bne.n	800596c <_dtoa_r+0x48c>
 8005952:	4b48      	ldr	r3, [pc, #288]	@ (8005a74 <_dtoa_r+0x594>)
 8005954:	2200      	movs	r2, #0
 8005956:	ec51 0b17 	vmov	r0, r1, d7
 800595a:	f7fa fe4d 	bl	80005f8 <__aeabi_dmul>
 800595e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005962:	f7fb f8cf 	bl	8000b04 <__aeabi_dcmpge>
 8005966:	2800      	cmp	r0, #0
 8005968:	f000 8266 	beq.w	8005e38 <_dtoa_r+0x958>
 800596c:	2400      	movs	r4, #0
 800596e:	4625      	mov	r5, r4
 8005970:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005972:	4656      	mov	r6, sl
 8005974:	ea6f 0803 	mvn.w	r8, r3
 8005978:	2700      	movs	r7, #0
 800597a:	4621      	mov	r1, r4
 800597c:	4648      	mov	r0, r9
 800597e:	f000 fcbf 	bl	8006300 <_Bfree>
 8005982:	2d00      	cmp	r5, #0
 8005984:	f000 80bd 	beq.w	8005b02 <_dtoa_r+0x622>
 8005988:	b12f      	cbz	r7, 8005996 <_dtoa_r+0x4b6>
 800598a:	42af      	cmp	r7, r5
 800598c:	d003      	beq.n	8005996 <_dtoa_r+0x4b6>
 800598e:	4639      	mov	r1, r7
 8005990:	4648      	mov	r0, r9
 8005992:	f000 fcb5 	bl	8006300 <_Bfree>
 8005996:	4629      	mov	r1, r5
 8005998:	4648      	mov	r0, r9
 800599a:	f000 fcb1 	bl	8006300 <_Bfree>
 800599e:	e0b0      	b.n	8005b02 <_dtoa_r+0x622>
 80059a0:	07e2      	lsls	r2, r4, #31
 80059a2:	d505      	bpl.n	80059b0 <_dtoa_r+0x4d0>
 80059a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059a8:	f7fa fe26 	bl	80005f8 <__aeabi_dmul>
 80059ac:	3601      	adds	r6, #1
 80059ae:	2301      	movs	r3, #1
 80059b0:	1064      	asrs	r4, r4, #1
 80059b2:	3508      	adds	r5, #8
 80059b4:	e762      	b.n	800587c <_dtoa_r+0x39c>
 80059b6:	2602      	movs	r6, #2
 80059b8:	e765      	b.n	8005886 <_dtoa_r+0x3a6>
 80059ba:	9c03      	ldr	r4, [sp, #12]
 80059bc:	46b8      	mov	r8, r7
 80059be:	e784      	b.n	80058ca <_dtoa_r+0x3ea>
 80059c0:	4b27      	ldr	r3, [pc, #156]	@ (8005a60 <_dtoa_r+0x580>)
 80059c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80059c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80059cc:	4454      	add	r4, sl
 80059ce:	2900      	cmp	r1, #0
 80059d0:	d054      	beq.n	8005a7c <_dtoa_r+0x59c>
 80059d2:	4929      	ldr	r1, [pc, #164]	@ (8005a78 <_dtoa_r+0x598>)
 80059d4:	2000      	movs	r0, #0
 80059d6:	f7fa ff39 	bl	800084c <__aeabi_ddiv>
 80059da:	4633      	mov	r3, r6
 80059dc:	462a      	mov	r2, r5
 80059de:	f7fa fc53 	bl	8000288 <__aeabi_dsub>
 80059e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80059e6:	4656      	mov	r6, sl
 80059e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059ec:	f7fb f8b4 	bl	8000b58 <__aeabi_d2iz>
 80059f0:	4605      	mov	r5, r0
 80059f2:	f7fa fd97 	bl	8000524 <__aeabi_i2d>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059fe:	f7fa fc43 	bl	8000288 <__aeabi_dsub>
 8005a02:	3530      	adds	r5, #48	@ 0x30
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a0c:	f806 5b01 	strb.w	r5, [r6], #1
 8005a10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a14:	f7fb f862 	bl	8000adc <__aeabi_dcmplt>
 8005a18:	2800      	cmp	r0, #0
 8005a1a:	d172      	bne.n	8005b02 <_dtoa_r+0x622>
 8005a1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a20:	4911      	ldr	r1, [pc, #68]	@ (8005a68 <_dtoa_r+0x588>)
 8005a22:	2000      	movs	r0, #0
 8005a24:	f7fa fc30 	bl	8000288 <__aeabi_dsub>
 8005a28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a2c:	f7fb f856 	bl	8000adc <__aeabi_dcmplt>
 8005a30:	2800      	cmp	r0, #0
 8005a32:	f040 80b4 	bne.w	8005b9e <_dtoa_r+0x6be>
 8005a36:	42a6      	cmp	r6, r4
 8005a38:	f43f af70 	beq.w	800591c <_dtoa_r+0x43c>
 8005a3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a40:	4b0a      	ldr	r3, [pc, #40]	@ (8005a6c <_dtoa_r+0x58c>)
 8005a42:	2200      	movs	r2, #0
 8005a44:	f7fa fdd8 	bl	80005f8 <__aeabi_dmul>
 8005a48:	4b08      	ldr	r3, [pc, #32]	@ (8005a6c <_dtoa_r+0x58c>)
 8005a4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a4e:	2200      	movs	r2, #0
 8005a50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a54:	f7fa fdd0 	bl	80005f8 <__aeabi_dmul>
 8005a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a5c:	e7c4      	b.n	80059e8 <_dtoa_r+0x508>
 8005a5e:	bf00      	nop
 8005a60:	08007db0 	.word	0x08007db0
 8005a64:	08007d88 	.word	0x08007d88
 8005a68:	3ff00000 	.word	0x3ff00000
 8005a6c:	40240000 	.word	0x40240000
 8005a70:	401c0000 	.word	0x401c0000
 8005a74:	40140000 	.word	0x40140000
 8005a78:	3fe00000 	.word	0x3fe00000
 8005a7c:	4631      	mov	r1, r6
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f7fa fdba 	bl	80005f8 <__aeabi_dmul>
 8005a84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005a8a:	4656      	mov	r6, sl
 8005a8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a90:	f7fb f862 	bl	8000b58 <__aeabi_d2iz>
 8005a94:	4605      	mov	r5, r0
 8005a96:	f7fa fd45 	bl	8000524 <__aeabi_i2d>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aa2:	f7fa fbf1 	bl	8000288 <__aeabi_dsub>
 8005aa6:	3530      	adds	r5, #48	@ 0x30
 8005aa8:	f806 5b01 	strb.w	r5, [r6], #1
 8005aac:	4602      	mov	r2, r0
 8005aae:	460b      	mov	r3, r1
 8005ab0:	42a6      	cmp	r6, r4
 8005ab2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	d124      	bne.n	8005b06 <_dtoa_r+0x626>
 8005abc:	4baf      	ldr	r3, [pc, #700]	@ (8005d7c <_dtoa_r+0x89c>)
 8005abe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005ac2:	f7fa fbe3 	bl	800028c <__adddf3>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ace:	f7fb f823 	bl	8000b18 <__aeabi_dcmpgt>
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	d163      	bne.n	8005b9e <_dtoa_r+0x6be>
 8005ad6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005ada:	49a8      	ldr	r1, [pc, #672]	@ (8005d7c <_dtoa_r+0x89c>)
 8005adc:	2000      	movs	r0, #0
 8005ade:	f7fa fbd3 	bl	8000288 <__aeabi_dsub>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aea:	f7fa fff7 	bl	8000adc <__aeabi_dcmplt>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f43f af14 	beq.w	800591c <_dtoa_r+0x43c>
 8005af4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005af6:	1e73      	subs	r3, r6, #1
 8005af8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005afa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005afe:	2b30      	cmp	r3, #48	@ 0x30
 8005b00:	d0f8      	beq.n	8005af4 <_dtoa_r+0x614>
 8005b02:	4647      	mov	r7, r8
 8005b04:	e03b      	b.n	8005b7e <_dtoa_r+0x69e>
 8005b06:	4b9e      	ldr	r3, [pc, #632]	@ (8005d80 <_dtoa_r+0x8a0>)
 8005b08:	f7fa fd76 	bl	80005f8 <__aeabi_dmul>
 8005b0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b10:	e7bc      	b.n	8005a8c <_dtoa_r+0x5ac>
 8005b12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005b16:	4656      	mov	r6, sl
 8005b18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa fe94 	bl	800084c <__aeabi_ddiv>
 8005b24:	f7fb f818 	bl	8000b58 <__aeabi_d2iz>
 8005b28:	4680      	mov	r8, r0
 8005b2a:	f7fa fcfb 	bl	8000524 <__aeabi_i2d>
 8005b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b32:	f7fa fd61 	bl	80005f8 <__aeabi_dmul>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b42:	f7fa fba1 	bl	8000288 <__aeabi_dsub>
 8005b46:	f806 4b01 	strb.w	r4, [r6], #1
 8005b4a:	9d03      	ldr	r5, [sp, #12]
 8005b4c:	eba6 040a 	sub.w	r4, r6, sl
 8005b50:	42a5      	cmp	r5, r4
 8005b52:	4602      	mov	r2, r0
 8005b54:	460b      	mov	r3, r1
 8005b56:	d133      	bne.n	8005bc0 <_dtoa_r+0x6e0>
 8005b58:	f7fa fb98 	bl	800028c <__adddf3>
 8005b5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b60:	4604      	mov	r4, r0
 8005b62:	460d      	mov	r5, r1
 8005b64:	f7fa ffd8 	bl	8000b18 <__aeabi_dcmpgt>
 8005b68:	b9c0      	cbnz	r0, 8005b9c <_dtoa_r+0x6bc>
 8005b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b76:	b110      	cbz	r0, 8005b7e <_dtoa_r+0x69e>
 8005b78:	f018 0f01 	tst.w	r8, #1
 8005b7c:	d10e      	bne.n	8005b9c <_dtoa_r+0x6bc>
 8005b7e:	9902      	ldr	r1, [sp, #8]
 8005b80:	4648      	mov	r0, r9
 8005b82:	f000 fbbd 	bl	8006300 <_Bfree>
 8005b86:	2300      	movs	r3, #0
 8005b88:	7033      	strb	r3, [r6, #0]
 8005b8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005b8c:	3701      	adds	r7, #1
 8005b8e:	601f      	str	r7, [r3, #0]
 8005b90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f000 824b 	beq.w	800602e <_dtoa_r+0xb4e>
 8005b98:	601e      	str	r6, [r3, #0]
 8005b9a:	e248      	b.n	800602e <_dtoa_r+0xb4e>
 8005b9c:	46b8      	mov	r8, r7
 8005b9e:	4633      	mov	r3, r6
 8005ba0:	461e      	mov	r6, r3
 8005ba2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ba6:	2a39      	cmp	r2, #57	@ 0x39
 8005ba8:	d106      	bne.n	8005bb8 <_dtoa_r+0x6d8>
 8005baa:	459a      	cmp	sl, r3
 8005bac:	d1f8      	bne.n	8005ba0 <_dtoa_r+0x6c0>
 8005bae:	2230      	movs	r2, #48	@ 0x30
 8005bb0:	f108 0801 	add.w	r8, r8, #1
 8005bb4:	f88a 2000 	strb.w	r2, [sl]
 8005bb8:	781a      	ldrb	r2, [r3, #0]
 8005bba:	3201      	adds	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]
 8005bbe:	e7a0      	b.n	8005b02 <_dtoa_r+0x622>
 8005bc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005d80 <_dtoa_r+0x8a0>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f7fa fd18 	bl	80005f8 <__aeabi_dmul>
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4604      	mov	r4, r0
 8005bce:	460d      	mov	r5, r1
 8005bd0:	f7fa ff7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	d09f      	beq.n	8005b18 <_dtoa_r+0x638>
 8005bd8:	e7d1      	b.n	8005b7e <_dtoa_r+0x69e>
 8005bda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bdc:	2a00      	cmp	r2, #0
 8005bde:	f000 80ea 	beq.w	8005db6 <_dtoa_r+0x8d6>
 8005be2:	9a07      	ldr	r2, [sp, #28]
 8005be4:	2a01      	cmp	r2, #1
 8005be6:	f300 80cd 	bgt.w	8005d84 <_dtoa_r+0x8a4>
 8005bea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	f000 80c1 	beq.w	8005d74 <_dtoa_r+0x894>
 8005bf2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005bf6:	9c08      	ldr	r4, [sp, #32]
 8005bf8:	9e00      	ldr	r6, [sp, #0]
 8005bfa:	9a00      	ldr	r2, [sp, #0]
 8005bfc:	441a      	add	r2, r3
 8005bfe:	9200      	str	r2, [sp, #0]
 8005c00:	9a06      	ldr	r2, [sp, #24]
 8005c02:	2101      	movs	r1, #1
 8005c04:	441a      	add	r2, r3
 8005c06:	4648      	mov	r0, r9
 8005c08:	9206      	str	r2, [sp, #24]
 8005c0a:	f000 fc2d 	bl	8006468 <__i2b>
 8005c0e:	4605      	mov	r5, r0
 8005c10:	b166      	cbz	r6, 8005c2c <_dtoa_r+0x74c>
 8005c12:	9b06      	ldr	r3, [sp, #24]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd09      	ble.n	8005c2c <_dtoa_r+0x74c>
 8005c18:	42b3      	cmp	r3, r6
 8005c1a:	9a00      	ldr	r2, [sp, #0]
 8005c1c:	bfa8      	it	ge
 8005c1e:	4633      	movge	r3, r6
 8005c20:	1ad2      	subs	r2, r2, r3
 8005c22:	9200      	str	r2, [sp, #0]
 8005c24:	9a06      	ldr	r2, [sp, #24]
 8005c26:	1af6      	subs	r6, r6, r3
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	9306      	str	r3, [sp, #24]
 8005c2c:	9b08      	ldr	r3, [sp, #32]
 8005c2e:	b30b      	cbz	r3, 8005c74 <_dtoa_r+0x794>
 8005c30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f000 80c6 	beq.w	8005dc4 <_dtoa_r+0x8e4>
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	f000 80c0 	beq.w	8005dbe <_dtoa_r+0x8de>
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4622      	mov	r2, r4
 8005c42:	4648      	mov	r0, r9
 8005c44:	f000 fcc8 	bl	80065d8 <__pow5mult>
 8005c48:	9a02      	ldr	r2, [sp, #8]
 8005c4a:	4601      	mov	r1, r0
 8005c4c:	4605      	mov	r5, r0
 8005c4e:	4648      	mov	r0, r9
 8005c50:	f000 fc20 	bl	8006494 <__multiply>
 8005c54:	9902      	ldr	r1, [sp, #8]
 8005c56:	4680      	mov	r8, r0
 8005c58:	4648      	mov	r0, r9
 8005c5a:	f000 fb51 	bl	8006300 <_Bfree>
 8005c5e:	9b08      	ldr	r3, [sp, #32]
 8005c60:	1b1b      	subs	r3, r3, r4
 8005c62:	9308      	str	r3, [sp, #32]
 8005c64:	f000 80b1 	beq.w	8005dca <_dtoa_r+0x8ea>
 8005c68:	9a08      	ldr	r2, [sp, #32]
 8005c6a:	4641      	mov	r1, r8
 8005c6c:	4648      	mov	r0, r9
 8005c6e:	f000 fcb3 	bl	80065d8 <__pow5mult>
 8005c72:	9002      	str	r0, [sp, #8]
 8005c74:	2101      	movs	r1, #1
 8005c76:	4648      	mov	r0, r9
 8005c78:	f000 fbf6 	bl	8006468 <__i2b>
 8005c7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005c7e:	4604      	mov	r4, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	f000 81d8 	beq.w	8006036 <_dtoa_r+0xb56>
 8005c86:	461a      	mov	r2, r3
 8005c88:	4601      	mov	r1, r0
 8005c8a:	4648      	mov	r0, r9
 8005c8c:	f000 fca4 	bl	80065d8 <__pow5mult>
 8005c90:	9b07      	ldr	r3, [sp, #28]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	4604      	mov	r4, r0
 8005c96:	f300 809f 	bgt.w	8005dd8 <_dtoa_r+0x8f8>
 8005c9a:	9b04      	ldr	r3, [sp, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f040 8097 	bne.w	8005dd0 <_dtoa_r+0x8f0>
 8005ca2:	9b05      	ldr	r3, [sp, #20]
 8005ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f040 8093 	bne.w	8005dd4 <_dtoa_r+0x8f4>
 8005cae:	9b05      	ldr	r3, [sp, #20]
 8005cb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005cb4:	0d1b      	lsrs	r3, r3, #20
 8005cb6:	051b      	lsls	r3, r3, #20
 8005cb8:	b133      	cbz	r3, 8005cc8 <_dtoa_r+0x7e8>
 8005cba:	9b00      	ldr	r3, [sp, #0]
 8005cbc:	3301      	adds	r3, #1
 8005cbe:	9300      	str	r3, [sp, #0]
 8005cc0:	9b06      	ldr	r3, [sp, #24]
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	9306      	str	r3, [sp, #24]
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	9308      	str	r3, [sp, #32]
 8005cca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 81b8 	beq.w	8006042 <_dtoa_r+0xb62>
 8005cd2:	6923      	ldr	r3, [r4, #16]
 8005cd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005cd8:	6918      	ldr	r0, [r3, #16]
 8005cda:	f000 fb79 	bl	80063d0 <__hi0bits>
 8005cde:	f1c0 0020 	rsb	r0, r0, #32
 8005ce2:	9b06      	ldr	r3, [sp, #24]
 8005ce4:	4418      	add	r0, r3
 8005ce6:	f010 001f 	ands.w	r0, r0, #31
 8005cea:	f000 8082 	beq.w	8005df2 <_dtoa_r+0x912>
 8005cee:	f1c0 0320 	rsb	r3, r0, #32
 8005cf2:	2b04      	cmp	r3, #4
 8005cf4:	dd73      	ble.n	8005dde <_dtoa_r+0x8fe>
 8005cf6:	9b00      	ldr	r3, [sp, #0]
 8005cf8:	f1c0 001c 	rsb	r0, r0, #28
 8005cfc:	4403      	add	r3, r0
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	9b06      	ldr	r3, [sp, #24]
 8005d02:	4403      	add	r3, r0
 8005d04:	4406      	add	r6, r0
 8005d06:	9306      	str	r3, [sp, #24]
 8005d08:	9b00      	ldr	r3, [sp, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	dd05      	ble.n	8005d1a <_dtoa_r+0x83a>
 8005d0e:	9902      	ldr	r1, [sp, #8]
 8005d10:	461a      	mov	r2, r3
 8005d12:	4648      	mov	r0, r9
 8005d14:	f000 fcba 	bl	800668c <__lshift>
 8005d18:	9002      	str	r0, [sp, #8]
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dd05      	ble.n	8005d2c <_dtoa_r+0x84c>
 8005d20:	4621      	mov	r1, r4
 8005d22:	461a      	mov	r2, r3
 8005d24:	4648      	mov	r0, r9
 8005d26:	f000 fcb1 	bl	800668c <__lshift>
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d061      	beq.n	8005df6 <_dtoa_r+0x916>
 8005d32:	9802      	ldr	r0, [sp, #8]
 8005d34:	4621      	mov	r1, r4
 8005d36:	f000 fd15 	bl	8006764 <__mcmp>
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	da5b      	bge.n	8005df6 <_dtoa_r+0x916>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9902      	ldr	r1, [sp, #8]
 8005d42:	220a      	movs	r2, #10
 8005d44:	4648      	mov	r0, r9
 8005d46:	f000 fafd 	bl	8006344 <__multadd>
 8005d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d4c:	9002      	str	r0, [sp, #8]
 8005d4e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	f000 8177 	beq.w	8006046 <_dtoa_r+0xb66>
 8005d58:	4629      	mov	r1, r5
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	220a      	movs	r2, #10
 8005d5e:	4648      	mov	r0, r9
 8005d60:	f000 faf0 	bl	8006344 <__multadd>
 8005d64:	f1bb 0f00 	cmp.w	fp, #0
 8005d68:	4605      	mov	r5, r0
 8005d6a:	dc6f      	bgt.n	8005e4c <_dtoa_r+0x96c>
 8005d6c:	9b07      	ldr	r3, [sp, #28]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	dc49      	bgt.n	8005e06 <_dtoa_r+0x926>
 8005d72:	e06b      	b.n	8005e4c <_dtoa_r+0x96c>
 8005d74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005d76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005d7a:	e73c      	b.n	8005bf6 <_dtoa_r+0x716>
 8005d7c:	3fe00000 	.word	0x3fe00000
 8005d80:	40240000 	.word	0x40240000
 8005d84:	9b03      	ldr	r3, [sp, #12]
 8005d86:	1e5c      	subs	r4, r3, #1
 8005d88:	9b08      	ldr	r3, [sp, #32]
 8005d8a:	42a3      	cmp	r3, r4
 8005d8c:	db09      	blt.n	8005da2 <_dtoa_r+0x8c2>
 8005d8e:	1b1c      	subs	r4, r3, r4
 8005d90:	9b03      	ldr	r3, [sp, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f6bf af30 	bge.w	8005bf8 <_dtoa_r+0x718>
 8005d98:	9b00      	ldr	r3, [sp, #0]
 8005d9a:	9a03      	ldr	r2, [sp, #12]
 8005d9c:	1a9e      	subs	r6, r3, r2
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e72b      	b.n	8005bfa <_dtoa_r+0x71a>
 8005da2:	9b08      	ldr	r3, [sp, #32]
 8005da4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005da6:	9408      	str	r4, [sp, #32]
 8005da8:	1ae3      	subs	r3, r4, r3
 8005daa:	441a      	add	r2, r3
 8005dac:	9e00      	ldr	r6, [sp, #0]
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005db2:	2400      	movs	r4, #0
 8005db4:	e721      	b.n	8005bfa <_dtoa_r+0x71a>
 8005db6:	9c08      	ldr	r4, [sp, #32]
 8005db8:	9e00      	ldr	r6, [sp, #0]
 8005dba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005dbc:	e728      	b.n	8005c10 <_dtoa_r+0x730>
 8005dbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005dc2:	e751      	b.n	8005c68 <_dtoa_r+0x788>
 8005dc4:	9a08      	ldr	r2, [sp, #32]
 8005dc6:	9902      	ldr	r1, [sp, #8]
 8005dc8:	e750      	b.n	8005c6c <_dtoa_r+0x78c>
 8005dca:	f8cd 8008 	str.w	r8, [sp, #8]
 8005dce:	e751      	b.n	8005c74 <_dtoa_r+0x794>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e779      	b.n	8005cc8 <_dtoa_r+0x7e8>
 8005dd4:	9b04      	ldr	r3, [sp, #16]
 8005dd6:	e777      	b.n	8005cc8 <_dtoa_r+0x7e8>
 8005dd8:	2300      	movs	r3, #0
 8005dda:	9308      	str	r3, [sp, #32]
 8005ddc:	e779      	b.n	8005cd2 <_dtoa_r+0x7f2>
 8005dde:	d093      	beq.n	8005d08 <_dtoa_r+0x828>
 8005de0:	9a00      	ldr	r2, [sp, #0]
 8005de2:	331c      	adds	r3, #28
 8005de4:	441a      	add	r2, r3
 8005de6:	9200      	str	r2, [sp, #0]
 8005de8:	9a06      	ldr	r2, [sp, #24]
 8005dea:	441a      	add	r2, r3
 8005dec:	441e      	add	r6, r3
 8005dee:	9206      	str	r2, [sp, #24]
 8005df0:	e78a      	b.n	8005d08 <_dtoa_r+0x828>
 8005df2:	4603      	mov	r3, r0
 8005df4:	e7f4      	b.n	8005de0 <_dtoa_r+0x900>
 8005df6:	9b03      	ldr	r3, [sp, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	46b8      	mov	r8, r7
 8005dfc:	dc20      	bgt.n	8005e40 <_dtoa_r+0x960>
 8005dfe:	469b      	mov	fp, r3
 8005e00:	9b07      	ldr	r3, [sp, #28]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	dd1e      	ble.n	8005e44 <_dtoa_r+0x964>
 8005e06:	f1bb 0f00 	cmp.w	fp, #0
 8005e0a:	f47f adb1 	bne.w	8005970 <_dtoa_r+0x490>
 8005e0e:	4621      	mov	r1, r4
 8005e10:	465b      	mov	r3, fp
 8005e12:	2205      	movs	r2, #5
 8005e14:	4648      	mov	r0, r9
 8005e16:	f000 fa95 	bl	8006344 <__multadd>
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	9802      	ldr	r0, [sp, #8]
 8005e20:	f000 fca0 	bl	8006764 <__mcmp>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	f77f ada3 	ble.w	8005970 <_dtoa_r+0x490>
 8005e2a:	4656      	mov	r6, sl
 8005e2c:	2331      	movs	r3, #49	@ 0x31
 8005e2e:	f806 3b01 	strb.w	r3, [r6], #1
 8005e32:	f108 0801 	add.w	r8, r8, #1
 8005e36:	e59f      	b.n	8005978 <_dtoa_r+0x498>
 8005e38:	9c03      	ldr	r4, [sp, #12]
 8005e3a:	46b8      	mov	r8, r7
 8005e3c:	4625      	mov	r5, r4
 8005e3e:	e7f4      	b.n	8005e2a <_dtoa_r+0x94a>
 8005e40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f000 8101 	beq.w	800604e <_dtoa_r+0xb6e>
 8005e4c:	2e00      	cmp	r6, #0
 8005e4e:	dd05      	ble.n	8005e5c <_dtoa_r+0x97c>
 8005e50:	4629      	mov	r1, r5
 8005e52:	4632      	mov	r2, r6
 8005e54:	4648      	mov	r0, r9
 8005e56:	f000 fc19 	bl	800668c <__lshift>
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	9b08      	ldr	r3, [sp, #32]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d05c      	beq.n	8005f1c <_dtoa_r+0xa3c>
 8005e62:	6869      	ldr	r1, [r5, #4]
 8005e64:	4648      	mov	r0, r9
 8005e66:	f000 fa0b 	bl	8006280 <_Balloc>
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	b928      	cbnz	r0, 8005e7a <_dtoa_r+0x99a>
 8005e6e:	4b82      	ldr	r3, [pc, #520]	@ (8006078 <_dtoa_r+0xb98>)
 8005e70:	4602      	mov	r2, r0
 8005e72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005e76:	f7ff bb4a 	b.w	800550e <_dtoa_r+0x2e>
 8005e7a:	692a      	ldr	r2, [r5, #16]
 8005e7c:	3202      	adds	r2, #2
 8005e7e:	0092      	lsls	r2, r2, #2
 8005e80:	f105 010c 	add.w	r1, r5, #12
 8005e84:	300c      	adds	r0, #12
 8005e86:	f7ff fa92 	bl	80053ae <memcpy>
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4648      	mov	r0, r9
 8005e90:	f000 fbfc 	bl	800668c <__lshift>
 8005e94:	f10a 0301 	add.w	r3, sl, #1
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	eb0a 030b 	add.w	r3, sl, fp
 8005e9e:	9308      	str	r3, [sp, #32]
 8005ea0:	9b04      	ldr	r3, [sp, #16]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	462f      	mov	r7, r5
 8005ea8:	9306      	str	r3, [sp, #24]
 8005eaa:	4605      	mov	r5, r0
 8005eac:	9b00      	ldr	r3, [sp, #0]
 8005eae:	9802      	ldr	r0, [sp, #8]
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005eb6:	f7ff fa88 	bl	80053ca <quorem>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	3330      	adds	r3, #48	@ 0x30
 8005ebe:	9003      	str	r0, [sp, #12]
 8005ec0:	4639      	mov	r1, r7
 8005ec2:	9802      	ldr	r0, [sp, #8]
 8005ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ec6:	f000 fc4d 	bl	8006764 <__mcmp>
 8005eca:	462a      	mov	r2, r5
 8005ecc:	9004      	str	r0, [sp, #16]
 8005ece:	4621      	mov	r1, r4
 8005ed0:	4648      	mov	r0, r9
 8005ed2:	f000 fc63 	bl	800679c <__mdiff>
 8005ed6:	68c2      	ldr	r2, [r0, #12]
 8005ed8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eda:	4606      	mov	r6, r0
 8005edc:	bb02      	cbnz	r2, 8005f20 <_dtoa_r+0xa40>
 8005ede:	4601      	mov	r1, r0
 8005ee0:	9802      	ldr	r0, [sp, #8]
 8005ee2:	f000 fc3f 	bl	8006764 <__mcmp>
 8005ee6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee8:	4602      	mov	r2, r0
 8005eea:	4631      	mov	r1, r6
 8005eec:	4648      	mov	r0, r9
 8005eee:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ef2:	f000 fa05 	bl	8006300 <_Bfree>
 8005ef6:	9b07      	ldr	r3, [sp, #28]
 8005ef8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005efa:	9e00      	ldr	r6, [sp, #0]
 8005efc:	ea42 0103 	orr.w	r1, r2, r3
 8005f00:	9b06      	ldr	r3, [sp, #24]
 8005f02:	4319      	orrs	r1, r3
 8005f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f06:	d10d      	bne.n	8005f24 <_dtoa_r+0xa44>
 8005f08:	2b39      	cmp	r3, #57	@ 0x39
 8005f0a:	d027      	beq.n	8005f5c <_dtoa_r+0xa7c>
 8005f0c:	9a04      	ldr	r2, [sp, #16]
 8005f0e:	2a00      	cmp	r2, #0
 8005f10:	dd01      	ble.n	8005f16 <_dtoa_r+0xa36>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	3331      	adds	r3, #49	@ 0x31
 8005f16:	f88b 3000 	strb.w	r3, [fp]
 8005f1a:	e52e      	b.n	800597a <_dtoa_r+0x49a>
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	e7b9      	b.n	8005e94 <_dtoa_r+0x9b4>
 8005f20:	2201      	movs	r2, #1
 8005f22:	e7e2      	b.n	8005eea <_dtoa_r+0xa0a>
 8005f24:	9904      	ldr	r1, [sp, #16]
 8005f26:	2900      	cmp	r1, #0
 8005f28:	db04      	blt.n	8005f34 <_dtoa_r+0xa54>
 8005f2a:	9807      	ldr	r0, [sp, #28]
 8005f2c:	4301      	orrs	r1, r0
 8005f2e:	9806      	ldr	r0, [sp, #24]
 8005f30:	4301      	orrs	r1, r0
 8005f32:	d120      	bne.n	8005f76 <_dtoa_r+0xa96>
 8005f34:	2a00      	cmp	r2, #0
 8005f36:	ddee      	ble.n	8005f16 <_dtoa_r+0xa36>
 8005f38:	9902      	ldr	r1, [sp, #8]
 8005f3a:	9300      	str	r3, [sp, #0]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	4648      	mov	r0, r9
 8005f40:	f000 fba4 	bl	800668c <__lshift>
 8005f44:	4621      	mov	r1, r4
 8005f46:	9002      	str	r0, [sp, #8]
 8005f48:	f000 fc0c 	bl	8006764 <__mcmp>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	9b00      	ldr	r3, [sp, #0]
 8005f50:	dc02      	bgt.n	8005f58 <_dtoa_r+0xa78>
 8005f52:	d1e0      	bne.n	8005f16 <_dtoa_r+0xa36>
 8005f54:	07da      	lsls	r2, r3, #31
 8005f56:	d5de      	bpl.n	8005f16 <_dtoa_r+0xa36>
 8005f58:	2b39      	cmp	r3, #57	@ 0x39
 8005f5a:	d1da      	bne.n	8005f12 <_dtoa_r+0xa32>
 8005f5c:	2339      	movs	r3, #57	@ 0x39
 8005f5e:	f88b 3000 	strb.w	r3, [fp]
 8005f62:	4633      	mov	r3, r6
 8005f64:	461e      	mov	r6, r3
 8005f66:	3b01      	subs	r3, #1
 8005f68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005f6c:	2a39      	cmp	r2, #57	@ 0x39
 8005f6e:	d04e      	beq.n	800600e <_dtoa_r+0xb2e>
 8005f70:	3201      	adds	r2, #1
 8005f72:	701a      	strb	r2, [r3, #0]
 8005f74:	e501      	b.n	800597a <_dtoa_r+0x49a>
 8005f76:	2a00      	cmp	r2, #0
 8005f78:	dd03      	ble.n	8005f82 <_dtoa_r+0xaa2>
 8005f7a:	2b39      	cmp	r3, #57	@ 0x39
 8005f7c:	d0ee      	beq.n	8005f5c <_dtoa_r+0xa7c>
 8005f7e:	3301      	adds	r3, #1
 8005f80:	e7c9      	b.n	8005f16 <_dtoa_r+0xa36>
 8005f82:	9a00      	ldr	r2, [sp, #0]
 8005f84:	9908      	ldr	r1, [sp, #32]
 8005f86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f8a:	428a      	cmp	r2, r1
 8005f8c:	d028      	beq.n	8005fe0 <_dtoa_r+0xb00>
 8005f8e:	9902      	ldr	r1, [sp, #8]
 8005f90:	2300      	movs	r3, #0
 8005f92:	220a      	movs	r2, #10
 8005f94:	4648      	mov	r0, r9
 8005f96:	f000 f9d5 	bl	8006344 <__multadd>
 8005f9a:	42af      	cmp	r7, r5
 8005f9c:	9002      	str	r0, [sp, #8]
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	f04f 020a 	mov.w	r2, #10
 8005fa6:	4639      	mov	r1, r7
 8005fa8:	4648      	mov	r0, r9
 8005faa:	d107      	bne.n	8005fbc <_dtoa_r+0xadc>
 8005fac:	f000 f9ca 	bl	8006344 <__multadd>
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	9b00      	ldr	r3, [sp, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	e777      	b.n	8005eac <_dtoa_r+0x9cc>
 8005fbc:	f000 f9c2 	bl	8006344 <__multadd>
 8005fc0:	4629      	mov	r1, r5
 8005fc2:	4607      	mov	r7, r0
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	220a      	movs	r2, #10
 8005fc8:	4648      	mov	r0, r9
 8005fca:	f000 f9bb 	bl	8006344 <__multadd>
 8005fce:	4605      	mov	r5, r0
 8005fd0:	e7f0      	b.n	8005fb4 <_dtoa_r+0xad4>
 8005fd2:	f1bb 0f00 	cmp.w	fp, #0
 8005fd6:	bfcc      	ite	gt
 8005fd8:	465e      	movgt	r6, fp
 8005fda:	2601      	movle	r6, #1
 8005fdc:	4456      	add	r6, sl
 8005fde:	2700      	movs	r7, #0
 8005fe0:	9902      	ldr	r1, [sp, #8]
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	4648      	mov	r0, r9
 8005fe8:	f000 fb50 	bl	800668c <__lshift>
 8005fec:	4621      	mov	r1, r4
 8005fee:	9002      	str	r0, [sp, #8]
 8005ff0:	f000 fbb8 	bl	8006764 <__mcmp>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	dcb4      	bgt.n	8005f62 <_dtoa_r+0xa82>
 8005ff8:	d102      	bne.n	8006000 <_dtoa_r+0xb20>
 8005ffa:	9b00      	ldr	r3, [sp, #0]
 8005ffc:	07db      	lsls	r3, r3, #31
 8005ffe:	d4b0      	bmi.n	8005f62 <_dtoa_r+0xa82>
 8006000:	4633      	mov	r3, r6
 8006002:	461e      	mov	r6, r3
 8006004:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006008:	2a30      	cmp	r2, #48	@ 0x30
 800600a:	d0fa      	beq.n	8006002 <_dtoa_r+0xb22>
 800600c:	e4b5      	b.n	800597a <_dtoa_r+0x49a>
 800600e:	459a      	cmp	sl, r3
 8006010:	d1a8      	bne.n	8005f64 <_dtoa_r+0xa84>
 8006012:	2331      	movs	r3, #49	@ 0x31
 8006014:	f108 0801 	add.w	r8, r8, #1
 8006018:	f88a 3000 	strb.w	r3, [sl]
 800601c:	e4ad      	b.n	800597a <_dtoa_r+0x49a>
 800601e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006020:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800607c <_dtoa_r+0xb9c>
 8006024:	b11b      	cbz	r3, 800602e <_dtoa_r+0xb4e>
 8006026:	f10a 0308 	add.w	r3, sl, #8
 800602a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800602c:	6013      	str	r3, [r2, #0]
 800602e:	4650      	mov	r0, sl
 8006030:	b017      	add	sp, #92	@ 0x5c
 8006032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006036:	9b07      	ldr	r3, [sp, #28]
 8006038:	2b01      	cmp	r3, #1
 800603a:	f77f ae2e 	ble.w	8005c9a <_dtoa_r+0x7ba>
 800603e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006040:	9308      	str	r3, [sp, #32]
 8006042:	2001      	movs	r0, #1
 8006044:	e64d      	b.n	8005ce2 <_dtoa_r+0x802>
 8006046:	f1bb 0f00 	cmp.w	fp, #0
 800604a:	f77f aed9 	ble.w	8005e00 <_dtoa_r+0x920>
 800604e:	4656      	mov	r6, sl
 8006050:	9802      	ldr	r0, [sp, #8]
 8006052:	4621      	mov	r1, r4
 8006054:	f7ff f9b9 	bl	80053ca <quorem>
 8006058:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800605c:	f806 3b01 	strb.w	r3, [r6], #1
 8006060:	eba6 020a 	sub.w	r2, r6, sl
 8006064:	4593      	cmp	fp, r2
 8006066:	ddb4      	ble.n	8005fd2 <_dtoa_r+0xaf2>
 8006068:	9902      	ldr	r1, [sp, #8]
 800606a:	2300      	movs	r3, #0
 800606c:	220a      	movs	r2, #10
 800606e:	4648      	mov	r0, r9
 8006070:	f000 f968 	bl	8006344 <__multadd>
 8006074:	9002      	str	r0, [sp, #8]
 8006076:	e7eb      	b.n	8006050 <_dtoa_r+0xb70>
 8006078:	08007cb4 	.word	0x08007cb4
 800607c:	08007c38 	.word	0x08007c38

08006080 <_free_r>:
 8006080:	b538      	push	{r3, r4, r5, lr}
 8006082:	4605      	mov	r5, r0
 8006084:	2900      	cmp	r1, #0
 8006086:	d041      	beq.n	800610c <_free_r+0x8c>
 8006088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800608c:	1f0c      	subs	r4, r1, #4
 800608e:	2b00      	cmp	r3, #0
 8006090:	bfb8      	it	lt
 8006092:	18e4      	addlt	r4, r4, r3
 8006094:	f000 f8e8 	bl	8006268 <__malloc_lock>
 8006098:	4a1d      	ldr	r2, [pc, #116]	@ (8006110 <_free_r+0x90>)
 800609a:	6813      	ldr	r3, [r2, #0]
 800609c:	b933      	cbnz	r3, 80060ac <_free_r+0x2c>
 800609e:	6063      	str	r3, [r4, #4]
 80060a0:	6014      	str	r4, [r2, #0]
 80060a2:	4628      	mov	r0, r5
 80060a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060a8:	f000 b8e4 	b.w	8006274 <__malloc_unlock>
 80060ac:	42a3      	cmp	r3, r4
 80060ae:	d908      	bls.n	80060c2 <_free_r+0x42>
 80060b0:	6820      	ldr	r0, [r4, #0]
 80060b2:	1821      	adds	r1, r4, r0
 80060b4:	428b      	cmp	r3, r1
 80060b6:	bf01      	itttt	eq
 80060b8:	6819      	ldreq	r1, [r3, #0]
 80060ba:	685b      	ldreq	r3, [r3, #4]
 80060bc:	1809      	addeq	r1, r1, r0
 80060be:	6021      	streq	r1, [r4, #0]
 80060c0:	e7ed      	b.n	800609e <_free_r+0x1e>
 80060c2:	461a      	mov	r2, r3
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b10b      	cbz	r3, 80060cc <_free_r+0x4c>
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	d9fa      	bls.n	80060c2 <_free_r+0x42>
 80060cc:	6811      	ldr	r1, [r2, #0]
 80060ce:	1850      	adds	r0, r2, r1
 80060d0:	42a0      	cmp	r0, r4
 80060d2:	d10b      	bne.n	80060ec <_free_r+0x6c>
 80060d4:	6820      	ldr	r0, [r4, #0]
 80060d6:	4401      	add	r1, r0
 80060d8:	1850      	adds	r0, r2, r1
 80060da:	4283      	cmp	r3, r0
 80060dc:	6011      	str	r1, [r2, #0]
 80060de:	d1e0      	bne.n	80060a2 <_free_r+0x22>
 80060e0:	6818      	ldr	r0, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	6053      	str	r3, [r2, #4]
 80060e6:	4408      	add	r0, r1
 80060e8:	6010      	str	r0, [r2, #0]
 80060ea:	e7da      	b.n	80060a2 <_free_r+0x22>
 80060ec:	d902      	bls.n	80060f4 <_free_r+0x74>
 80060ee:	230c      	movs	r3, #12
 80060f0:	602b      	str	r3, [r5, #0]
 80060f2:	e7d6      	b.n	80060a2 <_free_r+0x22>
 80060f4:	6820      	ldr	r0, [r4, #0]
 80060f6:	1821      	adds	r1, r4, r0
 80060f8:	428b      	cmp	r3, r1
 80060fa:	bf04      	itt	eq
 80060fc:	6819      	ldreq	r1, [r3, #0]
 80060fe:	685b      	ldreq	r3, [r3, #4]
 8006100:	6063      	str	r3, [r4, #4]
 8006102:	bf04      	itt	eq
 8006104:	1809      	addeq	r1, r1, r0
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	6054      	str	r4, [r2, #4]
 800610a:	e7ca      	b.n	80060a2 <_free_r+0x22>
 800610c:	bd38      	pop	{r3, r4, r5, pc}
 800610e:	bf00      	nop
 8006110:	200008a0 	.word	0x200008a0

08006114 <malloc>:
 8006114:	4b02      	ldr	r3, [pc, #8]	@ (8006120 <malloc+0xc>)
 8006116:	4601      	mov	r1, r0
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	f000 b825 	b.w	8006168 <_malloc_r>
 800611e:	bf00      	nop
 8006120:	20000018 	.word	0x20000018

08006124 <sbrk_aligned>:
 8006124:	b570      	push	{r4, r5, r6, lr}
 8006126:	4e0f      	ldr	r6, [pc, #60]	@ (8006164 <sbrk_aligned+0x40>)
 8006128:	460c      	mov	r4, r1
 800612a:	6831      	ldr	r1, [r6, #0]
 800612c:	4605      	mov	r5, r0
 800612e:	b911      	cbnz	r1, 8006136 <sbrk_aligned+0x12>
 8006130:	f000 fe24 	bl	8006d7c <_sbrk_r>
 8006134:	6030      	str	r0, [r6, #0]
 8006136:	4621      	mov	r1, r4
 8006138:	4628      	mov	r0, r5
 800613a:	f000 fe1f 	bl	8006d7c <_sbrk_r>
 800613e:	1c43      	adds	r3, r0, #1
 8006140:	d103      	bne.n	800614a <sbrk_aligned+0x26>
 8006142:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8006146:	4620      	mov	r0, r4
 8006148:	bd70      	pop	{r4, r5, r6, pc}
 800614a:	1cc4      	adds	r4, r0, #3
 800614c:	f024 0403 	bic.w	r4, r4, #3
 8006150:	42a0      	cmp	r0, r4
 8006152:	d0f8      	beq.n	8006146 <sbrk_aligned+0x22>
 8006154:	1a21      	subs	r1, r4, r0
 8006156:	4628      	mov	r0, r5
 8006158:	f000 fe10 	bl	8006d7c <_sbrk_r>
 800615c:	3001      	adds	r0, #1
 800615e:	d1f2      	bne.n	8006146 <sbrk_aligned+0x22>
 8006160:	e7ef      	b.n	8006142 <sbrk_aligned+0x1e>
 8006162:	bf00      	nop
 8006164:	2000089c 	.word	0x2000089c

08006168 <_malloc_r>:
 8006168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800616c:	1ccd      	adds	r5, r1, #3
 800616e:	f025 0503 	bic.w	r5, r5, #3
 8006172:	3508      	adds	r5, #8
 8006174:	2d0c      	cmp	r5, #12
 8006176:	bf38      	it	cc
 8006178:	250c      	movcc	r5, #12
 800617a:	2d00      	cmp	r5, #0
 800617c:	4606      	mov	r6, r0
 800617e:	db01      	blt.n	8006184 <_malloc_r+0x1c>
 8006180:	42a9      	cmp	r1, r5
 8006182:	d904      	bls.n	800618e <_malloc_r+0x26>
 8006184:	230c      	movs	r3, #12
 8006186:	6033      	str	r3, [r6, #0]
 8006188:	2000      	movs	r0, #0
 800618a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800618e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006264 <_malloc_r+0xfc>
 8006192:	f000 f869 	bl	8006268 <__malloc_lock>
 8006196:	f8d8 3000 	ldr.w	r3, [r8]
 800619a:	461c      	mov	r4, r3
 800619c:	bb44      	cbnz	r4, 80061f0 <_malloc_r+0x88>
 800619e:	4629      	mov	r1, r5
 80061a0:	4630      	mov	r0, r6
 80061a2:	f7ff ffbf 	bl	8006124 <sbrk_aligned>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	4604      	mov	r4, r0
 80061aa:	d158      	bne.n	800625e <_malloc_r+0xf6>
 80061ac:	f8d8 4000 	ldr.w	r4, [r8]
 80061b0:	4627      	mov	r7, r4
 80061b2:	2f00      	cmp	r7, #0
 80061b4:	d143      	bne.n	800623e <_malloc_r+0xd6>
 80061b6:	2c00      	cmp	r4, #0
 80061b8:	d04b      	beq.n	8006252 <_malloc_r+0xea>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	4639      	mov	r1, r7
 80061be:	4630      	mov	r0, r6
 80061c0:	eb04 0903 	add.w	r9, r4, r3
 80061c4:	f000 fdda 	bl	8006d7c <_sbrk_r>
 80061c8:	4581      	cmp	r9, r0
 80061ca:	d142      	bne.n	8006252 <_malloc_r+0xea>
 80061cc:	6821      	ldr	r1, [r4, #0]
 80061ce:	1a6d      	subs	r5, r5, r1
 80061d0:	4629      	mov	r1, r5
 80061d2:	4630      	mov	r0, r6
 80061d4:	f7ff ffa6 	bl	8006124 <sbrk_aligned>
 80061d8:	3001      	adds	r0, #1
 80061da:	d03a      	beq.n	8006252 <_malloc_r+0xea>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	442b      	add	r3, r5
 80061e0:	6023      	str	r3, [r4, #0]
 80061e2:	f8d8 3000 	ldr.w	r3, [r8]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	bb62      	cbnz	r2, 8006244 <_malloc_r+0xdc>
 80061ea:	f8c8 7000 	str.w	r7, [r8]
 80061ee:	e00f      	b.n	8006210 <_malloc_r+0xa8>
 80061f0:	6822      	ldr	r2, [r4, #0]
 80061f2:	1b52      	subs	r2, r2, r5
 80061f4:	d420      	bmi.n	8006238 <_malloc_r+0xd0>
 80061f6:	2a0b      	cmp	r2, #11
 80061f8:	d917      	bls.n	800622a <_malloc_r+0xc2>
 80061fa:	1961      	adds	r1, r4, r5
 80061fc:	42a3      	cmp	r3, r4
 80061fe:	6025      	str	r5, [r4, #0]
 8006200:	bf18      	it	ne
 8006202:	6059      	strne	r1, [r3, #4]
 8006204:	6863      	ldr	r3, [r4, #4]
 8006206:	bf08      	it	eq
 8006208:	f8c8 1000 	streq.w	r1, [r8]
 800620c:	5162      	str	r2, [r4, r5]
 800620e:	604b      	str	r3, [r1, #4]
 8006210:	4630      	mov	r0, r6
 8006212:	f000 f82f 	bl	8006274 <__malloc_unlock>
 8006216:	f104 000b 	add.w	r0, r4, #11
 800621a:	1d23      	adds	r3, r4, #4
 800621c:	f020 0007 	bic.w	r0, r0, #7
 8006220:	1ac2      	subs	r2, r0, r3
 8006222:	bf1c      	itt	ne
 8006224:	1a1b      	subne	r3, r3, r0
 8006226:	50a3      	strne	r3, [r4, r2]
 8006228:	e7af      	b.n	800618a <_malloc_r+0x22>
 800622a:	6862      	ldr	r2, [r4, #4]
 800622c:	42a3      	cmp	r3, r4
 800622e:	bf0c      	ite	eq
 8006230:	f8c8 2000 	streq.w	r2, [r8]
 8006234:	605a      	strne	r2, [r3, #4]
 8006236:	e7eb      	b.n	8006210 <_malloc_r+0xa8>
 8006238:	4623      	mov	r3, r4
 800623a:	6864      	ldr	r4, [r4, #4]
 800623c:	e7ae      	b.n	800619c <_malloc_r+0x34>
 800623e:	463c      	mov	r4, r7
 8006240:	687f      	ldr	r7, [r7, #4]
 8006242:	e7b6      	b.n	80061b2 <_malloc_r+0x4a>
 8006244:	461a      	mov	r2, r3
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	42a3      	cmp	r3, r4
 800624a:	d1fb      	bne.n	8006244 <_malloc_r+0xdc>
 800624c:	2300      	movs	r3, #0
 800624e:	6053      	str	r3, [r2, #4]
 8006250:	e7de      	b.n	8006210 <_malloc_r+0xa8>
 8006252:	230c      	movs	r3, #12
 8006254:	6033      	str	r3, [r6, #0]
 8006256:	4630      	mov	r0, r6
 8006258:	f000 f80c 	bl	8006274 <__malloc_unlock>
 800625c:	e794      	b.n	8006188 <_malloc_r+0x20>
 800625e:	6005      	str	r5, [r0, #0]
 8006260:	e7d6      	b.n	8006210 <_malloc_r+0xa8>
 8006262:	bf00      	nop
 8006264:	200008a0 	.word	0x200008a0

08006268 <__malloc_lock>:
 8006268:	4801      	ldr	r0, [pc, #4]	@ (8006270 <__malloc_lock+0x8>)
 800626a:	f7ff b89e 	b.w	80053aa <__retarget_lock_acquire_recursive>
 800626e:	bf00      	nop
 8006270:	20000898 	.word	0x20000898

08006274 <__malloc_unlock>:
 8006274:	4801      	ldr	r0, [pc, #4]	@ (800627c <__malloc_unlock+0x8>)
 8006276:	f7ff b899 	b.w	80053ac <__retarget_lock_release_recursive>
 800627a:	bf00      	nop
 800627c:	20000898 	.word	0x20000898

08006280 <_Balloc>:
 8006280:	b570      	push	{r4, r5, r6, lr}
 8006282:	69c6      	ldr	r6, [r0, #28]
 8006284:	4604      	mov	r4, r0
 8006286:	460d      	mov	r5, r1
 8006288:	b976      	cbnz	r6, 80062a8 <_Balloc+0x28>
 800628a:	2010      	movs	r0, #16
 800628c:	f7ff ff42 	bl	8006114 <malloc>
 8006290:	4602      	mov	r2, r0
 8006292:	61e0      	str	r0, [r4, #28]
 8006294:	b920      	cbnz	r0, 80062a0 <_Balloc+0x20>
 8006296:	4b18      	ldr	r3, [pc, #96]	@ (80062f8 <_Balloc+0x78>)
 8006298:	4818      	ldr	r0, [pc, #96]	@ (80062fc <_Balloc+0x7c>)
 800629a:	216b      	movs	r1, #107	@ 0x6b
 800629c:	f000 fd7e 	bl	8006d9c <__assert_func>
 80062a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062a4:	6006      	str	r6, [r0, #0]
 80062a6:	60c6      	str	r6, [r0, #12]
 80062a8:	69e6      	ldr	r6, [r4, #28]
 80062aa:	68f3      	ldr	r3, [r6, #12]
 80062ac:	b183      	cbz	r3, 80062d0 <_Balloc+0x50>
 80062ae:	69e3      	ldr	r3, [r4, #28]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062b6:	b9b8      	cbnz	r0, 80062e8 <_Balloc+0x68>
 80062b8:	2101      	movs	r1, #1
 80062ba:	fa01 f605 	lsl.w	r6, r1, r5
 80062be:	1d72      	adds	r2, r6, #5
 80062c0:	0092      	lsls	r2, r2, #2
 80062c2:	4620      	mov	r0, r4
 80062c4:	f000 fd88 	bl	8006dd8 <_calloc_r>
 80062c8:	b160      	cbz	r0, 80062e4 <_Balloc+0x64>
 80062ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062ce:	e00e      	b.n	80062ee <_Balloc+0x6e>
 80062d0:	2221      	movs	r2, #33	@ 0x21
 80062d2:	2104      	movs	r1, #4
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 fd7f 	bl	8006dd8 <_calloc_r>
 80062da:	69e3      	ldr	r3, [r4, #28]
 80062dc:	60f0      	str	r0, [r6, #12]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1e4      	bne.n	80062ae <_Balloc+0x2e>
 80062e4:	2000      	movs	r0, #0
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	6802      	ldr	r2, [r0, #0]
 80062ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062ee:	2300      	movs	r3, #0
 80062f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062f4:	e7f7      	b.n	80062e6 <_Balloc+0x66>
 80062f6:	bf00      	nop
 80062f8:	08007c45 	.word	0x08007c45
 80062fc:	08007cc5 	.word	0x08007cc5

08006300 <_Bfree>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	69c6      	ldr	r6, [r0, #28]
 8006304:	4605      	mov	r5, r0
 8006306:	460c      	mov	r4, r1
 8006308:	b976      	cbnz	r6, 8006328 <_Bfree+0x28>
 800630a:	2010      	movs	r0, #16
 800630c:	f7ff ff02 	bl	8006114 <malloc>
 8006310:	4602      	mov	r2, r0
 8006312:	61e8      	str	r0, [r5, #28]
 8006314:	b920      	cbnz	r0, 8006320 <_Bfree+0x20>
 8006316:	4b09      	ldr	r3, [pc, #36]	@ (800633c <_Bfree+0x3c>)
 8006318:	4809      	ldr	r0, [pc, #36]	@ (8006340 <_Bfree+0x40>)
 800631a:	218f      	movs	r1, #143	@ 0x8f
 800631c:	f000 fd3e 	bl	8006d9c <__assert_func>
 8006320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006324:	6006      	str	r6, [r0, #0]
 8006326:	60c6      	str	r6, [r0, #12]
 8006328:	b13c      	cbz	r4, 800633a <_Bfree+0x3a>
 800632a:	69eb      	ldr	r3, [r5, #28]
 800632c:	6862      	ldr	r2, [r4, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006334:	6021      	str	r1, [r4, #0]
 8006336:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	08007c45 	.word	0x08007c45
 8006340:	08007cc5 	.word	0x08007cc5

08006344 <__multadd>:
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	690d      	ldr	r5, [r1, #16]
 800634a:	4607      	mov	r7, r0
 800634c:	460c      	mov	r4, r1
 800634e:	461e      	mov	r6, r3
 8006350:	f101 0c14 	add.w	ip, r1, #20
 8006354:	2000      	movs	r0, #0
 8006356:	f8dc 3000 	ldr.w	r3, [ip]
 800635a:	b299      	uxth	r1, r3
 800635c:	fb02 6101 	mla	r1, r2, r1, r6
 8006360:	0c1e      	lsrs	r6, r3, #16
 8006362:	0c0b      	lsrs	r3, r1, #16
 8006364:	fb02 3306 	mla	r3, r2, r6, r3
 8006368:	b289      	uxth	r1, r1
 800636a:	3001      	adds	r0, #1
 800636c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006370:	4285      	cmp	r5, r0
 8006372:	f84c 1b04 	str.w	r1, [ip], #4
 8006376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800637a:	dcec      	bgt.n	8006356 <__multadd+0x12>
 800637c:	b30e      	cbz	r6, 80063c2 <__multadd+0x7e>
 800637e:	68a3      	ldr	r3, [r4, #8]
 8006380:	42ab      	cmp	r3, r5
 8006382:	dc19      	bgt.n	80063b8 <__multadd+0x74>
 8006384:	6861      	ldr	r1, [r4, #4]
 8006386:	4638      	mov	r0, r7
 8006388:	3101      	adds	r1, #1
 800638a:	f7ff ff79 	bl	8006280 <_Balloc>
 800638e:	4680      	mov	r8, r0
 8006390:	b928      	cbnz	r0, 800639e <__multadd+0x5a>
 8006392:	4602      	mov	r2, r0
 8006394:	4b0c      	ldr	r3, [pc, #48]	@ (80063c8 <__multadd+0x84>)
 8006396:	480d      	ldr	r0, [pc, #52]	@ (80063cc <__multadd+0x88>)
 8006398:	21ba      	movs	r1, #186	@ 0xba
 800639a:	f000 fcff 	bl	8006d9c <__assert_func>
 800639e:	6922      	ldr	r2, [r4, #16]
 80063a0:	3202      	adds	r2, #2
 80063a2:	f104 010c 	add.w	r1, r4, #12
 80063a6:	0092      	lsls	r2, r2, #2
 80063a8:	300c      	adds	r0, #12
 80063aa:	f7ff f800 	bl	80053ae <memcpy>
 80063ae:	4621      	mov	r1, r4
 80063b0:	4638      	mov	r0, r7
 80063b2:	f7ff ffa5 	bl	8006300 <_Bfree>
 80063b6:	4644      	mov	r4, r8
 80063b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063bc:	3501      	adds	r5, #1
 80063be:	615e      	str	r6, [r3, #20]
 80063c0:	6125      	str	r5, [r4, #16]
 80063c2:	4620      	mov	r0, r4
 80063c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c8:	08007cb4 	.word	0x08007cb4
 80063cc:	08007cc5 	.word	0x08007cc5

080063d0 <__hi0bits>:
 80063d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80063d4:	4603      	mov	r3, r0
 80063d6:	bf36      	itet	cc
 80063d8:	0403      	lslcc	r3, r0, #16
 80063da:	2000      	movcs	r0, #0
 80063dc:	2010      	movcc	r0, #16
 80063de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063e2:	bf3c      	itt	cc
 80063e4:	021b      	lslcc	r3, r3, #8
 80063e6:	3008      	addcc	r0, #8
 80063e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063ec:	bf3c      	itt	cc
 80063ee:	011b      	lslcc	r3, r3, #4
 80063f0:	3004      	addcc	r0, #4
 80063f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063f6:	bf3c      	itt	cc
 80063f8:	009b      	lslcc	r3, r3, #2
 80063fa:	3002      	addcc	r0, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	db05      	blt.n	800640c <__hi0bits+0x3c>
 8006400:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006404:	f100 0001 	add.w	r0, r0, #1
 8006408:	bf08      	it	eq
 800640a:	2020      	moveq	r0, #32
 800640c:	4770      	bx	lr

0800640e <__lo0bits>:
 800640e:	6803      	ldr	r3, [r0, #0]
 8006410:	4602      	mov	r2, r0
 8006412:	f013 0007 	ands.w	r0, r3, #7
 8006416:	d00b      	beq.n	8006430 <__lo0bits+0x22>
 8006418:	07d9      	lsls	r1, r3, #31
 800641a:	d421      	bmi.n	8006460 <__lo0bits+0x52>
 800641c:	0798      	lsls	r0, r3, #30
 800641e:	bf49      	itett	mi
 8006420:	085b      	lsrmi	r3, r3, #1
 8006422:	089b      	lsrpl	r3, r3, #2
 8006424:	2001      	movmi	r0, #1
 8006426:	6013      	strmi	r3, [r2, #0]
 8006428:	bf5c      	itt	pl
 800642a:	6013      	strpl	r3, [r2, #0]
 800642c:	2002      	movpl	r0, #2
 800642e:	4770      	bx	lr
 8006430:	b299      	uxth	r1, r3
 8006432:	b909      	cbnz	r1, 8006438 <__lo0bits+0x2a>
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	2010      	movs	r0, #16
 8006438:	b2d9      	uxtb	r1, r3
 800643a:	b909      	cbnz	r1, 8006440 <__lo0bits+0x32>
 800643c:	3008      	adds	r0, #8
 800643e:	0a1b      	lsrs	r3, r3, #8
 8006440:	0719      	lsls	r1, r3, #28
 8006442:	bf04      	itt	eq
 8006444:	091b      	lsreq	r3, r3, #4
 8006446:	3004      	addeq	r0, #4
 8006448:	0799      	lsls	r1, r3, #30
 800644a:	bf04      	itt	eq
 800644c:	089b      	lsreq	r3, r3, #2
 800644e:	3002      	addeq	r0, #2
 8006450:	07d9      	lsls	r1, r3, #31
 8006452:	d403      	bmi.n	800645c <__lo0bits+0x4e>
 8006454:	085b      	lsrs	r3, r3, #1
 8006456:	f100 0001 	add.w	r0, r0, #1
 800645a:	d003      	beq.n	8006464 <__lo0bits+0x56>
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	4770      	bx	lr
 8006460:	2000      	movs	r0, #0
 8006462:	4770      	bx	lr
 8006464:	2020      	movs	r0, #32
 8006466:	4770      	bx	lr

08006468 <__i2b>:
 8006468:	b510      	push	{r4, lr}
 800646a:	460c      	mov	r4, r1
 800646c:	2101      	movs	r1, #1
 800646e:	f7ff ff07 	bl	8006280 <_Balloc>
 8006472:	4602      	mov	r2, r0
 8006474:	b928      	cbnz	r0, 8006482 <__i2b+0x1a>
 8006476:	4b05      	ldr	r3, [pc, #20]	@ (800648c <__i2b+0x24>)
 8006478:	4805      	ldr	r0, [pc, #20]	@ (8006490 <__i2b+0x28>)
 800647a:	f240 1145 	movw	r1, #325	@ 0x145
 800647e:	f000 fc8d 	bl	8006d9c <__assert_func>
 8006482:	2301      	movs	r3, #1
 8006484:	6144      	str	r4, [r0, #20]
 8006486:	6103      	str	r3, [r0, #16]
 8006488:	bd10      	pop	{r4, pc}
 800648a:	bf00      	nop
 800648c:	08007cb4 	.word	0x08007cb4
 8006490:	08007cc5 	.word	0x08007cc5

08006494 <__multiply>:
 8006494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006498:	4617      	mov	r7, r2
 800649a:	690a      	ldr	r2, [r1, #16]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	429a      	cmp	r2, r3
 80064a0:	bfa8      	it	ge
 80064a2:	463b      	movge	r3, r7
 80064a4:	4689      	mov	r9, r1
 80064a6:	bfa4      	itt	ge
 80064a8:	460f      	movge	r7, r1
 80064aa:	4699      	movge	r9, r3
 80064ac:	693d      	ldr	r5, [r7, #16]
 80064ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	eb05 060a 	add.w	r6, r5, sl
 80064ba:	42b3      	cmp	r3, r6
 80064bc:	b085      	sub	sp, #20
 80064be:	bfb8      	it	lt
 80064c0:	3101      	addlt	r1, #1
 80064c2:	f7ff fedd 	bl	8006280 <_Balloc>
 80064c6:	b930      	cbnz	r0, 80064d6 <__multiply+0x42>
 80064c8:	4602      	mov	r2, r0
 80064ca:	4b41      	ldr	r3, [pc, #260]	@ (80065d0 <__multiply+0x13c>)
 80064cc:	4841      	ldr	r0, [pc, #260]	@ (80065d4 <__multiply+0x140>)
 80064ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80064d2:	f000 fc63 	bl	8006d9c <__assert_func>
 80064d6:	f100 0414 	add.w	r4, r0, #20
 80064da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80064de:	4623      	mov	r3, r4
 80064e0:	2200      	movs	r2, #0
 80064e2:	4573      	cmp	r3, lr
 80064e4:	d320      	bcc.n	8006528 <__multiply+0x94>
 80064e6:	f107 0814 	add.w	r8, r7, #20
 80064ea:	f109 0114 	add.w	r1, r9, #20
 80064ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80064f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80064f6:	9302      	str	r3, [sp, #8]
 80064f8:	1beb      	subs	r3, r5, r7
 80064fa:	3b15      	subs	r3, #21
 80064fc:	f023 0303 	bic.w	r3, r3, #3
 8006500:	3304      	adds	r3, #4
 8006502:	3715      	adds	r7, #21
 8006504:	42bd      	cmp	r5, r7
 8006506:	bf38      	it	cc
 8006508:	2304      	movcc	r3, #4
 800650a:	9301      	str	r3, [sp, #4]
 800650c:	9b02      	ldr	r3, [sp, #8]
 800650e:	9103      	str	r1, [sp, #12]
 8006510:	428b      	cmp	r3, r1
 8006512:	d80c      	bhi.n	800652e <__multiply+0x9a>
 8006514:	2e00      	cmp	r6, #0
 8006516:	dd03      	ble.n	8006520 <__multiply+0x8c>
 8006518:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800651c:	2b00      	cmp	r3, #0
 800651e:	d055      	beq.n	80065cc <__multiply+0x138>
 8006520:	6106      	str	r6, [r0, #16]
 8006522:	b005      	add	sp, #20
 8006524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006528:	f843 2b04 	str.w	r2, [r3], #4
 800652c:	e7d9      	b.n	80064e2 <__multiply+0x4e>
 800652e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006532:	f1ba 0f00 	cmp.w	sl, #0
 8006536:	d01f      	beq.n	8006578 <__multiply+0xe4>
 8006538:	46c4      	mov	ip, r8
 800653a:	46a1      	mov	r9, r4
 800653c:	2700      	movs	r7, #0
 800653e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006542:	f8d9 3000 	ldr.w	r3, [r9]
 8006546:	fa1f fb82 	uxth.w	fp, r2
 800654a:	b29b      	uxth	r3, r3
 800654c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006550:	443b      	add	r3, r7
 8006552:	f8d9 7000 	ldr.w	r7, [r9]
 8006556:	0c12      	lsrs	r2, r2, #16
 8006558:	0c3f      	lsrs	r7, r7, #16
 800655a:	fb0a 7202 	mla	r2, sl, r2, r7
 800655e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006562:	b29b      	uxth	r3, r3
 8006564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006568:	4565      	cmp	r5, ip
 800656a:	f849 3b04 	str.w	r3, [r9], #4
 800656e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006572:	d8e4      	bhi.n	800653e <__multiply+0xaa>
 8006574:	9b01      	ldr	r3, [sp, #4]
 8006576:	50e7      	str	r7, [r4, r3]
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800657e:	3104      	adds	r1, #4
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	d020      	beq.n	80065c8 <__multiply+0x134>
 8006586:	6823      	ldr	r3, [r4, #0]
 8006588:	4647      	mov	r7, r8
 800658a:	46a4      	mov	ip, r4
 800658c:	f04f 0a00 	mov.w	sl, #0
 8006590:	f8b7 b000 	ldrh.w	fp, [r7]
 8006594:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006598:	fb09 220b 	mla	r2, r9, fp, r2
 800659c:	4452      	add	r2, sl
 800659e:	b29b      	uxth	r3, r3
 80065a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065a4:	f84c 3b04 	str.w	r3, [ip], #4
 80065a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80065ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80065b4:	fb09 330a 	mla	r3, r9, sl, r3
 80065b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80065bc:	42bd      	cmp	r5, r7
 80065be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80065c2:	d8e5      	bhi.n	8006590 <__multiply+0xfc>
 80065c4:	9a01      	ldr	r2, [sp, #4]
 80065c6:	50a3      	str	r3, [r4, r2]
 80065c8:	3404      	adds	r4, #4
 80065ca:	e79f      	b.n	800650c <__multiply+0x78>
 80065cc:	3e01      	subs	r6, #1
 80065ce:	e7a1      	b.n	8006514 <__multiply+0x80>
 80065d0:	08007cb4 	.word	0x08007cb4
 80065d4:	08007cc5 	.word	0x08007cc5

080065d8 <__pow5mult>:
 80065d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065dc:	4615      	mov	r5, r2
 80065de:	f012 0203 	ands.w	r2, r2, #3
 80065e2:	4607      	mov	r7, r0
 80065e4:	460e      	mov	r6, r1
 80065e6:	d007      	beq.n	80065f8 <__pow5mult+0x20>
 80065e8:	4c25      	ldr	r4, [pc, #148]	@ (8006680 <__pow5mult+0xa8>)
 80065ea:	3a01      	subs	r2, #1
 80065ec:	2300      	movs	r3, #0
 80065ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065f2:	f7ff fea7 	bl	8006344 <__multadd>
 80065f6:	4606      	mov	r6, r0
 80065f8:	10ad      	asrs	r5, r5, #2
 80065fa:	d03d      	beq.n	8006678 <__pow5mult+0xa0>
 80065fc:	69fc      	ldr	r4, [r7, #28]
 80065fe:	b97c      	cbnz	r4, 8006620 <__pow5mult+0x48>
 8006600:	2010      	movs	r0, #16
 8006602:	f7ff fd87 	bl	8006114 <malloc>
 8006606:	4602      	mov	r2, r0
 8006608:	61f8      	str	r0, [r7, #28]
 800660a:	b928      	cbnz	r0, 8006618 <__pow5mult+0x40>
 800660c:	4b1d      	ldr	r3, [pc, #116]	@ (8006684 <__pow5mult+0xac>)
 800660e:	481e      	ldr	r0, [pc, #120]	@ (8006688 <__pow5mult+0xb0>)
 8006610:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006614:	f000 fbc2 	bl	8006d9c <__assert_func>
 8006618:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800661c:	6004      	str	r4, [r0, #0]
 800661e:	60c4      	str	r4, [r0, #12]
 8006620:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006624:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006628:	b94c      	cbnz	r4, 800663e <__pow5mult+0x66>
 800662a:	f240 2171 	movw	r1, #625	@ 0x271
 800662e:	4638      	mov	r0, r7
 8006630:	f7ff ff1a 	bl	8006468 <__i2b>
 8006634:	2300      	movs	r3, #0
 8006636:	f8c8 0008 	str.w	r0, [r8, #8]
 800663a:	4604      	mov	r4, r0
 800663c:	6003      	str	r3, [r0, #0]
 800663e:	f04f 0900 	mov.w	r9, #0
 8006642:	07eb      	lsls	r3, r5, #31
 8006644:	d50a      	bpl.n	800665c <__pow5mult+0x84>
 8006646:	4631      	mov	r1, r6
 8006648:	4622      	mov	r2, r4
 800664a:	4638      	mov	r0, r7
 800664c:	f7ff ff22 	bl	8006494 <__multiply>
 8006650:	4631      	mov	r1, r6
 8006652:	4680      	mov	r8, r0
 8006654:	4638      	mov	r0, r7
 8006656:	f7ff fe53 	bl	8006300 <_Bfree>
 800665a:	4646      	mov	r6, r8
 800665c:	106d      	asrs	r5, r5, #1
 800665e:	d00b      	beq.n	8006678 <__pow5mult+0xa0>
 8006660:	6820      	ldr	r0, [r4, #0]
 8006662:	b938      	cbnz	r0, 8006674 <__pow5mult+0x9c>
 8006664:	4622      	mov	r2, r4
 8006666:	4621      	mov	r1, r4
 8006668:	4638      	mov	r0, r7
 800666a:	f7ff ff13 	bl	8006494 <__multiply>
 800666e:	6020      	str	r0, [r4, #0]
 8006670:	f8c0 9000 	str.w	r9, [r0]
 8006674:	4604      	mov	r4, r0
 8006676:	e7e4      	b.n	8006642 <__pow5mult+0x6a>
 8006678:	4630      	mov	r0, r6
 800667a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800667e:	bf00      	nop
 8006680:	08007d78 	.word	0x08007d78
 8006684:	08007c45 	.word	0x08007c45
 8006688:	08007cc5 	.word	0x08007cc5

0800668c <__lshift>:
 800668c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006690:	460c      	mov	r4, r1
 8006692:	6849      	ldr	r1, [r1, #4]
 8006694:	6923      	ldr	r3, [r4, #16]
 8006696:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800669a:	68a3      	ldr	r3, [r4, #8]
 800669c:	4607      	mov	r7, r0
 800669e:	4691      	mov	r9, r2
 80066a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066a4:	f108 0601 	add.w	r6, r8, #1
 80066a8:	42b3      	cmp	r3, r6
 80066aa:	db0b      	blt.n	80066c4 <__lshift+0x38>
 80066ac:	4638      	mov	r0, r7
 80066ae:	f7ff fde7 	bl	8006280 <_Balloc>
 80066b2:	4605      	mov	r5, r0
 80066b4:	b948      	cbnz	r0, 80066ca <__lshift+0x3e>
 80066b6:	4602      	mov	r2, r0
 80066b8:	4b28      	ldr	r3, [pc, #160]	@ (800675c <__lshift+0xd0>)
 80066ba:	4829      	ldr	r0, [pc, #164]	@ (8006760 <__lshift+0xd4>)
 80066bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80066c0:	f000 fb6c 	bl	8006d9c <__assert_func>
 80066c4:	3101      	adds	r1, #1
 80066c6:	005b      	lsls	r3, r3, #1
 80066c8:	e7ee      	b.n	80066a8 <__lshift+0x1c>
 80066ca:	2300      	movs	r3, #0
 80066cc:	f100 0114 	add.w	r1, r0, #20
 80066d0:	f100 0210 	add.w	r2, r0, #16
 80066d4:	4618      	mov	r0, r3
 80066d6:	4553      	cmp	r3, sl
 80066d8:	db33      	blt.n	8006742 <__lshift+0xb6>
 80066da:	6920      	ldr	r0, [r4, #16]
 80066dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066e0:	f104 0314 	add.w	r3, r4, #20
 80066e4:	f019 091f 	ands.w	r9, r9, #31
 80066e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80066f0:	d02b      	beq.n	800674a <__lshift+0xbe>
 80066f2:	f1c9 0e20 	rsb	lr, r9, #32
 80066f6:	468a      	mov	sl, r1
 80066f8:	2200      	movs	r2, #0
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006700:	4310      	orrs	r0, r2
 8006702:	f84a 0b04 	str.w	r0, [sl], #4
 8006706:	f853 2b04 	ldr.w	r2, [r3], #4
 800670a:	459c      	cmp	ip, r3
 800670c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006710:	d8f3      	bhi.n	80066fa <__lshift+0x6e>
 8006712:	ebac 0304 	sub.w	r3, ip, r4
 8006716:	3b15      	subs	r3, #21
 8006718:	f023 0303 	bic.w	r3, r3, #3
 800671c:	3304      	adds	r3, #4
 800671e:	f104 0015 	add.w	r0, r4, #21
 8006722:	4560      	cmp	r0, ip
 8006724:	bf88      	it	hi
 8006726:	2304      	movhi	r3, #4
 8006728:	50ca      	str	r2, [r1, r3]
 800672a:	b10a      	cbz	r2, 8006730 <__lshift+0xa4>
 800672c:	f108 0602 	add.w	r6, r8, #2
 8006730:	3e01      	subs	r6, #1
 8006732:	4638      	mov	r0, r7
 8006734:	612e      	str	r6, [r5, #16]
 8006736:	4621      	mov	r1, r4
 8006738:	f7ff fde2 	bl	8006300 <_Bfree>
 800673c:	4628      	mov	r0, r5
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	f842 0f04 	str.w	r0, [r2, #4]!
 8006746:	3301      	adds	r3, #1
 8006748:	e7c5      	b.n	80066d6 <__lshift+0x4a>
 800674a:	3904      	subs	r1, #4
 800674c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006750:	f841 2f04 	str.w	r2, [r1, #4]!
 8006754:	459c      	cmp	ip, r3
 8006756:	d8f9      	bhi.n	800674c <__lshift+0xc0>
 8006758:	e7ea      	b.n	8006730 <__lshift+0xa4>
 800675a:	bf00      	nop
 800675c:	08007cb4 	.word	0x08007cb4
 8006760:	08007cc5 	.word	0x08007cc5

08006764 <__mcmp>:
 8006764:	690a      	ldr	r2, [r1, #16]
 8006766:	4603      	mov	r3, r0
 8006768:	6900      	ldr	r0, [r0, #16]
 800676a:	1a80      	subs	r0, r0, r2
 800676c:	b530      	push	{r4, r5, lr}
 800676e:	d10e      	bne.n	800678e <__mcmp+0x2a>
 8006770:	3314      	adds	r3, #20
 8006772:	3114      	adds	r1, #20
 8006774:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006778:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800677c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006780:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006784:	4295      	cmp	r5, r2
 8006786:	d003      	beq.n	8006790 <__mcmp+0x2c>
 8006788:	d205      	bcs.n	8006796 <__mcmp+0x32>
 800678a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800678e:	bd30      	pop	{r4, r5, pc}
 8006790:	42a3      	cmp	r3, r4
 8006792:	d3f3      	bcc.n	800677c <__mcmp+0x18>
 8006794:	e7fb      	b.n	800678e <__mcmp+0x2a>
 8006796:	2001      	movs	r0, #1
 8006798:	e7f9      	b.n	800678e <__mcmp+0x2a>
	...

0800679c <__mdiff>:
 800679c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	4689      	mov	r9, r1
 80067a2:	4606      	mov	r6, r0
 80067a4:	4611      	mov	r1, r2
 80067a6:	4648      	mov	r0, r9
 80067a8:	4614      	mov	r4, r2
 80067aa:	f7ff ffdb 	bl	8006764 <__mcmp>
 80067ae:	1e05      	subs	r5, r0, #0
 80067b0:	d112      	bne.n	80067d8 <__mdiff+0x3c>
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7ff fd63 	bl	8006280 <_Balloc>
 80067ba:	4602      	mov	r2, r0
 80067bc:	b928      	cbnz	r0, 80067ca <__mdiff+0x2e>
 80067be:	4b3f      	ldr	r3, [pc, #252]	@ (80068bc <__mdiff+0x120>)
 80067c0:	f240 2137 	movw	r1, #567	@ 0x237
 80067c4:	483e      	ldr	r0, [pc, #248]	@ (80068c0 <__mdiff+0x124>)
 80067c6:	f000 fae9 	bl	8006d9c <__assert_func>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067d0:	4610      	mov	r0, r2
 80067d2:	b003      	add	sp, #12
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	bfbc      	itt	lt
 80067da:	464b      	movlt	r3, r9
 80067dc:	46a1      	movlt	r9, r4
 80067de:	4630      	mov	r0, r6
 80067e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80067e4:	bfba      	itte	lt
 80067e6:	461c      	movlt	r4, r3
 80067e8:	2501      	movlt	r5, #1
 80067ea:	2500      	movge	r5, #0
 80067ec:	f7ff fd48 	bl	8006280 <_Balloc>
 80067f0:	4602      	mov	r2, r0
 80067f2:	b918      	cbnz	r0, 80067fc <__mdiff+0x60>
 80067f4:	4b31      	ldr	r3, [pc, #196]	@ (80068bc <__mdiff+0x120>)
 80067f6:	f240 2145 	movw	r1, #581	@ 0x245
 80067fa:	e7e3      	b.n	80067c4 <__mdiff+0x28>
 80067fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006800:	6926      	ldr	r6, [r4, #16]
 8006802:	60c5      	str	r5, [r0, #12]
 8006804:	f109 0310 	add.w	r3, r9, #16
 8006808:	f109 0514 	add.w	r5, r9, #20
 800680c:	f104 0e14 	add.w	lr, r4, #20
 8006810:	f100 0b14 	add.w	fp, r0, #20
 8006814:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006818:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	46d9      	mov	r9, fp
 8006820:	f04f 0c00 	mov.w	ip, #0
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	f85e 0b04 	ldr.w	r0, [lr], #4
 800682a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800682e:	9301      	str	r3, [sp, #4]
 8006830:	fa1f f38a 	uxth.w	r3, sl
 8006834:	4619      	mov	r1, r3
 8006836:	b283      	uxth	r3, r0
 8006838:	1acb      	subs	r3, r1, r3
 800683a:	0c00      	lsrs	r0, r0, #16
 800683c:	4463      	add	r3, ip
 800683e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006842:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006846:	b29b      	uxth	r3, r3
 8006848:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800684c:	4576      	cmp	r6, lr
 800684e:	f849 3b04 	str.w	r3, [r9], #4
 8006852:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006856:	d8e5      	bhi.n	8006824 <__mdiff+0x88>
 8006858:	1b33      	subs	r3, r6, r4
 800685a:	3b15      	subs	r3, #21
 800685c:	f023 0303 	bic.w	r3, r3, #3
 8006860:	3415      	adds	r4, #21
 8006862:	3304      	adds	r3, #4
 8006864:	42a6      	cmp	r6, r4
 8006866:	bf38      	it	cc
 8006868:	2304      	movcc	r3, #4
 800686a:	441d      	add	r5, r3
 800686c:	445b      	add	r3, fp
 800686e:	461e      	mov	r6, r3
 8006870:	462c      	mov	r4, r5
 8006872:	4544      	cmp	r4, r8
 8006874:	d30e      	bcc.n	8006894 <__mdiff+0xf8>
 8006876:	f108 0103 	add.w	r1, r8, #3
 800687a:	1b49      	subs	r1, r1, r5
 800687c:	f021 0103 	bic.w	r1, r1, #3
 8006880:	3d03      	subs	r5, #3
 8006882:	45a8      	cmp	r8, r5
 8006884:	bf38      	it	cc
 8006886:	2100      	movcc	r1, #0
 8006888:	440b      	add	r3, r1
 800688a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800688e:	b191      	cbz	r1, 80068b6 <__mdiff+0x11a>
 8006890:	6117      	str	r7, [r2, #16]
 8006892:	e79d      	b.n	80067d0 <__mdiff+0x34>
 8006894:	f854 1b04 	ldr.w	r1, [r4], #4
 8006898:	46e6      	mov	lr, ip
 800689a:	0c08      	lsrs	r0, r1, #16
 800689c:	fa1c fc81 	uxtah	ip, ip, r1
 80068a0:	4471      	add	r1, lr
 80068a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80068a6:	b289      	uxth	r1, r1
 80068a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80068ac:	f846 1b04 	str.w	r1, [r6], #4
 80068b0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80068b4:	e7dd      	b.n	8006872 <__mdiff+0xd6>
 80068b6:	3f01      	subs	r7, #1
 80068b8:	e7e7      	b.n	800688a <__mdiff+0xee>
 80068ba:	bf00      	nop
 80068bc:	08007cb4 	.word	0x08007cb4
 80068c0:	08007cc5 	.word	0x08007cc5

080068c4 <__d2b>:
 80068c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068c8:	460f      	mov	r7, r1
 80068ca:	2101      	movs	r1, #1
 80068cc:	ec59 8b10 	vmov	r8, r9, d0
 80068d0:	4616      	mov	r6, r2
 80068d2:	f7ff fcd5 	bl	8006280 <_Balloc>
 80068d6:	4604      	mov	r4, r0
 80068d8:	b930      	cbnz	r0, 80068e8 <__d2b+0x24>
 80068da:	4602      	mov	r2, r0
 80068dc:	4b23      	ldr	r3, [pc, #140]	@ (800696c <__d2b+0xa8>)
 80068de:	4824      	ldr	r0, [pc, #144]	@ (8006970 <__d2b+0xac>)
 80068e0:	f240 310f 	movw	r1, #783	@ 0x30f
 80068e4:	f000 fa5a 	bl	8006d9c <__assert_func>
 80068e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80068ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80068f0:	b10d      	cbz	r5, 80068f6 <__d2b+0x32>
 80068f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80068f6:	9301      	str	r3, [sp, #4]
 80068f8:	f1b8 0300 	subs.w	r3, r8, #0
 80068fc:	d023      	beq.n	8006946 <__d2b+0x82>
 80068fe:	4668      	mov	r0, sp
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	f7ff fd84 	bl	800640e <__lo0bits>
 8006906:	e9dd 1200 	ldrd	r1, r2, [sp]
 800690a:	b1d0      	cbz	r0, 8006942 <__d2b+0x7e>
 800690c:	f1c0 0320 	rsb	r3, r0, #32
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	430b      	orrs	r3, r1
 8006916:	40c2      	lsrs	r2, r0
 8006918:	6163      	str	r3, [r4, #20]
 800691a:	9201      	str	r2, [sp, #4]
 800691c:	9b01      	ldr	r3, [sp, #4]
 800691e:	61a3      	str	r3, [r4, #24]
 8006920:	2b00      	cmp	r3, #0
 8006922:	bf0c      	ite	eq
 8006924:	2201      	moveq	r2, #1
 8006926:	2202      	movne	r2, #2
 8006928:	6122      	str	r2, [r4, #16]
 800692a:	b1a5      	cbz	r5, 8006956 <__d2b+0x92>
 800692c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006930:	4405      	add	r5, r0
 8006932:	603d      	str	r5, [r7, #0]
 8006934:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006938:	6030      	str	r0, [r6, #0]
 800693a:	4620      	mov	r0, r4
 800693c:	b003      	add	sp, #12
 800693e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006942:	6161      	str	r1, [r4, #20]
 8006944:	e7ea      	b.n	800691c <__d2b+0x58>
 8006946:	a801      	add	r0, sp, #4
 8006948:	f7ff fd61 	bl	800640e <__lo0bits>
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	6163      	str	r3, [r4, #20]
 8006950:	3020      	adds	r0, #32
 8006952:	2201      	movs	r2, #1
 8006954:	e7e8      	b.n	8006928 <__d2b+0x64>
 8006956:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800695a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800695e:	6038      	str	r0, [r7, #0]
 8006960:	6918      	ldr	r0, [r3, #16]
 8006962:	f7ff fd35 	bl	80063d0 <__hi0bits>
 8006966:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800696a:	e7e5      	b.n	8006938 <__d2b+0x74>
 800696c:	08007cb4 	.word	0x08007cb4
 8006970:	08007cc5 	.word	0x08007cc5

08006974 <__ssputs_r>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	688e      	ldr	r6, [r1, #8]
 800697a:	461f      	mov	r7, r3
 800697c:	42be      	cmp	r6, r7
 800697e:	680b      	ldr	r3, [r1, #0]
 8006980:	4682      	mov	sl, r0
 8006982:	460c      	mov	r4, r1
 8006984:	4690      	mov	r8, r2
 8006986:	d82d      	bhi.n	80069e4 <__ssputs_r+0x70>
 8006988:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800698c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006990:	d026      	beq.n	80069e0 <__ssputs_r+0x6c>
 8006992:	6965      	ldr	r5, [r4, #20]
 8006994:	6909      	ldr	r1, [r1, #16]
 8006996:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800699a:	eba3 0901 	sub.w	r9, r3, r1
 800699e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069a2:	1c7b      	adds	r3, r7, #1
 80069a4:	444b      	add	r3, r9
 80069a6:	106d      	asrs	r5, r5, #1
 80069a8:	429d      	cmp	r5, r3
 80069aa:	bf38      	it	cc
 80069ac:	461d      	movcc	r5, r3
 80069ae:	0553      	lsls	r3, r2, #21
 80069b0:	d527      	bpl.n	8006a02 <__ssputs_r+0x8e>
 80069b2:	4629      	mov	r1, r5
 80069b4:	f7ff fbd8 	bl	8006168 <_malloc_r>
 80069b8:	4606      	mov	r6, r0
 80069ba:	b360      	cbz	r0, 8006a16 <__ssputs_r+0xa2>
 80069bc:	6921      	ldr	r1, [r4, #16]
 80069be:	464a      	mov	r2, r9
 80069c0:	f7fe fcf5 	bl	80053ae <memcpy>
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80069ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069ce:	81a3      	strh	r3, [r4, #12]
 80069d0:	6126      	str	r6, [r4, #16]
 80069d2:	6165      	str	r5, [r4, #20]
 80069d4:	444e      	add	r6, r9
 80069d6:	eba5 0509 	sub.w	r5, r5, r9
 80069da:	6026      	str	r6, [r4, #0]
 80069dc:	60a5      	str	r5, [r4, #8]
 80069de:	463e      	mov	r6, r7
 80069e0:	42be      	cmp	r6, r7
 80069e2:	d900      	bls.n	80069e6 <__ssputs_r+0x72>
 80069e4:	463e      	mov	r6, r7
 80069e6:	6820      	ldr	r0, [r4, #0]
 80069e8:	4632      	mov	r2, r6
 80069ea:	4641      	mov	r1, r8
 80069ec:	f7fe fc45 	bl	800527a <memmove>
 80069f0:	68a3      	ldr	r3, [r4, #8]
 80069f2:	1b9b      	subs	r3, r3, r6
 80069f4:	60a3      	str	r3, [r4, #8]
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	4433      	add	r3, r6
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	2000      	movs	r0, #0
 80069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a02:	462a      	mov	r2, r5
 8006a04:	f000 fa0e 	bl	8006e24 <_realloc_r>
 8006a08:	4606      	mov	r6, r0
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d1e0      	bne.n	80069d0 <__ssputs_r+0x5c>
 8006a0e:	6921      	ldr	r1, [r4, #16]
 8006a10:	4650      	mov	r0, sl
 8006a12:	f7ff fb35 	bl	8006080 <_free_r>
 8006a16:	230c      	movs	r3, #12
 8006a18:	f8ca 3000 	str.w	r3, [sl]
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a28:	e7e9      	b.n	80069fe <__ssputs_r+0x8a>
	...

08006a2c <_svfiprintf_r>:
 8006a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a30:	4698      	mov	r8, r3
 8006a32:	898b      	ldrh	r3, [r1, #12]
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	b09d      	sub	sp, #116	@ 0x74
 8006a38:	4607      	mov	r7, r0
 8006a3a:	460d      	mov	r5, r1
 8006a3c:	4614      	mov	r4, r2
 8006a3e:	d510      	bpl.n	8006a62 <_svfiprintf_r+0x36>
 8006a40:	690b      	ldr	r3, [r1, #16]
 8006a42:	b973      	cbnz	r3, 8006a62 <_svfiprintf_r+0x36>
 8006a44:	2140      	movs	r1, #64	@ 0x40
 8006a46:	f7ff fb8f 	bl	8006168 <_malloc_r>
 8006a4a:	6028      	str	r0, [r5, #0]
 8006a4c:	6128      	str	r0, [r5, #16]
 8006a4e:	b930      	cbnz	r0, 8006a5e <_svfiprintf_r+0x32>
 8006a50:	230c      	movs	r3, #12
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006a58:	b01d      	add	sp, #116	@ 0x74
 8006a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5e:	2340      	movs	r3, #64	@ 0x40
 8006a60:	616b      	str	r3, [r5, #20]
 8006a62:	2300      	movs	r3, #0
 8006a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a66:	2320      	movs	r3, #32
 8006a68:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a70:	2330      	movs	r3, #48	@ 0x30
 8006a72:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c10 <_svfiprintf_r+0x1e4>
 8006a76:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a7a:	f04f 0901 	mov.w	r9, #1
 8006a7e:	4623      	mov	r3, r4
 8006a80:	469a      	mov	sl, r3
 8006a82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a86:	b10a      	cbz	r2, 8006a8c <_svfiprintf_r+0x60>
 8006a88:	2a25      	cmp	r2, #37	@ 0x25
 8006a8a:	d1f9      	bne.n	8006a80 <_svfiprintf_r+0x54>
 8006a8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006a90:	d00b      	beq.n	8006aaa <_svfiprintf_r+0x7e>
 8006a92:	465b      	mov	r3, fp
 8006a94:	4622      	mov	r2, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	4638      	mov	r0, r7
 8006a9a:	f7ff ff6b 	bl	8006974 <__ssputs_r>
 8006a9e:	3001      	adds	r0, #1
 8006aa0:	f000 80a7 	beq.w	8006bf2 <_svfiprintf_r+0x1c6>
 8006aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006aa6:	445a      	add	r2, fp
 8006aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 809f 	beq.w	8006bf2 <_svfiprintf_r+0x1c6>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006aba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006abe:	f10a 0a01 	add.w	sl, sl, #1
 8006ac2:	9304      	str	r3, [sp, #16]
 8006ac4:	9307      	str	r3, [sp, #28]
 8006ac6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006aca:	931a      	str	r3, [sp, #104]	@ 0x68
 8006acc:	4654      	mov	r4, sl
 8006ace:	2205      	movs	r2, #5
 8006ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ad4:	484e      	ldr	r0, [pc, #312]	@ (8006c10 <_svfiprintf_r+0x1e4>)
 8006ad6:	f7f9 fb7b 	bl	80001d0 <memchr>
 8006ada:	9a04      	ldr	r2, [sp, #16]
 8006adc:	b9d8      	cbnz	r0, 8006b16 <_svfiprintf_r+0xea>
 8006ade:	06d0      	lsls	r0, r2, #27
 8006ae0:	bf44      	itt	mi
 8006ae2:	2320      	movmi	r3, #32
 8006ae4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ae8:	0711      	lsls	r1, r2, #28
 8006aea:	bf44      	itt	mi
 8006aec:	232b      	movmi	r3, #43	@ 0x2b
 8006aee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006af2:	f89a 3000 	ldrb.w	r3, [sl]
 8006af6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af8:	d015      	beq.n	8006b26 <_svfiprintf_r+0xfa>
 8006afa:	9a07      	ldr	r2, [sp, #28]
 8006afc:	4654      	mov	r4, sl
 8006afe:	2000      	movs	r0, #0
 8006b00:	f04f 0c0a 	mov.w	ip, #10
 8006b04:	4621      	mov	r1, r4
 8006b06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b0a:	3b30      	subs	r3, #48	@ 0x30
 8006b0c:	2b09      	cmp	r3, #9
 8006b0e:	d94b      	bls.n	8006ba8 <_svfiprintf_r+0x17c>
 8006b10:	b1b0      	cbz	r0, 8006b40 <_svfiprintf_r+0x114>
 8006b12:	9207      	str	r2, [sp, #28]
 8006b14:	e014      	b.n	8006b40 <_svfiprintf_r+0x114>
 8006b16:	eba0 0308 	sub.w	r3, r0, r8
 8006b1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	9304      	str	r3, [sp, #16]
 8006b22:	46a2      	mov	sl, r4
 8006b24:	e7d2      	b.n	8006acc <_svfiprintf_r+0xa0>
 8006b26:	9b03      	ldr	r3, [sp, #12]
 8006b28:	1d19      	adds	r1, r3, #4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	9103      	str	r1, [sp, #12]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	bfbb      	ittet	lt
 8006b32:	425b      	neglt	r3, r3
 8006b34:	f042 0202 	orrlt.w	r2, r2, #2
 8006b38:	9307      	strge	r3, [sp, #28]
 8006b3a:	9307      	strlt	r3, [sp, #28]
 8006b3c:	bfb8      	it	lt
 8006b3e:	9204      	strlt	r2, [sp, #16]
 8006b40:	7823      	ldrb	r3, [r4, #0]
 8006b42:	2b2e      	cmp	r3, #46	@ 0x2e
 8006b44:	d10a      	bne.n	8006b5c <_svfiprintf_r+0x130>
 8006b46:	7863      	ldrb	r3, [r4, #1]
 8006b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b4a:	d132      	bne.n	8006bb2 <_svfiprintf_r+0x186>
 8006b4c:	9b03      	ldr	r3, [sp, #12]
 8006b4e:	1d1a      	adds	r2, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	9203      	str	r2, [sp, #12]
 8006b54:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b58:	3402      	adds	r4, #2
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c20 <_svfiprintf_r+0x1f4>
 8006b60:	7821      	ldrb	r1, [r4, #0]
 8006b62:	2203      	movs	r2, #3
 8006b64:	4650      	mov	r0, sl
 8006b66:	f7f9 fb33 	bl	80001d0 <memchr>
 8006b6a:	b138      	cbz	r0, 8006b7c <_svfiprintf_r+0x150>
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	eba0 000a 	sub.w	r0, r0, sl
 8006b72:	2240      	movs	r2, #64	@ 0x40
 8006b74:	4082      	lsls	r2, r0
 8006b76:	4313      	orrs	r3, r2
 8006b78:	3401      	adds	r4, #1
 8006b7a:	9304      	str	r3, [sp, #16]
 8006b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b80:	4824      	ldr	r0, [pc, #144]	@ (8006c14 <_svfiprintf_r+0x1e8>)
 8006b82:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b86:	2206      	movs	r2, #6
 8006b88:	f7f9 fb22 	bl	80001d0 <memchr>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d036      	beq.n	8006bfe <_svfiprintf_r+0x1d2>
 8006b90:	4b21      	ldr	r3, [pc, #132]	@ (8006c18 <_svfiprintf_r+0x1ec>)
 8006b92:	bb1b      	cbnz	r3, 8006bdc <_svfiprintf_r+0x1b0>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	3307      	adds	r3, #7
 8006b98:	f023 0307 	bic.w	r3, r3, #7
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba2:	4433      	add	r3, r6
 8006ba4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ba6:	e76a      	b.n	8006a7e <_svfiprintf_r+0x52>
 8006ba8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bac:	460c      	mov	r4, r1
 8006bae:	2001      	movs	r0, #1
 8006bb0:	e7a8      	b.n	8006b04 <_svfiprintf_r+0xd8>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	3401      	adds	r4, #1
 8006bb6:	9305      	str	r3, [sp, #20]
 8006bb8:	4619      	mov	r1, r3
 8006bba:	f04f 0c0a 	mov.w	ip, #10
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc4:	3a30      	subs	r2, #48	@ 0x30
 8006bc6:	2a09      	cmp	r2, #9
 8006bc8:	d903      	bls.n	8006bd2 <_svfiprintf_r+0x1a6>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d0c6      	beq.n	8006b5c <_svfiprintf_r+0x130>
 8006bce:	9105      	str	r1, [sp, #20]
 8006bd0:	e7c4      	b.n	8006b5c <_svfiprintf_r+0x130>
 8006bd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd6:	4604      	mov	r4, r0
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e7f0      	b.n	8006bbe <_svfiprintf_r+0x192>
 8006bdc:	ab03      	add	r3, sp, #12
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	462a      	mov	r2, r5
 8006be2:	4b0e      	ldr	r3, [pc, #56]	@ (8006c1c <_svfiprintf_r+0x1f0>)
 8006be4:	a904      	add	r1, sp, #16
 8006be6:	4638      	mov	r0, r7
 8006be8:	f7fd fe56 	bl	8004898 <_printf_float>
 8006bec:	1c42      	adds	r2, r0, #1
 8006bee:	4606      	mov	r6, r0
 8006bf0:	d1d6      	bne.n	8006ba0 <_svfiprintf_r+0x174>
 8006bf2:	89ab      	ldrh	r3, [r5, #12]
 8006bf4:	065b      	lsls	r3, r3, #25
 8006bf6:	f53f af2d 	bmi.w	8006a54 <_svfiprintf_r+0x28>
 8006bfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bfc:	e72c      	b.n	8006a58 <_svfiprintf_r+0x2c>
 8006bfe:	ab03      	add	r3, sp, #12
 8006c00:	9300      	str	r3, [sp, #0]
 8006c02:	462a      	mov	r2, r5
 8006c04:	4b05      	ldr	r3, [pc, #20]	@ (8006c1c <_svfiprintf_r+0x1f0>)
 8006c06:	a904      	add	r1, sp, #16
 8006c08:	4638      	mov	r0, r7
 8006c0a:	f7fe f8dd 	bl	8004dc8 <_printf_i>
 8006c0e:	e7ed      	b.n	8006bec <_svfiprintf_r+0x1c0>
 8006c10:	08007d1e 	.word	0x08007d1e
 8006c14:	08007d28 	.word	0x08007d28
 8006c18:	08004899 	.word	0x08004899
 8006c1c:	08006975 	.word	0x08006975
 8006c20:	08007d24 	.word	0x08007d24

08006c24 <__sflush_r>:
 8006c24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c2c:	0716      	lsls	r6, r2, #28
 8006c2e:	4605      	mov	r5, r0
 8006c30:	460c      	mov	r4, r1
 8006c32:	d454      	bmi.n	8006cde <__sflush_r+0xba>
 8006c34:	684b      	ldr	r3, [r1, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dc02      	bgt.n	8006c40 <__sflush_r+0x1c>
 8006c3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	dd48      	ble.n	8006cd2 <__sflush_r+0xae>
 8006c40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c42:	2e00      	cmp	r6, #0
 8006c44:	d045      	beq.n	8006cd2 <__sflush_r+0xae>
 8006c46:	2300      	movs	r3, #0
 8006c48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c4c:	682f      	ldr	r7, [r5, #0]
 8006c4e:	6a21      	ldr	r1, [r4, #32]
 8006c50:	602b      	str	r3, [r5, #0]
 8006c52:	d030      	beq.n	8006cb6 <__sflush_r+0x92>
 8006c54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	0759      	lsls	r1, r3, #29
 8006c5a:	d505      	bpl.n	8006c68 <__sflush_r+0x44>
 8006c5c:	6863      	ldr	r3, [r4, #4]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c62:	b10b      	cbz	r3, 8006c68 <__sflush_r+0x44>
 8006c64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c66:	1ad2      	subs	r2, r2, r3
 8006c68:	2300      	movs	r3, #0
 8006c6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c6c:	6a21      	ldr	r1, [r4, #32]
 8006c6e:	4628      	mov	r0, r5
 8006c70:	47b0      	blx	r6
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	89a3      	ldrh	r3, [r4, #12]
 8006c76:	d106      	bne.n	8006c86 <__sflush_r+0x62>
 8006c78:	6829      	ldr	r1, [r5, #0]
 8006c7a:	291d      	cmp	r1, #29
 8006c7c:	d82b      	bhi.n	8006cd6 <__sflush_r+0xb2>
 8006c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8006d28 <__sflush_r+0x104>)
 8006c80:	40ca      	lsrs	r2, r1
 8006c82:	07d6      	lsls	r6, r2, #31
 8006c84:	d527      	bpl.n	8006cd6 <__sflush_r+0xb2>
 8006c86:	2200      	movs	r2, #0
 8006c88:	6062      	str	r2, [r4, #4]
 8006c8a:	04d9      	lsls	r1, r3, #19
 8006c8c:	6922      	ldr	r2, [r4, #16]
 8006c8e:	6022      	str	r2, [r4, #0]
 8006c90:	d504      	bpl.n	8006c9c <__sflush_r+0x78>
 8006c92:	1c42      	adds	r2, r0, #1
 8006c94:	d101      	bne.n	8006c9a <__sflush_r+0x76>
 8006c96:	682b      	ldr	r3, [r5, #0]
 8006c98:	b903      	cbnz	r3, 8006c9c <__sflush_r+0x78>
 8006c9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c9e:	602f      	str	r7, [r5, #0]
 8006ca0:	b1b9      	cbz	r1, 8006cd2 <__sflush_r+0xae>
 8006ca2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	d002      	beq.n	8006cb0 <__sflush_r+0x8c>
 8006caa:	4628      	mov	r0, r5
 8006cac:	f7ff f9e8 	bl	8006080 <_free_r>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cb4:	e00d      	b.n	8006cd2 <__sflush_r+0xae>
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b0      	blx	r6
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	1c50      	adds	r0, r2, #1
 8006cc0:	d1c9      	bne.n	8006c56 <__sflush_r+0x32>
 8006cc2:	682b      	ldr	r3, [r5, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0c6      	beq.n	8006c56 <__sflush_r+0x32>
 8006cc8:	2b1d      	cmp	r3, #29
 8006cca:	d001      	beq.n	8006cd0 <__sflush_r+0xac>
 8006ccc:	2b16      	cmp	r3, #22
 8006cce:	d11e      	bne.n	8006d0e <__sflush_r+0xea>
 8006cd0:	602f      	str	r7, [r5, #0]
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	e022      	b.n	8006d1c <__sflush_r+0xf8>
 8006cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cda:	b21b      	sxth	r3, r3
 8006cdc:	e01b      	b.n	8006d16 <__sflush_r+0xf2>
 8006cde:	690f      	ldr	r7, [r1, #16]
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	d0f6      	beq.n	8006cd2 <__sflush_r+0xae>
 8006ce4:	0793      	lsls	r3, r2, #30
 8006ce6:	680e      	ldr	r6, [r1, #0]
 8006ce8:	bf08      	it	eq
 8006cea:	694b      	ldreq	r3, [r1, #20]
 8006cec:	600f      	str	r7, [r1, #0]
 8006cee:	bf18      	it	ne
 8006cf0:	2300      	movne	r3, #0
 8006cf2:	eba6 0807 	sub.w	r8, r6, r7
 8006cf6:	608b      	str	r3, [r1, #8]
 8006cf8:	f1b8 0f00 	cmp.w	r8, #0
 8006cfc:	dde9      	ble.n	8006cd2 <__sflush_r+0xae>
 8006cfe:	6a21      	ldr	r1, [r4, #32]
 8006d00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d02:	4643      	mov	r3, r8
 8006d04:	463a      	mov	r2, r7
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b0      	blx	r6
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	dc08      	bgt.n	8006d20 <__sflush_r+0xfc>
 8006d0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d20:	4407      	add	r7, r0
 8006d22:	eba8 0800 	sub.w	r8, r8, r0
 8006d26:	e7e7      	b.n	8006cf8 <__sflush_r+0xd4>
 8006d28:	20400001 	.word	0x20400001

08006d2c <_fflush_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	690b      	ldr	r3, [r1, #16]
 8006d30:	4605      	mov	r5, r0
 8006d32:	460c      	mov	r4, r1
 8006d34:	b913      	cbnz	r3, 8006d3c <_fflush_r+0x10>
 8006d36:	2500      	movs	r5, #0
 8006d38:	4628      	mov	r0, r5
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	b118      	cbz	r0, 8006d46 <_fflush_r+0x1a>
 8006d3e:	6a03      	ldr	r3, [r0, #32]
 8006d40:	b90b      	cbnz	r3, 8006d46 <_fflush_r+0x1a>
 8006d42:	f7fe f9eb 	bl	800511c <__sinit>
 8006d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d0f3      	beq.n	8006d36 <_fflush_r+0xa>
 8006d4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d50:	07d0      	lsls	r0, r2, #31
 8006d52:	d404      	bmi.n	8006d5e <_fflush_r+0x32>
 8006d54:	0599      	lsls	r1, r3, #22
 8006d56:	d402      	bmi.n	8006d5e <_fflush_r+0x32>
 8006d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d5a:	f7fe fb26 	bl	80053aa <__retarget_lock_acquire_recursive>
 8006d5e:	4628      	mov	r0, r5
 8006d60:	4621      	mov	r1, r4
 8006d62:	f7ff ff5f 	bl	8006c24 <__sflush_r>
 8006d66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d68:	07da      	lsls	r2, r3, #31
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	d4e4      	bmi.n	8006d38 <_fflush_r+0xc>
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	059b      	lsls	r3, r3, #22
 8006d72:	d4e1      	bmi.n	8006d38 <_fflush_r+0xc>
 8006d74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d76:	f7fe fb19 	bl	80053ac <__retarget_lock_release_recursive>
 8006d7a:	e7dd      	b.n	8006d38 <_fflush_r+0xc>

08006d7c <_sbrk_r>:
 8006d7c:	b538      	push	{r3, r4, r5, lr}
 8006d7e:	4d06      	ldr	r5, [pc, #24]	@ (8006d98 <_sbrk_r+0x1c>)
 8006d80:	2300      	movs	r3, #0
 8006d82:	4604      	mov	r4, r0
 8006d84:	4608      	mov	r0, r1
 8006d86:	602b      	str	r3, [r5, #0]
 8006d88:	f7fa fd6c 	bl	8001864 <_sbrk>
 8006d8c:	1c43      	adds	r3, r0, #1
 8006d8e:	d102      	bne.n	8006d96 <_sbrk_r+0x1a>
 8006d90:	682b      	ldr	r3, [r5, #0]
 8006d92:	b103      	cbz	r3, 8006d96 <_sbrk_r+0x1a>
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	bd38      	pop	{r3, r4, r5, pc}
 8006d98:	20000894 	.word	0x20000894

08006d9c <__assert_func>:
 8006d9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d9e:	4614      	mov	r4, r2
 8006da0:	461a      	mov	r2, r3
 8006da2:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <__assert_func+0x2c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4605      	mov	r5, r0
 8006da8:	68d8      	ldr	r0, [r3, #12]
 8006daa:	b14c      	cbz	r4, 8006dc0 <__assert_func+0x24>
 8006dac:	4b07      	ldr	r3, [pc, #28]	@ (8006dcc <__assert_func+0x30>)
 8006dae:	9100      	str	r1, [sp, #0]
 8006db0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006db4:	4906      	ldr	r1, [pc, #24]	@ (8006dd0 <__assert_func+0x34>)
 8006db6:	462b      	mov	r3, r5
 8006db8:	f000 f870 	bl	8006e9c <fiprintf>
 8006dbc:	f000 f880 	bl	8006ec0 <abort>
 8006dc0:	4b04      	ldr	r3, [pc, #16]	@ (8006dd4 <__assert_func+0x38>)
 8006dc2:	461c      	mov	r4, r3
 8006dc4:	e7f3      	b.n	8006dae <__assert_func+0x12>
 8006dc6:	bf00      	nop
 8006dc8:	20000018 	.word	0x20000018
 8006dcc:	08007d39 	.word	0x08007d39
 8006dd0:	08007d46 	.word	0x08007d46
 8006dd4:	08007d74 	.word	0x08007d74

08006dd8 <_calloc_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	fba1 5402 	umull	r5, r4, r1, r2
 8006dde:	b934      	cbnz	r4, 8006dee <_calloc_r+0x16>
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7ff f9c1 	bl	8006168 <_malloc_r>
 8006de6:	4606      	mov	r6, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <_calloc_r+0x1e>
 8006dea:	4630      	mov	r0, r6
 8006dec:	bd70      	pop	{r4, r5, r6, pc}
 8006dee:	220c      	movs	r2, #12
 8006df0:	6002      	str	r2, [r0, #0]
 8006df2:	2600      	movs	r6, #0
 8006df4:	e7f9      	b.n	8006dea <_calloc_r+0x12>
 8006df6:	462a      	mov	r2, r5
 8006df8:	4621      	mov	r1, r4
 8006dfa:	f7fe fa58 	bl	80052ae <memset>
 8006dfe:	e7f4      	b.n	8006dea <_calloc_r+0x12>

08006e00 <__ascii_mbtowc>:
 8006e00:	b082      	sub	sp, #8
 8006e02:	b901      	cbnz	r1, 8006e06 <__ascii_mbtowc+0x6>
 8006e04:	a901      	add	r1, sp, #4
 8006e06:	b142      	cbz	r2, 8006e1a <__ascii_mbtowc+0x1a>
 8006e08:	b14b      	cbz	r3, 8006e1e <__ascii_mbtowc+0x1e>
 8006e0a:	7813      	ldrb	r3, [r2, #0]
 8006e0c:	600b      	str	r3, [r1, #0]
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	1e10      	subs	r0, r2, #0
 8006e12:	bf18      	it	ne
 8006e14:	2001      	movne	r0, #1
 8006e16:	b002      	add	sp, #8
 8006e18:	4770      	bx	lr
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	e7fb      	b.n	8006e16 <__ascii_mbtowc+0x16>
 8006e1e:	f06f 0001 	mvn.w	r0, #1
 8006e22:	e7f8      	b.n	8006e16 <__ascii_mbtowc+0x16>

08006e24 <_realloc_r>:
 8006e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e28:	4607      	mov	r7, r0
 8006e2a:	4614      	mov	r4, r2
 8006e2c:	460d      	mov	r5, r1
 8006e2e:	b921      	cbnz	r1, 8006e3a <_realloc_r+0x16>
 8006e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e34:	4611      	mov	r1, r2
 8006e36:	f7ff b997 	b.w	8006168 <_malloc_r>
 8006e3a:	b92a      	cbnz	r2, 8006e48 <_realloc_r+0x24>
 8006e3c:	f7ff f920 	bl	8006080 <_free_r>
 8006e40:	4625      	mov	r5, r4
 8006e42:	4628      	mov	r0, r5
 8006e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e48:	f000 f841 	bl	8006ece <_malloc_usable_size_r>
 8006e4c:	4284      	cmp	r4, r0
 8006e4e:	4606      	mov	r6, r0
 8006e50:	d802      	bhi.n	8006e58 <_realloc_r+0x34>
 8006e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e56:	d8f4      	bhi.n	8006e42 <_realloc_r+0x1e>
 8006e58:	4621      	mov	r1, r4
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	f7ff f984 	bl	8006168 <_malloc_r>
 8006e60:	4680      	mov	r8, r0
 8006e62:	b908      	cbnz	r0, 8006e68 <_realloc_r+0x44>
 8006e64:	4645      	mov	r5, r8
 8006e66:	e7ec      	b.n	8006e42 <_realloc_r+0x1e>
 8006e68:	42b4      	cmp	r4, r6
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	4629      	mov	r1, r5
 8006e6e:	bf28      	it	cs
 8006e70:	4632      	movcs	r2, r6
 8006e72:	f7fe fa9c 	bl	80053ae <memcpy>
 8006e76:	4629      	mov	r1, r5
 8006e78:	4638      	mov	r0, r7
 8006e7a:	f7ff f901 	bl	8006080 <_free_r>
 8006e7e:	e7f1      	b.n	8006e64 <_realloc_r+0x40>

08006e80 <__ascii_wctomb>:
 8006e80:	4603      	mov	r3, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	b141      	cbz	r1, 8006e98 <__ascii_wctomb+0x18>
 8006e86:	2aff      	cmp	r2, #255	@ 0xff
 8006e88:	d904      	bls.n	8006e94 <__ascii_wctomb+0x14>
 8006e8a:	228a      	movs	r2, #138	@ 0x8a
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006e92:	4770      	bx	lr
 8006e94:	700a      	strb	r2, [r1, #0]
 8006e96:	2001      	movs	r0, #1
 8006e98:	4770      	bx	lr
	...

08006e9c <fiprintf>:
 8006e9c:	b40e      	push	{r1, r2, r3}
 8006e9e:	b503      	push	{r0, r1, lr}
 8006ea0:	4601      	mov	r1, r0
 8006ea2:	ab03      	add	r3, sp, #12
 8006ea4:	4805      	ldr	r0, [pc, #20]	@ (8006ebc <fiprintf+0x20>)
 8006ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006eaa:	6800      	ldr	r0, [r0, #0]
 8006eac:	9301      	str	r3, [sp, #4]
 8006eae:	f000 f83f 	bl	8006f30 <_vfiprintf_r>
 8006eb2:	b002      	add	sp, #8
 8006eb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eb8:	b003      	add	sp, #12
 8006eba:	4770      	bx	lr
 8006ebc:	20000018 	.word	0x20000018

08006ec0 <abort>:
 8006ec0:	b508      	push	{r3, lr}
 8006ec2:	2006      	movs	r0, #6
 8006ec4:	f000 fa08 	bl	80072d8 <raise>
 8006ec8:	2001      	movs	r0, #1
 8006eca:	f7fa fc52 	bl	8001772 <_exit>

08006ece <_malloc_usable_size_r>:
 8006ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ed2:	1f18      	subs	r0, r3, #4
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	bfbc      	itt	lt
 8006ed8:	580b      	ldrlt	r3, [r1, r0]
 8006eda:	18c0      	addlt	r0, r0, r3
 8006edc:	4770      	bx	lr

08006ede <__sfputc_r>:
 8006ede:	6893      	ldr	r3, [r2, #8]
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	b410      	push	{r4}
 8006ee6:	6093      	str	r3, [r2, #8]
 8006ee8:	da08      	bge.n	8006efc <__sfputc_r+0x1e>
 8006eea:	6994      	ldr	r4, [r2, #24]
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	db01      	blt.n	8006ef4 <__sfputc_r+0x16>
 8006ef0:	290a      	cmp	r1, #10
 8006ef2:	d103      	bne.n	8006efc <__sfputc_r+0x1e>
 8006ef4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ef8:	f000 b932 	b.w	8007160 <__swbuf_r>
 8006efc:	6813      	ldr	r3, [r2, #0]
 8006efe:	1c58      	adds	r0, r3, #1
 8006f00:	6010      	str	r0, [r2, #0]
 8006f02:	7019      	strb	r1, [r3, #0]
 8006f04:	4608      	mov	r0, r1
 8006f06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <__sfputs_r>:
 8006f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0e:	4606      	mov	r6, r0
 8006f10:	460f      	mov	r7, r1
 8006f12:	4614      	mov	r4, r2
 8006f14:	18d5      	adds	r5, r2, r3
 8006f16:	42ac      	cmp	r4, r5
 8006f18:	d101      	bne.n	8006f1e <__sfputs_r+0x12>
 8006f1a:	2000      	movs	r0, #0
 8006f1c:	e007      	b.n	8006f2e <__sfputs_r+0x22>
 8006f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f22:	463a      	mov	r2, r7
 8006f24:	4630      	mov	r0, r6
 8006f26:	f7ff ffda 	bl	8006ede <__sfputc_r>
 8006f2a:	1c43      	adds	r3, r0, #1
 8006f2c:	d1f3      	bne.n	8006f16 <__sfputs_r+0xa>
 8006f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006f30 <_vfiprintf_r>:
 8006f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f34:	460d      	mov	r5, r1
 8006f36:	b09d      	sub	sp, #116	@ 0x74
 8006f38:	4614      	mov	r4, r2
 8006f3a:	4698      	mov	r8, r3
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	b118      	cbz	r0, 8006f48 <_vfiprintf_r+0x18>
 8006f40:	6a03      	ldr	r3, [r0, #32]
 8006f42:	b90b      	cbnz	r3, 8006f48 <_vfiprintf_r+0x18>
 8006f44:	f7fe f8ea 	bl	800511c <__sinit>
 8006f48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f4a:	07d9      	lsls	r1, r3, #31
 8006f4c:	d405      	bmi.n	8006f5a <_vfiprintf_r+0x2a>
 8006f4e:	89ab      	ldrh	r3, [r5, #12]
 8006f50:	059a      	lsls	r2, r3, #22
 8006f52:	d402      	bmi.n	8006f5a <_vfiprintf_r+0x2a>
 8006f54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f56:	f7fe fa28 	bl	80053aa <__retarget_lock_acquire_recursive>
 8006f5a:	89ab      	ldrh	r3, [r5, #12]
 8006f5c:	071b      	lsls	r3, r3, #28
 8006f5e:	d501      	bpl.n	8006f64 <_vfiprintf_r+0x34>
 8006f60:	692b      	ldr	r3, [r5, #16]
 8006f62:	b99b      	cbnz	r3, 8006f8c <_vfiprintf_r+0x5c>
 8006f64:	4629      	mov	r1, r5
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 f938 	bl	80071dc <__swsetup_r>
 8006f6c:	b170      	cbz	r0, 8006f8c <_vfiprintf_r+0x5c>
 8006f6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006f70:	07dc      	lsls	r4, r3, #31
 8006f72:	d504      	bpl.n	8006f7e <_vfiprintf_r+0x4e>
 8006f74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f78:	b01d      	add	sp, #116	@ 0x74
 8006f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	0598      	lsls	r0, r3, #22
 8006f82:	d4f7      	bmi.n	8006f74 <_vfiprintf_r+0x44>
 8006f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006f86:	f7fe fa11 	bl	80053ac <__retarget_lock_release_recursive>
 8006f8a:	e7f3      	b.n	8006f74 <_vfiprintf_r+0x44>
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f90:	2320      	movs	r3, #32
 8006f92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006f96:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f9a:	2330      	movs	r3, #48	@ 0x30
 8006f9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800714c <_vfiprintf_r+0x21c>
 8006fa0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006fa4:	f04f 0901 	mov.w	r9, #1
 8006fa8:	4623      	mov	r3, r4
 8006faa:	469a      	mov	sl, r3
 8006fac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fb0:	b10a      	cbz	r2, 8006fb6 <_vfiprintf_r+0x86>
 8006fb2:	2a25      	cmp	r2, #37	@ 0x25
 8006fb4:	d1f9      	bne.n	8006faa <_vfiprintf_r+0x7a>
 8006fb6:	ebba 0b04 	subs.w	fp, sl, r4
 8006fba:	d00b      	beq.n	8006fd4 <_vfiprintf_r+0xa4>
 8006fbc:	465b      	mov	r3, fp
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	f7ff ffa2 	bl	8006f0c <__sfputs_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f000 80a7 	beq.w	800711c <_vfiprintf_r+0x1ec>
 8006fce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fd0:	445a      	add	r2, fp
 8006fd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fd4:	f89a 3000 	ldrb.w	r3, [sl]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	f000 809f 	beq.w	800711c <_vfiprintf_r+0x1ec>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006fe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fe8:	f10a 0a01 	add.w	sl, sl, #1
 8006fec:	9304      	str	r3, [sp, #16]
 8006fee:	9307      	str	r3, [sp, #28]
 8006ff0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ff4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ff6:	4654      	mov	r4, sl
 8006ff8:	2205      	movs	r2, #5
 8006ffa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ffe:	4853      	ldr	r0, [pc, #332]	@ (800714c <_vfiprintf_r+0x21c>)
 8007000:	f7f9 f8e6 	bl	80001d0 <memchr>
 8007004:	9a04      	ldr	r2, [sp, #16]
 8007006:	b9d8      	cbnz	r0, 8007040 <_vfiprintf_r+0x110>
 8007008:	06d1      	lsls	r1, r2, #27
 800700a:	bf44      	itt	mi
 800700c:	2320      	movmi	r3, #32
 800700e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007012:	0713      	lsls	r3, r2, #28
 8007014:	bf44      	itt	mi
 8007016:	232b      	movmi	r3, #43	@ 0x2b
 8007018:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800701c:	f89a 3000 	ldrb.w	r3, [sl]
 8007020:	2b2a      	cmp	r3, #42	@ 0x2a
 8007022:	d015      	beq.n	8007050 <_vfiprintf_r+0x120>
 8007024:	9a07      	ldr	r2, [sp, #28]
 8007026:	4654      	mov	r4, sl
 8007028:	2000      	movs	r0, #0
 800702a:	f04f 0c0a 	mov.w	ip, #10
 800702e:	4621      	mov	r1, r4
 8007030:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007034:	3b30      	subs	r3, #48	@ 0x30
 8007036:	2b09      	cmp	r3, #9
 8007038:	d94b      	bls.n	80070d2 <_vfiprintf_r+0x1a2>
 800703a:	b1b0      	cbz	r0, 800706a <_vfiprintf_r+0x13a>
 800703c:	9207      	str	r2, [sp, #28]
 800703e:	e014      	b.n	800706a <_vfiprintf_r+0x13a>
 8007040:	eba0 0308 	sub.w	r3, r0, r8
 8007044:	fa09 f303 	lsl.w	r3, r9, r3
 8007048:	4313      	orrs	r3, r2
 800704a:	9304      	str	r3, [sp, #16]
 800704c:	46a2      	mov	sl, r4
 800704e:	e7d2      	b.n	8006ff6 <_vfiprintf_r+0xc6>
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	1d19      	adds	r1, r3, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	9103      	str	r1, [sp, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	bfbb      	ittet	lt
 800705c:	425b      	neglt	r3, r3
 800705e:	f042 0202 	orrlt.w	r2, r2, #2
 8007062:	9307      	strge	r3, [sp, #28]
 8007064:	9307      	strlt	r3, [sp, #28]
 8007066:	bfb8      	it	lt
 8007068:	9204      	strlt	r2, [sp, #16]
 800706a:	7823      	ldrb	r3, [r4, #0]
 800706c:	2b2e      	cmp	r3, #46	@ 0x2e
 800706e:	d10a      	bne.n	8007086 <_vfiprintf_r+0x156>
 8007070:	7863      	ldrb	r3, [r4, #1]
 8007072:	2b2a      	cmp	r3, #42	@ 0x2a
 8007074:	d132      	bne.n	80070dc <_vfiprintf_r+0x1ac>
 8007076:	9b03      	ldr	r3, [sp, #12]
 8007078:	1d1a      	adds	r2, r3, #4
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	9203      	str	r2, [sp, #12]
 800707e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007082:	3402      	adds	r4, #2
 8007084:	9305      	str	r3, [sp, #20]
 8007086:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800715c <_vfiprintf_r+0x22c>
 800708a:	7821      	ldrb	r1, [r4, #0]
 800708c:	2203      	movs	r2, #3
 800708e:	4650      	mov	r0, sl
 8007090:	f7f9 f89e 	bl	80001d0 <memchr>
 8007094:	b138      	cbz	r0, 80070a6 <_vfiprintf_r+0x176>
 8007096:	9b04      	ldr	r3, [sp, #16]
 8007098:	eba0 000a 	sub.w	r0, r0, sl
 800709c:	2240      	movs	r2, #64	@ 0x40
 800709e:	4082      	lsls	r2, r0
 80070a0:	4313      	orrs	r3, r2
 80070a2:	3401      	adds	r4, #1
 80070a4:	9304      	str	r3, [sp, #16]
 80070a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070aa:	4829      	ldr	r0, [pc, #164]	@ (8007150 <_vfiprintf_r+0x220>)
 80070ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80070b0:	2206      	movs	r2, #6
 80070b2:	f7f9 f88d 	bl	80001d0 <memchr>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d03f      	beq.n	800713a <_vfiprintf_r+0x20a>
 80070ba:	4b26      	ldr	r3, [pc, #152]	@ (8007154 <_vfiprintf_r+0x224>)
 80070bc:	bb1b      	cbnz	r3, 8007106 <_vfiprintf_r+0x1d6>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	3307      	adds	r3, #7
 80070c2:	f023 0307 	bic.w	r3, r3, #7
 80070c6:	3308      	adds	r3, #8
 80070c8:	9303      	str	r3, [sp, #12]
 80070ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070cc:	443b      	add	r3, r7
 80070ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80070d0:	e76a      	b.n	8006fa8 <_vfiprintf_r+0x78>
 80070d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80070d6:	460c      	mov	r4, r1
 80070d8:	2001      	movs	r0, #1
 80070da:	e7a8      	b.n	800702e <_vfiprintf_r+0xfe>
 80070dc:	2300      	movs	r3, #0
 80070de:	3401      	adds	r4, #1
 80070e0:	9305      	str	r3, [sp, #20]
 80070e2:	4619      	mov	r1, r3
 80070e4:	f04f 0c0a 	mov.w	ip, #10
 80070e8:	4620      	mov	r0, r4
 80070ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070ee:	3a30      	subs	r2, #48	@ 0x30
 80070f0:	2a09      	cmp	r2, #9
 80070f2:	d903      	bls.n	80070fc <_vfiprintf_r+0x1cc>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0c6      	beq.n	8007086 <_vfiprintf_r+0x156>
 80070f8:	9105      	str	r1, [sp, #20]
 80070fa:	e7c4      	b.n	8007086 <_vfiprintf_r+0x156>
 80070fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007100:	4604      	mov	r4, r0
 8007102:	2301      	movs	r3, #1
 8007104:	e7f0      	b.n	80070e8 <_vfiprintf_r+0x1b8>
 8007106:	ab03      	add	r3, sp, #12
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	462a      	mov	r2, r5
 800710c:	4b12      	ldr	r3, [pc, #72]	@ (8007158 <_vfiprintf_r+0x228>)
 800710e:	a904      	add	r1, sp, #16
 8007110:	4630      	mov	r0, r6
 8007112:	f7fd fbc1 	bl	8004898 <_printf_float>
 8007116:	4607      	mov	r7, r0
 8007118:	1c78      	adds	r0, r7, #1
 800711a:	d1d6      	bne.n	80070ca <_vfiprintf_r+0x19a>
 800711c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800711e:	07d9      	lsls	r1, r3, #31
 8007120:	d405      	bmi.n	800712e <_vfiprintf_r+0x1fe>
 8007122:	89ab      	ldrh	r3, [r5, #12]
 8007124:	059a      	lsls	r2, r3, #22
 8007126:	d402      	bmi.n	800712e <_vfiprintf_r+0x1fe>
 8007128:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800712a:	f7fe f93f 	bl	80053ac <__retarget_lock_release_recursive>
 800712e:	89ab      	ldrh	r3, [r5, #12]
 8007130:	065b      	lsls	r3, r3, #25
 8007132:	f53f af1f 	bmi.w	8006f74 <_vfiprintf_r+0x44>
 8007136:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007138:	e71e      	b.n	8006f78 <_vfiprintf_r+0x48>
 800713a:	ab03      	add	r3, sp, #12
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	462a      	mov	r2, r5
 8007140:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <_vfiprintf_r+0x228>)
 8007142:	a904      	add	r1, sp, #16
 8007144:	4630      	mov	r0, r6
 8007146:	f7fd fe3f 	bl	8004dc8 <_printf_i>
 800714a:	e7e4      	b.n	8007116 <_vfiprintf_r+0x1e6>
 800714c:	08007d1e 	.word	0x08007d1e
 8007150:	08007d28 	.word	0x08007d28
 8007154:	08004899 	.word	0x08004899
 8007158:	08006f0d 	.word	0x08006f0d
 800715c:	08007d24 	.word	0x08007d24

08007160 <__swbuf_r>:
 8007160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007162:	460e      	mov	r6, r1
 8007164:	4614      	mov	r4, r2
 8007166:	4605      	mov	r5, r0
 8007168:	b118      	cbz	r0, 8007172 <__swbuf_r+0x12>
 800716a:	6a03      	ldr	r3, [r0, #32]
 800716c:	b90b      	cbnz	r3, 8007172 <__swbuf_r+0x12>
 800716e:	f7fd ffd5 	bl	800511c <__sinit>
 8007172:	69a3      	ldr	r3, [r4, #24]
 8007174:	60a3      	str	r3, [r4, #8]
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	071a      	lsls	r2, r3, #28
 800717a:	d501      	bpl.n	8007180 <__swbuf_r+0x20>
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	b943      	cbnz	r3, 8007192 <__swbuf_r+0x32>
 8007180:	4621      	mov	r1, r4
 8007182:	4628      	mov	r0, r5
 8007184:	f000 f82a 	bl	80071dc <__swsetup_r>
 8007188:	b118      	cbz	r0, 8007192 <__swbuf_r+0x32>
 800718a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800718e:	4638      	mov	r0, r7
 8007190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	6922      	ldr	r2, [r4, #16]
 8007196:	1a98      	subs	r0, r3, r2
 8007198:	6963      	ldr	r3, [r4, #20]
 800719a:	b2f6      	uxtb	r6, r6
 800719c:	4283      	cmp	r3, r0
 800719e:	4637      	mov	r7, r6
 80071a0:	dc05      	bgt.n	80071ae <__swbuf_r+0x4e>
 80071a2:	4621      	mov	r1, r4
 80071a4:	4628      	mov	r0, r5
 80071a6:	f7ff fdc1 	bl	8006d2c <_fflush_r>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d1ed      	bne.n	800718a <__swbuf_r+0x2a>
 80071ae:	68a3      	ldr	r3, [r4, #8]
 80071b0:	3b01      	subs	r3, #1
 80071b2:	60a3      	str	r3, [r4, #8]
 80071b4:	6823      	ldr	r3, [r4, #0]
 80071b6:	1c5a      	adds	r2, r3, #1
 80071b8:	6022      	str	r2, [r4, #0]
 80071ba:	701e      	strb	r6, [r3, #0]
 80071bc:	6962      	ldr	r2, [r4, #20]
 80071be:	1c43      	adds	r3, r0, #1
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d004      	beq.n	80071ce <__swbuf_r+0x6e>
 80071c4:	89a3      	ldrh	r3, [r4, #12]
 80071c6:	07db      	lsls	r3, r3, #31
 80071c8:	d5e1      	bpl.n	800718e <__swbuf_r+0x2e>
 80071ca:	2e0a      	cmp	r6, #10
 80071cc:	d1df      	bne.n	800718e <__swbuf_r+0x2e>
 80071ce:	4621      	mov	r1, r4
 80071d0:	4628      	mov	r0, r5
 80071d2:	f7ff fdab 	bl	8006d2c <_fflush_r>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	d0d9      	beq.n	800718e <__swbuf_r+0x2e>
 80071da:	e7d6      	b.n	800718a <__swbuf_r+0x2a>

080071dc <__swsetup_r>:
 80071dc:	b538      	push	{r3, r4, r5, lr}
 80071de:	4b29      	ldr	r3, [pc, #164]	@ (8007284 <__swsetup_r+0xa8>)
 80071e0:	4605      	mov	r5, r0
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	460c      	mov	r4, r1
 80071e6:	b118      	cbz	r0, 80071f0 <__swsetup_r+0x14>
 80071e8:	6a03      	ldr	r3, [r0, #32]
 80071ea:	b90b      	cbnz	r3, 80071f0 <__swsetup_r+0x14>
 80071ec:	f7fd ff96 	bl	800511c <__sinit>
 80071f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071f4:	0719      	lsls	r1, r3, #28
 80071f6:	d422      	bmi.n	800723e <__swsetup_r+0x62>
 80071f8:	06da      	lsls	r2, r3, #27
 80071fa:	d407      	bmi.n	800720c <__swsetup_r+0x30>
 80071fc:	2209      	movs	r2, #9
 80071fe:	602a      	str	r2, [r5, #0]
 8007200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007204:	81a3      	strh	r3, [r4, #12]
 8007206:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800720a:	e033      	b.n	8007274 <__swsetup_r+0x98>
 800720c:	0758      	lsls	r0, r3, #29
 800720e:	d512      	bpl.n	8007236 <__swsetup_r+0x5a>
 8007210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007212:	b141      	cbz	r1, 8007226 <__swsetup_r+0x4a>
 8007214:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007218:	4299      	cmp	r1, r3
 800721a:	d002      	beq.n	8007222 <__swsetup_r+0x46>
 800721c:	4628      	mov	r0, r5
 800721e:	f7fe ff2f 	bl	8006080 <_free_r>
 8007222:	2300      	movs	r3, #0
 8007224:	6363      	str	r3, [r4, #52]	@ 0x34
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800722c:	81a3      	strh	r3, [r4, #12]
 800722e:	2300      	movs	r3, #0
 8007230:	6063      	str	r3, [r4, #4]
 8007232:	6923      	ldr	r3, [r4, #16]
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	f043 0308 	orr.w	r3, r3, #8
 800723c:	81a3      	strh	r3, [r4, #12]
 800723e:	6923      	ldr	r3, [r4, #16]
 8007240:	b94b      	cbnz	r3, 8007256 <__swsetup_r+0x7a>
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007248:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800724c:	d003      	beq.n	8007256 <__swsetup_r+0x7a>
 800724e:	4621      	mov	r1, r4
 8007250:	4628      	mov	r0, r5
 8007252:	f000 f883 	bl	800735c <__smakebuf_r>
 8007256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725a:	f013 0201 	ands.w	r2, r3, #1
 800725e:	d00a      	beq.n	8007276 <__swsetup_r+0x9a>
 8007260:	2200      	movs	r2, #0
 8007262:	60a2      	str	r2, [r4, #8]
 8007264:	6962      	ldr	r2, [r4, #20]
 8007266:	4252      	negs	r2, r2
 8007268:	61a2      	str	r2, [r4, #24]
 800726a:	6922      	ldr	r2, [r4, #16]
 800726c:	b942      	cbnz	r2, 8007280 <__swsetup_r+0xa4>
 800726e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007272:	d1c5      	bne.n	8007200 <__swsetup_r+0x24>
 8007274:	bd38      	pop	{r3, r4, r5, pc}
 8007276:	0799      	lsls	r1, r3, #30
 8007278:	bf58      	it	pl
 800727a:	6962      	ldrpl	r2, [r4, #20]
 800727c:	60a2      	str	r2, [r4, #8]
 800727e:	e7f4      	b.n	800726a <__swsetup_r+0x8e>
 8007280:	2000      	movs	r0, #0
 8007282:	e7f7      	b.n	8007274 <__swsetup_r+0x98>
 8007284:	20000018 	.word	0x20000018

08007288 <_raise_r>:
 8007288:	291f      	cmp	r1, #31
 800728a:	b538      	push	{r3, r4, r5, lr}
 800728c:	4605      	mov	r5, r0
 800728e:	460c      	mov	r4, r1
 8007290:	d904      	bls.n	800729c <_raise_r+0x14>
 8007292:	2316      	movs	r3, #22
 8007294:	6003      	str	r3, [r0, #0]
 8007296:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800729e:	b112      	cbz	r2, 80072a6 <_raise_r+0x1e>
 80072a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072a4:	b94b      	cbnz	r3, 80072ba <_raise_r+0x32>
 80072a6:	4628      	mov	r0, r5
 80072a8:	f000 f830 	bl	800730c <_getpid_r>
 80072ac:	4622      	mov	r2, r4
 80072ae:	4601      	mov	r1, r0
 80072b0:	4628      	mov	r0, r5
 80072b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072b6:	f000 b817 	b.w	80072e8 <_kill_r>
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d00a      	beq.n	80072d4 <_raise_r+0x4c>
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	d103      	bne.n	80072ca <_raise_r+0x42>
 80072c2:	2316      	movs	r3, #22
 80072c4:	6003      	str	r3, [r0, #0]
 80072c6:	2001      	movs	r0, #1
 80072c8:	e7e7      	b.n	800729a <_raise_r+0x12>
 80072ca:	2100      	movs	r1, #0
 80072cc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072d0:	4620      	mov	r0, r4
 80072d2:	4798      	blx	r3
 80072d4:	2000      	movs	r0, #0
 80072d6:	e7e0      	b.n	800729a <_raise_r+0x12>

080072d8 <raise>:
 80072d8:	4b02      	ldr	r3, [pc, #8]	@ (80072e4 <raise+0xc>)
 80072da:	4601      	mov	r1, r0
 80072dc:	6818      	ldr	r0, [r3, #0]
 80072de:	f7ff bfd3 	b.w	8007288 <_raise_r>
 80072e2:	bf00      	nop
 80072e4:	20000018 	.word	0x20000018

080072e8 <_kill_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d07      	ldr	r5, [pc, #28]	@ (8007308 <_kill_r+0x20>)
 80072ec:	2300      	movs	r3, #0
 80072ee:	4604      	mov	r4, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	f7fa fa2c 	bl	8001752 <_kill>
 80072fa:	1c43      	adds	r3, r0, #1
 80072fc:	d102      	bne.n	8007304 <_kill_r+0x1c>
 80072fe:	682b      	ldr	r3, [r5, #0]
 8007300:	b103      	cbz	r3, 8007304 <_kill_r+0x1c>
 8007302:	6023      	str	r3, [r4, #0]
 8007304:	bd38      	pop	{r3, r4, r5, pc}
 8007306:	bf00      	nop
 8007308:	20000894 	.word	0x20000894

0800730c <_getpid_r>:
 800730c:	f7fa ba19 	b.w	8001742 <_getpid>

08007310 <__swhatbuf_r>:
 8007310:	b570      	push	{r4, r5, r6, lr}
 8007312:	460c      	mov	r4, r1
 8007314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007318:	2900      	cmp	r1, #0
 800731a:	b096      	sub	sp, #88	@ 0x58
 800731c:	4615      	mov	r5, r2
 800731e:	461e      	mov	r6, r3
 8007320:	da0d      	bge.n	800733e <__swhatbuf_r+0x2e>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007328:	f04f 0100 	mov.w	r1, #0
 800732c:	bf14      	ite	ne
 800732e:	2340      	movne	r3, #64	@ 0x40
 8007330:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007334:	2000      	movs	r0, #0
 8007336:	6031      	str	r1, [r6, #0]
 8007338:	602b      	str	r3, [r5, #0]
 800733a:	b016      	add	sp, #88	@ 0x58
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	466a      	mov	r2, sp
 8007340:	f000 f848 	bl	80073d4 <_fstat_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	dbec      	blt.n	8007322 <__swhatbuf_r+0x12>
 8007348:	9901      	ldr	r1, [sp, #4]
 800734a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800734e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007352:	4259      	negs	r1, r3
 8007354:	4159      	adcs	r1, r3
 8007356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800735a:	e7eb      	b.n	8007334 <__swhatbuf_r+0x24>

0800735c <__smakebuf_r>:
 800735c:	898b      	ldrh	r3, [r1, #12]
 800735e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007360:	079d      	lsls	r5, r3, #30
 8007362:	4606      	mov	r6, r0
 8007364:	460c      	mov	r4, r1
 8007366:	d507      	bpl.n	8007378 <__smakebuf_r+0x1c>
 8007368:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	6123      	str	r3, [r4, #16]
 8007370:	2301      	movs	r3, #1
 8007372:	6163      	str	r3, [r4, #20]
 8007374:	b003      	add	sp, #12
 8007376:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007378:	ab01      	add	r3, sp, #4
 800737a:	466a      	mov	r2, sp
 800737c:	f7ff ffc8 	bl	8007310 <__swhatbuf_r>
 8007380:	9f00      	ldr	r7, [sp, #0]
 8007382:	4605      	mov	r5, r0
 8007384:	4639      	mov	r1, r7
 8007386:	4630      	mov	r0, r6
 8007388:	f7fe feee 	bl	8006168 <_malloc_r>
 800738c:	b948      	cbnz	r0, 80073a2 <__smakebuf_r+0x46>
 800738e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007392:	059a      	lsls	r2, r3, #22
 8007394:	d4ee      	bmi.n	8007374 <__smakebuf_r+0x18>
 8007396:	f023 0303 	bic.w	r3, r3, #3
 800739a:	f043 0302 	orr.w	r3, r3, #2
 800739e:	81a3      	strh	r3, [r4, #12]
 80073a0:	e7e2      	b.n	8007368 <__smakebuf_r+0xc>
 80073a2:	89a3      	ldrh	r3, [r4, #12]
 80073a4:	6020      	str	r0, [r4, #0]
 80073a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073aa:	81a3      	strh	r3, [r4, #12]
 80073ac:	9b01      	ldr	r3, [sp, #4]
 80073ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073b2:	b15b      	cbz	r3, 80073cc <__smakebuf_r+0x70>
 80073b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b8:	4630      	mov	r0, r6
 80073ba:	f000 f81d 	bl	80073f8 <_isatty_r>
 80073be:	b128      	cbz	r0, 80073cc <__smakebuf_r+0x70>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f023 0303 	bic.w	r3, r3, #3
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	431d      	orrs	r5, r3
 80073d0:	81a5      	strh	r5, [r4, #12]
 80073d2:	e7cf      	b.n	8007374 <__smakebuf_r+0x18>

080073d4 <_fstat_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	4d07      	ldr	r5, [pc, #28]	@ (80073f4 <_fstat_r+0x20>)
 80073d8:	2300      	movs	r3, #0
 80073da:	4604      	mov	r4, r0
 80073dc:	4608      	mov	r0, r1
 80073de:	4611      	mov	r1, r2
 80073e0:	602b      	str	r3, [r5, #0]
 80073e2:	f7fa fa16 	bl	8001812 <_fstat>
 80073e6:	1c43      	adds	r3, r0, #1
 80073e8:	d102      	bne.n	80073f0 <_fstat_r+0x1c>
 80073ea:	682b      	ldr	r3, [r5, #0]
 80073ec:	b103      	cbz	r3, 80073f0 <_fstat_r+0x1c>
 80073ee:	6023      	str	r3, [r4, #0]
 80073f0:	bd38      	pop	{r3, r4, r5, pc}
 80073f2:	bf00      	nop
 80073f4:	20000894 	.word	0x20000894

080073f8 <_isatty_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4d06      	ldr	r5, [pc, #24]	@ (8007414 <_isatty_r+0x1c>)
 80073fc:	2300      	movs	r3, #0
 80073fe:	4604      	mov	r4, r0
 8007400:	4608      	mov	r0, r1
 8007402:	602b      	str	r3, [r5, #0]
 8007404:	f7fa fa15 	bl	8001832 <_isatty>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_isatty_r+0x1a>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_isatty_r+0x1a>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000894 	.word	0x20000894

08007418 <_init>:
 8007418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800741a:	bf00      	nop
 800741c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741e:	bc08      	pop	{r3}
 8007420:	469e      	mov	lr, r3
 8007422:	4770      	bx	lr

08007424 <_fini>:
 8007424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007426:	bf00      	nop
 8007428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800742a:	bc08      	pop	{r3}
 800742c:	469e      	mov	lr, r3
 800742e:	4770      	bx	lr
