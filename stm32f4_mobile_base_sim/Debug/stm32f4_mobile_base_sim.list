
stm32f4_mobile_base_sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb4  0800c960  0800c960  0000d960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d514  0800d514  0000f2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d514  0800d514  0000e514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d51c  0800d51c  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d51c  0800d51c  0000e51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d520  0800d520  0000e520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d524  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00002218  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200024dc  200024dc  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014128  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ae8  00000000  00000000  0002341c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00026f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cfc  00000000  00000000  00028058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026288  00000000  00000000  00028d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017cf0  00000000  00000000  0004efdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d63a7  00000000  00000000  00066ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d073  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000576c  00000000  00000000  0013d0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  00142824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c948 	.word	0x0800c948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c948 	.word	0x0800c948

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f14:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <MX_ADC1_Init+0xa0>)
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f34:	f000 ff3c 	bl	8001db0 <HAL_ADC_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 faef 	bl	8001520 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f42:	230d      	movs	r3, #13
 8000f44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f54:	f001 f8da 	bl	800210c <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f5e:	f000 fadf 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002e0 	.word	0x200002e0
 8000f70:	40012000 	.word	0x40012000
 8000f74:	0f000001 	.word	0x0f000001

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_ADC_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d127      	bne.n	8000fea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_ADC_MspInit+0x84>)
 8000fe6:	f001 fbc1 	bl	800276c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800

08001000 <Read_ADC_Channel>:
  }
}

/* USER CODE BEGIN 1 */
uint32_t Read_ADC_Channel(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001004:	4808      	ldr	r0, [pc, #32]	@ (8001028 <Read_ADC_Channel+0x28>)
 8001006:	f000 ff17 	bl	8001e38 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800100a:	210a      	movs	r1, #10
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <Read_ADC_Channel+0x28>)
 800100e:	f000 ffe5 	bl	8001fdc <HAL_ADC_PollForConversion>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <Read_ADC_Channel+0x22>
    {
        return HAL_ADC_GetValue(&hadc1);
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <Read_ADC_Channel+0x28>)
 800101a:	f001 f86a 	bl	80020f2 <HAL_ADC_GetValue>
 800101e:	4603      	mov	r3, r0
 8001020:	e000      	b.n	8001024 <Read_ADC_Channel+0x24>
    }
    return 0; // Read failed
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200002e0 	.word	0x200002e0

0800102c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <MX_GPIO_Init+0x84>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a16      	ldr	r2, [pc, #88]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a0f      	ldr	r2, [pc, #60]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <MX_GPIO_Init+0x84>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_GPIO_Init+0x84>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <MX_I2C2_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_I2C2_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010f2:	f001 fcd7 	bl	8002aa4 <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 fa10 	bl	8001520 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000328 	.word	0x20000328
 8001108:	40005800 	.word	0x40005800
 800110c:	000186a0 	.word	0x000186a0

08001110 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <HAL_I2C_MspInit+0x84>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12b      	bne.n	800118a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114e:	2303      	movs	r3, #3
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001152:	2312      	movs	r3, #18
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800115e:	2304      	movs	r3, #4
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <HAL_I2C_MspInit+0x8c>)
 800116a:	f001 faff 	bl	800276c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40005800 	.word	0x40005800
 8001198:	40023800 	.word	0x40023800
 800119c:	40021400 	.word	0x40021400

080011a0 <I2C_ScanAndFindLM75A>:

#define LM75A_TEMP_REG  0x00
uint8_t lm75a_addr = 0; // Will be set after scan

void I2C_ScanAndFindLM75A(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	for (uint8_t addr = 1; addr < 127; addr++)
 80011a6:	2301      	movs	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e017      	b.n	80011dc <I2C_ScanAndFindLM75A+0x3c>
	{
		if (HAL_I2C_IsDeviceReady(&hi2c2, (addr << 1), 3, 5) == HAL_OK)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b299      	uxth	r1, r3
 80011b4:	2305      	movs	r3, #5
 80011b6:	2203      	movs	r2, #3
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <I2C_ScanAndFindLM75A+0x4c>)
 80011ba:	f002 f8e3 	bl	8003384 <HAL_I2C_IsDeviceReady>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d108      	bne.n	80011d6 <I2C_ScanAndFindLM75A+0x36>
		{
			if (addr == 0x4F) // Found LM75A
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80011c8:	d105      	bne.n	80011d6 <I2C_ScanAndFindLM75A+0x36>
			{
				lm75a_addr = addr << 1; // Save 8-bit form for HAL
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <I2C_ScanAndFindLM75A+0x50>)
 80011d2:	701a      	strb	r2, [r3, #0]
				break;
 80011d4:	e006      	b.n	80011e4 <I2C_ScanAndFindLM75A+0x44>
	for (uint8_t addr = 1; addr < 127; addr++)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	3301      	adds	r3, #1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b7e      	cmp	r3, #126	@ 0x7e
 80011e0:	d9e4      	bls.n	80011ac <I2C_ScanAndFindLM75A+0xc>
			}
		}
	}
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000328 	.word	0x20000328
 80011f0:	2000037c 	.word	0x2000037c

080011f4 <LM75A_ReadTemperature_Fine>:

float LM75A_ReadTemperature_Fine(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af04      	add	r7, sp, #16
	uint8_t temp_data[2];
	int16_t raw_temp;
	float temperature;

	if (HAL_I2C_Mem_Read(&hi2c2, lm75a_addr, LM75A_TEMP_REG,
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <LM75A_ReadTemperature_Fine+0x84>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2302      	movs	r3, #2
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	481a      	ldr	r0, [pc, #104]	@ (800127c <LM75A_ReadTemperature_Fine+0x88>)
 8001214:	f001 fe84 	bl	8002f20 <HAL_I2C_Mem_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <LM75A_ReadTemperature_Fine+0x2e>
			I2C_MEMADD_SIZE_8BIT, temp_data, 2, HAL_MAX_DELAY) != HAL_OK)
	{
		return -1000.0f; // Error
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <LM75A_ReadTemperature_Fine+0x8c>)
 8001220:	e023      	b.n	800126a <LM75A_ReadTemperature_Fine+0x76>
	}

	// Combine MSB and LSB
	raw_temp = (temp_data[0] << 8) | temp_data[1];
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	b21b      	sxth	r3, r3
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	797b      	ldrb	r3, [r7, #5]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	81fb      	strh	r3, [r7, #14]

	// Shift right by 5 to get rid of unused bits (bits 4..0)
	raw_temp >>= 5;
 8001232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001236:	115b      	asrs	r3, r3, #5
 8001238:	81fb      	strh	r3, [r7, #14]

	// Sign extend 11-bit signed number if needed
	if (raw_temp & 0x400) // Check sign bit (bit 10)
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <LM75A_ReadTemperature_Fine+0x5c>
	{
		raw_temp |= 0xF800; // Set upper bits to 1 for negative numbers
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800124a:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 800124e:	81fb      	strh	r3, [r7, #14]
	}

	temperature = raw_temp * 0.125f;
 8001250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001264:	edc7 7a02 	vstr	s15, [r7, #8]

	return temperature;
 8001268:	68bb      	ldr	r3, [r7, #8]
}
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000037c 	.word	0x2000037c
 800127c:	20000328 	.word	0x20000328
 8001280:	c47a0000 	.word	0xc47a0000

08001284 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b094      	sub	sp, #80	@ 0x50
 8001288:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800128a:	f000 fcfb 	bl	8001c84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800128e:	f000 f8db 	bl	8001448 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001292:	f7ff fecb 	bl	800102c <MX_GPIO_Init>
	MX_I2C2_Init();
 8001296:	f7ff ff0d 	bl	80010b4 <MX_I2C2_Init>
	MX_ADC1_Init();
 800129a:	f7ff fe1b 	bl	8000ed4 <MX_ADC1_Init>
	MX_USB_DEVICE_Init();
 800129e:	f007 ff27 	bl	80090f0 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_Init();
 80012a2:	f000 fab7 	bl	8001814 <ssd1306_Init>
	I2C_ScanAndFindLM75A();
 80012a6:	f7ff ff7b 	bl	80011a0 <I2C_ScanAndFindLM75A>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		float temp = LM75A_ReadTemperature_Fine();
 80012aa:	f7ff ffa3 	bl	80011f4 <LM75A_ReadTemperature_Fine>
 80012ae:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
		uint32_t adc_val = Read_ADC_Channel();
 80012b2:	f7ff fea5 	bl	8001000 <Read_ADC_Channel>
 80012b6:	6438      	str	r0, [r7, #64]	@ 0x40
		float voltage = adc_val * 3.3f / 4095.0f;
 80012b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c2:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001418 <main+0x194>
 80012c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ca:	eddf 6a54 	vldr	s13, [pc, #336]	@ 800141c <main+0x198>
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c


		// Clear the display

		//		SSD1306_Clear();
		ssd1306_Fill(Black);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fb06 	bl	80018e8 <ssd1306_Fill>

		// Line 1: Temperature
		ssd1306_SetCursor(2, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	2002      	movs	r0, #2
 80012e0:	f000 fc5c 	bl	8001b9c <ssd1306_SetCursor>
		snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C",
 80012e4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80012e8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int)temp, (int)((temp - (int)temp) * 100));
 80012ec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001420 <main+0x19c>
 8001304:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C",
 8001308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130c:	ee17 3a90 	vmov	r3, s15
 8001310:	f107 001c 	add.w	r0, r7, #28
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	ee16 3a90 	vmov	r3, s13
 800131a:	4a42      	ldr	r2, [pc, #264]	@ (8001424 <main+0x1a0>)
 800131c:	2120      	movs	r1, #32
 800131e:	f009 f9cd 	bl	800a6bc <sniprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8001322:	4b41      	ldr	r3, [pc, #260]	@ (8001428 <main+0x1a4>)
 8001324:	f107 001c 	add.w	r0, r7, #28
 8001328:	2201      	movs	r2, #1
 800132a:	9200      	str	r2, [sp, #0]
 800132c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132e:	f000 fc0f 	bl	8001b50 <ssd1306_WriteString>

		// Line 2: Potentiometer
		ssd1306_SetCursor(2, 12);
 8001332:	210c      	movs	r1, #12
 8001334:	2002      	movs	r0, #2
 8001336:	f000 fc31 	bl	8001b9c <ssd1306_SetCursor>
		snprintf(buffer, sizeof(buffer), "Pot: %ld (%.2fV)", adc_val, voltage);
 800133a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800133c:	f7ff f904 	bl	8000548 <__aeabi_f2d>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	f107 001c 	add.w	r0, r7, #28
 8001348:	e9cd 2300 	strd	r2, r3, [sp]
 800134c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800134e:	4a37      	ldr	r2, [pc, #220]	@ (800142c <main+0x1a8>)
 8001350:	2120      	movs	r1, #32
 8001352:	f009 f9b3 	bl	800a6bc <sniprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8001356:	4b34      	ldr	r3, [pc, #208]	@ (8001428 <main+0x1a4>)
 8001358:	f107 001c 	add.w	r0, r7, #28
 800135c:	2201      	movs	r2, #1
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001362:	f000 fbf5 	bl	8001b50 <ssd1306_WriteString>
		// Line 3: USB Data (if available)


//
		// Vx
		        ssd1306_SetCursor(2, 24);
 8001366:	2118      	movs	r1, #24
 8001368:	2002      	movs	r0, #2
 800136a:	f000 fc17 	bl	8001b9c <ssd1306_SetCursor>
		        snprintf(buffer, sizeof(buffer), "Vx: %.3f", vx_f);
 800136e:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <main+0x1ac>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f8e8 	bl	8000548 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	f107 001c 	add.w	r0, r7, #28
 8001380:	e9cd 2300 	strd	r2, r3, [sp]
 8001384:	4a2b      	ldr	r2, [pc, #172]	@ (8001434 <main+0x1b0>)
 8001386:	2120      	movs	r1, #32
 8001388:	f009 f998 	bl	800a6bc <sniprintf>
		        ssd1306_WriteString(buffer, Font_7x10, White);
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <main+0x1a4>)
 800138e:	f107 001c 	add.w	r0, r7, #28
 8001392:	2201      	movs	r2, #1
 8001394:	9200      	str	r2, [sp, #0]
 8001396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001398:	f000 fbda 	bl	8001b50 <ssd1306_WriteString>

		        // Vy
		        ssd1306_SetCursor(2, 36);
 800139c:	2124      	movs	r1, #36	@ 0x24
 800139e:	2002      	movs	r0, #2
 80013a0:	f000 fbfc 	bl	8001b9c <ssd1306_SetCursor>
		        snprintf(buffer, sizeof(buffer), "Vy: %.3f", vy_f);
 80013a4:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <main+0x1b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8cd 	bl	8000548 <__aeabi_f2d>
 80013ae:	4602      	mov	r2, r0
 80013b0:	460b      	mov	r3, r1
 80013b2:	f107 001c 	add.w	r0, r7, #28
 80013b6:	e9cd 2300 	strd	r2, r3, [sp]
 80013ba:	4a20      	ldr	r2, [pc, #128]	@ (800143c <main+0x1b8>)
 80013bc:	2120      	movs	r1, #32
 80013be:	f009 f97d 	bl	800a6bc <sniprintf>
		        ssd1306_WriteString(buffer, Font_7x10, White);
 80013c2:	4b19      	ldr	r3, [pc, #100]	@ (8001428 <main+0x1a4>)
 80013c4:	f107 001c 	add.w	r0, r7, #28
 80013c8:	2201      	movs	r2, #1
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ce:	f000 fbbf 	bl	8001b50 <ssd1306_WriteString>

		        // Vw
		        ssd1306_SetCursor(2, 48);
 80013d2:	2130      	movs	r1, #48	@ 0x30
 80013d4:	2002      	movs	r0, #2
 80013d6:	f000 fbe1 	bl	8001b9c <ssd1306_SetCursor>
		        snprintf(buffer, sizeof(buffer), "Vw: %.3f", vw_f);
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <main+0x1bc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f8b2 	bl	8000548 <__aeabi_f2d>
 80013e4:	4602      	mov	r2, r0
 80013e6:	460b      	mov	r3, r1
 80013e8:	f107 001c 	add.w	r0, r7, #28
 80013ec:	e9cd 2300 	strd	r2, r3, [sp]
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <main+0x1c0>)
 80013f2:	2120      	movs	r1, #32
 80013f4:	f009 f962 	bl	800a6bc <sniprintf>
		        ssd1306_WriteString(buffer, Font_7x10, White);
 80013f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001428 <main+0x1a4>)
 80013fa:	f107 001c 	add.w	r0, r7, #28
 80013fe:	2201      	movs	r2, #1
 8001400:	9200      	str	r2, [sp, #0]
 8001402:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001404:	f000 fba4 	bl	8001b50 <ssd1306_WriteString>
//		ssd1306_WriteString(buffer, Font_7x10, White);
//
//

		// Update the display
		ssd1306_UpdateScreen();
 8001408:	f000 fa86 	bl	8001918 <ssd1306_UpdateScreen>

		HAL_Delay(50);
 800140c:	2032      	movs	r0, #50	@ 0x32
 800140e:	f000 fcab 	bl	8001d68 <HAL_Delay>
	{
 8001412:	bf00      	nop
 8001414:	e749      	b.n	80012aa <main+0x26>
 8001416:	bf00      	nop
 8001418:	40533333 	.word	0x40533333
 800141c:	457ff000 	.word	0x457ff000
 8001420:	42c80000 	.word	0x42c80000
 8001424:	0800c980 	.word	0x0800c980
 8001428:	0800d194 	.word	0x0800d194
 800142c:	0800c990 	.word	0x0800c990
 8001430:	20000a80 	.word	0x20000a80
 8001434:	0800c9a4 	.word	0x0800c9a4
 8001438:	20000a84 	.word	0x20000a84
 800143c:	0800c9b0 	.word	0x0800c9b0
 8001440:	20000a88 	.word	0x20000a88
 8001444:	0800c9bc 	.word	0x0800c9bc

08001448 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	@ 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f009 f9c3 	bl	800a7e2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <SystemClock_Config+0xd0>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <SystemClock_Config+0xd0>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <SystemClock_Config+0xd0>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <SystemClock_Config+0xd4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a22      	ldr	r2, [pc, #136]	@ (800151c <SystemClock_Config+0xd4>)
 8001492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b20      	ldr	r3, [pc, #128]	@ (800151c <SystemClock_Config+0xd4>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80014a4:	2303      	movs	r3, #3
 80014a6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2310      	movs	r3, #16
 80014b4:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b6:	2302      	movs	r3, #2
 80014b8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ba:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014be:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80014c0:	2304      	movs	r3, #4
 80014c2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80014c4:	2348      	movs	r3, #72	@ 0x48
 80014c6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80014cc:	2303      	movs	r3, #3
 80014ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d0:	f107 0320 	add.w	r3, r7, #32
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fe89 	bl	80051ec <HAL_RCC_OscConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80014e0:	f000 f81e 	bl	8001520 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f004 f8ec 	bl	80056dc <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc6>
	{
		Error_Handler();
 800150a:	f000 f809 	bl	8001520 <Error_Handler>
	}
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001524:	b672      	cpsid	i
}
 8001526:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <Error_Handler+0x8>

0800152c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	4a0f      	ldr	r2, [pc, #60]	@ (8001578 <HAL_MspInit+0x4c>)
 800153c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001540:	6453      	str	r3, [r2, #68]	@ 0x44
 8001542:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <HAL_MspInit+0x4c>)
 8001544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800154a:	607b      	str	r3, [r7, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_MspInit+0x4c>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6413      	str	r3, [r2, #64]	@ 0x40
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_MspInit+0x4c>)
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <NMI_Handler+0x4>

08001584 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	bf00      	nop
 8001592:	e7fd      	b.n	8001590 <MemManage_Handler+0x4>

08001594 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	bf00      	nop
 80015a2:	e7fd      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d2:	f000 fba9 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80015e0:	4802      	ldr	r0, [pc, #8]	@ (80015ec <OTG_FS_IRQHandler+0x10>)
 80015e2:	f002 fcf5 	bl	8003fd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20001c8c 	.word	0x20001c8c

080015f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return 1;
 80015f4:	2301      	movs	r3, #1
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_kill>:

int _kill(int pid, int sig)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800160a:	f009 f93d 	bl	800a888 <__errno>
 800160e:	4603      	mov	r3, r0
 8001610:	2216      	movs	r2, #22
 8001612:	601a      	str	r2, [r3, #0]
  return -1;
 8001614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_exit>:

void _exit (int status)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001628:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ffe7 	bl	8001600 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001632:	bf00      	nop
 8001634:	e7fd      	b.n	8001632 <_exit+0x12>

08001636 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	60f8      	str	r0, [r7, #12]
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	e00a      	b.n	800165e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001648:	f3af 8000 	nop.w
 800164c:	4601      	mov	r1, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	60ba      	str	r2, [r7, #8]
 8001654:	b2ca      	uxtb	r2, r1
 8001656:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3301      	adds	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	dbf0      	blt.n	8001648 <_read+0x12>
  }

  return len;
 8001666:	687b      	ldr	r3, [r7, #4]
}
 8001668:	4618      	mov	r0, r3
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	e009      	b.n	8001696 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1c5a      	adds	r2, r3, #1
 8001686:	60ba      	str	r2, [r7, #8]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	429a      	cmp	r2, r3
 800169c:	dbf1      	blt.n	8001682 <_write+0x12>
  }
  return len;
 800169e:	687b      	ldr	r3, [r7, #4]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <_close>:

int _close(int file)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016d0:	605a      	str	r2, [r3, #4]
  return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_isatty>:

int _isatty(int file)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016e8:	2301      	movs	r3, #1
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f6:	b480      	push	{r7}
 80016f8:	b085      	sub	sp, #20
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	60f8      	str	r0, [r7, #12]
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001718:	4a14      	ldr	r2, [pc, #80]	@ (800176c <_sbrk+0x5c>)
 800171a:	4b15      	ldr	r3, [pc, #84]	@ (8001770 <_sbrk+0x60>)
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001724:	4b13      	ldr	r3, [pc, #76]	@ (8001774 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800172c:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <_sbrk+0x64>)
 800172e:	4a12      	ldr	r2, [pc, #72]	@ (8001778 <_sbrk+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001732:	4b10      	ldr	r3, [pc, #64]	@ (8001774 <_sbrk+0x64>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	429a      	cmp	r2, r3
 800173e:	d207      	bcs.n	8001750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001740:	f009 f8a2 	bl	800a888 <__errno>
 8001744:	4603      	mov	r3, r0
 8001746:	220c      	movs	r2, #12
 8001748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800174e:	e009      	b.n	8001764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001756:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <_sbrk+0x64>)
 8001760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001762:	68fb      	ldr	r3, [r7, #12]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20020000 	.word	0x20020000
 8001770:	00000400 	.word	0x00000400
 8001774:	20000380 	.word	0x20000380
 8001778:	200024e0 	.word	0x200024e0

0800177c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <SystemInit+0x20>)
 8001782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001786:	4a05      	ldr	r2, [pc, #20]	@ (800179c <SystemInit+0x20>)
 8001788:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800178c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af04      	add	r7, sp, #16
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	2301      	movs	r3, #1
 80017c2:	9301      	str	r3, [sp, #4]
 80017c4:	1dfb      	adds	r3, r7, #7
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	2301      	movs	r3, #1
 80017ca:	2200      	movs	r2, #0
 80017cc:	2178      	movs	r1, #120	@ 0x78
 80017ce:	4803      	ldr	r0, [pc, #12]	@ (80017dc <ssd1306_WriteCommand+0x2c>)
 80017d0:	f001 faac 	bl	8002d2c <HAL_I2C_Mem_Write>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20000328 	.word	0x20000328

080017e0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017f2:	9202      	str	r2, [sp, #8]
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	2240      	movs	r2, #64	@ 0x40
 80017fe:	2178      	movs	r1, #120	@ 0x78
 8001800:	4803      	ldr	r0, [pc, #12]	@ (8001810 <ssd1306_WriteData+0x30>)
 8001802:	f001 fa93 	bl	8002d2c <HAL_I2C_Mem_Write>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000328 	.word	0x20000328

08001814 <ssd1306_Init>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Init(void) {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001818:	f7ff ffc2 	bl	80017a0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800181c:	2064      	movs	r0, #100	@ 0x64
 800181e:	f000 faa3 	bl	8001d68 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001822:	2000      	movs	r0, #0
 8001824:	f000 f9e6 	bl	8001bf4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001828:	2020      	movs	r0, #32
 800182a:	f7ff ffc1 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800182e:	2000      	movs	r0, #0
 8001830:	f7ff ffbe 	bl	80017b0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid
//    ssd1306_WriteCommand(0x02); // low column start
//    ssd1306_WriteCommand(0x10); // high column start

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001834:	20b0      	movs	r0, #176	@ 0xb0
 8001836:	f7ff ffbb 	bl	80017b0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800183a:	20c8      	movs	r0, #200	@ 0xc8
 800183c:	f7ff ffb8 	bl	80017b0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001840:	2000      	movs	r0, #0
 8001842:	f7ff ffb5 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001846:	2010      	movs	r0, #16
 8001848:	f7ff ffb2 	bl	80017b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800184c:	2040      	movs	r0, #64	@ 0x40
 800184e:	f7ff ffaf 	bl	80017b0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001852:	20ff      	movs	r0, #255	@ 0xff
 8001854:	f000 f9ba 	bl	8001bcc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001858:	20a1      	movs	r0, #161	@ 0xa1
 800185a:	f7ff ffa9 	bl	80017b0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800185e:	20a6      	movs	r0, #166	@ 0xa6
 8001860:	f7ff ffa6 	bl	80017b0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001864:	20a8      	movs	r0, #168	@ 0xa8
 8001866:	f7ff ffa3 	bl	80017b0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800186a:	203f      	movs	r0, #63	@ 0x3f
 800186c:	f7ff ffa0 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001870:	20a4      	movs	r0, #164	@ 0xa4
 8001872:	f7ff ff9d 	bl	80017b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001876:	20d3      	movs	r0, #211	@ 0xd3
 8001878:	f7ff ff9a 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800187c:	2000      	movs	r0, #0
 800187e:	f7ff ff97 	bl	80017b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001882:	20d5      	movs	r0, #213	@ 0xd5
 8001884:	f7ff ff94 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001888:	20f0      	movs	r0, #240	@ 0xf0
 800188a:	f7ff ff91 	bl	80017b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800188e:	20d9      	movs	r0, #217	@ 0xd9
 8001890:	f7ff ff8e 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001894:	2022      	movs	r0, #34	@ 0x22
 8001896:	f7ff ff8b 	bl	80017b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800189a:	20da      	movs	r0, #218	@ 0xda
 800189c:	f7ff ff88 	bl	80017b0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80018a0:	2012      	movs	r0, #18
 80018a2:	f7ff ff85 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80018a6:	20db      	movs	r0, #219	@ 0xdb
 80018a8:	f7ff ff82 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80018ac:	2020      	movs	r0, #32
 80018ae:	f7ff ff7f 	bl	80017b0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80018b2:	208d      	movs	r0, #141	@ 0x8d
 80018b4:	f7ff ff7c 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80018b8:	2014      	movs	r0, #20
 80018ba:	f7ff ff79 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80018be:	2001      	movs	r0, #1
 80018c0:	f000 f998 	bl	8001bf4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 f80f 	bl	80018e8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80018ca:	f000 f825 	bl	8001918 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80018ce:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <ssd1306_Init+0xd0>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80018d4:	4b03      	ldr	r3, [pc, #12]	@ (80018e4 <ssd1306_Init+0xd0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80018da:	4b02      	ldr	r3, [pc, #8]	@ (80018e4 <ssd1306_Init+0xd0>)
 80018dc:	2201      	movs	r2, #1
 80018de:	711a      	strb	r2, [r3, #4]
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000794 	.word	0x20000794

080018e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <ssd1306_Fill+0x14>
 80018f8:	2300      	movs	r3, #0
 80018fa:	e000      	b.n	80018fe <ssd1306_Fill+0x16>
 80018fc:	23ff      	movs	r3, #255	@ 0xff
 80018fe:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 8001902:	4619      	mov	r1, r3
 8001904:	4803      	ldr	r0, [pc, #12]	@ (8001914 <ssd1306_Fill+0x2c>)
 8001906:	f008 ff6c 	bl	800a7e2 <memset>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000384 	.word	0x20000384

08001918 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800191e:	2300      	movs	r3, #0
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	e01a      	b.n	800195a <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	3b50      	subs	r3, #80	@ 0x50
 8001928:	b2db      	uxtb	r3, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff40 	bl	80017b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff ff3d 	bl	80017b0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001936:	2010      	movs	r0, #16
 8001938:	f7ff ff3a 	bl	80017b0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	4613      	mov	r3, r2
 8001940:	019b      	lsls	r3, r3, #6
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	461a      	mov	r2, r3
 8001948:	4b08      	ldr	r3, [pc, #32]	@ (800196c <ssd1306_UpdateScreen+0x54>)
 800194a:	4413      	add	r3, r2
 800194c:	2182      	movs	r1, #130	@ 0x82
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff46 	bl	80017e0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	3301      	adds	r3, #1
 8001958:	71fb      	strb	r3, [r7, #7]
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	2b07      	cmp	r3, #7
 800195e:	d9e1      	bls.n	8001924 <ssd1306_UpdateScreen+0xc>
    }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000384 	.word	0x20000384

08001970 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001970:	b490      	push	{r4, r7}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	460b      	mov	r3, r1
 800197c:	71bb      	strb	r3, [r7, #6]
 800197e:	4613      	mov	r3, r2
 8001980:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	2b81      	cmp	r3, #129	@ 0x81
 8001986:	d849      	bhi.n	8001a1c <ssd1306_DrawPixel+0xac>
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	2b3f      	cmp	r3, #63	@ 0x3f
 800198c:	d846      	bhi.n	8001a1c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800198e:	797b      	ldrb	r3, [r7, #5]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d120      	bne.n	80019d6 <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001994:	79fa      	ldrb	r2, [r7, #7]
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	b2d8      	uxtb	r0, r3
 800199c:	4601      	mov	r1, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	440b      	add	r3, r1
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <ssd1306_DrawPixel+0xb8>)
 80019aa:	5cd3      	ldrb	r3, [r2, r3]
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	79bb      	ldrb	r3, [r7, #6]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	2101      	movs	r1, #1
 80019b6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ba:	b25b      	sxtb	r3, r3
 80019bc:	4313      	orrs	r3, r2
 80019be:	b25c      	sxtb	r4, r3
 80019c0:	79fa      	ldrb	r2, [r7, #7]
 80019c2:	4601      	mov	r1, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	019b      	lsls	r3, r3, #6
 80019c8:	440b      	add	r3, r1
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	b2e1      	uxtb	r1, r4
 80019d0:	4a15      	ldr	r2, [pc, #84]	@ (8001a28 <ssd1306_DrawPixel+0xb8>)
 80019d2:	54d1      	strb	r1, [r2, r3]
 80019d4:	e023      	b.n	8001a1e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019d6:	79fa      	ldrb	r2, [r7, #7]
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	08db      	lsrs	r3, r3, #3
 80019dc:	b2d8      	uxtb	r0, r3
 80019de:	4601      	mov	r1, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	019b      	lsls	r3, r3, #6
 80019e4:	440b      	add	r3, r1
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <ssd1306_DrawPixel+0xb8>)
 80019ec:	5cd3      	ldrb	r3, [r2, r3]
 80019ee:	b25a      	sxtb	r2, r3
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	4013      	ands	r3, r2
 8001a04:	b25c      	sxtb	r4, r3
 8001a06:	79fa      	ldrb	r2, [r7, #7]
 8001a08:	4601      	mov	r1, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	019b      	lsls	r3, r3, #6
 8001a0e:	440b      	add	r3, r1
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	4413      	add	r3, r2
 8001a14:	b2e1      	uxtb	r1, r4
 8001a16:	4a04      	ldr	r2, [pc, #16]	@ (8001a28 <ssd1306_DrawPixel+0xb8>)
 8001a18:	54d1      	strb	r1, [r2, r3]
 8001a1a:	e000      	b.n	8001a1e <ssd1306_DrawPixel+0xae>
        return;
 8001a1c:	bf00      	nop
    }
}
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc90      	pop	{r4, r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000384 	.word	0x20000384

08001a2c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b089      	sub	sp, #36	@ 0x24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	4604      	mov	r4, r0
 8001a34:	4638      	mov	r0, r7
 8001a36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	2b1f      	cmp	r3, #31
 8001a42:	d902      	bls.n	8001a4a <ssd1306_WriteChar+0x1e>
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
 8001a46:	2b7e      	cmp	r3, #126	@ 0x7e
 8001a48:	d901      	bls.n	8001a4e <ssd1306_WriteChar+0x22>
        return 0;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e079      	b.n	8001b42 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <ssd1306_WriteChar+0x34>
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3b20      	subs	r3, #32
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	e000      	b.n	8001a62 <ssd1306_WriteChar+0x36>
 8001a60:	783b      	ldrb	r3, [r7, #0]
 8001a62:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001a64:	4b39      	ldr	r3, [pc, #228]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001a66:	881b      	ldrh	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	4413      	add	r3, r2
 8001a6e:	2b82      	cmp	r3, #130	@ 0x82
 8001a70:	dc06      	bgt.n	8001a80 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001a72:	4b36      	ldr	r3, [pc, #216]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001a74:	885b      	ldrh	r3, [r3, #2]
 8001a76:	461a      	mov	r2, r3
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001a7c:	2b40      	cmp	r3, #64	@ 0x40
 8001a7e:	dd01      	ble.n	8001a84 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e05e      	b.n	8001b42 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
 8001a88:	e04d      	b.n	8001b26 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	3b20      	subs	r3, #32
 8001a90:	7879      	ldrb	r1, [r7, #1]
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	4619      	mov	r1, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
 8001aa8:	e036      	b.n	8001b18 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d013      	beq.n	8001ae2 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001aba:	4b24      	ldr	r3, [pc, #144]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b2d8      	uxtb	r0, r3
 8001ac8:	4b20      	ldr	r3, [pc, #128]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001aca:	885b      	ldrh	r3, [r3, #2]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001ada:	4619      	mov	r1, r3
 8001adc:	f7ff ff48 	bl	8001970 <ssd1306_DrawPixel>
 8001ae0:	e017      	b.n	8001b12 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001ae4:	881b      	ldrh	r3, [r3, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4413      	add	r3, r2
 8001aee:	b2d8      	uxtb	r0, r3
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001af2:	885b      	ldrh	r3, [r3, #2]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4413      	add	r3, r2
 8001afc:	b2d9      	uxtb	r1, r3
 8001afe:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	bf0c      	ite	eq
 8001b06:	2301      	moveq	r3, #1
 8001b08:	2300      	movne	r3, #0
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f7ff ff2f 	bl	8001970 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	3301      	adds	r3, #1
 8001b16:	61bb      	str	r3, [r7, #24]
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d3c4      	bcc.n	8001aaa <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	3301      	adds	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
 8001b26:	787b      	ldrb	r3, [r7, #1]
 8001b28:	461a      	mov	r2, r3
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d3ac      	bcc.n	8001a8a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001b30:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001b32:	881a      	ldrh	r2, [r3, #0]
 8001b34:	7dfb      	ldrb	r3, [r7, #23]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <ssd1306_WriteChar+0x120>)
 8001b3e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000794 	.word	0x20000794

08001b50 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	4638      	mov	r0, r7
 8001b5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001b5e:	e013      	b.n	8001b88 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	7818      	ldrb	r0, [r3, #0]
 8001b64:	7e3b      	ldrb	r3, [r7, #24]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	463b      	mov	r3, r7
 8001b6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6c:	f7ff ff5e 	bl	8001a2c <ssd1306_WriteChar>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461a      	mov	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d002      	beq.n	8001b82 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	e008      	b.n	8001b94 <ssd1306_WriteString+0x44>
        }
        str++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3301      	adds	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1e7      	bne.n	8001b60 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	781b      	ldrb	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	460a      	mov	r2, r1
 8001ba6:	71fb      	strb	r3, [r7, #7]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <ssd1306_SetCursor+0x2c>)
 8001bb2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001bb4:	79bb      	ldrb	r3, [r7, #6]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	4b03      	ldr	r3, [pc, #12]	@ (8001bc8 <ssd1306_SetCursor+0x2c>)
 8001bba:	805a      	strh	r2, [r3, #2]
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	20000794 	.word	0x20000794

08001bcc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001bd6:	2381      	movs	r3, #129	@ 0x81
 8001bd8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fde7 	bl	80017b0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff fde3 	bl	80017b0 <ssd1306_WriteCommand>
}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d005      	beq.n	8001c10 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001c04:	23af      	movs	r3, #175	@ 0xaf
 8001c06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001c08:	4b08      	ldr	r3, [pc, #32]	@ (8001c2c <ssd1306_SetDisplayOn+0x38>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	715a      	strb	r2, [r3, #5]
 8001c0e:	e004      	b.n	8001c1a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001c10:	23ae      	movs	r3, #174	@ 0xae
 8001c12:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <ssd1306_SetDisplayOn+0x38>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fdc7 	bl	80017b0 <ssd1306_WriteCommand>
}
 8001c22:	bf00      	nop
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000794 	.word	0x20000794

08001c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c34:	f7ff fda2 	bl	800177c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c3a:	490d      	ldr	r1, [pc, #52]	@ (8001c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c50:	4c0a      	ldr	r4, [pc, #40]	@ (8001c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c5e:	f008 fe19 	bl	800a894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c62:	f7ff fb0f 	bl	8001284 <main>
  bx  lr    
 8001c66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001c74:	0800d524 	.word	0x0800d524
  ldr r2, =_sbss
 8001c78:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001c7c:	200024dc 	.word	0x200024dc

08001c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC_IRQHandler>
	...

08001c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c88:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <HAL_Init+0x40>)
 8001c8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c94:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <HAL_Init+0x40>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc4 <HAL_Init+0x40>)
 8001c9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <HAL_Init+0x40>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 fd1b 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	200f      	movs	r0, #15
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fc38 	bl	800152c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023c00 	.word	0x40023c00

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 fd33 	bl	8002752 <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d04:	f000 fcfb 	bl	80026fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	@ (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000004 	.word	0x20000004

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b06      	ldr	r3, [pc, #24]	@ (8001d48 <HAL_IncTick+0x20>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a04      	ldr	r2, [pc, #16]	@ (8001d4c <HAL_IncTick+0x24>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	2000079c 	.word	0x2000079c

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b03      	ldr	r3, [pc, #12]	@ (8001d64 <HAL_GetTick+0x14>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	2000079c 	.word	0x2000079c

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff ffee 	bl	8001d50 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	@ (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffde 	bl	8001d50 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008

08001db0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e033      	b.n	8001e2e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff f8d2 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d118      	bne.n	8001e20 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001df6:	f023 0302 	bic.w	r3, r3, #2
 8001dfa:	f043 0202 	orr.w	r2, r3, #2
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 faa4 	bl	8002350 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f023 0303 	bic.w	r3, r3, #3
 8001e16:	f043 0201 	orr.w	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e1e:	e001      	b.n	8001e24 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_ADC_Start+0x1a>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e0b2      	b.n	8001fb8 <HAL_ADC_Start+0x180>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d018      	beq.n	8001e9a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e78:	4b52      	ldr	r3, [pc, #328]	@ (8001fc4 <HAL_ADC_Start+0x18c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	@ (8001fc8 <HAL_ADC_Start+0x190>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9a      	lsrs	r2, r3, #18
 8001e84:	4613      	mov	r3, r2
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	4413      	add	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f9      	bne.n	8001e8e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d17a      	bne.n	8001f9e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eac:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ed2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eec:	f023 0206 	bic.w	r2, r3, #6
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001ef4:	e002      	b.n	8001efc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_ADC_Start+0x194>)
 8001f06:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f10:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f003 031f 	and.w	r3, r3, #31
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d12a      	bne.n	8001f74 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <HAL_ADC_Start+0x198>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d015      	beq.n	8001f54 <HAL_ADC_Start+0x11c>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a29      	ldr	r2, [pc, #164]	@ (8001fd4 <HAL_ADC_Start+0x19c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d105      	bne.n	8001f3e <HAL_ADC_Start+0x106>
 8001f32:	4b26      	ldr	r3, [pc, #152]	@ (8001fcc <HAL_ADC_Start+0x194>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 031f 	and.w	r3, r3, #31
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00a      	beq.n	8001f54 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a25      	ldr	r2, [pc, #148]	@ (8001fd8 <HAL_ADC_Start+0x1a0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d136      	bne.n	8001fb6 <HAL_ADC_Start+0x17e>
 8001f48:	4b20      	ldr	r3, [pc, #128]	@ (8001fcc <HAL_ADC_Start+0x194>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d130      	bne.n	8001fb6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d129      	bne.n	8001fb6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	e020      	b.n	8001fb6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a15      	ldr	r2, [pc, #84]	@ (8001fd0 <HAL_ADC_Start+0x198>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11b      	bne.n	8001fb6 <HAL_ADC_Start+0x17e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d114      	bne.n	8001fb6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f043 0210 	orr.w	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001fb6:	2300      	movs	r3, #0
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20000000 	.word	0x20000000
 8001fc8:	431bde83 	.word	0x431bde83
 8001fcc:	40012300 	.word	0x40012300
 8001fd0:	40012000 	.word	0x40012000
 8001fd4:	40012100 	.word	0x40012100
 8001fd8:	40012200 	.word	0x40012200

08001fdc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff8:	d113      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002008:	d10b      	bne.n	8002022 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200e:	f043 0220 	orr.w	r2, r3, #32
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e063      	b.n	80020ea <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002022:	f7ff fe95 	bl	8001d50 <HAL_GetTick>
 8002026:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002028:	e021      	b.n	800206e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002030:	d01d      	beq.n	800206e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d007      	beq.n	8002048 <HAL_ADC_PollForConversion+0x6c>
 8002038:	f7ff fe8a 	bl	8001d50 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d212      	bcs.n	800206e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d00b      	beq.n	800206e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205a:	f043 0204 	orr.w	r2, r3, #4
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e03d      	b.n	80020ea <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b02      	cmp	r3, #2
 800207a:	d1d6      	bne.n	800202a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f06f 0212 	mvn.w	r2, #18
 8002084:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d123      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11f      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ae:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d111      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e0:	f043 0201 	orr.w	r2, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1c>
 8002124:	2302      	movs	r3, #2
 8002126:	e105      	b.n	8002334 <HAL_ADC_ConfigChannel+0x228>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b09      	cmp	r3, #9
 8002136:	d925      	bls.n	8002184 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68d9      	ldr	r1, [r3, #12]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	3b1e      	subs	r3, #30
 800214e:	2207      	movs	r2, #7
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43da      	mvns	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	400a      	ands	r2, r1
 800215c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68d9      	ldr	r1, [r3, #12]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4618      	mov	r0, r3
 8002170:	4603      	mov	r3, r0
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4403      	add	r3, r0
 8002176:	3b1e      	subs	r3, #30
 8002178:	409a      	lsls	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	e022      	b.n	80021ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6919      	ldr	r1, [r3, #16]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	2207      	movs	r2, #7
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	400a      	ands	r2, r1
 80021a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6919      	ldr	r1, [r3, #16]
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	4618      	mov	r0, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4403      	add	r3, r0
 80021c0:	409a      	lsls	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b06      	cmp	r3, #6
 80021d0:	d824      	bhi.n	800221c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	3b05      	subs	r3, #5
 80021e4:	221f      	movs	r2, #31
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43da      	mvns	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	400a      	ands	r2, r1
 80021f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	3b05      	subs	r3, #5
 800220e:	fa00 f203 	lsl.w	r2, r0, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	635a      	str	r2, [r3, #52]	@ 0x34
 800221a:	e04c      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d824      	bhi.n	800226e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	3b23      	subs	r3, #35	@ 0x23
 8002236:	221f      	movs	r2, #31
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43da      	mvns	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	400a      	ands	r2, r1
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	4618      	mov	r0, r3
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685a      	ldr	r2, [r3, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	3b23      	subs	r3, #35	@ 0x23
 8002260:	fa00 f203 	lsl.w	r2, r0, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	430a      	orrs	r2, r1
 800226a:	631a      	str	r2, [r3, #48]	@ 0x30
 800226c:	e023      	b.n	80022b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4413      	add	r3, r2
 800227e:	3b41      	subs	r3, #65	@ 0x41
 8002280:	221f      	movs	r2, #31
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43da      	mvns	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	400a      	ands	r2, r1
 800228e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	b29b      	uxth	r3, r3
 800229c:	4618      	mov	r0, r3
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	4413      	add	r3, r2
 80022a8:	3b41      	subs	r3, #65	@ 0x41
 80022aa:	fa00 f203 	lsl.w	r2, r0, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022b6:	4b22      	ldr	r3, [pc, #136]	@ (8002340 <HAL_ADC_ConfigChannel+0x234>)
 80022b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <HAL_ADC_ConfigChannel+0x238>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d109      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1cc>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b12      	cmp	r3, #18
 80022ca:	d105      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a19      	ldr	r2, [pc, #100]	@ (8002344 <HAL_ADC_ConfigChannel+0x238>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d123      	bne.n	800232a <HAL_ADC_ConfigChannel+0x21e>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b10      	cmp	r3, #16
 80022e8:	d003      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0x1e6>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b11      	cmp	r3, #17
 80022f0:	d11b      	bne.n	800232a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b10      	cmp	r3, #16
 8002304:	d111      	bne.n	800232a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_ADC_ConfigChannel+0x23c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_ADC_ConfigChannel+0x240>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	0c9a      	lsrs	r2, r3, #18
 8002312:	4613      	mov	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4413      	add	r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800231c:	e002      	b.n	8002324 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	3b01      	subs	r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f9      	bne.n	800231e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	40012300 	.word	0x40012300
 8002344:	40012000 	.word	0x40012000
 8002348:	20000000 	.word	0x20000000
 800234c:	431bde83 	.word	0x431bde83

08002350 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002358:	4b79      	ldr	r3, [pc, #484]	@ (8002540 <ADC_Init+0x1f0>)
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	431a      	orrs	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002384:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	021a      	lsls	r2, r3, #8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80023a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6859      	ldr	r1, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	4a58      	ldr	r2, [pc, #352]	@ (8002544 <ADC_Init+0x1f4>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d022      	beq.n	800242e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6899      	ldr	r1, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6899      	ldr	r1, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	609a      	str	r2, [r3, #8]
 800242c:	e00f      	b.n	800244e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800243c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800244c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0202 	bic.w	r2, r2, #2
 800245c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6899      	ldr	r1, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
 8002468:	005a      	lsls	r2, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01b      	beq.n	80024b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800248a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800249a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	3b01      	subs	r3, #1
 80024a8:	035a      	lsls	r2, r3, #13
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e007      	b.n	80024c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80024c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	3b01      	subs	r3, #1
 80024e0:	051a      	lsls	r2, r3, #20
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	689a      	ldr	r2, [r3, #8]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80024f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6899      	ldr	r1, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002506:	025a      	lsls	r2, r3, #9
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800251e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6899      	ldr	r1, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	029a      	lsls	r2, r3, #10
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	430a      	orrs	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	40012300 	.word	0x40012300
 8002544:	0f000001 	.word	0x0f000001

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	@ (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4907      	ldr	r1, [pc, #28]	@ (80025e4 <__NVIC_EnableIRQ+0x38>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	@ (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	@ (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	@ 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	@ (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff29 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff3e 	bl	8002590 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff8e 	bl	800263c <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff31 	bl	80025ac <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa2 	bl	80026a4 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	@ 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	e16b      	b.n	8002a60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002788:	2201      	movs	r2, #1
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	4013      	ands	r3, r2
 800279a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	f040 815a 	bne.w	8002a5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d005      	beq.n	80027be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d130      	bne.n	8002820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	2203      	movs	r2, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	43db      	mvns	r3, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4013      	ands	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f4:	2201      	movs	r2, #1
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	091b      	lsrs	r3, r3, #4
 800280a:	f003 0201 	and.w	r2, r3, #1
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4313      	orrs	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
 8002828:	2b03      	cmp	r3, #3
 800282a:	d017      	beq.n	800285c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4013      	ands	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d123      	bne.n	80028b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	220f      	movs	r2, #15
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	4013      	ands	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	691a      	ldr	r2, [r3, #16]
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fa02 f303 	lsl.w	r3, r2, r3
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	08da      	lsrs	r2, r3, #3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3208      	adds	r2, #8
 80028aa:	69b9      	ldr	r1, [r7, #24]
 80028ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	2203      	movs	r2, #3
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	43db      	mvns	r3, r3
 80028c2:	69ba      	ldr	r2, [r7, #24]
 80028c4:	4013      	ands	r3, r2
 80028c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 0203 	and.w	r2, r3, #3
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80b4 	beq.w	8002a5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	4b60      	ldr	r3, [pc, #384]	@ (8002a78 <HAL_GPIO_Init+0x30c>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4a5f      	ldr	r2, [pc, #380]	@ (8002a78 <HAL_GPIO_Init+0x30c>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002900:	6453      	str	r3, [r2, #68]	@ 0x44
 8002902:	4b5d      	ldr	r3, [pc, #372]	@ (8002a78 <HAL_GPIO_Init+0x30c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290e:	4a5b      	ldr	r2, [pc, #364]	@ (8002a7c <HAL_GPIO_Init+0x310>)
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	089b      	lsrs	r3, r3, #2
 8002914:	3302      	adds	r3, #2
 8002916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	220f      	movs	r2, #15
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	43db      	mvns	r3, r3
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	4013      	ands	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a52      	ldr	r2, [pc, #328]	@ (8002a80 <HAL_GPIO_Init+0x314>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d02b      	beq.n	8002992 <HAL_GPIO_Init+0x226>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a51      	ldr	r2, [pc, #324]	@ (8002a84 <HAL_GPIO_Init+0x318>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d025      	beq.n	800298e <HAL_GPIO_Init+0x222>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a50      	ldr	r2, [pc, #320]	@ (8002a88 <HAL_GPIO_Init+0x31c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d01f      	beq.n	800298a <HAL_GPIO_Init+0x21e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a4f      	ldr	r2, [pc, #316]	@ (8002a8c <HAL_GPIO_Init+0x320>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d019      	beq.n	8002986 <HAL_GPIO_Init+0x21a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a4e      	ldr	r2, [pc, #312]	@ (8002a90 <HAL_GPIO_Init+0x324>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <HAL_GPIO_Init+0x216>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4d      	ldr	r2, [pc, #308]	@ (8002a94 <HAL_GPIO_Init+0x328>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00d      	beq.n	800297e <HAL_GPIO_Init+0x212>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a4c      	ldr	r2, [pc, #304]	@ (8002a98 <HAL_GPIO_Init+0x32c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d007      	beq.n	800297a <HAL_GPIO_Init+0x20e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4b      	ldr	r2, [pc, #300]	@ (8002a9c <HAL_GPIO_Init+0x330>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d101      	bne.n	8002976 <HAL_GPIO_Init+0x20a>
 8002972:	2307      	movs	r3, #7
 8002974:	e00e      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002976:	2308      	movs	r3, #8
 8002978:	e00c      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800297a:	2306      	movs	r3, #6
 800297c:	e00a      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800297e:	2305      	movs	r3, #5
 8002980:	e008      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002982:	2304      	movs	r3, #4
 8002984:	e006      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002986:	2303      	movs	r3, #3
 8002988:	e004      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800298a:	2302      	movs	r3, #2
 800298c:	e002      	b.n	8002994 <HAL_GPIO_Init+0x228>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_GPIO_Init+0x228>
 8002992:	2300      	movs	r3, #0
 8002994:	69fa      	ldr	r2, [r7, #28]
 8002996:	f002 0203 	and.w	r2, r2, #3
 800299a:	0092      	lsls	r2, r2, #2
 800299c:	4093      	lsls	r3, r2
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a4:	4935      	ldr	r1, [pc, #212]	@ (8002a7c <HAL_GPIO_Init+0x310>)
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	089b      	lsrs	r3, r3, #2
 80029aa:	3302      	adds	r3, #2
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b2:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029ce:	69ba      	ldr	r2, [r7, #24]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029d6:	4a32      	ldr	r2, [pc, #200]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029dc:	4b30      	ldr	r3, [pc, #192]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a00:	4a27      	ldr	r2, [pc, #156]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a06:	4b26      	ldr	r3, [pc, #152]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a30:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d003      	beq.n	8002a54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a54:	4a12      	ldr	r2, [pc, #72]	@ (8002aa0 <HAL_GPIO_Init+0x334>)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	2b0f      	cmp	r3, #15
 8002a64:	f67f ae90 	bls.w	8002788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40013800 	.word	0x40013800
 8002a80:	40020000 	.word	0x40020000
 8002a84:	40020400 	.word	0x40020400
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40021400 	.word	0x40021400
 8002a98:	40021800 	.word	0x40021800
 8002a9c:	40021c00 	.word	0x40021c00
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d101      	bne.n	8002ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e12b      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d106      	bne.n	8002ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7fe fb20 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2224      	movs	r2, #36	@ 0x24
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f022 0201 	bic.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b08:	f002 ffe0 	bl	8005acc <HAL_RCC_GetPCLK1Freq>
 8002b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4a81      	ldr	r2, [pc, #516]	@ (8002d18 <HAL_I2C_Init+0x274>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d807      	bhi.n	8002b28 <HAL_I2C_Init+0x84>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4a80      	ldr	r2, [pc, #512]	@ (8002d1c <HAL_I2C_Init+0x278>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	bf94      	ite	ls
 8002b20:	2301      	movls	r3, #1
 8002b22:	2300      	movhi	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e006      	b.n	8002b36 <HAL_I2C_Init+0x92>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a7d      	ldr	r2, [pc, #500]	@ (8002d20 <HAL_I2C_Init+0x27c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e0e7      	b.n	8002d0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4a78      	ldr	r2, [pc, #480]	@ (8002d24 <HAL_I2C_Init+0x280>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	0c9b      	lsrs	r3, r3, #18
 8002b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a6a      	ldr	r2, [pc, #424]	@ (8002d18 <HAL_I2C_Init+0x274>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d802      	bhi.n	8002b78 <HAL_I2C_Init+0xd4>
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	e009      	b.n	8002b8c <HAL_I2C_Init+0xe8>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b7e:	fb02 f303 	mul.w	r3, r2, r3
 8002b82:	4a69      	ldr	r2, [pc, #420]	@ (8002d28 <HAL_I2C_Init+0x284>)
 8002b84:	fba2 2303 	umull	r2, r3, r2, r3
 8002b88:	099b      	lsrs	r3, r3, #6
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	430b      	orrs	r3, r1
 8002b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b9e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	495c      	ldr	r1, [pc, #368]	@ (8002d18 <HAL_I2C_Init+0x274>)
 8002ba8:	428b      	cmp	r3, r1
 8002baa:	d819      	bhi.n	8002be0 <HAL_I2C_Init+0x13c>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1e59      	subs	r1, r3, #1
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bba:	1c59      	adds	r1, r3, #1
 8002bbc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <HAL_I2C_Init+0x138>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e59      	subs	r1, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bda:	e051      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002bdc:	2304      	movs	r3, #4
 8002bde:	e04f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d111      	bne.n	8002c0c <HAL_I2C_Init+0x168>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1e58      	subs	r0, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6859      	ldr	r1, [r3, #4]
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	440b      	add	r3, r1
 8002bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	bf0c      	ite	eq
 8002c04:	2301      	moveq	r3, #1
 8002c06:	2300      	movne	r3, #0
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	e012      	b.n	8002c32 <HAL_I2C_Init+0x18e>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	1e58      	subs	r0, r3, #1
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6859      	ldr	r1, [r3, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	0099      	lsls	r1, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c22:	3301      	adds	r3, #1
 8002c24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	bf0c      	ite	eq
 8002c2c:	2301      	moveq	r3, #1
 8002c2e:	2300      	movne	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_I2C_Init+0x196>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e022      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10e      	bne.n	8002c60 <HAL_I2C_Init+0x1bc>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1e58      	subs	r0, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	460b      	mov	r3, r1
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	440b      	add	r3, r1
 8002c50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c54:	3301      	adds	r3, #1
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002c5e:	e00f      	b.n	8002c80 <HAL_I2C_Init+0x1dc>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1e58      	subs	r0, r3, #1
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	0099      	lsls	r1, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c76:	3301      	adds	r3, #1
 8002c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	6809      	ldr	r1, [r1, #0]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002cae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6911      	ldr	r1, [r2, #16]
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	4311      	orrs	r1, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	430b      	orrs	r3, r1
 8002cc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	430a      	orrs	r2, r1
 8002cde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	000186a0 	.word	0x000186a0
 8002d1c:	001e847f 	.word	0x001e847f
 8002d20:	003d08ff 	.word	0x003d08ff
 8002d24:	431bde83 	.word	0x431bde83
 8002d28:	10624dd3 	.word	0x10624dd3

08002d2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d46:	f7ff f803 	bl	8001d50 <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	f040 80d9 	bne.w	8002f0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	2319      	movs	r3, #25
 8002d60:	2201      	movs	r2, #1
 8002d62:	496d      	ldr	r1, [pc, #436]	@ (8002f18 <HAL_I2C_Mem_Write+0x1ec>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 fdb9 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
 8002d72:	e0cc      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d101      	bne.n	8002d82 <HAL_I2C_Mem_Write+0x56>
 8002d7e:	2302      	movs	r3, #2
 8002d80:	e0c5      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d007      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f042 0201 	orr.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2221      	movs	r2, #33	@ 0x21
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2240      	movs	r2, #64	@ 0x40
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4a4d      	ldr	r2, [pc, #308]	@ (8002f1c <HAL_I2C_Mem_Write+0x1f0>)
 8002de8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dea:	88f8      	ldrh	r0, [r7, #6]
 8002dec:	893a      	ldrh	r2, [r7, #8]
 8002dee:	8979      	ldrh	r1, [r7, #10]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fbf0 	bl	80035e0 <I2C_RequestMemoryWrite>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d052      	beq.n	8002eac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e081      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fe7e 	bl	8003b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e06b      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d11b      	bne.n	8002eac <HAL_I2C_Mem_Write+0x180>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d017      	beq.n	8002eac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	781a      	ldrb	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e96:	3b01      	subs	r3, #1
 8002e98:	b29a      	uxth	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	b29a      	uxth	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1aa      	bne.n	8002e0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fe71 	bl	8003ba0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00d      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d107      	bne.n	8002edc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e016      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	e000      	b.n	8002f0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f0c:	2302      	movs	r3, #2
  }
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	00100002 	.word	0x00100002
 8002f1c:	ffff0000 	.word	0xffff0000

08002f20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08c      	sub	sp, #48	@ 0x30
 8002f24:	af02      	add	r7, sp, #8
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	4608      	mov	r0, r1
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	4603      	mov	r3, r0
 8002f30:	817b      	strh	r3, [r7, #10]
 8002f32:	460b      	mov	r3, r1
 8002f34:	813b      	strh	r3, [r7, #8]
 8002f36:	4613      	mov	r3, r2
 8002f38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f3a:	f7fe ff09 	bl	8001d50 <HAL_GetTick>
 8002f3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	f040 8214 	bne.w	8003376 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2319      	movs	r3, #25
 8002f54:	2201      	movs	r2, #1
 8002f56:	497b      	ldr	r1, [pc, #492]	@ (8003144 <HAL_I2C_Mem_Read+0x224>)
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fcbf 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f64:	2302      	movs	r3, #2
 8002f66:	e207      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_I2C_Mem_Read+0x56>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e200      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d007      	beq.n	8002f9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002faa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2222      	movs	r2, #34	@ 0x22
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2240      	movs	r2, #64	@ 0x40
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fc6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4a5b      	ldr	r2, [pc, #364]	@ (8003148 <HAL_I2C_Mem_Read+0x228>)
 8002fdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fde:	88f8      	ldrh	r0, [r7, #6]
 8002fe0:	893a      	ldrh	r2, [r7, #8]
 8002fe2:	8979      	ldrh	r1, [r7, #10]
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fea:	9300      	str	r3, [sp, #0]
 8002fec:	4603      	mov	r3, r0
 8002fee:	68f8      	ldr	r0, [r7, #12]
 8002ff0:	f000 fb8c 	bl	800370c <I2C_RequestMemoryRead>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e1bc      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	d113      	bne.n	800302e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	623b      	str	r3, [r7, #32]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	623b      	str	r3, [r7, #32]
 800301a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e190      	b.n	8003350 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003032:	2b01      	cmp	r3, #1
 8003034:	d11b      	bne.n	800306e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	61fb      	str	r3, [r7, #28]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	e170      	b.n	8003350 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003072:	2b02      	cmp	r3, #2
 8003074:	d11b      	bne.n	80030ae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003084:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003096:	2300      	movs	r3, #0
 8003098:	61bb      	str	r3, [r7, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	61bb      	str	r3, [r7, #24]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	69bb      	ldr	r3, [r7, #24]
 80030ac:	e150      	b.n	8003350 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ae:	2300      	movs	r3, #0
 80030b0:	617b      	str	r3, [r7, #20]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030c4:	e144      	b.n	8003350 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	f200 80f1 	bhi.w	80032b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d123      	bne.n	8003120 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030da:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 fda7 	bl	8003c30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e145      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030fe:	1c5a      	adds	r2, r3, #1
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	3b01      	subs	r3, #1
 8003118:	b29a      	uxth	r2, r3
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800311e:	e117      	b.n	8003350 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003124:	2b02      	cmp	r3, #2
 8003126:	d14e      	bne.n	80031c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800312e:	2200      	movs	r2, #0
 8003130:	4906      	ldr	r1, [pc, #24]	@ (800314c <HAL_I2C_Mem_Read+0x22c>)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fbd2 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d008      	beq.n	8003150 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e11a      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
 8003142:	bf00      	nop
 8003144:	00100002 	.word	0x00100002
 8003148:	ffff0000 	.word	0xffff0000
 800314c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800315e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691a      	ldr	r2, [r3, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	b2d2      	uxtb	r2, r2
 800316c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003188:	b29b      	uxth	r3, r3
 800318a:	3b01      	subs	r3, #1
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	691a      	ldr	r2, [r3, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031c4:	e0c4      	b.n	8003350 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031cc:	2200      	movs	r2, #0
 80031ce:	496c      	ldr	r1, [pc, #432]	@ (8003380 <HAL_I2C_Mem_Read+0x460>)
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fb83 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0cb      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003202:	1c5a      	adds	r2, r3, #1
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800320c:	3b01      	subs	r3, #1
 800320e:	b29a      	uxth	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003218:	b29b      	uxth	r3, r3
 800321a:	3b01      	subs	r3, #1
 800321c:	b29a      	uxth	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003228:	2200      	movs	r2, #0
 800322a:	4955      	ldr	r1, [pc, #340]	@ (8003380 <HAL_I2C_Mem_Read+0x460>)
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fb55 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e09d      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800324a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691a      	ldr	r2, [r3, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	b2d2      	uxtb	r2, r2
 8003258:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325e:	1c5a      	adds	r2, r3, #1
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	691a      	ldr	r2, [r3, #16]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003290:	1c5a      	adds	r2, r3, #1
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800329a:	3b01      	subs	r3, #1
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032b0:	e04e      	b.n	8003350 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f000 fcba 	bl	8003c30 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e058      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	b2d2      	uxtb	r2, r2
 80032d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	3b01      	subs	r3, #1
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b04      	cmp	r3, #4
 8003304:	d124      	bne.n	8003350 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003328:	b2d2      	uxtb	r2, r2
 800332a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003346:	b29b      	uxth	r3, r3
 8003348:	3b01      	subs	r3, #1
 800334a:	b29a      	uxth	r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	f47f aeb6 	bne.w	80030c6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003372:	2300      	movs	r3, #0
 8003374:	e000      	b.n	8003378 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003376:	2302      	movs	r3, #2
  }
}
 8003378:	4618      	mov	r0, r3
 800337a:	3728      	adds	r7, #40	@ 0x28
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	00010004 	.word	0x00010004

08003384 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	@ 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003394:	f7fe fcdc 	bl	8001d50 <HAL_GetTick>
 8003398:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800339a:	2300      	movs	r3, #0
 800339c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b20      	cmp	r3, #32
 80033a8:	f040 8111 	bne.w	80035ce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2319      	movs	r3, #25
 80033b2:	2201      	movs	r2, #1
 80033b4:	4988      	ldr	r1, [pc, #544]	@ (80035d8 <HAL_I2C_IsDeviceReady+0x254>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fa90 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80033c2:	2302      	movs	r3, #2
 80033c4:	e104      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_I2C_IsDeviceReady+0x50>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0fd      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x24c>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d007      	beq.n	80033fa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f042 0201 	orr.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003408:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2224      	movs	r2, #36	@ 0x24
 800340e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a70      	ldr	r2, [pc, #448]	@ (80035dc <HAL_I2C_IsDeviceReady+0x258>)
 800341c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800342c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2200      	movs	r2, #0
 8003436:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 fa4e 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00d      	beq.n	8003462 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003454:	d103      	bne.n	800345e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800345c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0b6      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	461a      	mov	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003470:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003472:	f7fe fc6d 	bl	8001d50 <HAL_GetTick>
 8003476:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b02      	cmp	r3, #2
 8003484:	bf0c      	ite	eq
 8003486:	2301      	moveq	r3, #1
 8003488:	2300      	movne	r3, #0
 800348a:	b2db      	uxtb	r3, r3
 800348c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003498:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034a6:	e025      	b.n	80034f4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034a8:	f7fe fc52 	bl	8001d50 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d302      	bcc.n	80034be <HAL_I2C_IsDeviceReady+0x13a>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d103      	bne.n	80034c6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	22a0      	movs	r2, #160	@ 0xa0
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	bf0c      	ite	eq
 80034d4:	2301      	moveq	r3, #1
 80034d6:	2300      	movne	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2ba0      	cmp	r3, #160	@ 0xa0
 80034fe:	d005      	beq.n	800350c <HAL_I2C_IsDeviceReady+0x188>
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_I2C_IsDeviceReady+0x188>
 8003506:	7dbb      	ldrb	r3, [r7, #22]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0cd      	beq.n	80034a8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b02      	cmp	r3, #2
 8003520:	d129      	bne.n	8003576 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003530:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003532:	2300      	movs	r3, #0
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	9300      	str	r3, [sp, #0]
 800354c:	2319      	movs	r3, #25
 800354e:	2201      	movs	r2, #1
 8003550:	4921      	ldr	r1, [pc, #132]	@ (80035d8 <HAL_I2C_IsDeviceReady+0x254>)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f9c2 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e036      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2220      	movs	r2, #32
 8003566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	e02c      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003584:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	9300      	str	r3, [sp, #0]
 8003594:	2319      	movs	r3, #25
 8003596:	2201      	movs	r2, #1
 8003598:	490f      	ldr	r1, [pc, #60]	@ (80035d8 <HAL_I2C_IsDeviceReady+0x254>)
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	f000 f99e 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e012      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	3301      	adds	r3, #1
 80035ae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	f4ff af32 	bcc.w	800341e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3720      	adds	r7, #32
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	00100002 	.word	0x00100002
 80035dc:	ffff0000 	.word	0xffff0000

080035e0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	4608      	mov	r0, r1
 80035ea:	4611      	mov	r1, r2
 80035ec:	461a      	mov	r2, r3
 80035ee:	4603      	mov	r3, r0
 80035f0:	817b      	strh	r3, [r7, #10]
 80035f2:	460b      	mov	r3, r1
 80035f4:	813b      	strh	r3, [r7, #8]
 80035f6:	4613      	mov	r3, r2
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003608:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	2200      	movs	r2, #0
 8003612:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 f960 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003630:	d103      	bne.n	800363a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003638:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e05f      	b.n	80036fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800363e:	897b      	ldrh	r3, [r7, #10]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	461a      	mov	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800364c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	492d      	ldr	r1, [pc, #180]	@ (8003708 <I2C_RequestMemoryWrite+0x128>)
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f9bb 	bl	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e04c      	b.n	80036fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800367a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800367c:	6a39      	ldr	r1, [r7, #32]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 fa46 	bl	8003b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00d      	beq.n	80036a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368e:	2b04      	cmp	r3, #4
 8003690:	d107      	bne.n	80036a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e02b      	b.n	80036fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d105      	bne.n	80036b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036ac:	893b      	ldrh	r3, [r7, #8]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	611a      	str	r2, [r3, #16]
 80036b6:	e021      	b.n	80036fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036b8:	893b      	ldrh	r3, [r7, #8]
 80036ba:	0a1b      	lsrs	r3, r3, #8
 80036bc:	b29b      	uxth	r3, r3
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c8:	6a39      	ldr	r1, [r7, #32]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fa20 	bl	8003b10 <I2C_WaitOnTXEFlagUntilTimeout>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00d      	beq.n	80036f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d107      	bne.n	80036ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e005      	b.n	80036fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036f2:	893b      	ldrh	r3, [r7, #8]
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	00010002 	.word	0x00010002

0800370c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003734:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003744:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	2200      	movs	r2, #0
 800374e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f8c2 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800376c:	d103      	bne.n	8003776 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003774:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0aa      	b.n	80038d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800377a:	897b      	ldrh	r3, [r7, #10]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003788:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378c:	6a3a      	ldr	r2, [r7, #32]
 800378e:	4952      	ldr	r1, [pc, #328]	@ (80038d8 <I2C_RequestMemoryRead+0x1cc>)
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f91d 	bl	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e097      	b.n	80038d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b8:	6a39      	ldr	r1, [r7, #32]
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f9a8 	bl	8003b10 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00d      	beq.n	80037e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d107      	bne.n	80037de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e076      	b.n	80038d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037e8:	893b      	ldrh	r3, [r7, #8]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	611a      	str	r2, [r3, #16]
 80037f2:	e021      	b.n	8003838 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003804:	6a39      	ldr	r1, [r7, #32]
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f982 	bl	8003b10 <I2C_WaitOnTXEFlagUntilTimeout>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	2b04      	cmp	r3, #4
 8003818:	d107      	bne.n	800382a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003828:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e050      	b.n	80038d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800382e:	893b      	ldrh	r3, [r7, #8]
 8003830:	b2da      	uxtb	r2, r3
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383a:	6a39      	ldr	r1, [r7, #32]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 f967 	bl	8003b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00d      	beq.n	8003864 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	2b04      	cmp	r3, #4
 800384e:	d107      	bne.n	8003860 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800385e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e035      	b.n	80038d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003872:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	2200      	movs	r2, #0
 800387c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 f82b 	bl	80038dc <I2C_WaitOnFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d00d      	beq.n	80038a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003896:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800389a:	d103      	bne.n	80038a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038a2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e013      	b.n	80038d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038a8:	897b      	ldrh	r3, [r7, #10]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	f043 0301 	orr.w	r3, r3, #1
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	4906      	ldr	r1, [pc, #24]	@ (80038d8 <I2C_RequestMemoryRead+0x1cc>)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f886 	bl	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e000      	b.n	80038d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	00010002 	.word	0x00010002

080038dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	4613      	mov	r3, r2
 80038ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038ec:	e048      	b.n	8003980 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038f4:	d044      	beq.n	8003980 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f6:	f7fe fa2b 	bl	8001d50 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d302      	bcc.n	800390c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d139      	bne.n	8003980 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	0c1b      	lsrs	r3, r3, #16
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10d      	bne.n	8003932 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	43da      	mvns	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	4013      	ands	r3, r2
 8003922:	b29b      	uxth	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	bf0c      	ite	eq
 8003928:	2301      	moveq	r3, #1
 800392a:	2300      	movne	r3, #0
 800392c:	b2db      	uxtb	r3, r3
 800392e:	461a      	mov	r2, r3
 8003930:	e00c      	b.n	800394c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	43da      	mvns	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4013      	ands	r3, r2
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf0c      	ite	eq
 8003944:	2301      	moveq	r3, #1
 8003946:	2300      	movne	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	461a      	mov	r2, r3
 800394c:	79fb      	ldrb	r3, [r7, #7]
 800394e:	429a      	cmp	r2, r3
 8003950:	d116      	bne.n	8003980 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e023      	b.n	80039c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	0c1b      	lsrs	r3, r3, #16
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b01      	cmp	r3, #1
 8003988:	d10d      	bne.n	80039a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	43da      	mvns	r2, r3
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4013      	ands	r3, r2
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf0c      	ite	eq
 800399c:	2301      	moveq	r3, #1
 800399e:	2300      	movne	r3, #0
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	461a      	mov	r2, r3
 80039a4:	e00c      	b.n	80039c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	43da      	mvns	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d093      	beq.n	80038ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039de:	e071      	b.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ee:	d123      	bne.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003a08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	f043 0204 	orr.w	r2, r3, #4
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e067      	b.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003a3e:	d041      	beq.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a40:	f7fe f986 	bl	8001d50 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d302      	bcc.n	8003a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d136      	bne.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	0c1b      	lsrs	r3, r3, #16
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d10c      	bne.n	8003a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	43da      	mvns	r2, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bf14      	ite	ne
 8003a72:	2301      	movne	r3, #1
 8003a74:	2300      	moveq	r3, #0
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	e00b      	b.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	43da      	mvns	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4013      	ands	r3, r2
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d016      	beq.n	8003ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e021      	b.n	8003b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	0c1b      	lsrs	r3, r3, #16
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d10c      	bne.n	8003ae8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	43da      	mvns	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e00b      	b.n	8003b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	43da      	mvns	r2, r3
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4013      	ands	r3, r2
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	bf14      	ite	ne
 8003afa:	2301      	movne	r3, #1
 8003afc:	2300      	moveq	r3, #0
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f47f af6d 	bne.w	80039e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b1c:	e034      	b.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8e3 	bl	8003cea <I2C_IsAcknowledgeFailed>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e034      	b.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b34:	d028      	beq.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7fe f90b 	bl	8001d50 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d11d      	bne.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b56:	2b80      	cmp	r3, #128	@ 0x80
 8003b58:	d016      	beq.n	8003b88 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	f043 0220 	orr.w	r2, r3, #32
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e007      	b.n	8003b98 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b92:	2b80      	cmp	r3, #128	@ 0x80
 8003b94:	d1c3      	bne.n	8003b1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3710      	adds	r7, #16
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bac:	e034      	b.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f89b 	bl	8003cea <I2C_IsAcknowledgeFailed>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e034      	b.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bc4:	d028      	beq.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fe f8c3 	bl	8001d50 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d11d      	bne.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d016      	beq.n	8003c18 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c04:	f043 0220 	orr.w	r2, r3, #32
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e007      	b.n	8003c28 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d1c3      	bne.n	8003bae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c3c:	e049      	b.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	2b10      	cmp	r3, #16
 8003c4a:	d119      	bne.n	8003c80 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f06f 0210 	mvn.w	r2, #16
 8003c54:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e030      	b.n	8003ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c80:	f7fe f866 	bl	8001d50 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d302      	bcc.n	8003c96 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d11d      	bne.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca0:	2b40      	cmp	r3, #64	@ 0x40
 8003ca2:	d016      	beq.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f043 0220 	orr.w	r2, r3, #32
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e007      	b.n	8003ce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cdc:	2b40      	cmp	r3, #64	@ 0x40
 8003cde:	d1ae      	bne.n	8003c3e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d00:	d11b      	bne.n	8003d3a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d0a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d26:	f043 0204 	orr.w	r2, r3, #4
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e000      	b.n	8003d3c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e101      	b.n	8003f5e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d106      	bne.n	8003d7a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f005 fc75 	bl	8009664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2203      	movs	r2, #3
 8003d7e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d88:	d102      	bne.n	8003d90 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 ffc4 	bl	8005d22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6818      	ldr	r0, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	7c1a      	ldrb	r2, [r3, #16]
 8003da2:	f88d 2000 	strb.w	r2, [sp]
 8003da6:	3304      	adds	r3, #4
 8003da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003daa:	f001 fea3 	bl	8005af4 <USB_CoreInit>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e0ce      	b.n	8003f5e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f001 ffbc 	bl	8005d44 <USB_SetCurrentMode>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d005      	beq.n	8003dde <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e0bf      	b.n	8003f5e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dde:	2300      	movs	r3, #0
 8003de0:	73fb      	strb	r3, [r7, #15]
 8003de2:	e04a      	b.n	8003e7a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3315      	adds	r3, #21
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3314      	adds	r3, #20
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	b298      	uxth	r0, r3
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	332e      	adds	r3, #46	@ 0x2e
 8003e20:	4602      	mov	r2, r0
 8003e22:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e24:	7bfa      	ldrb	r2, [r7, #15]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	3318      	adds	r3, #24
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	331c      	adds	r3, #28
 8003e48:	2200      	movs	r2, #0
 8003e4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e4c:	7bfa      	ldrb	r2, [r7, #15]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3320      	adds	r3, #32
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e60:	7bfa      	ldrb	r2, [r7, #15]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3324      	adds	r3, #36	@ 0x24
 8003e70:	2200      	movs	r2, #0
 8003e72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	3301      	adds	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	791b      	ldrb	r3, [r3, #4]
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3af      	bcc.n	8003de4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e84:	2300      	movs	r3, #0
 8003e86:	73fb      	strb	r3, [r7, #15]
 8003e88:	e044      	b.n	8003f14 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ec8:	2200      	movs	r2, #0
 8003eca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003ee2:	7bfa      	ldrb	r2, [r7, #15]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ef8:	7bfa      	ldrb	r2, [r7, #15]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	3301      	adds	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	791b      	ldrb	r3, [r3, #4]
 8003f18:	7bfa      	ldrb	r2, [r7, #15]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d3b5      	bcc.n	8003e8a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7c1a      	ldrb	r2, [r3, #16]
 8003f26:	f88d 2000 	strb.w	r2, [sp]
 8003f2a:	3304      	adds	r3, #4
 8003f2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f2e:	f001 ff55 	bl	8005ddc <USB_DevInit>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d005      	beq.n	8003f44 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e00c      	b.n	8003f5e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 ff9f 	bl	8006e9a <USB_DevDisconnect>

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_PCD_Start+0x1c>
 8003f7e:	2302      	movs	r3, #2
 8003f80:	e022      	b.n	8003fc8 <HAL_PCD_Start+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d105      	bne.n	8003faa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f001 fea6 	bl	8005d00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f002 ff4d 	bl	8006e58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3710      	adds	r7, #16
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fd0:	b590      	push	{r4, r7, lr}
 8003fd2:	b08d      	sub	sp, #52	@ 0x34
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f003 f80b 	bl	8007002 <USB_GetMode>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f040 848c 	bne.w	800490c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f002 ff6f 	bl	8006edc <USB_ReadInterrupts>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8482 	beq.w	800490a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f002 ff5c 	bl	8006edc <USB_ReadInterrupts>
 8004024:	4603      	mov	r3, r0
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	d107      	bne.n	800403e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695a      	ldr	r2, [r3, #20]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f002 0202 	and.w	r2, r2, #2
 800403c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4618      	mov	r0, r3
 8004044:	f002 ff4a 	bl	8006edc <USB_ReadInterrupts>
 8004048:	4603      	mov	r3, r0
 800404a:	f003 0310 	and.w	r3, r3, #16
 800404e:	2b10      	cmp	r3, #16
 8004050:	d161      	bne.n	8004116 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699a      	ldr	r2, [r3, #24]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f022 0210 	bic.w	r2, r2, #16
 8004060:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 020f 	and.w	r2, r3, #15
 800406e:	4613      	mov	r3, r2
 8004070:	00db      	lsls	r3, r3, #3
 8004072:	4413      	add	r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	4413      	add	r3, r2
 800407e:	3304      	adds	r3, #4
 8004080:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004088:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800408c:	d124      	bne.n	80040d8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800408e:	69ba      	ldr	r2, [r7, #24]
 8004090:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004094:	4013      	ands	r3, r2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d035      	beq.n	8004106 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80040a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	461a      	mov	r2, r3
 80040ac:	6a38      	ldr	r0, [r7, #32]
 80040ae:	f002 fd81 	bl	8006bb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	68da      	ldr	r2, [r3, #12]
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040be:	441a      	add	r2, r3
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	695a      	ldr	r2, [r3, #20]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	091b      	lsrs	r3, r3, #4
 80040cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d0:	441a      	add	r2, r3
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	615a      	str	r2, [r3, #20]
 80040d6:	e016      	b.n	8004106 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80040de:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80040e2:	d110      	bne.n	8004106 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040ea:	2208      	movs	r2, #8
 80040ec:	4619      	mov	r1, r3
 80040ee:	6a38      	ldr	r0, [r7, #32]
 80040f0:	f002 fd60 	bl	8006bb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004100:	441a      	add	r2, r3
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	699a      	ldr	r2, [r3, #24]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0210 	orr.w	r2, r2, #16
 8004114:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f002 fede 	bl	8006edc <USB_ReadInterrupts>
 8004120:	4603      	mov	r3, r0
 8004122:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004126:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800412a:	f040 80a7 	bne.w	800427c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f002 fee3 	bl	8006f02 <USB_ReadDevAllOutEpInterrupt>
 800413c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800413e:	e099      	b.n	8004274 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 808e 	beq.w	8004268 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004152:	b2d2      	uxtb	r2, r2
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f002 ff07 	bl	8006f6a <USB_ReadDevOutEPInterrupt>
 800415c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f003 0301 	and.w	r3, r3, #1
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00c      	beq.n	8004182 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004174:	461a      	mov	r2, r3
 8004176:	2301      	movs	r3, #1
 8004178:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800417a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 fea3 	bl	8004ec8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00c      	beq.n	80041a6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004198:	461a      	mov	r2, r3
 800419a:	2308      	movs	r3, #8
 800419c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800419e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 ff79 	bl	8005098 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80041b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041bc:	461a      	mov	r2, r3
 80041be:	2310      	movs	r3, #16
 80041c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d030      	beq.n	800422e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d4:	2b80      	cmp	r3, #128	@ 0x80
 80041d6:	d109      	bne.n	80041ec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80041e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80041ea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80041ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	3304      	adds	r3, #4
 8004200:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	78db      	ldrb	r3, [r3, #3]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d108      	bne.n	800421c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004212:	b2db      	uxtb	r3, r3
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f005 fb2a 	bl	8009870 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800421c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004228:	461a      	mov	r2, r3
 800422a:	2302      	movs	r3, #2
 800422c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b00      	cmp	r3, #0
 8004236:	d008      	beq.n	800424a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004244:	461a      	mov	r2, r3
 8004246:	2320      	movs	r3, #32
 8004248:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004260:	461a      	mov	r2, r3
 8004262:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004266:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	3301      	adds	r3, #1
 800426c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800426e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004270:	085b      	lsrs	r3, r3, #1
 8004272:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004276:	2b00      	cmp	r3, #0
 8004278:	f47f af62 	bne.w	8004140 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4618      	mov	r0, r3
 8004282:	f002 fe2b 	bl	8006edc <USB_ReadInterrupts>
 8004286:	4603      	mov	r3, r0
 8004288:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800428c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004290:	f040 80db 	bne.w	800444a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4618      	mov	r0, r3
 800429a:	f002 fe4c 	bl	8006f36 <USB_ReadDevAllInEpInterrupt>
 800429e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80042a4:	e0cd      	b.n	8004442 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	f000 80c2 	beq.w	8004436 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042b8:	b2d2      	uxtb	r2, r2
 80042ba:	4611      	mov	r1, r2
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 fe72 	bl	8006fa6 <USB_ReadDevInEPInterrupt>
 80042c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d057      	beq.n	800437e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	2201      	movs	r2, #1
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69f9      	ldr	r1, [r7, #28]
 80042ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042ee:	4013      	ands	r3, r2
 80042f0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042fe:	461a      	mov	r2, r3
 8004300:	2301      	movs	r3, #1
 8004302:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	799b      	ldrb	r3, [r3, #6]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d132      	bne.n	8004372 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004310:	4613      	mov	r3, r2
 8004312:	00db      	lsls	r3, r3, #3
 8004314:	4413      	add	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	3320      	adds	r3, #32
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	4413      	add	r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	4403      	add	r3, r0
 800432c:	331c      	adds	r3, #28
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4419      	add	r1, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004336:	4613      	mov	r3, r2
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4413      	add	r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4403      	add	r3, r0
 8004340:	3320      	adds	r3, #32
 8004342:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004346:	2b00      	cmp	r3, #0
 8004348:	d113      	bne.n	8004372 <HAL_PCD_IRQHandler+0x3a2>
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434e:	4613      	mov	r3, r2
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3324      	adds	r3, #36	@ 0x24
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d108      	bne.n	8004372 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6818      	ldr	r0, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800436a:	461a      	mov	r2, r3
 800436c:	2101      	movs	r1, #1
 800436e:	f002 fe79 	bl	8007064 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004374:	b2db      	uxtb	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f005 f9f4 	bl	8009766 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d008      	beq.n	800439a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004394:	461a      	mov	r2, r3
 8004396:	2308      	movs	r3, #8
 8004398:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b0:	461a      	mov	r2, r3
 80043b2:	2310      	movs	r3, #16
 80043b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d008      	beq.n	80043d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043cc:	461a      	mov	r2, r3
 80043ce:	2340      	movs	r3, #64	@ 0x40
 80043d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d023      	beq.n	8004424 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80043dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043de:	6a38      	ldr	r0, [r7, #32]
 80043e0:	f001 fe60 	bl	80060a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80043e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	3310      	adds	r3, #16
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	4413      	add	r3, r2
 80043f4:	3304      	adds	r3, #4
 80043f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	78db      	ldrb	r3, [r3, #3]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d108      	bne.n	8004412 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2200      	movs	r2, #0
 8004404:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f005 fa41 	bl	8009894 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800441e:	461a      	mov	r2, r3
 8004420:	2302      	movs	r3, #2
 8004422:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800442e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 fcbd 	bl	8004db0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	3301      	adds	r3, #1
 800443a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	085b      	lsrs	r3, r3, #1
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004444:	2b00      	cmp	r3, #0
 8004446:	f47f af2e 	bne.w	80042a6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f002 fd44 	bl	8006edc <USB_ReadInterrupts>
 8004454:	4603      	mov	r3, r0
 8004456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800445a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800445e:	d122      	bne.n	80044a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	69fa      	ldr	r2, [r7, #28]
 800446a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004486:	2100      	movs	r1, #0
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fea3 	bl	80051d4 <HAL_PCDEx_LPM_Callback>
 800448e:	e002      	b.n	8004496 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f005 f9df 	bl	8009854 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	695a      	ldr	r2, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80044a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f002 fd16 	bl	8006edc <USB_ReadInterrupts>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80044b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ba:	d112      	bne.n	80044e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d102      	bne.n	80044d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f005 f99b 	bl	8009808 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695a      	ldr	r2, [r3, #20]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80044e0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f002 fcf8 	bl	8006edc <USB_ReadInterrupts>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80044f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044f6:	f040 80b7 	bne.w	8004668 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2110      	movs	r1, #16
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fdc5 	bl	80060a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451a:	2300      	movs	r3, #0
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800451e:	e046      	b.n	80045ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800452c:	461a      	mov	r2, r3
 800452e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004532:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004536:	015a      	lsls	r2, r3, #5
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	4413      	add	r3, r2
 800453c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004544:	0151      	lsls	r1, r2, #5
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	440a      	add	r2, r1
 800454a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800454e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004552:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004560:	461a      	mov	r2, r3
 8004562:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004566:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004578:	0151      	lsls	r1, r2, #5
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	440a      	add	r2, r1
 800457e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004582:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004586:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004598:	0151      	lsls	r1, r2, #5
 800459a:	69fa      	ldr	r2, [r7, #28]
 800459c:	440a      	add	r2, r1
 800459e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80045a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80045a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045aa:	3301      	adds	r3, #1
 80045ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	791b      	ldrb	r3, [r3, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d3b2      	bcc.n	8004520 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80045cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	7bdb      	ldrb	r3, [r3, #15]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d016      	beq.n	8004604 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045e6:	f043 030b 	orr.w	r3, r3, #11
 80045ea:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045fc:	f043 030b 	orr.w	r3, r3, #11
 8004600:	6453      	str	r3, [r2, #68]	@ 0x44
 8004602:	e015      	b.n	8004630 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	69fa      	ldr	r2, [r7, #28]
 800460e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004612:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004616:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800461a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800462a:	f043 030b 	orr.w	r3, r3, #11
 800462e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800463e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004642:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004652:	461a      	mov	r2, r3
 8004654:	f002 fd06 	bl	8007064 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f002 fc35 	bl	8006edc <USB_ReadInterrupts>
 8004672:	4603      	mov	r3, r0
 8004674:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800467c:	d123      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f002 fccb 	bl	800701e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fd82 	bl	8006196 <USB_GetDevSpeed>
 8004692:	4603      	mov	r3, r0
 8004694:	461a      	mov	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681c      	ldr	r4, [r3, #0]
 800469e:	f001 fa09 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 80046a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046a8:	461a      	mov	r2, r3
 80046aa:	4620      	mov	r0, r4
 80046ac:	f001 fa86 	bl	8005bbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f005 f880 	bl	80097b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	695a      	ldr	r2, [r3, #20]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80046c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f002 fc06 	bl	8006edc <USB_ReadInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d10a      	bne.n	80046f0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f005 f85d 	bl	800979a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f002 0208 	and.w	r2, r2, #8
 80046ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f002 fbf1 	bl	8006edc <USB_ReadInterrupts>
 80046fa:	4603      	mov	r3, r0
 80046fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004700:	2b80      	cmp	r3, #128	@ 0x80
 8004702:	d123      	bne.n	800474c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004704:	6a3b      	ldr	r3, [r7, #32]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004710:	2301      	movs	r3, #1
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
 8004714:	e014      	b.n	8004740 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d105      	bne.n	800473a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	b2db      	uxtb	r3, r3
 8004732:	4619      	mov	r1, r3
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 fb0a 	bl	8004d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	3301      	adds	r3, #1
 800473e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	791b      	ldrb	r3, [r3, #4]
 8004744:	461a      	mov	r2, r3
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	4293      	cmp	r3, r2
 800474a:	d3e4      	bcc.n	8004716 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4618      	mov	r0, r3
 8004752:	f002 fbc3 	bl	8006edc <USB_ReadInterrupts>
 8004756:	4603      	mov	r3, r0
 8004758:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800475c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004760:	d13c      	bne.n	80047dc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004762:	2301      	movs	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	@ 0x24
 8004766:	e02b      	b.n	80047c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4413      	add	r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3318      	adds	r3, #24
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d115      	bne.n	80047ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800478e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004790:	2b00      	cmp	r3, #0
 8004792:	da12      	bge.n	80047ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3317      	adds	r3, #23
 80047a4:	2201      	movs	r2, #1
 80047a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 faca 	bl	8004d4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047bc:	3301      	adds	r3, #1
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	791b      	ldrb	r3, [r3, #4]
 80047c4:	461a      	mov	r2, r3
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d3cd      	bcc.n	8004768 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80047da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f002 fb7b 	bl	8006edc <USB_ReadInterrupts>
 80047e6:	4603      	mov	r3, r0
 80047e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80047ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047f0:	d156      	bne.n	80048a0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047f2:	2301      	movs	r3, #1
 80047f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f6:	e045      	b.n	8004884 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80047f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d12e      	bne.n	800487e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004820:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004822:	2b00      	cmp	r3, #0
 8004824:	da2b      	bge.n	800487e <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	0c1a      	lsrs	r2, r3, #16
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004830:	4053      	eors	r3, r2
 8004832:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004836:	2b00      	cmp	r3, #0
 8004838:	d121      	bne.n	800487e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800483a:	6879      	ldr	r1, [r7, #4]
 800483c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800483e:	4613      	mov	r3, r2
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	4413      	add	r3, r2
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	440b      	add	r3, r1
 8004848:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800484c:	2201      	movs	r2, #1
 800484e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10a      	bne.n	800487e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	69fa      	ldr	r2, [r7, #28]
 8004872:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004876:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800487a:	6053      	str	r3, [r2, #4]
            break;
 800487c:	e008      	b.n	8004890 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	3301      	adds	r3, #1
 8004882:	627b      	str	r3, [r7, #36]	@ 0x24
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	791b      	ldrb	r3, [r3, #4]
 8004888:	461a      	mov	r2, r3
 800488a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488c:	4293      	cmp	r3, r2
 800488e:	d3b3      	bcc.n	80047f8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	695a      	ldr	r2, [r3, #20]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800489e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f002 fb19 	bl	8006edc <USB_ReadInterrupts>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b4:	d10a      	bne.n	80048cc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f004 fffe 	bl	80098b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	695a      	ldr	r2, [r3, #20]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80048ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f002 fb03 	bl	8006edc <USB_ReadInterrupts>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b04      	cmp	r3, #4
 80048de:	d115      	bne.n	800490c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f004 ffee 	bl	80098d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6859      	ldr	r1, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	430a      	orrs	r2, r1
 8004906:	605a      	str	r2, [r3, #4]
 8004908:	e000      	b.n	800490c <HAL_PCD_IRQHandler+0x93c>
      return;
 800490a:	bf00      	nop
    }
  }
}
 800490c:	3734      	adds	r7, #52	@ 0x34
 800490e:	46bd      	mov	sp, r7
 8004910:	bd90      	pop	{r4, r7, pc}

08004912 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b082      	sub	sp, #8
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	460b      	mov	r3, r1
 800491c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004924:	2b01      	cmp	r3, #1
 8004926:	d101      	bne.n	800492c <HAL_PCD_SetAddress+0x1a>
 8004928:	2302      	movs	r3, #2
 800492a:	e012      	b.n	8004952 <HAL_PCD_SetAddress+0x40>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	78fa      	ldrb	r2, [r7, #3]
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f002 fa62 	bl	8006e0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	4608      	mov	r0, r1
 8004964:	4611      	mov	r1, r2
 8004966:	461a      	mov	r2, r3
 8004968:	4603      	mov	r3, r0
 800496a:	70fb      	strb	r3, [r7, #3]
 800496c:	460b      	mov	r3, r1
 800496e:	803b      	strh	r3, [r7, #0]
 8004970:	4613      	mov	r3, r2
 8004972:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800497c:	2b00      	cmp	r3, #0
 800497e:	da0f      	bge.n	80049a0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004980:	78fb      	ldrb	r3, [r7, #3]
 8004982:	f003 020f 	and.w	r2, r3, #15
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	3310      	adds	r3, #16
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	4413      	add	r3, r2
 8004994:	3304      	adds	r3, #4
 8004996:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	705a      	strb	r2, [r3, #1]
 800499e:	e00f      	b.n	80049c0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	f003 020f 	and.w	r2, r3, #15
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	4413      	add	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	4413      	add	r3, r2
 80049b6:	3304      	adds	r3, #4
 80049b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049c0:	78fb      	ldrb	r3, [r7, #3]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80049cc:	883b      	ldrh	r3, [r7, #0]
 80049ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	78ba      	ldrb	r2, [r7, #2]
 80049da:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	785b      	ldrb	r3, [r3, #1]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049ee:	78bb      	ldrb	r3, [r7, #2]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d102      	bne.n	80049fa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_PCD_EP_Open+0xae>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e00e      	b.n	8004a26 <HAL_PCD_EP_Open+0xcc>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68f9      	ldr	r1, [r7, #12]
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fbe2 	bl	80061e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004a24:	7afb      	ldrb	r3, [r7, #11]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	460b      	mov	r3, r1
 8004a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	da0f      	bge.n	8004a62 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a42:	78fb      	ldrb	r3, [r7, #3]
 8004a44:	f003 020f 	and.w	r2, r3, #15
 8004a48:	4613      	mov	r3, r2
 8004a4a:	00db      	lsls	r3, r3, #3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	3310      	adds	r3, #16
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	3304      	adds	r3, #4
 8004a58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	705a      	strb	r2, [r3, #1]
 8004a60:	e00f      	b.n	8004a82 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a62:	78fb      	ldrb	r3, [r7, #3]
 8004a64:	f003 020f 	and.w	r2, r3, #15
 8004a68:	4613      	mov	r3, r2
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	4413      	add	r3, r2
 8004a78:	3304      	adds	r3, #4
 8004a7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a82:	78fb      	ldrb	r3, [r7, #3]
 8004a84:	f003 030f 	and.w	r3, r3, #15
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_PCD_EP_Close+0x6e>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e00e      	b.n	8004aba <HAL_PCD_EP_Close+0x8c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68f9      	ldr	r1, [r7, #12]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f001 fc20 	bl	80062f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b086      	sub	sp, #24
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	60f8      	str	r0, [r7, #12]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ad2:	7afb      	ldrb	r3, [r7, #11]
 8004ad4:	f003 020f 	and.w	r2, r3, #15
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	3304      	adds	r3, #4
 8004aea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2200      	movs	r2, #0
 8004afc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	f003 030f 	and.w	r3, r3, #15
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	799b      	ldrb	r3, [r3, #6]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d102      	bne.n	8004b1e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	799b      	ldrb	r3, [r3, #6]
 8004b26:	461a      	mov	r2, r3
 8004b28:	6979      	ldr	r1, [r7, #20]
 8004b2a:	f001 fcbd 	bl	80064a8 <USB_EPStartXfer>

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3718      	adds	r7, #24
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	460b      	mov	r3, r1
 8004b42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b44:	78fb      	ldrb	r3, [r7, #3]
 8004b46:	f003 020f 	and.w	r2, r3, #15
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	607a      	str	r2, [r7, #4]
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	460b      	mov	r3, r1
 8004b76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b78:	7afb      	ldrb	r3, [r7, #11]
 8004b7a:	f003 020f 	and.w	r2, r3, #15
 8004b7e:	4613      	mov	r3, r2
 8004b80:	00db      	lsls	r3, r3, #3
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	3310      	adds	r3, #16
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ba8:	7afb      	ldrb	r3, [r7, #11]
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	799b      	ldrb	r3, [r3, #6]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d102      	bne.n	8004bc2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6818      	ldr	r0, [r3, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	799b      	ldrb	r3, [r3, #6]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	f001 fc6b 	bl	80064a8 <USB_EPStartXfer>

  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004be8:	78fb      	ldrb	r3, [r7, #3]
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	7912      	ldrb	r2, [r2, #4]
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e04f      	b.n	8004c9a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	da0f      	bge.n	8004c22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 020f 	and.w	r2, r3, #15
 8004c08:	4613      	mov	r3, r2
 8004c0a:	00db      	lsls	r3, r3, #3
 8004c0c:	4413      	add	r3, r2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	3310      	adds	r3, #16
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	4413      	add	r3, r2
 8004c16:	3304      	adds	r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	705a      	strb	r2, [r3, #1]
 8004c20:	e00d      	b.n	8004c3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c22:	78fa      	ldrb	r2, [r7, #3]
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4413      	add	r3, r2
 8004c34:	3304      	adds	r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c44:	78fb      	ldrb	r3, [r7, #3]
 8004c46:	f003 030f 	and.w	r3, r3, #15
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_PCD_EP_SetStall+0x82>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e01d      	b.n	8004c9a <HAL_PCD_EP_SetStall+0xbe>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68f9      	ldr	r1, [r7, #12]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fff9 	bl	8006c64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c72:	78fb      	ldrb	r3, [r7, #3]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d109      	bne.n	8004c90 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6818      	ldr	r0, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7999      	ldrb	r1, [r3, #6]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f002 f9ea 	bl	8007064 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004cae:	78fb      	ldrb	r3, [r7, #3]
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	7912      	ldrb	r2, [r2, #4]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d901      	bls.n	8004cc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e042      	b.n	8004d46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004cc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	da0f      	bge.n	8004ce8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	f003 020f 	and.w	r2, r3, #15
 8004cce:	4613      	mov	r3, r2
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	3310      	adds	r3, #16
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	3304      	adds	r3, #4
 8004cde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	705a      	strb	r2, [r3, #1]
 8004ce6:	e00f      	b.n	8004d08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 020f 	and.w	r2, r3, #15
 8004cee:	4613      	mov	r3, r2
 8004cf0:	00db      	lsls	r3, r3, #3
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	3304      	adds	r3, #4
 8004d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d0e:	78fb      	ldrb	r3, [r7, #3]
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_PCD_EP_ClrStall+0x86>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e00e      	b.n	8004d46 <HAL_PCD_EP_ClrStall+0xa4>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68f9      	ldr	r1, [r7, #12]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f002 f802 	bl	8006d40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004d5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	da0c      	bge.n	8004d7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	f003 020f 	and.w	r2, r3, #15
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	4413      	add	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	3310      	adds	r3, #16
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	4413      	add	r3, r2
 8004d76:	3304      	adds	r3, #4
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	e00c      	b.n	8004d96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	f003 020f 	and.w	r2, r3, #15
 8004d82:	4613      	mov	r3, r2
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68f9      	ldr	r1, [r7, #12]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 fe21 	bl	80069e4 <USB_EPStopXfer>
 8004da2:	4603      	mov	r3, r0
 8004da4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004da6:	7afb      	ldrb	r3, [r7, #11]
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3710      	adds	r7, #16
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}

08004db0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b08a      	sub	sp, #40	@ 0x28
 8004db4:	af02      	add	r7, sp, #8
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	3310      	adds	r3, #16
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d901      	bls.n	8004de8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e06b      	b.n	8004ec0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	691a      	ldr	r2, [r3, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	69fa      	ldr	r2, [r7, #28]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d902      	bls.n	8004e04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3303      	adds	r3, #3
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e0c:	e02a      	b.n	8004e64 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d902      	bls.n	8004e2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3303      	adds	r3, #3
 8004e2e:	089b      	lsrs	r3, r3, #2
 8004e30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	68d9      	ldr	r1, [r3, #12]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	4603      	mov	r3, r0
 8004e46:	6978      	ldr	r0, [r7, #20]
 8004e48:	f001 fe76 	bl	8006b38 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68da      	ldr	r2, [r3, #12]
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	441a      	add	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	441a      	add	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e74:	69ba      	ldr	r2, [r7, #24]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d809      	bhi.n	8004e8e <PCD_WriteEmptyTxFifo+0xde>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695a      	ldr	r2, [r3, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d203      	bcs.n	8004e8e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1bf      	bne.n	8004e0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	691a      	ldr	r2, [r3, #16]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d811      	bhi.n	8004ebe <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f003 030f 	and.w	r3, r3, #15
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	43db      	mvns	r3, r3
 8004eb4:	6939      	ldr	r1, [r7, #16]
 8004eb6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004eba:	4013      	ands	r3, r2
 8004ebc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b088      	sub	sp, #32
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	333c      	adds	r3, #60	@ 0x3c
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	799b      	ldrb	r3, [r3, #6]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d17b      	bne.n	8004ff6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4a61      	ldr	r2, [pc, #388]	@ (8005090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	f240 80b9 	bls.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 80b3 	beq.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f30:	6093      	str	r3, [r2, #8]
 8004f32:	e0a7      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	2320      	movs	r3, #32
 8004f4e:	6093      	str	r3, [r2, #8]
 8004f50:	e098      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f040 8093 	bne.w	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	4a4b      	ldr	r2, [pc, #300]	@ (8005090 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d90f      	bls.n	8004f86 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f82:	6093      	str	r3, [r2, #8]
 8004f84:	e07e      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4413      	add	r3, r2
 8004f98:	3304      	adds	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6a1a      	ldr	r2, [r3, #32]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	0159      	lsls	r1, r3, #5
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fb2:	1ad2      	subs	r2, r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d114      	bne.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	f002 f846 	bl	8007064 <USB_EP0_OutStart>
 8004fd8:	e006      	b.n	8004fe8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	68da      	ldr	r2, [r3, #12]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	441a      	add	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	4619      	mov	r1, r3
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f004 fb9e 	bl	8009730 <HAL_PCD_DataOutStageCallback>
 8004ff4:	e046      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	4a26      	ldr	r2, [pc, #152]	@ (8005094 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d124      	bne.n	8005048 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	461a      	mov	r2, r3
 8005016:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800501a:	6093      	str	r3, [r2, #8]
 800501c:	e032      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f003 0320 	and.w	r3, r3, #32
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005034:	461a      	mov	r2, r3
 8005036:	2320      	movs	r3, #32
 8005038:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f004 fb75 	bl	8009730 <HAL_PCD_DataOutStageCallback>
 8005046:	e01d      	b.n	8005084 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d114      	bne.n	8005078 <PCD_EP_OutXfrComplete_int+0x1b0>
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4613      	mov	r3, r2
 8005054:	00db      	lsls	r3, r3, #3
 8005056:	4413      	add	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d108      	bne.n	8005078 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005070:	461a      	mov	r2, r3
 8005072:	2100      	movs	r1, #0
 8005074:	f001 fff6 	bl	8007064 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f004 fb56 	bl	8009730 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	4f54300a 	.word	0x4f54300a
 8005094:	4f54310a 	.word	0x4f54310a

08005098 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b086      	sub	sp, #24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	333c      	adds	r3, #60	@ 0x3c
 80050b0:	3304      	adds	r3, #4
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4a15      	ldr	r2, [pc, #84]	@ (8005120 <PCD_EP_OutSetupPacket_int+0x88>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d90e      	bls.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d009      	beq.n	80050ec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	015a      	lsls	r2, r3, #5
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	4413      	add	r3, r2
 80050e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e4:	461a      	mov	r2, r3
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f004 fb0d 	bl	800970c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005120 <PCD_EP_OutSetupPacket_int+0x88>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d90c      	bls.n	8005114 <PCD_EP_OutSetupPacket_int+0x7c>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	799b      	ldrb	r3, [r3, #6]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d108      	bne.n	8005114 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800510c:	461a      	mov	r2, r3
 800510e:	2101      	movs	r1, #1
 8005110:	f001 ffa8 	bl	8007064 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	4f54300a 	.word	0x4f54300a

08005124 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005124:	b480      	push	{r7}
 8005126:	b085      	sub	sp, #20
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	460b      	mov	r3, r1
 800512e:	70fb      	strb	r3, [r7, #3]
 8005130:	4613      	mov	r3, r2
 8005132:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800513c:	78fb      	ldrb	r3, [r7, #3]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d107      	bne.n	8005152 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005142:	883b      	ldrh	r3, [r7, #0]
 8005144:	0419      	lsls	r1, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	430a      	orrs	r2, r1
 800514e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005150:	e028      	b.n	80051a4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	0c1b      	lsrs	r3, r3, #16
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	4413      	add	r3, r2
 800515e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005160:	2300      	movs	r3, #0
 8005162:	73fb      	strb	r3, [r7, #15]
 8005164:	e00d      	b.n	8005182 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3340      	adds	r3, #64	@ 0x40
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	0c1b      	lsrs	r3, r3, #16
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800517c:	7bfb      	ldrb	r3, [r7, #15]
 800517e:	3301      	adds	r3, #1
 8005180:	73fb      	strb	r3, [r7, #15]
 8005182:	7bfa      	ldrb	r2, [r7, #15]
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	3b01      	subs	r3, #1
 8005188:	429a      	cmp	r2, r3
 800518a:	d3ec      	bcc.n	8005166 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800518c:	883b      	ldrh	r3, [r7, #0]
 800518e:	0418      	lsls	r0, r3, #16
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	78fb      	ldrb	r3, [r7, #3]
 8005196:	3b01      	subs	r3, #1
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	4302      	orrs	r2, r0
 800519c:	3340      	adds	r3, #64	@ 0x40
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	887a      	ldrh	r2, [r7, #2]
 80051c4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e267      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d075      	beq.n	80052f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800520a:	4b88      	ldr	r3, [pc, #544]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b04      	cmp	r3, #4
 8005214:	d00c      	beq.n	8005230 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005216:	4b85      	ldr	r3, [pc, #532]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800521e:	2b08      	cmp	r3, #8
 8005220:	d112      	bne.n	8005248 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005222:	4b82      	ldr	r3, [pc, #520]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800522a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800522e:	d10b      	bne.n	8005248 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005230:	4b7e      	ldr	r3, [pc, #504]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d05b      	beq.n	80052f4 <HAL_RCC_OscConfig+0x108>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d157      	bne.n	80052f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e242      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005250:	d106      	bne.n	8005260 <HAL_RCC_OscConfig+0x74>
 8005252:	4b76      	ldr	r3, [pc, #472]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a75      	ldr	r2, [pc, #468]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005258:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	e01d      	b.n	800529c <HAL_RCC_OscConfig+0xb0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005268:	d10c      	bne.n	8005284 <HAL_RCC_OscConfig+0x98>
 800526a:	4b70      	ldr	r3, [pc, #448]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a6f      	ldr	r2, [pc, #444]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	4b6d      	ldr	r3, [pc, #436]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a6c      	ldr	r2, [pc, #432]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800527c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005280:	6013      	str	r3, [r2, #0]
 8005282:	e00b      	b.n	800529c <HAL_RCC_OscConfig+0xb0>
 8005284:	4b69      	ldr	r3, [pc, #420]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a68      	ldr	r2, [pc, #416]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800528a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	4b66      	ldr	r3, [pc, #408]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a65      	ldr	r2, [pc, #404]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800529a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d013      	beq.n	80052cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052a4:	f7fc fd54 	bl	8001d50 <HAL_GetTick>
 80052a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052aa:	e008      	b.n	80052be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ac:	f7fc fd50 	bl	8001d50 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b64      	cmp	r3, #100	@ 0x64
 80052b8:	d901      	bls.n	80052be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e207      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052be:	4b5b      	ldr	r3, [pc, #364]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f0      	beq.n	80052ac <HAL_RCC_OscConfig+0xc0>
 80052ca:	e014      	b.n	80052f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052cc:	f7fc fd40 	bl	8001d50 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052d4:	f7fc fd3c 	bl	8001d50 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b64      	cmp	r3, #100	@ 0x64
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e1f3      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e6:	4b51      	ldr	r3, [pc, #324]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0xe8>
 80052f2:	e000      	b.n	80052f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d063      	beq.n	80053ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005302:	4b4a      	ldr	r3, [pc, #296]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 030c 	and.w	r3, r3, #12
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00b      	beq.n	8005326 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530e:	4b47      	ldr	r3, [pc, #284]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005316:	2b08      	cmp	r3, #8
 8005318:	d11c      	bne.n	8005354 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800531a:	4b44      	ldr	r3, [pc, #272]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005326:	4b41      	ldr	r3, [pc, #260]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d005      	beq.n	800533e <HAL_RCC_OscConfig+0x152>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d001      	beq.n	800533e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e1c7      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800533e:	4b3b      	ldr	r3, [pc, #236]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	4937      	ldr	r1, [pc, #220]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005352:	e03a      	b.n	80053ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d020      	beq.n	800539e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800535c:	4b34      	ldr	r3, [pc, #208]	@ (8005430 <HAL_RCC_OscConfig+0x244>)
 800535e:	2201      	movs	r2, #1
 8005360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005362:	f7fc fcf5 	bl	8001d50 <HAL_GetTick>
 8005366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005368:	e008      	b.n	800537c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800536a:	f7fc fcf1 	bl	8001d50 <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b02      	cmp	r3, #2
 8005376:	d901      	bls.n	800537c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e1a8      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537c:	4b2b      	ldr	r3, [pc, #172]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0302 	and.w	r3, r3, #2
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0f0      	beq.n	800536a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005388:	4b28      	ldr	r3, [pc, #160]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	00db      	lsls	r3, r3, #3
 8005396:	4925      	ldr	r1, [pc, #148]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]
 800539c:	e015      	b.n	80053ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800539e:	4b24      	ldr	r3, [pc, #144]	@ (8005430 <HAL_RCC_OscConfig+0x244>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fc fcd4 	bl	8001d50 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ac:	f7fc fcd0 	bl	8001d50 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e187      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053be:	4b1b      	ldr	r3, [pc, #108]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0308 	and.w	r3, r3, #8
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d036      	beq.n	8005444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d016      	beq.n	800540c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053de:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <HAL_RCC_OscConfig+0x248>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e4:	f7fc fcb4 	bl	8001d50 <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053ec:	f7fc fcb0 	bl	8001d50 <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e167      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fe:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <HAL_RCC_OscConfig+0x240>)
 8005400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <HAL_RCC_OscConfig+0x200>
 800540a:	e01b      	b.n	8005444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800540c:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <HAL_RCC_OscConfig+0x248>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005412:	f7fc fc9d 	bl	8001d50 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005418:	e00e      	b.n	8005438 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800541a:	f7fc fc99 	bl	8001d50 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d907      	bls.n	8005438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e150      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
 800542c:	40023800 	.word	0x40023800
 8005430:	42470000 	.word	0x42470000
 8005434:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005438:	4b88      	ldr	r3, [pc, #544]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800543a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ea      	bne.n	800541a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 8097 	beq.w	8005580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005452:	2300      	movs	r3, #0
 8005454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005456:	4b81      	ldr	r3, [pc, #516]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10f      	bne.n	8005482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005462:	2300      	movs	r3, #0
 8005464:	60bb      	str	r3, [r7, #8]
 8005466:	4b7d      	ldr	r3, [pc, #500]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546a:	4a7c      	ldr	r2, [pc, #496]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800546c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005470:	6413      	str	r3, [r2, #64]	@ 0x40
 8005472:	4b7a      	ldr	r3, [pc, #488]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547a:	60bb      	str	r3, [r7, #8]
 800547c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800547e:	2301      	movs	r3, #1
 8005480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005482:	4b77      	ldr	r3, [pc, #476]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800548a:	2b00      	cmp	r3, #0
 800548c:	d118      	bne.n	80054c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800548e:	4b74      	ldr	r3, [pc, #464]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a73      	ldr	r2, [pc, #460]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 8005494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800549a:	f7fc fc59 	bl	8001d50 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054a2:	f7fc fc55 	bl	8001d50 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e10c      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005660 <HAL_RCC_OscConfig+0x474>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x2ea>
 80054c8:	4b64      	ldr	r3, [pc, #400]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054cc:	4a63      	ldr	r2, [pc, #396]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80054d4:	e01c      	b.n	8005510 <HAL_RCC_OscConfig+0x324>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	2b05      	cmp	r3, #5
 80054dc:	d10c      	bne.n	80054f8 <HAL_RCC_OscConfig+0x30c>
 80054de:	4b5f      	ldr	r3, [pc, #380]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054e2:	4a5e      	ldr	r2, [pc, #376]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054e4:	f043 0304 	orr.w	r3, r3, #4
 80054e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80054ea:	4b5c      	ldr	r3, [pc, #368]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ee:	4a5b      	ldr	r2, [pc, #364]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80054f6:	e00b      	b.n	8005510 <HAL_RCC_OscConfig+0x324>
 80054f8:	4b58      	ldr	r3, [pc, #352]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fc:	4a57      	ldr	r2, [pc, #348]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80054fe:	f023 0301 	bic.w	r3, r3, #1
 8005502:	6713      	str	r3, [r2, #112]	@ 0x70
 8005504:	4b55      	ldr	r3, [pc, #340]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005506:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005508:	4a54      	ldr	r2, [pc, #336]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800550a:	f023 0304 	bic.w	r3, r3, #4
 800550e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d015      	beq.n	8005544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005518:	f7fc fc1a 	bl	8001d50 <HAL_GetTick>
 800551c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800551e:	e00a      	b.n	8005536 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005520:	f7fc fc16 	bl	8001d50 <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800552e:	4293      	cmp	r3, r2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e0cb      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	4b49      	ldr	r3, [pc, #292]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0ee      	beq.n	8005520 <HAL_RCC_OscConfig+0x334>
 8005542:	e014      	b.n	800556e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005544:	f7fc fc04 	bl	8001d50 <HAL_GetTick>
 8005548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800554a:	e00a      	b.n	8005562 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800554c:	f7fc fc00 	bl	8001d50 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	f241 3288 	movw	r2, #5000	@ 0x1388
 800555a:	4293      	cmp	r3, r2
 800555c:	d901      	bls.n	8005562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800555e:	2303      	movs	r3, #3
 8005560:	e0b5      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005562:	4b3e      	ldr	r3, [pc, #248]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d1ee      	bne.n	800554c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800556e:	7dfb      	ldrb	r3, [r7, #23]
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005574:	4b39      	ldr	r3, [pc, #228]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005578:	4a38      	ldr	r2, [pc, #224]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800557a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800557e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 80a1 	beq.w	80056cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800558a:	4b34      	ldr	r3, [pc, #208]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	2b08      	cmp	r3, #8
 8005594:	d05c      	beq.n	8005650 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d141      	bne.n	8005622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800559e:	4b31      	ldr	r3, [pc, #196]	@ (8005664 <HAL_RCC_OscConfig+0x478>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055a4:	f7fc fbd4 	bl	8001d50 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ac:	f7fc fbd0 	bl	8001d50 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e087      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055be:	4b27      	ldr	r3, [pc, #156]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	69da      	ldr	r2, [r3, #28]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	019b      	lsls	r3, r3, #6
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	085b      	lsrs	r3, r3, #1
 80055e2:	3b01      	subs	r3, #1
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	491b      	ldr	r1, [pc, #108]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005664 <HAL_RCC_OscConfig+0x478>)
 80055f6:	2201      	movs	r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055fa:	f7fc fba9 	bl	8001d50 <HAL_GetTick>
 80055fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005602:	f7fc fba5 	bl	8001d50 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e05c      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005614:	4b11      	ldr	r3, [pc, #68]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0f0      	beq.n	8005602 <HAL_RCC_OscConfig+0x416>
 8005620:	e054      	b.n	80056cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005622:	4b10      	ldr	r3, [pc, #64]	@ (8005664 <HAL_RCC_OscConfig+0x478>)
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005628:	f7fc fb92 	bl	8001d50 <HAL_GetTick>
 800562c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562e:	e008      	b.n	8005642 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005630:	f7fc fb8e 	bl	8001d50 <HAL_GetTick>
 8005634:	4602      	mov	r2, r0
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	2b02      	cmp	r3, #2
 800563c:	d901      	bls.n	8005642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e045      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	4b06      	ldr	r3, [pc, #24]	@ (800565c <HAL_RCC_OscConfig+0x470>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1f0      	bne.n	8005630 <HAL_RCC_OscConfig+0x444>
 800564e:	e03d      	b.n	80056cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d107      	bne.n	8005668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e038      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
 800565c:	40023800 	.word	0x40023800
 8005660:	40007000 	.word	0x40007000
 8005664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005668:	4b1b      	ldr	r3, [pc, #108]	@ (80056d8 <HAL_RCC_OscConfig+0x4ec>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b01      	cmp	r3, #1
 8005674:	d028      	beq.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005680:	429a      	cmp	r2, r3
 8005682:	d121      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d11a      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005698:	4013      	ands	r3, r2
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800569e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d111      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	3b01      	subs	r3, #1
 80056b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d107      	bne.n	80056c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e000      	b.n	80056ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3718      	adds	r7, #24
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	40023800 	.word	0x40023800

080056dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0cc      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056f0:	4b68      	ldr	r3, [pc, #416]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d90c      	bls.n	8005718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b65      	ldr	r3, [pc, #404]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005706:	4b63      	ldr	r3, [pc, #396]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d001      	beq.n	8005718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e0b8      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0304 	and.w	r3, r3, #4
 800572c:	2b00      	cmp	r3, #0
 800572e:	d005      	beq.n	800573c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005730:	4b59      	ldr	r3, [pc, #356]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4a58      	ldr	r2, [pc, #352]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005736:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800573a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d005      	beq.n	8005754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005748:	4b53      	ldr	r3, [pc, #332]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	689b      	ldr	r3, [r3, #8]
 800574c:	4a52      	ldr	r2, [pc, #328]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800574e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005754:	4b50      	ldr	r3, [pc, #320]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	494d      	ldr	r1, [pc, #308]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	4313      	orrs	r3, r2
 8005764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0301 	and.w	r3, r3, #1
 800576e:	2b00      	cmp	r3, #0
 8005770:	d044      	beq.n	80057fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d107      	bne.n	800578a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577a:	4b47      	ldr	r3, [pc, #284]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d119      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e07f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d003      	beq.n	800579a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005796:	2b03      	cmp	r3, #3
 8005798:	d107      	bne.n	80057aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579a:	4b3f      	ldr	r3, [pc, #252]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d109      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e06f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d101      	bne.n	80057ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e067      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ba:	4b37      	ldr	r3, [pc, #220]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f023 0203 	bic.w	r2, r3, #3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4934      	ldr	r1, [pc, #208]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057cc:	f7fc fac0 	bl	8001d50 <HAL_GetTick>
 80057d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d2:	e00a      	b.n	80057ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d4:	f7fc fabc 	bl	8001d50 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e04f      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 020c 	and.w	r2, r3, #12
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1eb      	bne.n	80057d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057fc:	4b25      	ldr	r3, [pc, #148]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0307 	and.w	r3, r3, #7
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d20c      	bcs.n	8005824 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b22      	ldr	r3, [pc, #136]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005812:	4b20      	ldr	r3, [pc, #128]	@ (8005894 <HAL_RCC_ClockConfig+0x1b8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	683a      	ldr	r2, [r7, #0]
 800581c:	429a      	cmp	r2, r3
 800581e:	d001      	beq.n	8005824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e032      	b.n	800588a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f003 0304 	and.w	r3, r3, #4
 800582c:	2b00      	cmp	r3, #0
 800582e:	d008      	beq.n	8005842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005830:	4b19      	ldr	r3, [pc, #100]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	4916      	ldr	r1, [pc, #88]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800583e:	4313      	orrs	r3, r2
 8005840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0308 	and.w	r3, r3, #8
 800584a:	2b00      	cmp	r3, #0
 800584c:	d009      	beq.n	8005862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800584e:	4b12      	ldr	r3, [pc, #72]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	490e      	ldr	r1, [pc, #56]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800585e:	4313      	orrs	r3, r2
 8005860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005862:	f000 f821 	bl	80058a8 <HAL_RCC_GetSysClockFreq>
 8005866:	4602      	mov	r2, r0
 8005868:	4b0b      	ldr	r3, [pc, #44]	@ (8005898 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	091b      	lsrs	r3, r3, #4
 800586e:	f003 030f 	and.w	r3, r3, #15
 8005872:	490a      	ldr	r1, [pc, #40]	@ (800589c <HAL_RCC_ClockConfig+0x1c0>)
 8005874:	5ccb      	ldrb	r3, [r1, r3]
 8005876:	fa22 f303 	lsr.w	r3, r2, r3
 800587a:	4a09      	ldr	r2, [pc, #36]	@ (80058a0 <HAL_RCC_ClockConfig+0x1c4>)
 800587c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800587e:	4b09      	ldr	r3, [pc, #36]	@ (80058a4 <HAL_RCC_ClockConfig+0x1c8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f7fc fa20 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023c00 	.word	0x40023c00
 8005898:	40023800 	.word	0x40023800
 800589c:	0800ca10 	.word	0x0800ca10
 80058a0:	20000000 	.word	0x20000000
 80058a4:	20000004 	.word	0x20000004

080058a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ac:	b094      	sub	sp, #80	@ 0x50
 80058ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058c0:	4b79      	ldr	r3, [pc, #484]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 030c 	and.w	r3, r3, #12
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d00d      	beq.n	80058e8 <HAL_RCC_GetSysClockFreq+0x40>
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	f200 80e1 	bhi.w	8005a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <HAL_RCC_GetSysClockFreq+0x34>
 80058d6:	2b04      	cmp	r3, #4
 80058d8:	d003      	beq.n	80058e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80058da:	e0db      	b.n	8005a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058dc:	4b73      	ldr	r3, [pc, #460]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x204>)
 80058de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058e0:	e0db      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058e2:	4b73      	ldr	r3, [pc, #460]	@ (8005ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80058e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058e6:	e0d8      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058e8:	4b6f      	ldr	r3, [pc, #444]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80058f2:	4b6d      	ldr	r3, [pc, #436]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d063      	beq.n	80059c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058fe:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	099b      	lsrs	r3, r3, #6
 8005904:	2200      	movs	r2, #0
 8005906:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005908:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005910:	633b      	str	r3, [r7, #48]	@ 0x30
 8005912:	2300      	movs	r3, #0
 8005914:	637b      	str	r3, [r7, #52]	@ 0x34
 8005916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800591a:	4622      	mov	r2, r4
 800591c:	462b      	mov	r3, r5
 800591e:	f04f 0000 	mov.w	r0, #0
 8005922:	f04f 0100 	mov.w	r1, #0
 8005926:	0159      	lsls	r1, r3, #5
 8005928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800592c:	0150      	lsls	r0, r2, #5
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4621      	mov	r1, r4
 8005934:	1a51      	subs	r1, r2, r1
 8005936:	6139      	str	r1, [r7, #16]
 8005938:	4629      	mov	r1, r5
 800593a:	eb63 0301 	sbc.w	r3, r3, r1
 800593e:	617b      	str	r3, [r7, #20]
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800594c:	4659      	mov	r1, fp
 800594e:	018b      	lsls	r3, r1, #6
 8005950:	4651      	mov	r1, sl
 8005952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005956:	4651      	mov	r1, sl
 8005958:	018a      	lsls	r2, r1, #6
 800595a:	4651      	mov	r1, sl
 800595c:	ebb2 0801 	subs.w	r8, r2, r1
 8005960:	4659      	mov	r1, fp
 8005962:	eb63 0901 	sbc.w	r9, r3, r1
 8005966:	f04f 0200 	mov.w	r2, #0
 800596a:	f04f 0300 	mov.w	r3, #0
 800596e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800597a:	4690      	mov	r8, r2
 800597c:	4699      	mov	r9, r3
 800597e:	4623      	mov	r3, r4
 8005980:	eb18 0303 	adds.w	r3, r8, r3
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	462b      	mov	r3, r5
 8005988:	eb49 0303 	adc.w	r3, r9, r3
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800599a:	4629      	mov	r1, r5
 800599c:	024b      	lsls	r3, r1, #9
 800599e:	4621      	mov	r1, r4
 80059a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059a4:	4621      	mov	r1, r4
 80059a6:	024a      	lsls	r2, r1, #9
 80059a8:	4610      	mov	r0, r2
 80059aa:	4619      	mov	r1, r3
 80059ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ae:	2200      	movs	r2, #0
 80059b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059b8:	f7fb f8f6 	bl	8000ba8 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4613      	mov	r3, r2
 80059c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059c4:	e058      	b.n	8005a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059c6:	4b38      	ldr	r3, [pc, #224]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	099b      	lsrs	r3, r3, #6
 80059cc:	2200      	movs	r2, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	4611      	mov	r1, r2
 80059d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80059d6:	623b      	str	r3, [r7, #32]
 80059d8:	2300      	movs	r3, #0
 80059da:	627b      	str	r3, [r7, #36]	@ 0x24
 80059dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80059e0:	4642      	mov	r2, r8
 80059e2:	464b      	mov	r3, r9
 80059e4:	f04f 0000 	mov.w	r0, #0
 80059e8:	f04f 0100 	mov.w	r1, #0
 80059ec:	0159      	lsls	r1, r3, #5
 80059ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80059f2:	0150      	lsls	r0, r2, #5
 80059f4:	4602      	mov	r2, r0
 80059f6:	460b      	mov	r3, r1
 80059f8:	4641      	mov	r1, r8
 80059fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80059fe:	4649      	mov	r1, r9
 8005a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a04:	f04f 0200 	mov.w	r2, #0
 8005a08:	f04f 0300 	mov.w	r3, #0
 8005a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a18:	ebb2 040a 	subs.w	r4, r2, sl
 8005a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a20:	f04f 0200 	mov.w	r2, #0
 8005a24:	f04f 0300 	mov.w	r3, #0
 8005a28:	00eb      	lsls	r3, r5, #3
 8005a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a2e:	00e2      	lsls	r2, r4, #3
 8005a30:	4614      	mov	r4, r2
 8005a32:	461d      	mov	r5, r3
 8005a34:	4643      	mov	r3, r8
 8005a36:	18e3      	adds	r3, r4, r3
 8005a38:	603b      	str	r3, [r7, #0]
 8005a3a:	464b      	mov	r3, r9
 8005a3c:	eb45 0303 	adc.w	r3, r5, r3
 8005a40:	607b      	str	r3, [r7, #4]
 8005a42:	f04f 0200 	mov.w	r2, #0
 8005a46:	f04f 0300 	mov.w	r3, #0
 8005a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a4e:	4629      	mov	r1, r5
 8005a50:	028b      	lsls	r3, r1, #10
 8005a52:	4621      	mov	r1, r4
 8005a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a58:	4621      	mov	r1, r4
 8005a5a:	028a      	lsls	r2, r1, #10
 8005a5c:	4610      	mov	r0, r2
 8005a5e:	4619      	mov	r1, r3
 8005a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a62:	2200      	movs	r2, #0
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	61fa      	str	r2, [r7, #28]
 8005a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a6c:	f7fb f89c 	bl	8000ba8 <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4613      	mov	r3, r2
 8005a76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	0c1b      	lsrs	r3, r3, #16
 8005a7e:	f003 0303 	and.w	r3, r3, #3
 8005a82:	3301      	adds	r3, #1
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a92:	e002      	b.n	8005a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a94:	4b05      	ldr	r3, [pc, #20]	@ (8005aac <HAL_RCC_GetSysClockFreq+0x204>)
 8005a96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3750      	adds	r7, #80	@ 0x50
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	00f42400 	.word	0x00f42400
 8005ab0:	007a1200 	.word	0x007a1200

08005ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ab8:	4b03      	ldr	r3, [pc, #12]	@ (8005ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aba:	681b      	ldr	r3, [r3, #0]
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	20000000 	.word	0x20000000

08005acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005ad0:	f7ff fff0 	bl	8005ab4 <HAL_RCC_GetHCLKFreq>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	0a9b      	lsrs	r3, r3, #10
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	4903      	ldr	r1, [pc, #12]	@ (8005af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ae2:	5ccb      	ldrb	r3, [r1, r3]
 8005ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	40023800 	.word	0x40023800
 8005af0:	0800ca20 	.word	0x0800ca20

08005af4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005af4:	b084      	sub	sp, #16
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b084      	sub	sp, #16
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
 8005afe:	f107 001c 	add.w	r0, r7, #28
 8005b02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d123      	bne.n	8005b56 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005b22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d105      	bne.n	8005b4a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 fae8 	bl	8007120 <USB_CoreReset>
 8005b50:	4603      	mov	r3, r0
 8005b52:	73fb      	strb	r3, [r7, #15]
 8005b54:	e01b      	b.n	8005b8e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 fadc 	bl	8007120 <USB_CoreReset>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d106      	bne.n	8005b82 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b80:	e005      	b.n	8005b8e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b8e:	7fbb      	ldrb	r3, [r7, #30]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d10b      	bne.n	8005bac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f043 0206 	orr.w	r2, r3, #6
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bb8:	b004      	add	sp, #16
 8005bba:	4770      	bx	lr

08005bbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d165      	bne.n	8005c9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4a41      	ldr	r2, [pc, #260]	@ (8005cd8 <USB_SetTurnaroundTime+0x11c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d906      	bls.n	8005be6 <USB_SetTurnaroundTime+0x2a>
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	4a40      	ldr	r2, [pc, #256]	@ (8005cdc <USB_SetTurnaroundTime+0x120>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d202      	bcs.n	8005be6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005be0:	230f      	movs	r3, #15
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e062      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	4a3c      	ldr	r2, [pc, #240]	@ (8005cdc <USB_SetTurnaroundTime+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d306      	bcc.n	8005bfc <USB_SetTurnaroundTime+0x40>
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	4a3b      	ldr	r2, [pc, #236]	@ (8005ce0 <USB_SetTurnaroundTime+0x124>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d202      	bcs.n	8005bfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005bf6:	230e      	movs	r3, #14
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e057      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	4a38      	ldr	r2, [pc, #224]	@ (8005ce0 <USB_SetTurnaroundTime+0x124>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d306      	bcc.n	8005c12 <USB_SetTurnaroundTime+0x56>
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	4a37      	ldr	r2, [pc, #220]	@ (8005ce4 <USB_SetTurnaroundTime+0x128>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d202      	bcs.n	8005c12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c0c:	230d      	movs	r3, #13
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e04c      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	4a33      	ldr	r2, [pc, #204]	@ (8005ce4 <USB_SetTurnaroundTime+0x128>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d306      	bcc.n	8005c28 <USB_SetTurnaroundTime+0x6c>
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	4a32      	ldr	r2, [pc, #200]	@ (8005ce8 <USB_SetTurnaroundTime+0x12c>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d802      	bhi.n	8005c28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c22:	230c      	movs	r3, #12
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	e041      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8005ce8 <USB_SetTurnaroundTime+0x12c>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d906      	bls.n	8005c3e <USB_SetTurnaroundTime+0x82>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	4a2e      	ldr	r2, [pc, #184]	@ (8005cec <USB_SetTurnaroundTime+0x130>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d802      	bhi.n	8005c3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c38:	230b      	movs	r3, #11
 8005c3a:	617b      	str	r3, [r7, #20]
 8005c3c:	e036      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	4a2a      	ldr	r2, [pc, #168]	@ (8005cec <USB_SetTurnaroundTime+0x130>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d906      	bls.n	8005c54 <USB_SetTurnaroundTime+0x98>
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	4a29      	ldr	r2, [pc, #164]	@ (8005cf0 <USB_SetTurnaroundTime+0x134>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d802      	bhi.n	8005c54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c4e:	230a      	movs	r3, #10
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e02b      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4a26      	ldr	r2, [pc, #152]	@ (8005cf0 <USB_SetTurnaroundTime+0x134>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d906      	bls.n	8005c6a <USB_SetTurnaroundTime+0xae>
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4a25      	ldr	r2, [pc, #148]	@ (8005cf4 <USB_SetTurnaroundTime+0x138>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d202      	bcs.n	8005c6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c64:	2309      	movs	r3, #9
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	e020      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	4a21      	ldr	r2, [pc, #132]	@ (8005cf4 <USB_SetTurnaroundTime+0x138>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d306      	bcc.n	8005c80 <USB_SetTurnaroundTime+0xc4>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4a20      	ldr	r2, [pc, #128]	@ (8005cf8 <USB_SetTurnaroundTime+0x13c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d802      	bhi.n	8005c80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	e015      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf8 <USB_SetTurnaroundTime+0x13c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d906      	bls.n	8005c96 <USB_SetTurnaroundTime+0xda>
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4a1c      	ldr	r2, [pc, #112]	@ (8005cfc <USB_SetTurnaroundTime+0x140>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d202      	bcs.n	8005c96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c90:	2307      	movs	r3, #7
 8005c92:	617b      	str	r3, [r7, #20]
 8005c94:	e00a      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c96:	2306      	movs	r3, #6
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e007      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c9c:	79fb      	ldrb	r3, [r7, #7]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ca2:	2309      	movs	r3, #9
 8005ca4:	617b      	str	r3, [r7, #20]
 8005ca6:	e001      	b.n	8005cac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ca8:	2309      	movs	r3, #9
 8005caa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	029b      	lsls	r3, r3, #10
 8005cc0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	00d8acbf 	.word	0x00d8acbf
 8005cdc:	00e4e1c0 	.word	0x00e4e1c0
 8005ce0:	00f42400 	.word	0x00f42400
 8005ce4:	01067380 	.word	0x01067380
 8005ce8:	011a499f 	.word	0x011a499f
 8005cec:	01312cff 	.word	0x01312cff
 8005cf0:	014ca43f 	.word	0x014ca43f
 8005cf4:	016e3600 	.word	0x016e3600
 8005cf8:	01a6ab1f 	.word	0x01a6ab1f
 8005cfc:	01e84800 	.word	0x01e84800

08005d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f043 0201 	orr.w	r2, r3, #1
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr

08005d22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d22:	b480      	push	{r7}
 8005d24:	b083      	sub	sp, #12
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f023 0201 	bic.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	2b01      	cmp	r3, #1
 8005d64:	d115      	bne.n	8005d92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d72:	200a      	movs	r0, #10
 8005d74:	f7fb fff8 	bl	8001d68 <HAL_Delay>
      ms += 10U;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	330a      	adds	r3, #10
 8005d7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f001 f93f 	bl	8007002 <USB_GetMode>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d01e      	beq.n	8005dc8 <USB_SetCurrentMode+0x84>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d8e:	d9f0      	bls.n	8005d72 <USB_SetCurrentMode+0x2e>
 8005d90:	e01a      	b.n	8005dc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d115      	bne.n	8005dc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005da4:	200a      	movs	r0, #10
 8005da6:	f7fb ffdf 	bl	8001d68 <HAL_Delay>
      ms += 10U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	330a      	adds	r3, #10
 8005dae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f001 f926 	bl	8007002 <USB_GetMode>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <USB_SetCurrentMode+0x84>
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2bc7      	cmp	r3, #199	@ 0xc7
 8005dc0:	d9f0      	bls.n	8005da4 <USB_SetCurrentMode+0x60>
 8005dc2:	e001      	b.n	8005dc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e005      	b.n	8005dd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2bc8      	cmp	r3, #200	@ 0xc8
 8005dcc:	d101      	bne.n	8005dd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dd2:	2300      	movs	r3, #0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3710      	adds	r7, #16
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ddc:	b084      	sub	sp, #16
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b086      	sub	sp, #24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005df6:	2300      	movs	r3, #0
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	e009      	b.n	8005e10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	3340      	adds	r3, #64	@ 0x40
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	2200      	movs	r2, #0
 8005e08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	613b      	str	r3, [r7, #16]
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b0e      	cmp	r3, #14
 8005e14:	d9f2      	bls.n	8005dfc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e16:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11c      	bne.n	8005e58 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e56:	e00b      	b.n	8005e70 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e68:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e76:	461a      	mov	r2, r3
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d10d      	bne.n	8005ea0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d104      	bne.n	8005e96 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f968 	bl	8006164 <USB_SetDevSpeed>
 8005e94:	e008      	b.n	8005ea8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e96:	2101      	movs	r1, #1
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f963 	bl	8006164 <USB_SetDevSpeed>
 8005e9e:	e003      	b.n	8005ea8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ea0:	2103      	movs	r1, #3
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f95e 	bl	8006164 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ea8:	2110      	movs	r1, #16
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f8fa 	bl	80060a4 <USB_FlushTxFifo>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f924 	bl	8006108 <USB_FlushRxFifo>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005edc:	461a      	mov	r2, r3
 8005ede:	2300      	movs	r3, #0
 8005ee0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee8:	461a      	mov	r2, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eee:	2300      	movs	r3, #0
 8005ef0:	613b      	str	r3, [r7, #16]
 8005ef2:	e043      	b.n	8005f7c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f0a:	d118      	bne.n	8005f3e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	e013      	b.n	8005f50 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	015a      	lsls	r2, r3, #5
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	4413      	add	r3, r2
 8005f30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f34:	461a      	mov	r2, r3
 8005f36:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e008      	b.n	8005f50 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	015a      	lsls	r2, r3, #5
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4413      	add	r3, r2
 8005f46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	015a      	lsls	r2, r3, #5
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	4413      	add	r3, r2
 8005f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	2300      	movs	r3, #0
 8005f60:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	613b      	str	r3, [r7, #16]
 8005f7c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f80:	461a      	mov	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d3b5      	bcc.n	8005ef4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e043      	b.n	8006016 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fa0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fa4:	d118      	bne.n	8005fd8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	e013      	b.n	8005fea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fce:	461a      	mov	r2, r3
 8005fd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e008      	b.n	8005fea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800600e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	3301      	adds	r3, #1
 8006014:	613b      	str	r3, [r7, #16]
 8006016:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800601a:	461a      	mov	r2, r3
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	4293      	cmp	r3, r2
 8006020:	d3b5      	bcc.n	8005f8e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006034:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006042:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006044:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f043 0210 	orr.w	r2, r3, #16
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	699a      	ldr	r2, [r3, #24]
 800605c:	4b10      	ldr	r3, [pc, #64]	@ (80060a0 <USB_DevInit+0x2c4>)
 800605e:	4313      	orrs	r3, r2
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006064:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006068:	2b00      	cmp	r3, #0
 800606a:	d005      	beq.n	8006078 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f043 0208 	orr.w	r2, r3, #8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006078:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800607c:	2b01      	cmp	r3, #1
 800607e:	d107      	bne.n	8006090 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006088:	f043 0304 	orr.w	r3, r3, #4
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006090:	7dfb      	ldrb	r3, [r7, #23]
}
 8006092:	4618      	mov	r0, r3
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800609c:	b004      	add	sp, #16
 800609e:	4770      	bx	lr
 80060a0:	803c3800 	.word	0x803c3800

080060a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060a4:	b480      	push	{r7}
 80060a6:	b085      	sub	sp, #20
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3301      	adds	r3, #1
 80060b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060be:	d901      	bls.n	80060c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060c0:	2303      	movs	r3, #3
 80060c2:	e01b      	b.n	80060fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	daf2      	bge.n	80060b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	019b      	lsls	r3, r3, #6
 80060d4:	f043 0220 	orr.w	r2, r3, #32
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3301      	adds	r3, #1
 80060e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060e8:	d901      	bls.n	80060ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e006      	b.n	80060fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f003 0320 	and.w	r3, r3, #32
 80060f6:	2b20      	cmp	r3, #32
 80060f8:	d0f0      	beq.n	80060dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3714      	adds	r7, #20
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3301      	adds	r3, #1
 8006118:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006120:	d901      	bls.n	8006126 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e018      	b.n	8006158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	2b00      	cmp	r3, #0
 800612c:	daf2      	bge.n	8006114 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2210      	movs	r2, #16
 8006136:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3301      	adds	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006144:	d901      	bls.n	800614a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e006      	b.n	8006158 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	f003 0310 	and.w	r3, r3, #16
 8006152:	2b10      	cmp	r3, #16
 8006154:	d0f0      	beq.n	8006138 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	460b      	mov	r3, r1
 800616e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	78fb      	ldrb	r3, [r7, #3]
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006184:	4313      	orrs	r3, r2
 8006186:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006196:	b480      	push	{r7}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061a8:	689b      	ldr	r3, [r3, #8]
 80061aa:	f003 0306 	and.w	r3, r3, #6
 80061ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d102      	bne.n	80061bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]
 80061ba:	e00a      	b.n	80061d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d002      	beq.n	80061c8 <USB_GetDevSpeed+0x32>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b06      	cmp	r3, #6
 80061c6:	d102      	bne.n	80061ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061c8:	2302      	movs	r3, #2
 80061ca:	75fb      	strb	r3, [r7, #23]
 80061cc:	e001      	b.n	80061d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061ce:	230f      	movs	r3, #15
 80061d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d13a      	bne.n	8006272 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f003 030f 	and.w	r3, r3, #15
 800620c:	2101      	movs	r1, #1
 800620e:	fa01 f303 	lsl.w	r3, r1, r3
 8006212:	b29b      	uxth	r3, r3
 8006214:	68f9      	ldr	r1, [r7, #12]
 8006216:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800621a:	4313      	orrs	r3, r2
 800621c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d155      	bne.n	80062e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	791b      	ldrb	r3, [r3, #4]
 800624e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006250:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	059b      	lsls	r3, r3, #22
 8006256:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006258:	4313      	orrs	r3, r2
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	0151      	lsls	r1, r2, #5
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	440a      	add	r2, r1
 8006262:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800626a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e036      	b.n	80062e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006278:	69da      	ldr	r2, [r3, #28]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f003 030f 	and.w	r3, r3, #15
 8006282:	2101      	movs	r1, #1
 8006284:	fa01 f303 	lsl.w	r3, r1, r3
 8006288:	041b      	lsls	r3, r3, #16
 800628a:	68f9      	ldr	r1, [r7, #12]
 800628c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006290:	4313      	orrs	r3, r2
 8006292:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	015a      	lsls	r2, r3, #5
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4413      	add	r3, r2
 800629c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11a      	bne.n	80062e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	791b      	ldrb	r3, [r3, #4]
 80062c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062c6:	430b      	orrs	r3, r1
 80062c8:	4313      	orrs	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80062d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr
	...

080062f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	785b      	ldrb	r3, [r3, #1]
 8006308:	2b01      	cmp	r3, #1
 800630a:	d161      	bne.n	80063d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	015a      	lsls	r2, r3, #5
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	4413      	add	r3, r2
 8006314:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800631e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006322:	d11f      	bne.n	8006364 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	0151      	lsls	r1, r2, #5
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	440a      	add	r2, r1
 800633a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800633e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006342:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800635e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006362:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800636a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	f003 030f 	and.w	r3, r3, #15
 8006374:	2101      	movs	r1, #1
 8006376:	fa01 f303 	lsl.w	r3, r1, r3
 800637a:	b29b      	uxth	r3, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	68f9      	ldr	r1, [r7, #12]
 8006380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006384:	4013      	ands	r3, r2
 8006386:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	f003 030f 	and.w	r3, r3, #15
 8006398:	2101      	movs	r1, #1
 800639a:	fa01 f303 	lsl.w	r3, r1, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	43db      	mvns	r3, r3
 80063a2:	68f9      	ldr	r1, [r7, #12]
 80063a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063a8:	4013      	ands	r3, r2
 80063aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	0159      	lsls	r1, r3, #5
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	440b      	add	r3, r1
 80063c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80063c6:	4619      	mov	r1, r3
 80063c8:	4b35      	ldr	r3, [pc, #212]	@ (80064a0 <USB_DeactivateEndpoint+0x1b0>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	600b      	str	r3, [r1, #0]
 80063ce:	e060      	b.n	8006492 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063e6:	d11f      	bne.n	8006428 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	015a      	lsls	r2, r3, #5
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4413      	add	r3, r2
 80063f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	0151      	lsls	r1, r2, #5
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	440a      	add	r2, r1
 80063fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006402:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006406:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006422:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006426:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800642e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	f003 030f 	and.w	r3, r3, #15
 8006438:	2101      	movs	r1, #1
 800643a:	fa01 f303 	lsl.w	r3, r1, r3
 800643e:	041b      	lsls	r3, r3, #16
 8006440:	43db      	mvns	r3, r3
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006448:	4013      	ands	r3, r2
 800644a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	2101      	movs	r1, #1
 800645e:	fa01 f303 	lsl.w	r3, r1, r3
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	43db      	mvns	r3, r3
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800646c:	4013      	ands	r3, r2
 800646e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	0159      	lsls	r1, r3, #5
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	440b      	add	r3, r1
 8006486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800648a:	4619      	mov	r1, r3
 800648c:	4b05      	ldr	r3, [pc, #20]	@ (80064a4 <USB_DeactivateEndpoint+0x1b4>)
 800648e:	4013      	ands	r3, r2
 8006490:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	ec337800 	.word	0xec337800
 80064a4:	eff37800 	.word	0xeff37800

080064a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	@ 0x28
 80064ac:	af02      	add	r7, sp, #8
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	4613      	mov	r3, r2
 80064b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	785b      	ldrb	r3, [r3, #1]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	f040 817f 	bne.w	80067c8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d132      	bne.n	8006538 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	015a      	lsls	r2, r3, #5
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	4413      	add	r3, r2
 80064da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	0151      	lsls	r1, r2, #5
 80064e4:	69fa      	ldr	r2, [r7, #28]
 80064e6:	440a      	add	r2, r1
 80064e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80064f0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80064f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006510:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006530:	0cdb      	lsrs	r3, r3, #19
 8006532:	04db      	lsls	r3, r3, #19
 8006534:	6113      	str	r3, [r2, #16]
 8006536:	e097      	b.n	8006668 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006552:	0cdb      	lsrs	r3, r3, #19
 8006554:	04db      	lsls	r3, r3, #19
 8006556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006572:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006576:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800657a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d11a      	bne.n	80065b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	691a      	ldr	r2, [r3, #16]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	429a      	cmp	r2, r3
 800658c:	d903      	bls.n	8006596 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	689a      	ldr	r2, [r3, #8]
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006596:	69bb      	ldr	r3, [r7, #24]
 8006598:	015a      	lsls	r2, r3, #5
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	4413      	add	r3, r2
 800659e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	0151      	lsls	r1, r2, #5
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	440a      	add	r2, r1
 80065ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065b4:	6113      	str	r3, [r2, #16]
 80065b6:	e044      	b.n	8006642 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4413      	add	r3, r2
 80065c2:	1e5a      	subs	r2, r3, #1
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065da:	691a      	ldr	r2, [r3, #16]
 80065dc:	8afb      	ldrh	r3, [r7, #22]
 80065de:	04d9      	lsls	r1, r3, #19
 80065e0:	4ba4      	ldr	r3, [pc, #656]	@ (8006874 <USB_EPStartXfer+0x3cc>)
 80065e2:	400b      	ands	r3, r1
 80065e4:	69b9      	ldr	r1, [r7, #24]
 80065e6:	0148      	lsls	r0, r1, #5
 80065e8:	69f9      	ldr	r1, [r7, #28]
 80065ea:	4401      	add	r1, r0
 80065ec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80065f0:	4313      	orrs	r3, r2
 80065f2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	791b      	ldrb	r3, [r3, #4]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d122      	bne.n	8006642 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	69ba      	ldr	r2, [r7, #24]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	69fa      	ldr	r2, [r7, #28]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006616:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800661a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	015a      	lsls	r2, r3, #5
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	4413      	add	r3, r2
 8006624:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006628:	691a      	ldr	r2, [r3, #16]
 800662a:	8afb      	ldrh	r3, [r7, #22]
 800662c:	075b      	lsls	r3, r3, #29
 800662e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006632:	69b9      	ldr	r1, [r7, #24]
 8006634:	0148      	lsls	r0, r1, #5
 8006636:	69f9      	ldr	r1, [r7, #28]
 8006638:	4401      	add	r1, r0
 800663a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800663e:	4313      	orrs	r3, r2
 8006640:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	4413      	add	r3, r2
 800664a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006658:	69b9      	ldr	r1, [r7, #24]
 800665a:	0148      	lsls	r0, r1, #5
 800665c:	69f9      	ldr	r1, [r7, #28]
 800665e:	4401      	add	r1, r0
 8006660:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006664:	4313      	orrs	r3, r2
 8006666:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d14b      	bne.n	8006706 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d009      	beq.n	800668a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006682:	461a      	mov	r2, r3
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	791b      	ldrb	r3, [r3, #4]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d128      	bne.n	80066e4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d110      	bne.n	80066c4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e00f      	b.n	80066e4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	69fb      	ldr	r3, [r7, #28]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	0151      	lsls	r1, r2, #5
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	440a      	add	r2, r1
 80066da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066e2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	0151      	lsls	r1, r2, #5
 80066f6:	69fa      	ldr	r2, [r7, #28]
 80066f8:	440a      	add	r2, r1
 80066fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006702:	6013      	str	r3, [r2, #0]
 8006704:	e166      	b.n	80069d4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	69fb      	ldr	r3, [r7, #28]
 800670c:	4413      	add	r3, r2
 800670e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	0151      	lsls	r1, r2, #5
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	440a      	add	r2, r1
 800671c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006720:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006724:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	791b      	ldrb	r3, [r3, #4]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d015      	beq.n	800675a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 814e 	beq.w	80069d4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800673e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	2101      	movs	r1, #1
 800674a:	fa01 f303 	lsl.w	r3, r1, r3
 800674e:	69f9      	ldr	r1, [r7, #28]
 8006750:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006754:	4313      	orrs	r3, r2
 8006756:	634b      	str	r3, [r1, #52]	@ 0x34
 8006758:	e13c      	b.n	80069d4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d110      	bne.n	800678c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006784:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006788:	6013      	str	r3, [r2, #0]
 800678a:	e00f      	b.n	80067ac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067aa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	68d9      	ldr	r1, [r3, #12]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	781a      	ldrb	r2, [r3, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	b298      	uxth	r0, r3
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	4603      	mov	r3, r0
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f9b9 	bl	8006b38 <USB_WritePacket>
 80067c6:	e105      	b.n	80069d4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	0151      	lsls	r1, r2, #5
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	440a      	add	r2, r1
 80067de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067e2:	0cdb      	lsrs	r3, r3, #19
 80067e4:	04db      	lsls	r3, r3, #19
 80067e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006802:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006806:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800680a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d132      	bne.n	8006878 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d003      	beq.n	8006822 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	689a      	ldr	r2, [r3, #8]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006840:	69b9      	ldr	r1, [r7, #24]
 8006842:	0148      	lsls	r0, r1, #5
 8006844:	69f9      	ldr	r1, [r7, #28]
 8006846:	4401      	add	r1, r0
 8006848:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800684c:	4313      	orrs	r3, r2
 800684e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800686a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800686e:	6113      	str	r3, [r2, #16]
 8006870:	e062      	b.n	8006938 <USB_EPStartXfer+0x490>
 8006872:	bf00      	nop
 8006874:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d123      	bne.n	80068c8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	4413      	add	r3, r2
 8006888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800688c:	691a      	ldr	r2, [r3, #16]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006896:	69b9      	ldr	r1, [r7, #24]
 8006898:	0148      	lsls	r0, r1, #5
 800689a:	69f9      	ldr	r1, [r7, #28]
 800689c:	4401      	add	r1, r0
 800689e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068a2:	4313      	orrs	r3, r2
 80068a4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b2:	691b      	ldr	r3, [r3, #16]
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	69fa      	ldr	r2, [r7, #28]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068c4:	6113      	str	r3, [r2, #16]
 80068c6:	e037      	b.n	8006938 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	691a      	ldr	r2, [r3, #16]
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	4413      	add	r3, r2
 80068d2:	1e5a      	subs	r2, r3, #1
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	8afa      	ldrh	r2, [r7, #22]
 80068e4:	fb03 f202 	mul.w	r2, r3, r2
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068f8:	691a      	ldr	r2, [r3, #16]
 80068fa:	8afb      	ldrh	r3, [r7, #22]
 80068fc:	04d9      	lsls	r1, r3, #19
 80068fe:	4b38      	ldr	r3, [pc, #224]	@ (80069e0 <USB_EPStartXfer+0x538>)
 8006900:	400b      	ands	r3, r1
 8006902:	69b9      	ldr	r1, [r7, #24]
 8006904:	0148      	lsls	r0, r1, #5
 8006906:	69f9      	ldr	r1, [r7, #28]
 8006908:	4401      	add	r1, r0
 800690a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800690e:	4313      	orrs	r3, r2
 8006910:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800691e:	691a      	ldr	r2, [r3, #16]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006928:	69b9      	ldr	r1, [r7, #24]
 800692a:	0148      	lsls	r0, r1, #5
 800692c:	69f9      	ldr	r1, [r7, #28]
 800692e:	4401      	add	r1, r0
 8006930:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006934:	4313      	orrs	r3, r2
 8006936:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006938:	79fb      	ldrb	r3, [r7, #7]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d10d      	bne.n	800695a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d009      	beq.n	800695a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	68d9      	ldr	r1, [r3, #12]
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006956:	460a      	mov	r2, r1
 8006958:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	791b      	ldrb	r3, [r3, #4]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d128      	bne.n	80069b4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800696e:	2b00      	cmp	r3, #0
 8006970:	d110      	bne.n	8006994 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	015a      	lsls	r2, r3, #5
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	4413      	add	r3, r2
 800697a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	0151      	lsls	r1, r2, #5
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	440a      	add	r2, r1
 8006988:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800698c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006990:	6013      	str	r3, [r2, #0]
 8006992:	e00f      	b.n	80069b4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	69ba      	ldr	r2, [r7, #24]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069b4:	69bb      	ldr	r3, [r7, #24]
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69ba      	ldr	r2, [r7, #24]
 80069c4:	0151      	lsls	r1, r2, #5
 80069c6:	69fa      	ldr	r2, [r7, #28]
 80069c8:	440a      	add	r2, r1
 80069ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069ce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80069d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3720      	adds	r7, #32
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	1ff80000 	.word	0x1ff80000

080069e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80069ee:	2300      	movs	r3, #0
 80069f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	785b      	ldrb	r3, [r3, #1]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d14a      	bne.n	8006a98 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a1a:	f040 8086 	bne.w	8006b2a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	015a      	lsls	r2, r3, #5
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	7812      	ldrb	r2, [r2, #0]
 8006a32:	0151      	lsls	r1, r2, #5
 8006a34:	693a      	ldr	r2, [r7, #16]
 8006a36:	440a      	add	r2, r1
 8006a38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a3c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a40:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	7812      	ldrb	r2, [r2, #0]
 8006a56:	0151      	lsls	r1, r2, #5
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	440a      	add	r2, r1
 8006a5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a64:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d902      	bls.n	8006a7c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	75fb      	strb	r3, [r7, #23]
          break;
 8006a7a:	e056      	b.n	8006b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a94:	d0e7      	beq.n	8006a66 <USB_EPStopXfer+0x82>
 8006a96:	e048      	b.n	8006b2a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ab0:	d13b      	bne.n	8006b2a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	015a      	lsls	r2, r3, #5
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	4413      	add	r3, r2
 8006abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	7812      	ldrb	r2, [r2, #0]
 8006ac6:	0151      	lsls	r1, r2, #5
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	440a      	add	r2, r1
 8006acc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ad0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ad4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	015a      	lsls	r2, r3, #5
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	4413      	add	r3, r2
 8006ae0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	7812      	ldrb	r2, [r2, #0]
 8006aea:	0151      	lsls	r1, r2, #5
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	440a      	add	r2, r1
 8006af0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006af4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006af8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d902      	bls.n	8006b10 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b0e:	e00c      	b.n	8006b2a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b28:	d0e7      	beq.n	8006afa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b089      	sub	sp, #36	@ 0x24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4611      	mov	r1, r2
 8006b44:	461a      	mov	r2, r3
 8006b46:	460b      	mov	r3, r1
 8006b48:	71fb      	strb	r3, [r7, #7]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b56:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d123      	bne.n	8006ba6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b5e:	88bb      	ldrh	r3, [r7, #4]
 8006b60:	3303      	adds	r3, #3
 8006b62:	089b      	lsrs	r3, r3, #2
 8006b64:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006b66:	2300      	movs	r3, #0
 8006b68:	61bb      	str	r3, [r7, #24]
 8006b6a:	e018      	b.n	8006b9e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	031a      	lsls	r2, r3, #12
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b78:	461a      	mov	r2, r3
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3301      	adds	r3, #1
 8006b84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	3301      	adds	r3, #1
 8006b96:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	69ba      	ldr	r2, [r7, #24]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d3e2      	bcc.n	8006b6c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006ba6:	2300      	movs	r3, #0
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3724      	adds	r7, #36	@ 0x24
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b08b      	sub	sp, #44	@ 0x2c
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	089b      	lsrs	r3, r3, #2
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006bd2:	88fb      	ldrh	r3, [r7, #6]
 8006bd4:	f003 0303 	and.w	r3, r3, #3
 8006bd8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006bda:	2300      	movs	r3, #0
 8006bdc:	623b      	str	r3, [r7, #32]
 8006bde:	e014      	b.n	8006c0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bea:	601a      	str	r2, [r3, #0]
    pDest++;
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	3301      	adds	r3, #1
 8006bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c00:	3301      	adds	r3, #1
 8006c02:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	3301      	adds	r3, #1
 8006c08:	623b      	str	r3, [r7, #32]
 8006c0a:	6a3a      	ldr	r2, [r7, #32]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3e6      	bcc.n	8006be0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c12:	8bfb      	ldrh	r3, [r7, #30]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d01e      	beq.n	8006c56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006c22:	461a      	mov	r2, r3
 8006c24:	f107 0310 	add.w	r3, r7, #16
 8006c28:	6812      	ldr	r2, [r2, #0]
 8006c2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	fa22 f303 	lsr.w	r3, r2, r3
 8006c38:	b2da      	uxtb	r2, r3
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	701a      	strb	r2, [r3, #0]
      i++;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	3301      	adds	r3, #1
 8006c42:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	3301      	adds	r3, #1
 8006c48:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006c4a:	8bfb      	ldrh	r3, [r7, #30]
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c50:	8bfb      	ldrh	r3, [r7, #30]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1ea      	bne.n	8006c2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	372c      	adds	r7, #44	@ 0x2c
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d12c      	bne.n	8006cda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	db12      	blt.n	8006cb8 <USB_EPSetStall+0x54>
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00f      	beq.n	8006cb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	0151      	lsls	r1, r2, #5
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	440a      	add	r2, r1
 8006cae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006cb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68ba      	ldr	r2, [r7, #8]
 8006cc8:	0151      	lsls	r1, r2, #5
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	440a      	add	r2, r1
 8006cce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cd2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	e02b      	b.n	8006d32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	015a      	lsls	r2, r3, #5
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	db12      	blt.n	8006d12 <USB_EPSetStall+0xae>
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00f      	beq.n	8006d12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	015a      	lsls	r2, r3, #5
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	0151      	lsls	r1, r2, #5
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	440a      	add	r2, r1
 8006d08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006d30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	785b      	ldrb	r3, [r3, #1]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d128      	bne.n	8006dae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	791b      	ldrb	r3, [r3, #4]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d003      	beq.n	8006d8c <USB_EPClearStall+0x4c>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d138      	bne.n	8006dfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	68fa      	ldr	r2, [r7, #12]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	e027      	b.n	8006dfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	015a      	lsls	r2, r3, #5
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4413      	add	r3, r2
 8006db6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	0151      	lsls	r1, r2, #5
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	440a      	add	r2, r1
 8006dc4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006dcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	791b      	ldrb	r3, [r3, #4]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d003      	beq.n	8006dde <USB_EPClearStall+0x9e>
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	791b      	ldrb	r3, [r3, #4]
 8006dda:	2b02      	cmp	r3, #2
 8006ddc:	d10f      	bne.n	8006dfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68ba      	ldr	r2, [r7, #8]
 8006dee:	0151      	lsls	r1, r2, #5
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	440a      	add	r2, r1
 8006df4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006dfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e2a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006e2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	78fb      	ldrb	r3, [r7, #3]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006e40:	68f9      	ldr	r1, [r7, #12]
 8006e42:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006e46:	4313      	orrs	r3, r2
 8006e48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e72:	f023 0303 	bic.w	r3, r3, #3
 8006e76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e86:	f023 0302 	bic.w	r3, r3, #2
 8006e8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e8c:	2300      	movs	r3, #0
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006eb4:	f023 0303 	bic.w	r3, r3, #3
 8006eb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ec8:	f043 0302 	orr.w	r3, r3, #2
 8006ecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b085      	sub	sp, #20
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	695b      	ldr	r3, [r3, #20]
 8006ee8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f14:	699b      	ldr	r3, [r3, #24]
 8006f16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	0c1b      	lsrs	r3, r3, #16
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	4013      	ands	r3, r2
 8006f58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	b29b      	uxth	r3, r3
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f7a:	78fb      	ldrb	r3, [r7, #3]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f90:	695b      	ldr	r3, [r3, #20]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	4013      	ands	r3, r2
 8006f96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f98:	68bb      	ldr	r3, [r7, #8]
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3714      	adds	r7, #20
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b087      	sub	sp, #28
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	6078      	str	r0, [r7, #4]
 8006fae:	460b      	mov	r3, r1
 8006fb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd6:	01db      	lsls	r3, r3, #7
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	693a      	ldr	r2, [r7, #16]
 8006ff0:	4013      	ands	r3, r2
 8006ff2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	371c      	adds	r7, #28
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	695b      	ldr	r3, [r3, #20]
 800700e:	f003 0301 	and.w	r3, r3, #1
}
 8007012:	4618      	mov	r0, r3
 8007014:	370c      	adds	r7, #12
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr

0800701e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800701e:	b480      	push	{r7}
 8007020:	b085      	sub	sp, #20
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68fa      	ldr	r2, [r7, #12]
 8007034:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007038:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800703c:	f023 0307 	bic.w	r3, r3, #7
 8007040:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007050:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007054:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007064:	b480      	push	{r7}
 8007066:	b087      	sub	sp, #28
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	460b      	mov	r3, r1
 800706e:	607a      	str	r2, [r7, #4]
 8007070:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	333c      	adds	r3, #60	@ 0x3c
 800707a:	3304      	adds	r3, #4
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	4a26      	ldr	r2, [pc, #152]	@ (800711c <USB_EP0_OutStart+0xb8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d90a      	bls.n	800709e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007098:	d101      	bne.n	800709e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e037      	b.n	800710e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	2300      	movs	r3, #0
 80070a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b0:	691b      	ldr	r3, [r3, #16]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	697a      	ldr	r2, [r7, #20]
 80070c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070cc:	f043 0318 	orr.w	r3, r3, #24
 80070d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80070e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80070e6:	7afb      	ldrb	r3, [r7, #11]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d10f      	bne.n	800710c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	697a      	ldr	r2, [r7, #20]
 8007102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007106:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800710a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	371c      	adds	r7, #28
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	4f54300a 	.word	0x4f54300a

08007120 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	3301      	adds	r3, #1
 8007130:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007138:	d901      	bls.n	800713e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e022      	b.n	8007184 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	2b00      	cmp	r3, #0
 8007144:	daf2      	bge.n	800712c <USB_CoreReset+0xc>

  count = 10U;
 8007146:	230a      	movs	r3, #10
 8007148:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800714a:	e002      	b.n	8007152 <USB_CoreReset+0x32>
  {
    count--;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1f9      	bne.n	800714c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	f043 0201 	orr.w	r2, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	3301      	adds	r3, #1
 8007168:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007170:	d901      	bls.n	8007176 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e006      	b.n	8007184 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b01      	cmp	r3, #1
 8007180:	d0f0      	beq.n	8007164 <USB_CoreReset+0x44>

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800719c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80071a0:	f002 fd30 	bl	8009c04 <USBD_static_malloc>
 80071a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d109      	bne.n	80071c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	32b0      	adds	r2, #176	@ 0xb0
 80071b6:	2100      	movs	r1, #0
 80071b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071bc:	2302      	movs	r3, #2
 80071be:	e0d4      	b.n	800736a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80071c4:	2100      	movs	r1, #0
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f003 fb0b 	bl	800a7e2 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	32b0      	adds	r2, #176	@ 0xb0
 80071d6:	68f9      	ldr	r1, [r7, #12]
 80071d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	32b0      	adds	r2, #176	@ 0xb0
 80071e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	7c1b      	ldrb	r3, [r3, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d138      	bne.n	800726a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80071f8:	4b5e      	ldr	r3, [pc, #376]	@ (8007374 <USBD_CDC_Init+0x1e4>)
 80071fa:	7819      	ldrb	r1, [r3, #0]
 80071fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007200:	2202      	movs	r2, #2
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f002 fbdb 	bl	80099be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007208:	4b5a      	ldr	r3, [pc, #360]	@ (8007374 <USBD_CDC_Init+0x1e4>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	f003 020f 	and.w	r2, r3, #15
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	440b      	add	r3, r1
 800721c:	3323      	adds	r3, #35	@ 0x23
 800721e:	2201      	movs	r2, #1
 8007220:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007222:	4b55      	ldr	r3, [pc, #340]	@ (8007378 <USBD_CDC_Init+0x1e8>)
 8007224:	7819      	ldrb	r1, [r3, #0]
 8007226:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800722a:	2202      	movs	r2, #2
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f002 fbc6 	bl	80099be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007232:	4b51      	ldr	r3, [pc, #324]	@ (8007378 <USBD_CDC_Init+0x1e8>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	f003 020f 	and.w	r2, r3, #15
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800724a:	2201      	movs	r2, #1
 800724c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800724e:	4b4b      	ldr	r3, [pc, #300]	@ (800737c <USBD_CDC_Init+0x1ec>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	f003 020f 	and.w	r2, r3, #15
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	4613      	mov	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	440b      	add	r3, r1
 8007262:	331c      	adds	r3, #28
 8007264:	2210      	movs	r2, #16
 8007266:	601a      	str	r2, [r3, #0]
 8007268:	e035      	b.n	80072d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800726a:	4b42      	ldr	r3, [pc, #264]	@ (8007374 <USBD_CDC_Init+0x1e4>)
 800726c:	7819      	ldrb	r1, [r3, #0]
 800726e:	2340      	movs	r3, #64	@ 0x40
 8007270:	2202      	movs	r2, #2
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f002 fba3 	bl	80099be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007278:	4b3e      	ldr	r3, [pc, #248]	@ (8007374 <USBD_CDC_Init+0x1e4>)
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	6879      	ldr	r1, [r7, #4]
 8007282:	4613      	mov	r3, r2
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	440b      	add	r3, r1
 800728c:	3323      	adds	r3, #35	@ 0x23
 800728e:	2201      	movs	r2, #1
 8007290:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007292:	4b39      	ldr	r3, [pc, #228]	@ (8007378 <USBD_CDC_Init+0x1e8>)
 8007294:	7819      	ldrb	r1, [r3, #0]
 8007296:	2340      	movs	r3, #64	@ 0x40
 8007298:	2202      	movs	r2, #2
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f002 fb8f 	bl	80099be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072a0:	4b35      	ldr	r3, [pc, #212]	@ (8007378 <USBD_CDC_Init+0x1e8>)
 80072a2:	781b      	ldrb	r3, [r3, #0]
 80072a4:	f003 020f 	and.w	r2, r3, #15
 80072a8:	6879      	ldr	r1, [r7, #4]
 80072aa:	4613      	mov	r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	4413      	add	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	440b      	add	r3, r1
 80072b4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80072b8:	2201      	movs	r2, #1
 80072ba:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072bc:	4b2f      	ldr	r3, [pc, #188]	@ (800737c <USBD_CDC_Init+0x1ec>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	f003 020f 	and.w	r2, r3, #15
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	331c      	adds	r3, #28
 80072d2:	2210      	movs	r2, #16
 80072d4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80072d6:	4b29      	ldr	r3, [pc, #164]	@ (800737c <USBD_CDC_Init+0x1ec>)
 80072d8:	7819      	ldrb	r1, [r3, #0]
 80072da:	2308      	movs	r3, #8
 80072dc:	2203      	movs	r2, #3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f002 fb6d 	bl	80099be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80072e4:	4b25      	ldr	r3, [pc, #148]	@ (800737c <USBD_CDC_Init+0x1ec>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	f003 020f 	and.w	r2, r3, #15
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	4613      	mov	r3, r2
 80072f0:	009b      	lsls	r3, r3, #2
 80072f2:	4413      	add	r3, r2
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	440b      	add	r3, r1
 80072f8:	3323      	adds	r3, #35	@ 0x23
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	33b0      	adds	r3, #176	@ 0xb0
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007334:	2302      	movs	r3, #2
 8007336:	e018      	b.n	800736a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	7c1b      	ldrb	r3, [r3, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007340:	4b0d      	ldr	r3, [pc, #52]	@ (8007378 <USBD_CDC_Init+0x1e8>)
 8007342:	7819      	ldrb	r1, [r3, #0]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800734a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f002 fc24 	bl	8009b9c <USBD_LL_PrepareReceive>
 8007354:	e008      	b.n	8007368 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007356:	4b08      	ldr	r3, [pc, #32]	@ (8007378 <USBD_CDC_Init+0x1e8>)
 8007358:	7819      	ldrb	r1, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007360:	2340      	movs	r3, #64	@ 0x40
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f002 fc1a 	bl	8009b9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20000093 	.word	0x20000093
 8007378:	20000094 	.word	0x20000094
 800737c:	20000095 	.word	0x20000095

08007380 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800738c:	4b3a      	ldr	r3, [pc, #232]	@ (8007478 <USBD_CDC_DeInit+0xf8>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f002 fb39 	bl	8009a0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007398:	4b37      	ldr	r3, [pc, #220]	@ (8007478 <USBD_CDC_DeInit+0xf8>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	3323      	adds	r3, #35	@ 0x23
 80073ae:	2200      	movs	r2, #0
 80073b0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073b2:	4b32      	ldr	r3, [pc, #200]	@ (800747c <USBD_CDC_DeInit+0xfc>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 fb26 	bl	8009a0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073be:	4b2f      	ldr	r3, [pc, #188]	@ (800747c <USBD_CDC_DeInit+0xfc>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	f003 020f 	and.w	r2, r3, #15
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80073d6:	2200      	movs	r2, #0
 80073d8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80073da:	4b29      	ldr	r3, [pc, #164]	@ (8007480 <USBD_CDC_DeInit+0x100>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 fb12 	bl	8009a0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80073e6:	4b26      	ldr	r3, [pc, #152]	@ (8007480 <USBD_CDC_DeInit+0x100>)
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	f003 020f 	and.w	r2, r3, #15
 80073ee:	6879      	ldr	r1, [r7, #4]
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	440b      	add	r3, r1
 80073fa:	3323      	adds	r3, #35	@ 0x23
 80073fc:	2200      	movs	r2, #0
 80073fe:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007400:	4b1f      	ldr	r3, [pc, #124]	@ (8007480 <USBD_CDC_DeInit+0x100>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 020f 	and.w	r2, r3, #15
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	009b      	lsls	r3, r3, #2
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	331c      	adds	r3, #28
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	32b0      	adds	r2, #176	@ 0xb0
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d01f      	beq.n	800746c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	33b0      	adds	r3, #176	@ 0xb0
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32b0      	adds	r2, #176	@ 0xb0
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	4618      	mov	r0, r3
 8007450:	f002 fbe6 	bl	8009c20 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32b0      	adds	r2, #176	@ 0xb0
 800745e:	2100      	movs	r1, #0
 8007460:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000093 	.word	0x20000093
 800747c:	20000094 	.word	0x20000094
 8007480:	20000095 	.word	0x20000095

08007484 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b086      	sub	sp, #24
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	32b0      	adds	r2, #176	@ 0xb0
 8007498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800749c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074a2:	2300      	movs	r3, #0
 80074a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074b0:	2303      	movs	r3, #3
 80074b2:	e0bf      	b.n	8007634 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d050      	beq.n	8007562 <USBD_CDC_Setup+0xde>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	f040 80af 	bne.w	8007624 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d03a      	beq.n	8007544 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	b25b      	sxtb	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	da1b      	bge.n	8007510 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	33b0      	adds	r3, #176	@ 0xb0
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80074ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	88d2      	ldrh	r2, [r2, #6]
 80074f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	88db      	ldrh	r3, [r3, #6]
 80074fa:	2b07      	cmp	r3, #7
 80074fc:	bf28      	it	cs
 80074fe:	2307      	movcs	r3, #7
 8007500:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	89fa      	ldrh	r2, [r7, #14]
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f001 fd69 	bl	8008fe0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800750e:	e090      	b.n	8007632 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	785a      	ldrb	r2, [r3, #1]
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	88db      	ldrh	r3, [r3, #6]
 800751e:	2b3f      	cmp	r3, #63	@ 0x3f
 8007520:	d803      	bhi.n	800752a <USBD_CDC_Setup+0xa6>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	88db      	ldrh	r3, [r3, #6]
 8007526:	b2da      	uxtb	r2, r3
 8007528:	e000      	b.n	800752c <USBD_CDC_Setup+0xa8>
 800752a:	2240      	movs	r2, #64	@ 0x40
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007532:	6939      	ldr	r1, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800753a:	461a      	mov	r2, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fd7e 	bl	800903e <USBD_CtlPrepareRx>
      break;
 8007542:	e076      	b.n	8007632 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	33b0      	adds	r3, #176	@ 0xb0
 800754e:	009b      	lsls	r3, r3, #2
 8007550:	4413      	add	r3, r2
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	7850      	ldrb	r0, [r2, #1]
 800755a:	2200      	movs	r2, #0
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	4798      	blx	r3
      break;
 8007560:	e067      	b.n	8007632 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	785b      	ldrb	r3, [r3, #1]
 8007566:	2b0b      	cmp	r3, #11
 8007568:	d851      	bhi.n	800760e <USBD_CDC_Setup+0x18a>
 800756a:	a201      	add	r2, pc, #4	@ (adr r2, 8007570 <USBD_CDC_Setup+0xec>)
 800756c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007570:	080075a1 	.word	0x080075a1
 8007574:	0800761d 	.word	0x0800761d
 8007578:	0800760f 	.word	0x0800760f
 800757c:	0800760f 	.word	0x0800760f
 8007580:	0800760f 	.word	0x0800760f
 8007584:	0800760f 	.word	0x0800760f
 8007588:	0800760f 	.word	0x0800760f
 800758c:	0800760f 	.word	0x0800760f
 8007590:	0800760f 	.word	0x0800760f
 8007594:	0800760f 	.word	0x0800760f
 8007598:	080075cb 	.word	0x080075cb
 800759c:	080075f5 	.word	0x080075f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b03      	cmp	r3, #3
 80075aa:	d107      	bne.n	80075bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075ac:	f107 030a 	add.w	r3, r7, #10
 80075b0:	2202      	movs	r2, #2
 80075b2:	4619      	mov	r1, r3
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fd13 	bl	8008fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075ba:	e032      	b.n	8007622 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fc91 	bl	8008ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	75fb      	strb	r3, [r7, #23]
          break;
 80075c8:	e02b      	b.n	8007622 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	2b03      	cmp	r3, #3
 80075d4:	d107      	bne.n	80075e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80075d6:	f107 030d 	add.w	r3, r7, #13
 80075da:	2201      	movs	r2, #1
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fcfe 	bl	8008fe0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075e4:	e01d      	b.n	8007622 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 fc7c 	bl	8008ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 80075ee:	2303      	movs	r3, #3
 80075f0:	75fb      	strb	r3, [r7, #23]
          break;
 80075f2:	e016      	b.n	8007622 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b03      	cmp	r3, #3
 80075fe:	d00f      	beq.n	8007620 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007600:	6839      	ldr	r1, [r7, #0]
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f001 fc6f 	bl	8008ee6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007608:	2303      	movs	r3, #3
 800760a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800760c:	e008      	b.n	8007620 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800760e:	6839      	ldr	r1, [r7, #0]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f001 fc68 	bl	8008ee6 <USBD_CtlError>
          ret = USBD_FAIL;
 8007616:	2303      	movs	r3, #3
 8007618:	75fb      	strb	r3, [r7, #23]
          break;
 800761a:	e002      	b.n	8007622 <USBD_CDC_Setup+0x19e>
          break;
 800761c:	bf00      	nop
 800761e:	e008      	b.n	8007632 <USBD_CDC_Setup+0x1ae>
          break;
 8007620:	bf00      	nop
      }
      break;
 8007622:	e006      	b.n	8007632 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007624:	6839      	ldr	r1, [r7, #0]
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fc5d 	bl	8008ee6 <USBD_CtlError>
      ret = USBD_FAIL;
 800762c:	2303      	movs	r3, #3
 800762e:	75fb      	strb	r3, [r7, #23]
      break;
 8007630:	bf00      	nop
  }

  return (uint8_t)ret;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800764e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	32b0      	adds	r2, #176	@ 0xb0
 800765a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007662:	2303      	movs	r3, #3
 8007664:	e065      	b.n	8007732 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	32b0      	adds	r2, #176	@ 0xb0
 8007670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007674:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007676:	78fb      	ldrb	r3, [r7, #3]
 8007678:	f003 020f 	and.w	r2, r3, #15
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	3314      	adds	r3, #20
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d02f      	beq.n	80076f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	f003 020f 	and.w	r2, r3, #15
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	4613      	mov	r3, r2
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	440b      	add	r3, r1
 80076a2:	3314      	adds	r3, #20
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	f003 010f 	and.w	r1, r3, #15
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	460b      	mov	r3, r1
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	440b      	add	r3, r1
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4403      	add	r3, r0
 80076b8:	331c      	adds	r3, #28
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	fbb2 f1f3 	udiv	r1, r2, r3
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d112      	bne.n	80076f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80076ca:	78fb      	ldrb	r3, [r7, #3]
 80076cc:	f003 020f 	and.w	r2, r3, #15
 80076d0:	6879      	ldr	r1, [r7, #4]
 80076d2:	4613      	mov	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	4413      	add	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	440b      	add	r3, r1
 80076dc:	3314      	adds	r3, #20
 80076de:	2200      	movs	r2, #0
 80076e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80076e2:	78f9      	ldrb	r1, [r7, #3]
 80076e4:	2300      	movs	r3, #0
 80076e6:	2200      	movs	r2, #0
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f002 fa36 	bl	8009b5a <USBD_LL_Transmit>
 80076ee:	e01f      	b.n	8007730 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	33b0      	adds	r3, #176	@ 0xb0
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4413      	add	r3, r2
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d010      	beq.n	8007730 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	33b0      	adds	r3, #176	@ 0xb0
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007726:	68ba      	ldr	r2, [r7, #8]
 8007728:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800772c:	78fa      	ldrb	r2, [r7, #3]
 800772e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3710      	adds	r7, #16
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}

0800773a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800773a:	b580      	push	{r7, lr}
 800773c:	b084      	sub	sp, #16
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	460b      	mov	r3, r1
 8007744:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	32b0      	adds	r2, #176	@ 0xb0
 8007750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007754:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	32b0      	adds	r2, #176	@ 0xb0
 8007760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d101      	bne.n	800776c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	e01a      	b.n	80077a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f002 fa34 	bl	8009bde <USBD_LL_GetRxDataSize>
 8007776:	4602      	mov	r2, r0
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	33b0      	adds	r3, #176	@ 0xb0
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007796:	68fa      	ldr	r2, [r7, #12]
 8007798:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800779c:	4611      	mov	r1, r2
 800779e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	32b0      	adds	r2, #176	@ 0xb0
 80077bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80077c8:	2303      	movs	r3, #3
 80077ca:	e024      	b.n	8007816 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077d2:	687a      	ldr	r2, [r7, #4]
 80077d4:	33b0      	adds	r3, #176	@ 0xb0
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	685b      	ldr	r3, [r3, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d019      	beq.n	8007814 <USBD_CDC_EP0_RxReady+0x6a>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80077e6:	2bff      	cmp	r3, #255	@ 0xff
 80077e8:	d014      	beq.n	8007814 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	33b0      	adds	r3, #176	@ 0xb0
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	68fa      	ldr	r2, [r7, #12]
 80077fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007802:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800780a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	22ff      	movs	r2, #255	@ 0xff
 8007810:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3710      	adds	r7, #16
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007828:	2182      	movs	r1, #130	@ 0x82
 800782a:	4818      	ldr	r0, [pc, #96]	@ (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800782c:	f000 fd22 	bl	8008274 <USBD_GetEpDesc>
 8007830:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007832:	2101      	movs	r1, #1
 8007834:	4815      	ldr	r0, [pc, #84]	@ (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007836:	f000 fd1d 	bl	8008274 <USBD_GetEpDesc>
 800783a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800783c:	2181      	movs	r1, #129	@ 0x81
 800783e:	4813      	ldr	r0, [pc, #76]	@ (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007840:	f000 fd18 	bl	8008274 <USBD_GetEpDesc>
 8007844:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	2210      	movs	r2, #16
 8007850:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2200      	movs	r2, #0
 800785c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007860:	711a      	strb	r2, [r3, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d006      	beq.n	800787a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007874:	711a      	strb	r2, [r3, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2243      	movs	r2, #67	@ 0x43
 800787e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007880:	4b02      	ldr	r3, [pc, #8]	@ (800788c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007882:	4618      	mov	r0, r3
 8007884:	3718      	adds	r7, #24
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	20000050 	.word	0x20000050

08007890 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b086      	sub	sp, #24
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007898:	2182      	movs	r1, #130	@ 0x82
 800789a:	4818      	ldr	r0, [pc, #96]	@ (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800789c:	f000 fcea 	bl	8008274 <USBD_GetEpDesc>
 80078a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078a2:	2101      	movs	r1, #1
 80078a4:	4815      	ldr	r0, [pc, #84]	@ (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078a6:	f000 fce5 	bl	8008274 <USBD_GetEpDesc>
 80078aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078ac:	2181      	movs	r1, #129	@ 0x81
 80078ae:	4813      	ldr	r0, [pc, #76]	@ (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078b0:	f000 fce0 	bl	8008274 <USBD_GetEpDesc>
 80078b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	2210      	movs	r2, #16
 80078c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d006      	beq.n	80078d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2200      	movs	r2, #0
 80078cc:	711a      	strb	r2, [r3, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f042 0202 	orr.w	r2, r2, #2
 80078d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d006      	beq.n	80078ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	711a      	strb	r2, [r3, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f042 0202 	orr.w	r2, r2, #2
 80078e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2243      	movs	r2, #67	@ 0x43
 80078ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078f0:	4b02      	ldr	r3, [pc, #8]	@ (80078fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3718      	adds	r7, #24
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	20000050 	.word	0x20000050

08007900 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007908:	2182      	movs	r1, #130	@ 0x82
 800790a:	4818      	ldr	r0, [pc, #96]	@ (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800790c:	f000 fcb2 	bl	8008274 <USBD_GetEpDesc>
 8007910:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007912:	2101      	movs	r1, #1
 8007914:	4815      	ldr	r0, [pc, #84]	@ (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007916:	f000 fcad 	bl	8008274 <USBD_GetEpDesc>
 800791a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800791c:	2181      	movs	r1, #129	@ 0x81
 800791e:	4813      	ldr	r0, [pc, #76]	@ (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007920:	f000 fca8 	bl	8008274 <USBD_GetEpDesc>
 8007924:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2210      	movs	r2, #16
 8007930:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d006      	beq.n	8007946 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	2200      	movs	r2, #0
 800793c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007940:	711a      	strb	r2, [r3, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d006      	beq.n	800795a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007954:	711a      	strb	r2, [r3, #4]
 8007956:	2200      	movs	r2, #0
 8007958:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2243      	movs	r2, #67	@ 0x43
 800795e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007960:	4b02      	ldr	r3, [pc, #8]	@ (800796c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	20000050 	.word	0x20000050

08007970 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	220a      	movs	r2, #10
 800797c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800797e:	4b03      	ldr	r3, [pc, #12]	@ (800798c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007980:	4618      	mov	r0, r3
 8007982:	370c      	adds	r7, #12
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	2000000c 	.word	0x2000000c

08007990 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d101      	bne.n	80079a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079a0:	2303      	movs	r3, #3
 80079a2:	e009      	b.n	80079b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	33b0      	adds	r3, #176	@ 0xb0
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	32b0      	adds	r2, #176	@ 0xb0
 80079da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e008      	b.n	80079fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	68ba      	ldr	r2, [r7, #8]
 80079ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	371c      	adds	r7, #28
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
 8007a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	32b0      	adds	r2, #176	@ 0xb0
 8007a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e004      	b.n	8007a36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
	...

08007a44 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	32b0      	adds	r2, #176	@ 0xb0
 8007a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a5a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	32b0      	adds	r2, #176	@ 0xb0
 8007a66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d101      	bne.n	8007a72 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e018      	b.n	8007aa4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	7c1b      	ldrb	r3, [r3, #16]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8007aac <USBD_CDC_ReceivePacket+0x68>)
 8007a7c:	7819      	ldrb	r1, [r3, #0]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a84:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f002 f887 	bl	8009b9c <USBD_LL_PrepareReceive>
 8007a8e:	e008      	b.n	8007aa2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a90:	4b06      	ldr	r3, [pc, #24]	@ (8007aac <USBD_CDC_ReceivePacket+0x68>)
 8007a92:	7819      	ldrb	r1, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a9a:	2340      	movs	r3, #64	@ 0x40
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f002 f87d 	bl	8009b9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20000094 	.word	0x20000094

08007ab0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e01f      	b.n	8007b08 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2201      	movs	r2, #1
 8007af2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	79fa      	ldrb	r2, [r7, #7]
 8007afa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f001 fef7 	bl	80098f0 <USBD_LL_Init>
 8007b02:	4603      	mov	r3, r0
 8007b04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}

08007b10 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b084      	sub	sp, #16
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e025      	b.n	8007b74 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	32ae      	adds	r2, #174	@ 0xae
 8007b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	32ae      	adds	r2, #174	@ 0xae
 8007b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b54:	f107 020e 	add.w	r2, r7, #14
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}

08007b7c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 feff 	bl	8009988 <USBD_LL_Start>
 8007b8a:	4603      	mov	r3, r0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b9c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba8:	4770      	bx	lr

08007baa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007baa:	b580      	push	{r7, lr}
 8007bac:	b084      	sub	sp, #16
 8007bae:	af00      	add	r7, sp, #0
 8007bb0:	6078      	str	r0, [r7, #4]
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d009      	beq.n	8007bd8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	78fa      	ldrb	r2, [r7, #3]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	4798      	blx	r3
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d001      	beq.n	8007c0c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f001 f922 	bl	8008e72 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d01a      	beq.n	8007c88 <USBD_LL_SetupStage+0x72>
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d822      	bhi.n	8007c9c <USBD_LL_SetupStage+0x86>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <USBD_LL_SetupStage+0x4a>
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d00a      	beq.n	8007c74 <USBD_LL_SetupStage+0x5e>
 8007c5e:	e01d      	b.n	8007c9c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fb77 	bl	800835c <USBD_StdDevReq>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
      break;
 8007c72:	e020      	b.n	8007cb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f000 fbdf 	bl	8008440 <USBD_StdItfReq>
 8007c82:	4603      	mov	r3, r0
 8007c84:	73fb      	strb	r3, [r7, #15]
      break;
 8007c86:	e016      	b.n	8007cb6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c8e:	4619      	mov	r1, r3
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f000 fc41 	bl	8008518 <USBD_StdEPReq>
 8007c96:	4603      	mov	r3, r0
 8007c98:	73fb      	strb	r3, [r7, #15]
      break;
 8007c9a:	e00c      	b.n	8007cb6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007ca2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f001 fecc 	bl	8009a48 <USBD_LL_StallEP>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb4:	bf00      	nop
  }

  return ret;
 8007cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d177      	bne.n	8007dc8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007ce6:	2b03      	cmp	r3, #3
 8007ce8:	f040 80a1 	bne.w	8007e2e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	8992      	ldrh	r2, [r2, #12]
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d91c      	bls.n	8007d32 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	693a      	ldr	r2, [r7, #16]
 8007cfe:	8992      	ldrh	r2, [r2, #12]
 8007d00:	1a9a      	subs	r2, r3, r2
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	8992      	ldrh	r2, [r2, #12]
 8007d0e:	441a      	add	r2, r3
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6919      	ldr	r1, [r3, #16]
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	899b      	ldrh	r3, [r3, #12]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4293      	cmp	r3, r2
 8007d24:	bf38      	it	cc
 8007d26:	4613      	movcc	r3, r2
 8007d28:	461a      	mov	r2, r3
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f001 f9a8 	bl	8009080 <USBD_CtlContinueRx>
 8007d30:	e07d      	b.n	8007e2e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007d38:	f003 031f 	and.w	r3, r3, #31
 8007d3c:	2b02      	cmp	r3, #2
 8007d3e:	d014      	beq.n	8007d6a <USBD_LL_DataOutStage+0xaa>
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d81d      	bhi.n	8007d80 <USBD_LL_DataOutStage+0xc0>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <USBD_LL_DataOutStage+0x8e>
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d003      	beq.n	8007d54 <USBD_LL_DataOutStage+0x94>
 8007d4c:	e018      	b.n	8007d80 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	75bb      	strb	r3, [r7, #22]
            break;
 8007d52:	e018      	b.n	8007d86 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fa6e 	bl	8008240 <USBD_CoreFindIF>
 8007d64:	4603      	mov	r3, r0
 8007d66:	75bb      	strb	r3, [r7, #22]
            break;
 8007d68:	e00d      	b.n	8007d86 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	4619      	mov	r1, r3
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fa70 	bl	800825a <USBD_CoreFindEP>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d7e:	e002      	b.n	8007d86 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	75bb      	strb	r3, [r7, #22]
            break;
 8007d84:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d86:	7dbb      	ldrb	r3, [r7, #22]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d119      	bne.n	8007dc0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b03      	cmp	r3, #3
 8007d96:	d113      	bne.n	8007dc0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d98:	7dba      	ldrb	r2, [r7, #22]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	32ae      	adds	r2, #174	@ 0xae
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007da8:	7dba      	ldrb	r2, [r7, #22]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007db0:	7dba      	ldrb	r2, [r7, #22]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	32ae      	adds	r2, #174	@ 0xae
 8007db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f001 f96e 	bl	80090a2 <USBD_CtlSendStatus>
 8007dc6:	e032      	b.n	8007e2e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 fa41 	bl	800825a <USBD_CoreFindEP>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ddc:	7dbb      	ldrb	r3, [r7, #22]
 8007dde:	2bff      	cmp	r3, #255	@ 0xff
 8007de0:	d025      	beq.n	8007e2e <USBD_LL_DataOutStage+0x16e>
 8007de2:	7dbb      	ldrb	r3, [r7, #22]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d122      	bne.n	8007e2e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d117      	bne.n	8007e24 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007df4:	7dba      	ldrb	r2, [r7, #22]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	32ae      	adds	r2, #174	@ 0xae
 8007dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00f      	beq.n	8007e24 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007e04:	7dba      	ldrb	r2, [r7, #22]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e0c:	7dba      	ldrb	r2, [r7, #22]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	32ae      	adds	r2, #174	@ 0xae
 8007e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	7afa      	ldrb	r2, [r7, #11]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	4798      	blx	r3
 8007e20:	4603      	mov	r3, r0
 8007e22:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e24:	7dfb      	ldrb	r3, [r7, #23]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d001      	beq.n	8007e2e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007e2a:	7dfb      	ldrb	r3, [r7, #23]
 8007e2c:	e000      	b.n	8007e30 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	460b      	mov	r3, r1
 8007e42:	607a      	str	r2, [r7, #4]
 8007e44:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007e46:	7afb      	ldrb	r3, [r7, #11]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d178      	bne.n	8007f3e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	3314      	adds	r3, #20
 8007e50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d163      	bne.n	8007f24 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	8992      	ldrh	r2, [r2, #12]
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d91c      	bls.n	8007ea2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	693a      	ldr	r2, [r7, #16]
 8007e6e:	8992      	ldrh	r2, [r2, #12]
 8007e70:	1a9a      	subs	r2, r3, r2
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	8992      	ldrh	r2, [r2, #12]
 8007e7e:	441a      	add	r2, r3
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	6919      	ldr	r1, [r3, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	f001 f8c4 	bl	800901c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e94:	2300      	movs	r3, #0
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f001 fe7e 	bl	8009b9c <USBD_LL_PrepareReceive>
 8007ea0:	e040      	b.n	8007f24 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	899b      	ldrh	r3, [r3, #12]
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d11c      	bne.n	8007eea <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d316      	bcc.n	8007eea <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d20f      	bcs.n	8007eea <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2100      	movs	r1, #0
 8007ece:	68f8      	ldr	r0, [r7, #12]
 8007ed0:	f001 f8a4 	bl	800901c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007edc:	2300      	movs	r3, #0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f001 fe5a 	bl	8009b9c <USBD_LL_PrepareReceive>
 8007ee8:	e01c      	b.n	8007f24 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d10f      	bne.n	8007f16 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d009      	beq.n	8007f16 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	68f8      	ldr	r0, [r7, #12]
 8007f14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f16:	2180      	movs	r1, #128	@ 0x80
 8007f18:	68f8      	ldr	r0, [r7, #12]
 8007f1a:	f001 fd95 	bl	8009a48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f001 f8d2 	bl	80090c8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d03a      	beq.n	8007fa4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f7ff fe30 	bl	8007b94 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007f3c:	e032      	b.n	8007fa4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f3e:	7afb      	ldrb	r3, [r7, #11]
 8007f40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	4619      	mov	r1, r3
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f000 f986 	bl	800825a <USBD_CoreFindEP>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f52:	7dfb      	ldrb	r3, [r7, #23]
 8007f54:	2bff      	cmp	r3, #255	@ 0xff
 8007f56:	d025      	beq.n	8007fa4 <USBD_LL_DataInStage+0x16c>
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d122      	bne.n	8007fa4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	2b03      	cmp	r3, #3
 8007f68:	d11c      	bne.n	8007fa4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f6a:	7dfa      	ldrb	r2, [r7, #23]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	32ae      	adds	r2, #174	@ 0xae
 8007f70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d014      	beq.n	8007fa4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007f7a:	7dfa      	ldrb	r2, [r7, #23]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f82:	7dfa      	ldrb	r2, [r7, #23]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	32ae      	adds	r2, #174	@ 0xae
 8007f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f8c:	695b      	ldr	r3, [r3, #20]
 8007f8e:	7afa      	ldrb	r2, [r7, #11]
 8007f90:	4611      	mov	r1, r2
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	4798      	blx	r3
 8007f96:	4603      	mov	r3, r0
 8007f98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f9a:	7dbb      	ldrb	r3, [r7, #22]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007fa0:	7dbb      	ldrb	r3, [r7, #22]
 8007fa2:	e000      	b.n	8007fa6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3718      	adds	r7, #24
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}

08007fae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fae:	b580      	push	{r7, lr}
 8007fb0:	b084      	sub	sp, #16
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d014      	beq.n	8008014 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00e      	beq.n	8008014 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6852      	ldr	r2, [r2, #4]
 8008002:	b2d2      	uxtb	r2, r2
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008014:	2340      	movs	r3, #64	@ 0x40
 8008016:	2200      	movs	r2, #0
 8008018:	2100      	movs	r1, #0
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f001 fccf 	bl	80099be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2240      	movs	r2, #64	@ 0x40
 800802c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008030:	2340      	movs	r3, #64	@ 0x40
 8008032:	2200      	movs	r2, #0
 8008034:	2180      	movs	r1, #128	@ 0x80
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f001 fcc1 	bl	80099be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2240      	movs	r2, #64	@ 0x40
 8008048:	841a      	strh	r2, [r3, #32]

  return ret;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	78fa      	ldrb	r2, [r7, #3]
 8008064:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b04      	cmp	r3, #4
 8008086:	d006      	beq.n	8008096 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800808e:	b2da      	uxtb	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2204      	movs	r2, #4
 800809a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b04      	cmp	r3, #4
 80080be:	d106      	bne.n	80080ce <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ea:	b2db      	uxtb	r3, r3
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d110      	bne.n	8008112 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00b      	beq.n	8008112 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d005      	beq.n	8008112 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	32ae      	adds	r2, #174	@ 0xae
 8008132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800813a:	2303      	movs	r3, #3
 800813c:	e01c      	b.n	8008178 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b03      	cmp	r3, #3
 8008148:	d115      	bne.n	8008176 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	32ae      	adds	r2, #174	@ 0xae
 8008154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00b      	beq.n	8008176 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	32ae      	adds	r2, #174	@ 0xae
 8008168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	78fa      	ldrb	r2, [r7, #3]
 8008170:	4611      	mov	r1, r2
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	32ae      	adds	r2, #174	@ 0xae
 8008196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800819e:	2303      	movs	r3, #3
 80081a0:	e01c      	b.n	80081dc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b03      	cmp	r3, #3
 80081ac:	d115      	bne.n	80081da <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	32ae      	adds	r2, #174	@ 0xae
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	32ae      	adds	r2, #174	@ 0xae
 80081cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081d2:	78fa      	ldrb	r2, [r7, #3]
 80081d4:	4611      	mov	r1, r2
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b083      	sub	sp, #12
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008202:	2300      	movs	r3, #0
 8008204:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00e      	beq.n	8008236 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	6852      	ldr	r2, [r2, #4]
 8008224:	b2d2      	uxtb	r2, r2
 8008226:	4611      	mov	r1, r2
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d001      	beq.n	8008236 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008232:	2303      	movs	r3, #3
 8008234:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008236:	7bfb      	ldrb	r3, [r7, #15]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800824c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800824e:	4618      	mov	r0, r3
 8008250:	370c      	adds	r7, #12
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800825a:	b480      	push	{r7}
 800825c:	b083      	sub	sp, #12
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008266:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	885b      	ldrh	r3, [r3, #2]
 8008290:	b29b      	uxth	r3, r3
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	7812      	ldrb	r2, [r2, #0]
 8008296:	4293      	cmp	r3, r2
 8008298:	d91f      	bls.n	80082da <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082a0:	e013      	b.n	80082ca <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082a2:	f107 030a 	add.w	r3, r7, #10
 80082a6:	4619      	mov	r1, r3
 80082a8:	6978      	ldr	r0, [r7, #20]
 80082aa:	f000 f81b 	bl	80082e4 <USBD_GetNextDesc>
 80082ae:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b05      	cmp	r3, #5
 80082b6:	d108      	bne.n	80082ca <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	789b      	ldrb	r3, [r3, #2]
 80082c0:	78fa      	ldrb	r2, [r7, #3]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d008      	beq.n	80082d8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	885b      	ldrh	r3, [r3, #2]
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	897b      	ldrh	r3, [r7, #10]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d8e5      	bhi.n	80082a2 <USBD_GetEpDesc+0x2e>
 80082d6:	e000      	b.n	80082da <USBD_GetEpDesc+0x66>
          break;
 80082d8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082da:	693b      	ldr	r3, [r7, #16]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3718      	adds	r7, #24
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	7812      	ldrb	r2, [r2, #0]
 80082fa:	4413      	add	r3, r2
 80082fc:	b29a      	uxth	r2, r3
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4413      	add	r3, r2
 800830c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800830e:	68fb      	ldr	r3, [r7, #12]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	3301      	adds	r3, #1
 8008332:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800833a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800833e:	021b      	lsls	r3, r3, #8
 8008340:	b21a      	sxth	r2, r3
 8008342:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008346:	4313      	orrs	r3, r2
 8008348:	b21b      	sxth	r3, r3
 800834a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800834c:	89fb      	ldrh	r3, [r7, #14]
}
 800834e:	4618      	mov	r0, r3
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008372:	2b40      	cmp	r3, #64	@ 0x40
 8008374:	d005      	beq.n	8008382 <USBD_StdDevReq+0x26>
 8008376:	2b40      	cmp	r3, #64	@ 0x40
 8008378:	d857      	bhi.n	800842a <USBD_StdDevReq+0xce>
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00f      	beq.n	800839e <USBD_StdDevReq+0x42>
 800837e:	2b20      	cmp	r3, #32
 8008380:	d153      	bne.n	800842a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	32ae      	adds	r2, #174	@ 0xae
 800838c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
      break;
 800839c:	e04a      	b.n	8008434 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	785b      	ldrb	r3, [r3, #1]
 80083a2:	2b09      	cmp	r3, #9
 80083a4:	d83b      	bhi.n	800841e <USBD_StdDevReq+0xc2>
 80083a6:	a201      	add	r2, pc, #4	@ (adr r2, 80083ac <USBD_StdDevReq+0x50>)
 80083a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ac:	08008401 	.word	0x08008401
 80083b0:	08008415 	.word	0x08008415
 80083b4:	0800841f 	.word	0x0800841f
 80083b8:	0800840b 	.word	0x0800840b
 80083bc:	0800841f 	.word	0x0800841f
 80083c0:	080083df 	.word	0x080083df
 80083c4:	080083d5 	.word	0x080083d5
 80083c8:	0800841f 	.word	0x0800841f
 80083cc:	080083f7 	.word	0x080083f7
 80083d0:	080083e9 	.word	0x080083e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa3e 	bl	8008858 <USBD_GetDescriptor>
          break;
 80083dc:	e024      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083de:	6839      	ldr	r1, [r7, #0]
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 fba3 	bl	8008b2c <USBD_SetAddress>
          break;
 80083e6:	e01f      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fbe2 	bl	8008bb4 <USBD_SetConfig>
 80083f0:	4603      	mov	r3, r0
 80083f2:	73fb      	strb	r3, [r7, #15]
          break;
 80083f4:	e018      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083f6:	6839      	ldr	r1, [r7, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fc85 	bl	8008d08 <USBD_GetConfig>
          break;
 80083fe:	e013      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fcb6 	bl	8008d74 <USBD_GetStatus>
          break;
 8008408:	e00e      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800840a:	6839      	ldr	r1, [r7, #0]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fce5 	bl	8008ddc <USBD_SetFeature>
          break;
 8008412:	e009      	b.n	8008428 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 fd09 	bl	8008e2e <USBD_ClrFeature>
          break;
 800841c:	e004      	b.n	8008428 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fd60 	bl	8008ee6 <USBD_CtlError>
          break;
 8008426:	bf00      	nop
      }
      break;
 8008428:	e004      	b.n	8008434 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f000 fd5a 	bl	8008ee6 <USBD_CtlError>
      break;
 8008432:	bf00      	nop
  }

  return ret;
 8008434:	7bfb      	ldrb	r3, [r7, #15]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop

08008440 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008456:	2b40      	cmp	r3, #64	@ 0x40
 8008458:	d005      	beq.n	8008466 <USBD_StdItfReq+0x26>
 800845a:	2b40      	cmp	r3, #64	@ 0x40
 800845c:	d852      	bhi.n	8008504 <USBD_StdItfReq+0xc4>
 800845e:	2b00      	cmp	r3, #0
 8008460:	d001      	beq.n	8008466 <USBD_StdItfReq+0x26>
 8008462:	2b20      	cmp	r3, #32
 8008464:	d14e      	bne.n	8008504 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800846c:	b2db      	uxtb	r3, r3
 800846e:	3b01      	subs	r3, #1
 8008470:	2b02      	cmp	r3, #2
 8008472:	d840      	bhi.n	80084f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	889b      	ldrh	r3, [r3, #4]
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b01      	cmp	r3, #1
 800847c:	d836      	bhi.n	80084ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	889b      	ldrh	r3, [r3, #4]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f7ff feda 	bl	8008240 <USBD_CoreFindIF>
 800848c:	4603      	mov	r3, r0
 800848e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008490:	7bbb      	ldrb	r3, [r7, #14]
 8008492:	2bff      	cmp	r3, #255	@ 0xff
 8008494:	d01d      	beq.n	80084d2 <USBD_StdItfReq+0x92>
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11a      	bne.n	80084d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800849c:	7bba      	ldrb	r2, [r7, #14]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	32ae      	adds	r2, #174	@ 0xae
 80084a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00f      	beq.n	80084cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084ac:	7bba      	ldrb	r2, [r7, #14]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084b4:	7bba      	ldrb	r2, [r7, #14]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	32ae      	adds	r2, #174	@ 0xae
 80084ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	6839      	ldr	r1, [r7, #0]
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	4798      	blx	r3
 80084c6:	4603      	mov	r3, r0
 80084c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084ca:	e004      	b.n	80084d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d0:	e001      	b.n	80084d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084d2:	2303      	movs	r3, #3
 80084d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	88db      	ldrh	r3, [r3, #6]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d110      	bne.n	8008500 <USBD_StdItfReq+0xc0>
 80084de:	7bfb      	ldrb	r3, [r7, #15]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10d      	bne.n	8008500 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 fddc 	bl	80090a2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084ea:	e009      	b.n	8008500 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 fcf9 	bl	8008ee6 <USBD_CtlError>
          break;
 80084f4:	e004      	b.n	8008500 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084f6:	6839      	ldr	r1, [r7, #0]
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f000 fcf4 	bl	8008ee6 <USBD_CtlError>
          break;
 80084fe:	e000      	b.n	8008502 <USBD_StdItfReq+0xc2>
          break;
 8008500:	bf00      	nop
      }
      break;
 8008502:	e004      	b.n	800850e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008504:	6839      	ldr	r1, [r7, #0]
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fced 	bl	8008ee6 <USBD_CtlError>
      break;
 800850c:	bf00      	nop
  }

  return ret;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	889b      	ldrh	r3, [r3, #4]
 800852a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008534:	2b40      	cmp	r3, #64	@ 0x40
 8008536:	d007      	beq.n	8008548 <USBD_StdEPReq+0x30>
 8008538:	2b40      	cmp	r3, #64	@ 0x40
 800853a:	f200 8181 	bhi.w	8008840 <USBD_StdEPReq+0x328>
 800853e:	2b00      	cmp	r3, #0
 8008540:	d02a      	beq.n	8008598 <USBD_StdEPReq+0x80>
 8008542:	2b20      	cmp	r3, #32
 8008544:	f040 817c 	bne.w	8008840 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff fe84 	bl	800825a <USBD_CoreFindEP>
 8008552:	4603      	mov	r3, r0
 8008554:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008556:	7b7b      	ldrb	r3, [r7, #13]
 8008558:	2bff      	cmp	r3, #255	@ 0xff
 800855a:	f000 8176 	beq.w	800884a <USBD_StdEPReq+0x332>
 800855e:	7b7b      	ldrb	r3, [r7, #13]
 8008560:	2b00      	cmp	r3, #0
 8008562:	f040 8172 	bne.w	800884a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8008566:	7b7a      	ldrb	r2, [r7, #13]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800856e:	7b7a      	ldrb	r2, [r7, #13]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	32ae      	adds	r2, #174	@ 0xae
 8008574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8165 	beq.w	800884a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008580:	7b7a      	ldrb	r2, [r7, #13]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	32ae      	adds	r2, #174	@ 0xae
 8008586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
 8008592:	4603      	mov	r3, r0
 8008594:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008596:	e158      	b.n	800884a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	785b      	ldrb	r3, [r3, #1]
 800859c:	2b03      	cmp	r3, #3
 800859e:	d008      	beq.n	80085b2 <USBD_StdEPReq+0x9a>
 80085a0:	2b03      	cmp	r3, #3
 80085a2:	f300 8147 	bgt.w	8008834 <USBD_StdEPReq+0x31c>
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 809b 	beq.w	80086e2 <USBD_StdEPReq+0x1ca>
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d03c      	beq.n	800862a <USBD_StdEPReq+0x112>
 80085b0:	e140      	b.n	8008834 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d002      	beq.n	80085c4 <USBD_StdEPReq+0xac>
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d016      	beq.n	80085f0 <USBD_StdEPReq+0xd8>
 80085c2:	e02c      	b.n	800861e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085c4:	7bbb      	ldrb	r3, [r7, #14]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00d      	beq.n	80085e6 <USBD_StdEPReq+0xce>
 80085ca:	7bbb      	ldrb	r3, [r7, #14]
 80085cc:	2b80      	cmp	r3, #128	@ 0x80
 80085ce:	d00a      	beq.n	80085e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d0:	7bbb      	ldrb	r3, [r7, #14]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 fa37 	bl	8009a48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085da:	2180      	movs	r1, #128	@ 0x80
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 fa33 	bl	8009a48 <USBD_LL_StallEP>
 80085e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085e4:	e020      	b.n	8008628 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085e6:	6839      	ldr	r1, [r7, #0]
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fc7c 	bl	8008ee6 <USBD_CtlError>
              break;
 80085ee:	e01b      	b.n	8008628 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	885b      	ldrh	r3, [r3, #2]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d10e      	bne.n	8008616 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80085f8:	7bbb      	ldrb	r3, [r7, #14]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d00b      	beq.n	8008616 <USBD_StdEPReq+0xfe>
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b80      	cmp	r3, #128	@ 0x80
 8008602:	d008      	beq.n	8008616 <USBD_StdEPReq+0xfe>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	88db      	ldrh	r3, [r3, #6]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d104      	bne.n	8008616 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800860c:	7bbb      	ldrb	r3, [r7, #14]
 800860e:	4619      	mov	r1, r3
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f001 fa19 	bl	8009a48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fd43 	bl	80090a2 <USBD_CtlSendStatus>

              break;
 800861c:	e004      	b.n	8008628 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800861e:	6839      	ldr	r1, [r7, #0]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fc60 	bl	8008ee6 <USBD_CtlError>
              break;
 8008626:	bf00      	nop
          }
          break;
 8008628:	e109      	b.n	800883e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b02      	cmp	r3, #2
 8008634:	d002      	beq.n	800863c <USBD_StdEPReq+0x124>
 8008636:	2b03      	cmp	r3, #3
 8008638:	d016      	beq.n	8008668 <USBD_StdEPReq+0x150>
 800863a:	e04b      	b.n	80086d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800863c:	7bbb      	ldrb	r3, [r7, #14]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00d      	beq.n	800865e <USBD_StdEPReq+0x146>
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b80      	cmp	r3, #128	@ 0x80
 8008646:	d00a      	beq.n	800865e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008648:	7bbb      	ldrb	r3, [r7, #14]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f001 f9fb 	bl	8009a48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008652:	2180      	movs	r1, #128	@ 0x80
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f9f7 	bl	8009a48 <USBD_LL_StallEP>
 800865a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800865c:	e040      	b.n	80086e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800865e:	6839      	ldr	r1, [r7, #0]
 8008660:	6878      	ldr	r0, [r7, #4]
 8008662:	f000 fc40 	bl	8008ee6 <USBD_CtlError>
              break;
 8008666:	e03b      	b.n	80086e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	885b      	ldrh	r3, [r3, #2]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d136      	bne.n	80086de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008670:	7bbb      	ldrb	r3, [r7, #14]
 8008672:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008676:	2b00      	cmp	r3, #0
 8008678:	d004      	beq.n	8008684 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800867a:	7bbb      	ldrb	r3, [r7, #14]
 800867c:	4619      	mov	r1, r3
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fa01 	bl	8009a86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fd0c 	bl	80090a2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800868a:	7bbb      	ldrb	r3, [r7, #14]
 800868c:	4619      	mov	r1, r3
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f7ff fde3 	bl	800825a <USBD_CoreFindEP>
 8008694:	4603      	mov	r3, r0
 8008696:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008698:	7b7b      	ldrb	r3, [r7, #13]
 800869a:	2bff      	cmp	r3, #255	@ 0xff
 800869c:	d01f      	beq.n	80086de <USBD_StdEPReq+0x1c6>
 800869e:	7b7b      	ldrb	r3, [r7, #13]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d11c      	bne.n	80086de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086a4:	7b7a      	ldrb	r2, [r7, #13]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	32ae      	adds	r2, #174	@ 0xae
 80086b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d010      	beq.n	80086de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086bc:	7b7a      	ldrb	r2, [r7, #13]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	32ae      	adds	r2, #174	@ 0xae
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	6839      	ldr	r1, [r7, #0]
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	4798      	blx	r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086d2:	e004      	b.n	80086de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086d4:	6839      	ldr	r1, [r7, #0]
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f000 fc05 	bl	8008ee6 <USBD_CtlError>
              break;
 80086dc:	e000      	b.n	80086e0 <USBD_StdEPReq+0x1c8>
              break;
 80086de:	bf00      	nop
          }
          break;
 80086e0:	e0ad      	b.n	800883e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d002      	beq.n	80086f4 <USBD_StdEPReq+0x1dc>
 80086ee:	2b03      	cmp	r3, #3
 80086f0:	d033      	beq.n	800875a <USBD_StdEPReq+0x242>
 80086f2:	e099      	b.n	8008828 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086f4:	7bbb      	ldrb	r3, [r7, #14]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <USBD_StdEPReq+0x1f2>
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	2b80      	cmp	r3, #128	@ 0x80
 80086fe:	d004      	beq.n	800870a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008700:	6839      	ldr	r1, [r7, #0]
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 fbef 	bl	8008ee6 <USBD_CtlError>
                break;
 8008708:	e093      	b.n	8008832 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800870a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800870e:	2b00      	cmp	r3, #0
 8008710:	da0b      	bge.n	800872a <USBD_StdEPReq+0x212>
 8008712:	7bbb      	ldrb	r3, [r7, #14]
 8008714:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008718:	4613      	mov	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	4413      	add	r3, r2
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	3310      	adds	r3, #16
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	4413      	add	r3, r2
 8008726:	3304      	adds	r3, #4
 8008728:	e00b      	b.n	8008742 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800872a:	7bbb      	ldrb	r3, [r7, #14]
 800872c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008730:	4613      	mov	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	009b      	lsls	r3, r3, #2
 8008738:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	4413      	add	r3, r2
 8008740:	3304      	adds	r3, #4
 8008742:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	2200      	movs	r2, #0
 8008748:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	330e      	adds	r3, #14
 800874e:	2202      	movs	r2, #2
 8008750:	4619      	mov	r1, r3
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fc44 	bl	8008fe0 <USBD_CtlSendData>
              break;
 8008758:	e06b      	b.n	8008832 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800875a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800875e:	2b00      	cmp	r3, #0
 8008760:	da11      	bge.n	8008786 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008762:	7bbb      	ldrb	r3, [r7, #14]
 8008764:	f003 020f 	and.w	r2, r3, #15
 8008768:	6879      	ldr	r1, [r7, #4]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	440b      	add	r3, r1
 8008774:	3323      	adds	r3, #35	@ 0x23
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d117      	bne.n	80087ac <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fbb1 	bl	8008ee6 <USBD_CtlError>
                  break;
 8008784:	e055      	b.n	8008832 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	f003 020f 	and.w	r2, r3, #15
 800878c:	6879      	ldr	r1, [r7, #4]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 fb9e 	bl	8008ee6 <USBD_CtlError>
                  break;
 80087aa:	e042      	b.n	8008832 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	da0b      	bge.n	80087cc <USBD_StdEPReq+0x2b4>
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	3310      	adds	r3, #16
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	4413      	add	r3, r2
 80087c8:	3304      	adds	r3, #4
 80087ca:	e00b      	b.n	80087e4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087cc:	7bbb      	ldrb	r3, [r7, #14]
 80087ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d2:	4613      	mov	r3, r2
 80087d4:	009b      	lsls	r3, r3, #2
 80087d6:	4413      	add	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	4413      	add	r3, r2
 80087e2:	3304      	adds	r3, #4
 80087e4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087e6:	7bbb      	ldrb	r3, [r7, #14]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d002      	beq.n	80087f2 <USBD_StdEPReq+0x2da>
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b80      	cmp	r3, #128	@ 0x80
 80087f0:	d103      	bne.n	80087fa <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2200      	movs	r2, #0
 80087f6:	739a      	strb	r2, [r3, #14]
 80087f8:	e00e      	b.n	8008818 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087fa:	7bbb      	ldrb	r3, [r7, #14]
 80087fc:	4619      	mov	r1, r3
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 f960 	bl	8009ac4 <USBD_LL_IsStallEP>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	d003      	beq.n	8008812 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2201      	movs	r2, #1
 800880e:	739a      	strb	r2, [r3, #14]
 8008810:	e002      	b.n	8008818 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	2200      	movs	r2, #0
 8008816:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	330e      	adds	r3, #14
 800881c:	2202      	movs	r2, #2
 800881e:	4619      	mov	r1, r3
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f000 fbdd 	bl	8008fe0 <USBD_CtlSendData>
              break;
 8008826:	e004      	b.n	8008832 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008828:	6839      	ldr	r1, [r7, #0]
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 fb5b 	bl	8008ee6 <USBD_CtlError>
              break;
 8008830:	bf00      	nop
          }
          break;
 8008832:	e004      	b.n	800883e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008834:	6839      	ldr	r1, [r7, #0]
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fb55 	bl	8008ee6 <USBD_CtlError>
          break;
 800883c:	bf00      	nop
      }
      break;
 800883e:	e005      	b.n	800884c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008840:	6839      	ldr	r1, [r7, #0]
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb4f 	bl	8008ee6 <USBD_CtlError>
      break;
 8008848:	e000      	b.n	800884c <USBD_StdEPReq+0x334>
      break;
 800884a:	bf00      	nop
  }

  return ret;
 800884c:	7bfb      	ldrb	r3, [r7, #15]
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008862:	2300      	movs	r3, #0
 8008864:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008866:	2300      	movs	r3, #0
 8008868:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	885b      	ldrh	r3, [r3, #2]
 8008872:	0a1b      	lsrs	r3, r3, #8
 8008874:	b29b      	uxth	r3, r3
 8008876:	3b01      	subs	r3, #1
 8008878:	2b06      	cmp	r3, #6
 800887a:	f200 8128 	bhi.w	8008ace <USBD_GetDescriptor+0x276>
 800887e:	a201      	add	r2, pc, #4	@ (adr r2, 8008884 <USBD_GetDescriptor+0x2c>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	080088a1 	.word	0x080088a1
 8008888:	080088b9 	.word	0x080088b9
 800888c:	080088f9 	.word	0x080088f9
 8008890:	08008acf 	.word	0x08008acf
 8008894:	08008acf 	.word	0x08008acf
 8008898:	08008a6f 	.word	0x08008a6f
 800889c:	08008a9b 	.word	0x08008a9b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	687a      	ldr	r2, [r7, #4]
 80088aa:	7c12      	ldrb	r2, [r2, #16]
 80088ac:	f107 0108 	add.w	r1, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
      break;
 80088b6:	e112      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	7c1b      	ldrb	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d10d      	bne.n	80088dc <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c8:	f107 0208 	add.w	r2, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	2202      	movs	r2, #2
 80088d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088da:	e100      	b.n	8008ade <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e4:	f107 0208 	add.w	r2, r7, #8
 80088e8:	4610      	mov	r0, r2
 80088ea:	4798      	blx	r3
 80088ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	3301      	adds	r3, #1
 80088f2:	2202      	movs	r2, #2
 80088f4:	701a      	strb	r2, [r3, #0]
      break;
 80088f6:	e0f2      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	885b      	ldrh	r3, [r3, #2]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b05      	cmp	r3, #5
 8008900:	f200 80ac 	bhi.w	8008a5c <USBD_GetDescriptor+0x204>
 8008904:	a201      	add	r2, pc, #4	@ (adr r2, 800890c <USBD_GetDescriptor+0xb4>)
 8008906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890a:	bf00      	nop
 800890c:	08008925 	.word	0x08008925
 8008910:	08008959 	.word	0x08008959
 8008914:	0800898d 	.word	0x0800898d
 8008918:	080089c1 	.word	0x080089c1
 800891c:	080089f5 	.word	0x080089f5
 8008920:	08008a29 	.word	0x08008a29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008946:	e091      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 facb 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
          break;
 8008956:	e089      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897a:	e077      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fab1 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
          break;
 800898a:	e06f      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008992:	68db      	ldr	r3, [r3, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ae:	e05d      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa97 	bl	8008ee6 <USBD_CtlError>
            err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
          break;
 80089be:	e055      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e2:	e043      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa7d 	bl	8008ee6 <USBD_CtlError>
            err++;
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	3301      	adds	r3, #1
 80089f0:	72fb      	strb	r3, [r7, #11]
          break;
 80089f2:	e03b      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d00b      	beq.n	8008a18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a06:	695b      	ldr	r3, [r3, #20]
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	7c12      	ldrb	r2, [r2, #16]
 8008a0c:	f107 0108 	add.w	r1, r7, #8
 8008a10:	4610      	mov	r0, r2
 8008a12:	4798      	blx	r3
 8008a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a16:	e029      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fa63 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008a20:	7afb      	ldrb	r3, [r7, #11]
 8008a22:	3301      	adds	r3, #1
 8008a24:	72fb      	strb	r3, [r7, #11]
          break;
 8008a26:	e021      	b.n	8008a6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d00b      	beq.n	8008a4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	7c12      	ldrb	r2, [r2, #16]
 8008a40:	f107 0108 	add.w	r1, r7, #8
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4a:	e00f      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa49 	bl	8008ee6 <USBD_CtlError>
            err++;
 8008a54:	7afb      	ldrb	r3, [r7, #11]
 8008a56:	3301      	adds	r3, #1
 8008a58:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5a:	e007      	b.n	8008a6c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fa41 	bl	8008ee6 <USBD_CtlError>
          err++;
 8008a64:	7afb      	ldrb	r3, [r7, #11]
 8008a66:	3301      	adds	r3, #1
 8008a68:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a6a:	bf00      	nop
      }
      break;
 8008a6c:	e037      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7c1b      	ldrb	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d109      	bne.n	8008a8a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a7e:	f107 0208 	add.w	r2, r7, #8
 8008a82:	4610      	mov	r0, r2
 8008a84:	4798      	blx	r3
 8008a86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a88:	e029      	b.n	8008ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fa2a 	bl	8008ee6 <USBD_CtlError>
        err++;
 8008a92:	7afb      	ldrb	r3, [r7, #11]
 8008a94:	3301      	adds	r3, #1
 8008a96:	72fb      	strb	r3, [r7, #11]
      break;
 8008a98:	e021      	b.n	8008ade <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7c1b      	ldrb	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10d      	bne.n	8008abe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aaa:	f107 0208 	add.w	r2, r7, #8
 8008aae:	4610      	mov	r0, r2
 8008ab0:	4798      	blx	r3
 8008ab2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	2207      	movs	r2, #7
 8008aba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008abc:	e00f      	b.n	8008ade <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 fa10 	bl	8008ee6 <USBD_CtlError>
        err++;
 8008ac6:	7afb      	ldrb	r3, [r7, #11]
 8008ac8:	3301      	adds	r3, #1
 8008aca:	72fb      	strb	r3, [r7, #11]
      break;
 8008acc:	e007      	b.n	8008ade <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ace:	6839      	ldr	r1, [r7, #0]
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 fa08 	bl	8008ee6 <USBD_CtlError>
      err++;
 8008ad6:	7afb      	ldrb	r3, [r7, #11]
 8008ad8:	3301      	adds	r3, #1
 8008ada:	72fb      	strb	r3, [r7, #11]
      break;
 8008adc:	bf00      	nop
  }

  if (err != 0U)
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d11e      	bne.n	8008b22 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	88db      	ldrh	r3, [r3, #6]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d016      	beq.n	8008b1a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008aec:	893b      	ldrh	r3, [r7, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00e      	beq.n	8008b10 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	88da      	ldrh	r2, [r3, #6]
 8008af6:	893b      	ldrh	r3, [r7, #8]
 8008af8:	4293      	cmp	r3, r2
 8008afa:	bf28      	it	cs
 8008afc:	4613      	movcs	r3, r2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b02:	893b      	ldrh	r3, [r7, #8]
 8008b04:	461a      	mov	r2, r3
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f000 fa69 	bl	8008fe0 <USBD_CtlSendData>
 8008b0e:	e009      	b.n	8008b24 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b10:	6839      	ldr	r1, [r7, #0]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 f9e7 	bl	8008ee6 <USBD_CtlError>
 8008b18:	e004      	b.n	8008b24 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fac1 	bl	80090a2 <USBD_CtlSendStatus>
 8008b20:	e000      	b.n	8008b24 <USBD_GetDescriptor+0x2cc>
    return;
 8008b22:	bf00      	nop
  }
}
 8008b24:	3710      	adds	r7, #16
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop

08008b2c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	889b      	ldrh	r3, [r3, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d131      	bne.n	8008ba2 <USBD_SetAddress+0x76>
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	88db      	ldrh	r3, [r3, #6]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d12d      	bne.n	8008ba2 <USBD_SetAddress+0x76>
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	885b      	ldrh	r3, [r3, #2]
 8008b4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8008b4c:	d829      	bhi.n	8008ba2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	885b      	ldrh	r3, [r3, #2]
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b58:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d104      	bne.n	8008b70 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b66:	6839      	ldr	r1, [r7, #0]
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f9bc 	bl	8008ee6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b6e:	e01d      	b.n	8008bac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	7bfa      	ldrb	r2, [r7, #15]
 8008b74:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 ffcd 	bl	8009b1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa8d 	bl	80090a2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d004      	beq.n	8008b98 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2202      	movs	r2, #2
 8008b92:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b96:	e009      	b.n	8008bac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba0:	e004      	b.n	8008bac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ba2:	6839      	ldr	r1, [r7, #0]
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 f99e 	bl	8008ee6 <USBD_CtlError>
  }
}
 8008baa:	bf00      	nop
 8008bac:	bf00      	nop
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	885b      	ldrh	r3, [r3, #2]
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	4b4e      	ldr	r3, [pc, #312]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008bca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bcc:	4b4d      	ldr	r3, [pc, #308]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d905      	bls.n	8008be0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f985 	bl	8008ee6 <USBD_CtlError>
    return USBD_FAIL;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e08c      	b.n	8008cfa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d002      	beq.n	8008bf2 <USBD_SetConfig+0x3e>
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	d029      	beq.n	8008c44 <USBD_SetConfig+0x90>
 8008bf0:	e075      	b.n	8008cde <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bf2:	4b44      	ldr	r3, [pc, #272]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d020      	beq.n	8008c3c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bfa:	4b42      	ldr	r3, [pc, #264]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c04:	4b3f      	ldr	r3, [pc, #252]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f7fe ffcd 	bl	8007baa <USBD_SetClassConfig>
 8008c10:	4603      	mov	r3, r0
 8008c12:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c14:	7bfb      	ldrb	r3, [r7, #15]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d008      	beq.n	8008c2c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 f962 	bl	8008ee6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	2202      	movs	r2, #2
 8008c26:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c2a:	e065      	b.n	8008cf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fa38 	bl	80090a2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2203      	movs	r2, #3
 8008c36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c3a:	e05d      	b.n	8008cf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 fa30 	bl	80090a2 <USBD_CtlSendStatus>
      break;
 8008c42:	e059      	b.n	8008cf8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c44:	4b2f      	ldr	r3, [pc, #188]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d112      	bne.n	8008c72 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008c54:	4b2b      	ldr	r3, [pc, #172]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	461a      	mov	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c5e:	4b29      	ldr	r3, [pc, #164]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fe ffbc 	bl	8007be2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa19 	bl	80090a2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c70:	e042      	b.n	8008cf8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c72:	4b24      	ldr	r3, [pc, #144]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d02a      	beq.n	8008cd6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7fe ffaa 	bl	8007be2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c98:	4b1a      	ldr	r3, [pc, #104]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f7fe ff83 	bl	8007baa <USBD_SetClassConfig>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ca8:	7bfb      	ldrb	r3, [r7, #15]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00f      	beq.n	8008cce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 f918 	bl	8008ee6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fe ff8f 	bl	8007be2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ccc:	e014      	b.n	8008cf8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f9e7 	bl	80090a2 <USBD_CtlSendStatus>
      break;
 8008cd4:	e010      	b.n	8008cf8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f9e3 	bl	80090a2 <USBD_CtlSendStatus>
      break;
 8008cdc:	e00c      	b.n	8008cf8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 f900 	bl	8008ee6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ce6:	4b07      	ldr	r3, [pc, #28]	@ (8008d04 <USBD_SetConfig+0x150>)
 8008ce8:	781b      	ldrb	r3, [r3, #0]
 8008cea:	4619      	mov	r1, r3
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7fe ff78 	bl	8007be2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8008cf6:	bf00      	nop
  }

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	200007a0 	.word	0x200007a0

08008d08 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b082      	sub	sp, #8
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	88db      	ldrh	r3, [r3, #6]
 8008d16:	2b01      	cmp	r3, #1
 8008d18:	d004      	beq.n	8008d24 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f8e2 	bl	8008ee6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d22:	e023      	b.n	8008d6c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	dc02      	bgt.n	8008d36 <USBD_GetConfig+0x2e>
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dc03      	bgt.n	8008d3c <USBD_GetConfig+0x34>
 8008d34:	e015      	b.n	8008d62 <USBD_GetConfig+0x5a>
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d00b      	beq.n	8008d52 <USBD_GetConfig+0x4a>
 8008d3a:	e012      	b.n	8008d62 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	3308      	adds	r3, #8
 8008d46:	2201      	movs	r2, #1
 8008d48:	4619      	mov	r1, r3
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 f948 	bl	8008fe0 <USBD_CtlSendData>
        break;
 8008d50:	e00c      	b.n	8008d6c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3304      	adds	r3, #4
 8008d56:	2201      	movs	r2, #1
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f940 	bl	8008fe0 <USBD_CtlSendData>
        break;
 8008d60:	e004      	b.n	8008d6c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f8be 	bl	8008ee6 <USBD_CtlError>
        break;
 8008d6a:	bf00      	nop
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d81e      	bhi.n	8008dca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	88db      	ldrh	r3, [r3, #6]
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d004      	beq.n	8008d9e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d94:	6839      	ldr	r1, [r7, #0]
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f8a5 	bl	8008ee6 <USBD_CtlError>
        break;
 8008d9c:	e01a      	b.n	8008dd4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f043 0202 	orr.w	r2, r3, #2
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	330c      	adds	r3, #12
 8008dbe:	2202      	movs	r2, #2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f90c 	bl	8008fe0 <USBD_CtlSendData>
      break;
 8008dc8:	e004      	b.n	8008dd4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dca:	6839      	ldr	r1, [r7, #0]
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f88a 	bl	8008ee6 <USBD_CtlError>
      break;
 8008dd2:	bf00      	nop
  }
}
 8008dd4:	bf00      	nop
 8008dd6:	3708      	adds	r7, #8
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b082      	sub	sp, #8
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	885b      	ldrh	r3, [r3, #2]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d107      	bne.n	8008dfe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2201      	movs	r2, #1
 8008df2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f953 	bl	80090a2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008dfc:	e013      	b.n	8008e26 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	885b      	ldrh	r3, [r3, #2]
 8008e02:	2b02      	cmp	r3, #2
 8008e04:	d10b      	bne.n	8008e1e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	889b      	ldrh	r3, [r3, #4]
 8008e0a:	0a1b      	lsrs	r3, r3, #8
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f943 	bl	80090a2 <USBD_CtlSendStatus>
}
 8008e1c:	e003      	b.n	8008e26 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e1e:	6839      	ldr	r1, [r7, #0]
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 f860 	bl	8008ee6 <USBD_CtlError>
}
 8008e26:	bf00      	nop
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b082      	sub	sp, #8
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
 8008e36:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d80b      	bhi.n	8008e5e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	885b      	ldrh	r3, [r3, #2]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d10c      	bne.n	8008e68 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f923 	bl	80090a2 <USBD_CtlSendStatus>
      }
      break;
 8008e5c:	e004      	b.n	8008e68 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e5e:	6839      	ldr	r1, [r7, #0]
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 f840 	bl	8008ee6 <USBD_CtlError>
      break;
 8008e66:	e000      	b.n	8008e6a <USBD_ClrFeature+0x3c>
      break;
 8008e68:	bf00      	nop
  }
}
 8008e6a:	bf00      	nop
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b084      	sub	sp, #16
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	781a      	ldrb	r2, [r3, #0]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3301      	adds	r3, #1
 8008e8c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	781a      	ldrb	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fa3d 	bl	800831c <SWAPBYTE>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	3301      	adds	r3, #1
 8008eae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f7ff fa30 	bl	800831c <SWAPBYTE>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f7ff fa23 	bl	800831c <SWAPBYTE>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	461a      	mov	r2, r3
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	80da      	strh	r2, [r3, #6]
}
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef0:	2180      	movs	r1, #128	@ 0x80
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fda8 	bl	8009a48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ef8:	2100      	movs	r1, #0
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fda4 	bl	8009a48 <USBD_LL_StallEP>
}
 8008f00:	bf00      	nop
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b086      	sub	sp, #24
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d042      	beq.n	8008fa4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008f22:	6938      	ldr	r0, [r7, #16]
 8008f24:	f000 f842 	bl	8008fac <USBD_GetLen>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f32:	d808      	bhi.n	8008f46 <USBD_GetString+0x3e>
 8008f34:	6938      	ldr	r0, [r7, #16]
 8008f36:	f000 f839 	bl	8008fac <USBD_GetLen>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	005b      	lsls	r3, r3, #1
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	e001      	b.n	8008f4a <USBD_GetString+0x42>
 8008f46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	4413      	add	r3, r2
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7812      	ldrb	r2, [r2, #0]
 8008f58:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f60:	7dfb      	ldrb	r3, [r7, #23]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	4413      	add	r3, r2
 8008f66:	2203      	movs	r2, #3
 8008f68:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f70:	e013      	b.n	8008f9a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008f72:	7dfb      	ldrb	r3, [r7, #23]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	4413      	add	r3, r2
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	7812      	ldrb	r2, [r2, #0]
 8008f7c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	3301      	adds	r3, #1
 8008f82:	613b      	str	r3, [r7, #16]
    idx++;
 8008f84:	7dfb      	ldrb	r3, [r7, #23]
 8008f86:	3301      	adds	r3, #1
 8008f88:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f8a:	7dfb      	ldrb	r3, [r7, #23]
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	4413      	add	r3, r2
 8008f90:	2200      	movs	r2, #0
 8008f92:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f94:	7dfb      	ldrb	r3, [r7, #23]
 8008f96:	3301      	adds	r3, #1
 8008f98:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1e7      	bne.n	8008f72 <USBD_GetString+0x6a>
 8008fa2:	e000      	b.n	8008fa6 <USBD_GetString+0x9e>
    return;
 8008fa4:	bf00      	nop
  }
}
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fbc:	e005      	b.n	8008fca <USBD_GetLen+0x1e>
  {
    len++;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1f5      	bne.n	8008fbe <USBD_GetLen+0x12>
  }

  return len;
 8008fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr

08008fe0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2202      	movs	r2, #2
 8008ff0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	2100      	movs	r1, #0
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 fda4 	bl	8009b5a <USBD_LL_Transmit>

  return USBD_OK;
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	60f8      	str	r0, [r7, #12]
 8009024:	60b9      	str	r1, [r7, #8]
 8009026:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	2100      	movs	r1, #0
 800902e:	68f8      	ldr	r0, [r7, #12]
 8009030:	f000 fd93 	bl	8009b5a <USBD_LL_Transmit>

  return USBD_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2203      	movs	r2, #3
 800904e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	2100      	movs	r1, #0
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fd93 	bl	8009b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	2100      	movs	r1, #0
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 fd82 	bl	8009b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2204      	movs	r2, #4
 80090ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80090b2:	2300      	movs	r3, #0
 80090b4:	2200      	movs	r2, #0
 80090b6:	2100      	movs	r1, #0
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fd4e 	bl	8009b5a <USBD_LL_Transmit>

  return USBD_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3708      	adds	r7, #8
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2205      	movs	r2, #5
 80090d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090d8:	2300      	movs	r3, #0
 80090da:	2200      	movs	r2, #0
 80090dc:	2100      	movs	r1, #0
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fd5c 	bl	8009b9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80090f4:	2200      	movs	r2, #0
 80090f6:	4912      	ldr	r1, [pc, #72]	@ (8009140 <MX_USB_DEVICE_Init+0x50>)
 80090f8:	4812      	ldr	r0, [pc, #72]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 80090fa:	f7fe fcd9 	bl	8007ab0 <USBD_Init>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009104:	f7f8 fa0c 	bl	8001520 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009108:	490f      	ldr	r1, [pc, #60]	@ (8009148 <MX_USB_DEVICE_Init+0x58>)
 800910a:	480e      	ldr	r0, [pc, #56]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 800910c:	f7fe fd00 	bl	8007b10 <USBD_RegisterClass>
 8009110:	4603      	mov	r3, r0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d001      	beq.n	800911a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009116:	f7f8 fa03 	bl	8001520 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800911a:	490c      	ldr	r1, [pc, #48]	@ (800914c <MX_USB_DEVICE_Init+0x5c>)
 800911c:	4809      	ldr	r0, [pc, #36]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 800911e:	f7fe fc37 	bl	8007990 <USBD_CDC_RegisterInterface>
 8009122:	4603      	mov	r3, r0
 8009124:	2b00      	cmp	r3, #0
 8009126:	d001      	beq.n	800912c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009128:	f7f8 f9fa 	bl	8001520 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800912c:	4805      	ldr	r0, [pc, #20]	@ (8009144 <MX_USB_DEVICE_Init+0x54>)
 800912e:	f7fe fd25 	bl	8007b7c <USBD_Start>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009138:	f7f8 f9f2 	bl	8001520 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800913c:	bf00      	nop
 800913e:	bd80      	pop	{r7, pc}
 8009140:	200000ac 	.word	0x200000ac
 8009144:	200007a4 	.word	0x200007a4
 8009148:	20000018 	.word	0x20000018
 800914c:	20000098 	.word	0x20000098

08009150 <crc16_ccitt>:
    int16_t vw;
    uint8_t seq;
    uint8_t payload_len;
} VelocityPacket;

uint16_t crc16_ccitt(const uint8_t *data, uint16_t length) {
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	460b      	mov	r3, r1
 800915a:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0xFFFF;
 800915c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009160:	81fb      	strh	r3, [r7, #14]
    for (uint16_t i = 0; i < length; i++) {
 8009162:	2300      	movs	r3, #0
 8009164:	81bb      	strh	r3, [r7, #12]
 8009166:	e02a      	b.n	80091be <crc16_ccitt+0x6e>
        crc ^= (data[i] << 8);
 8009168:	89bb      	ldrh	r3, [r7, #12]
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	4413      	add	r3, r2
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	b21b      	sxth	r3, r3
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	b21a      	sxth	r2, r3
 8009176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800917a:	4053      	eors	r3, r2
 800917c:	b21b      	sxth	r3, r3
 800917e:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 8009180:	2300      	movs	r3, #0
 8009182:	72fb      	strb	r3, [r7, #11]
 8009184:	e015      	b.n	80091b2 <crc16_ccitt+0x62>
            crc = (crc & 0x8000) ? ((crc << 1) ^ 0x1021) : (crc << 1);
 8009186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da0a      	bge.n	80091a4 <crc16_ccitt+0x54>
 800918e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009192:	005b      	lsls	r3, r3, #1
 8009194:	b21b      	sxth	r3, r3
 8009196:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800919a:	f083 0301 	eor.w	r3, r3, #1
 800919e:	b21b      	sxth	r3, r3
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	e002      	b.n	80091aa <crc16_ccitt+0x5a>
 80091a4:	89fb      	ldrh	r3, [r7, #14]
 80091a6:	005b      	lsls	r3, r3, #1
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	81fb      	strh	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) {
 80091ac:	7afb      	ldrb	r3, [r7, #11]
 80091ae:	3301      	adds	r3, #1
 80091b0:	72fb      	strb	r3, [r7, #11]
 80091b2:	7afb      	ldrb	r3, [r7, #11]
 80091b4:	2b07      	cmp	r3, #7
 80091b6:	d9e6      	bls.n	8009186 <crc16_ccitt+0x36>
    for (uint16_t i = 0; i < length; i++) {
 80091b8:	89bb      	ldrh	r3, [r7, #12]
 80091ba:	3301      	adds	r3, #1
 80091bc:	81bb      	strh	r3, [r7, #12]
 80091be:	89ba      	ldrh	r2, [r7, #12]
 80091c0:	887b      	ldrh	r3, [r7, #2]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d3d0      	bcc.n	8009168 <crc16_ccitt+0x18>
        }
    }
    return crc;
 80091c6:	89fb      	ldrh	r3, [r7, #14]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <process_velocity>:


float vx_f = 0.0f, vy_f = 0.0f, vw_f = 0.0f;

void process_velocity(int16_t vx, int16_t vy, int16_t vw) {
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	80fb      	strh	r3, [r7, #6]
 80091de:	460b      	mov	r3, r1
 80091e0:	80bb      	strh	r3, [r7, #4]
 80091e2:	4613      	mov	r3, r2
 80091e4:	807b      	strh	r3, [r7, #2]
    vx_f = vx / 1000.0f;
 80091e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091ea:	ee07 3a90 	vmov	s15, r3
 80091ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80091f2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8009240 <process_velocity+0x6c>
 80091f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091fa:	4b12      	ldr	r3, [pc, #72]	@ (8009244 <process_velocity+0x70>)
 80091fc:	edc3 7a00 	vstr	s15, [r3]
    vy_f = vy / 1000.0f;
 8009200:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009204:	ee07 3a90 	vmov	s15, r3
 8009208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800920c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8009240 <process_velocity+0x6c>
 8009210:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009214:	4b0c      	ldr	r3, [pc, #48]	@ (8009248 <process_velocity+0x74>)
 8009216:	edc3 7a00 	vstr	s15, [r3]
    vw_f = vw / 1000.0f;
 800921a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800921e:	ee07 3a90 	vmov	s15, r3
 8009222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009226:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8009240 <process_velocity+0x6c>
 800922a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800922e:	4b07      	ldr	r3, [pc, #28]	@ (800924c <process_velocity+0x78>)
 8009230:	edc3 7a00 	vstr	s15, [r3]

}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	447a0000 	.word	0x447a0000
 8009244:	20000a80 	.word	0x20000a80
 8009248:	20000a84 	.word	0x20000a84
 800924c:	20000a88 	.word	0x20000a88

08009250 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009254:	2200      	movs	r2, #0
 8009256:	4905      	ldr	r1, [pc, #20]	@ (800926c <CDC_Init_FS+0x1c>)
 8009258:	4805      	ldr	r0, [pc, #20]	@ (8009270 <CDC_Init_FS+0x20>)
 800925a:	f7fe fbb3 	bl	80079c4 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800925e:	4905      	ldr	r1, [pc, #20]	@ (8009274 <CDC_Init_FS+0x24>)
 8009260:	4803      	ldr	r0, [pc, #12]	@ (8009270 <CDC_Init_FS+0x20>)
 8009262:	f7fe fbd1 	bl	8007a08 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8009266:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8009268:	4618      	mov	r0, r3
 800926a:	bd80      	pop	{r7, pc}
 800926c:	2000128c 	.word	0x2000128c
 8009270:	200007a4 	.word	0x200007a4
 8009274:	20000a8c 	.word	0x20000a8c

08009278 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 800927c:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 800927e:	4618      	mov	r0, r3
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	4603      	mov	r3, r0
 8009290:	6039      	str	r1, [r7, #0]
 8009292:	71fb      	strb	r3, [r7, #7]
 8009294:	4613      	mov	r3, r2
 8009296:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8009298:	79fb      	ldrb	r3, [r7, #7]
 800929a:	2b23      	cmp	r3, #35	@ 0x23
 800929c:	d84a      	bhi.n	8009334 <CDC_Control_FS+0xac>
 800929e:	a201      	add	r2, pc, #4	@ (adr r2, 80092a4 <CDC_Control_FS+0x1c>)
 80092a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092a4:	08009335 	.word	0x08009335
 80092a8:	08009335 	.word	0x08009335
 80092ac:	08009335 	.word	0x08009335
 80092b0:	08009335 	.word	0x08009335
 80092b4:	08009335 	.word	0x08009335
 80092b8:	08009335 	.word	0x08009335
 80092bc:	08009335 	.word	0x08009335
 80092c0:	08009335 	.word	0x08009335
 80092c4:	08009335 	.word	0x08009335
 80092c8:	08009335 	.word	0x08009335
 80092cc:	08009335 	.word	0x08009335
 80092d0:	08009335 	.word	0x08009335
 80092d4:	08009335 	.word	0x08009335
 80092d8:	08009335 	.word	0x08009335
 80092dc:	08009335 	.word	0x08009335
 80092e0:	08009335 	.word	0x08009335
 80092e4:	08009335 	.word	0x08009335
 80092e8:	08009335 	.word	0x08009335
 80092ec:	08009335 	.word	0x08009335
 80092f0:	08009335 	.word	0x08009335
 80092f4:	08009335 	.word	0x08009335
 80092f8:	08009335 	.word	0x08009335
 80092fc:	08009335 	.word	0x08009335
 8009300:	08009335 	.word	0x08009335
 8009304:	08009335 	.word	0x08009335
 8009308:	08009335 	.word	0x08009335
 800930c:	08009335 	.word	0x08009335
 8009310:	08009335 	.word	0x08009335
 8009314:	08009335 	.word	0x08009335
 8009318:	08009335 	.word	0x08009335
 800931c:	08009335 	.word	0x08009335
 8009320:	08009335 	.word	0x08009335
 8009324:	08009335 	.word	0x08009335
 8009328:	08009335 	.word	0x08009335
 800932c:	08009335 	.word	0x08009335
 8009330:	08009335 	.word	0x08009335
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8009334:	bf00      	nop
	}

	return (USBD_OK);
 8009336:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8009338:	4618      	mov	r0, r3
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b086      	sub	sp, #24
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */

	// Just enqueue bytes (ISR context), no parsing/drawing here

	if (Len >= FRAME_SIZE && Buf[0] == HEADER_1 && Buf[1] == HEADER_2) {
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	2b0f      	cmp	r3, #15
 8009352:	d957      	bls.n	8009404 <CDC_Receive_FS+0xc0>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	2baa      	cmp	r3, #170	@ 0xaa
 800935a:	d153      	bne.n	8009404 <CDC_Receive_FS+0xc0>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3301      	adds	r3, #1
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	2b55      	cmp	r3, #85	@ 0x55
 8009364:	d14e      	bne.n	8009404 <CDC_Receive_FS+0xc0>
	        uint16_t received_crc = Buf[FRAME_SIZE - 2] | (Buf[FRAME_SIZE - 1] << 8);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	330e      	adds	r3, #14
 800936a:	781b      	ldrb	r3, [r3, #0]
 800936c:	b21a      	sxth	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	330f      	adds	r3, #15
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	b21b      	sxth	r3, r3
 8009376:	021b      	lsls	r3, r3, #8
 8009378:	b21b      	sxth	r3, r3
 800937a:	4313      	orrs	r3, r2
 800937c:	b21b      	sxth	r3, r3
 800937e:	82fb      	strh	r3, [r7, #22]
	        uint16_t computed_crc = crc16_ccitt(&Buf[2], PAYLOAD_SIZE);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	3302      	adds	r3, #2
 8009384:	210c      	movs	r1, #12
 8009386:	4618      	mov	r0, r3
 8009388:	f7ff fee2 	bl	8009150 <crc16_ccitt>
 800938c:	4603      	mov	r3, r0
 800938e:	82bb      	strh	r3, [r7, #20]

	        if (received_crc == computed_crc) {
 8009390:	8afa      	ldrh	r2, [r7, #22]
 8009392:	8abb      	ldrh	r3, [r7, #20]
 8009394:	429a      	cmp	r2, r3
 8009396:	d135      	bne.n	8009404 <CDC_Receive_FS+0xc0>
	            VelocityPacket packet;
	            packet.vx = (int16_t)(Buf[6] | (Buf[7] << 8));
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	3306      	adds	r3, #6
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	b21a      	sxth	r2, r3
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3307      	adds	r3, #7
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	b21b      	sxth	r3, r3
 80093a8:	021b      	lsls	r3, r3, #8
 80093aa:	b21b      	sxth	r3, r3
 80093ac:	4313      	orrs	r3, r2
 80093ae:	b21b      	sxth	r3, r3
 80093b0:	81bb      	strh	r3, [r7, #12]
	            packet.vy = (int16_t)(Buf[8] | (Buf[9] << 8));
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3308      	adds	r3, #8
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	b21a      	sxth	r2, r3
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	3309      	adds	r3, #9
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	b21b      	sxth	r3, r3
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	b21b      	sxth	r3, r3
 80093c6:	4313      	orrs	r3, r2
 80093c8:	b21b      	sxth	r3, r3
 80093ca:	81fb      	strh	r3, [r7, #14]
	            packet.vw = (int16_t)(Buf[10] | (Buf[11] << 8));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	330a      	adds	r3, #10
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	b21a      	sxth	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	330b      	adds	r3, #11
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	b21b      	sxth	r3, r3
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	b21b      	sxth	r3, r3
 80093e0:	4313      	orrs	r3, r2
 80093e2:	b21b      	sxth	r3, r3
 80093e4:	823b      	strh	r3, [r7, #16]
	            packet.seq = Buf[12];
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	7b1b      	ldrb	r3, [r3, #12]
 80093ea:	74bb      	strb	r3, [r7, #18]
	            packet.payload_len = Buf[13];
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	7b5b      	ldrb	r3, [r3, #13]
 80093f0:	74fb      	strb	r3, [r7, #19]

	            process_velocity(packet.vx, packet.vy, packet.vw);
 80093f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80093f6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80093fa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80093fe:	4618      	mov	r0, r3
 8009400:	f7ff fee8 	bl	80091d4 <process_velocity>



	// Copy to your own buffer (make sure it fits)

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	4805      	ldr	r0, [pc, #20]	@ (800941c <CDC_Receive_FS+0xd8>)
 8009408:	f7fe fafe 	bl	8007a08 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800940c:	4803      	ldr	r0, [pc, #12]	@ (800941c <CDC_Receive_FS+0xd8>)
 800940e:	f7fe fb19 	bl	8007a44 <USBD_CDC_ReceivePacket>

	//	memcpy(usb_rx_buffer, Buf, *Len);
	//	usb_rx_buffer[*Len] = '\0';  // Null-terminate
	//	usb_data_ready = 1;

	return (USBD_OK);
 8009412:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8009414:	4618      	mov	r0, r3
 8009416:	3718      	adds	r7, #24
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	200007a4 	.word	0x200007a4

08009420 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8009432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009436:	4618      	mov	r0, r3
 8009438:	371c      	adds	r7, #28
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
	...

08009444 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009444:	b480      	push	{r7}
 8009446:	b083      	sub	sp, #12
 8009448:	af00      	add	r7, sp, #0
 800944a:	4603      	mov	r3, r0
 800944c:	6039      	str	r1, [r7, #0]
 800944e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2212      	movs	r2, #18
 8009454:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009456:	4b03      	ldr	r3, [pc, #12]	@ (8009464 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009458:	4618      	mov	r0, r3
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr
 8009464:	200000c8 	.word	0x200000c8

08009468 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	4603      	mov	r3, r0
 8009470:	6039      	str	r1, [r7, #0]
 8009472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2204      	movs	r2, #4
 8009478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800947a:	4b03      	ldr	r3, [pc, #12]	@ (8009488 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800947c:	4618      	mov	r0, r3
 800947e:	370c      	adds	r7, #12
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	200000dc 	.word	0x200000dc

0800948c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	6039      	str	r1, [r7, #0]
 8009496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009498:	79fb      	ldrb	r3, [r7, #7]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d105      	bne.n	80094aa <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	4907      	ldr	r1, [pc, #28]	@ (80094c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80094a2:	4808      	ldr	r0, [pc, #32]	@ (80094c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80094a4:	f7ff fd30 	bl	8008f08 <USBD_GetString>
 80094a8:	e004      	b.n	80094b4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094aa:	683a      	ldr	r2, [r7, #0]
 80094ac:	4904      	ldr	r1, [pc, #16]	@ (80094c0 <USBD_FS_ProductStrDescriptor+0x34>)
 80094ae:	4805      	ldr	r0, [pc, #20]	@ (80094c4 <USBD_FS_ProductStrDescriptor+0x38>)
 80094b0:	f7ff fd2a 	bl	8008f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 80094b4:	4b02      	ldr	r3, [pc, #8]	@ (80094c0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3708      	adds	r7, #8
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	20001a8c 	.word	0x20001a8c
 80094c4:	0800c9c8 	.word	0x0800c9c8

080094c8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	4603      	mov	r3, r0
 80094d0:	6039      	str	r1, [r7, #0]
 80094d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	4904      	ldr	r1, [pc, #16]	@ (80094e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80094d8:	4804      	ldr	r0, [pc, #16]	@ (80094ec <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80094da:	f7ff fd15 	bl	8008f08 <USBD_GetString>
  return USBD_StrDesc;
 80094de:	4b02      	ldr	r3, [pc, #8]	@ (80094e8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20001a8c 	.word	0x20001a8c
 80094ec:	0800c9e0 	.word	0x0800c9e0

080094f0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	4603      	mov	r3, r0
 80094f8:	6039      	str	r1, [r7, #0]
 80094fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	221a      	movs	r2, #26
 8009500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009502:	f000 f843 	bl	800958c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009506:	4b02      	ldr	r3, [pc, #8]	@ (8009510 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009508:	4618      	mov	r0, r3
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	200000e0 	.word	0x200000e0

08009514 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	4603      	mov	r3, r0
 800951c:	6039      	str	r1, [r7, #0]
 800951e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d105      	bne.n	8009532 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009526:	683a      	ldr	r2, [r7, #0]
 8009528:	4907      	ldr	r1, [pc, #28]	@ (8009548 <USBD_FS_ConfigStrDescriptor+0x34>)
 800952a:	4808      	ldr	r0, [pc, #32]	@ (800954c <USBD_FS_ConfigStrDescriptor+0x38>)
 800952c:	f7ff fcec 	bl	8008f08 <USBD_GetString>
 8009530:	e004      	b.n	800953c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009532:	683a      	ldr	r2, [r7, #0]
 8009534:	4904      	ldr	r1, [pc, #16]	@ (8009548 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009536:	4805      	ldr	r0, [pc, #20]	@ (800954c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009538:	f7ff fce6 	bl	8008f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 800953c:	4b02      	ldr	r3, [pc, #8]	@ (8009548 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800953e:	4618      	mov	r0, r3
 8009540:	3708      	adds	r7, #8
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20001a8c 	.word	0x20001a8c
 800954c:	0800c9f4 	.word	0x0800c9f4

08009550 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	4603      	mov	r3, r0
 8009558:	6039      	str	r1, [r7, #0]
 800955a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800955c:	79fb      	ldrb	r3, [r7, #7]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d105      	bne.n	800956e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009562:	683a      	ldr	r2, [r7, #0]
 8009564:	4907      	ldr	r1, [pc, #28]	@ (8009584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009566:	4808      	ldr	r0, [pc, #32]	@ (8009588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009568:	f7ff fcce 	bl	8008f08 <USBD_GetString>
 800956c:	e004      	b.n	8009578 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800956e:	683a      	ldr	r2, [r7, #0]
 8009570:	4904      	ldr	r1, [pc, #16]	@ (8009584 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009572:	4805      	ldr	r0, [pc, #20]	@ (8009588 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009574:	f7ff fcc8 	bl	8008f08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009578:	4b02      	ldr	r3, [pc, #8]	@ (8009584 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800957a:	4618      	mov	r0, r3
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	20001a8c 	.word	0x20001a8c
 8009588:	0800ca00 	.word	0x0800ca00

0800958c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009592:	4b0f      	ldr	r3, [pc, #60]	@ (80095d0 <Get_SerialNum+0x44>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009598:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <Get_SerialNum+0x48>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800959e:	4b0e      	ldr	r3, [pc, #56]	@ (80095d8 <Get_SerialNum+0x4c>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	4413      	add	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d009      	beq.n	80095c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80095b2:	2208      	movs	r2, #8
 80095b4:	4909      	ldr	r1, [pc, #36]	@ (80095dc <Get_SerialNum+0x50>)
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f814 	bl	80095e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80095bc:	2204      	movs	r2, #4
 80095be:	4908      	ldr	r1, [pc, #32]	@ (80095e0 <Get_SerialNum+0x54>)
 80095c0:	68b8      	ldr	r0, [r7, #8]
 80095c2:	f000 f80f 	bl	80095e4 <IntToUnicode>
  }
}
 80095c6:	bf00      	nop
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	1fff7a10 	.word	0x1fff7a10
 80095d4:	1fff7a14 	.word	0x1fff7a14
 80095d8:	1fff7a18 	.word	0x1fff7a18
 80095dc:	200000e2 	.word	0x200000e2
 80095e0:	200000f2 	.word	0x200000f2

080095e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b087      	sub	sp, #28
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80095f2:	2300      	movs	r3, #0
 80095f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80095f6:	2300      	movs	r3, #0
 80095f8:	75fb      	strb	r3, [r7, #23]
 80095fa:	e027      	b.n	800964c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	0f1b      	lsrs	r3, r3, #28
 8009600:	2b09      	cmp	r3, #9
 8009602:	d80b      	bhi.n	800961c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	0f1b      	lsrs	r3, r3, #28
 8009608:	b2da      	uxtb	r2, r3
 800960a:	7dfb      	ldrb	r3, [r7, #23]
 800960c:	005b      	lsls	r3, r3, #1
 800960e:	4619      	mov	r1, r3
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	440b      	add	r3, r1
 8009614:	3230      	adds	r2, #48	@ 0x30
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	e00a      	b.n	8009632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	0f1b      	lsrs	r3, r3, #28
 8009620:	b2da      	uxtb	r2, r3
 8009622:	7dfb      	ldrb	r3, [r7, #23]
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	4619      	mov	r1, r3
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	440b      	add	r3, r1
 800962c:	3237      	adds	r2, #55	@ 0x37
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	011b      	lsls	r3, r3, #4
 8009636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009638:	7dfb      	ldrb	r3, [r7, #23]
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	3301      	adds	r3, #1
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	4413      	add	r3, r2
 8009642:	2200      	movs	r2, #0
 8009644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009646:	7dfb      	ldrb	r3, [r7, #23]
 8009648:	3301      	adds	r3, #1
 800964a:	75fb      	strb	r3, [r7, #23]
 800964c:	7dfa      	ldrb	r2, [r7, #23]
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	429a      	cmp	r2, r3
 8009652:	d3d3      	bcc.n	80095fc <IntToUnicode+0x18>
  }
}
 8009654:	bf00      	nop
 8009656:	bf00      	nop
 8009658:	371c      	adds	r7, #28
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr
	...

08009664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	@ 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800966c:	f107 0314 	add.w	r3, r7, #20
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	605a      	str	r2, [r3, #4]
 8009676:	609a      	str	r2, [r3, #8]
 8009678:	60da      	str	r2, [r3, #12]
 800967a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009684:	d13a      	bne.n	80096fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009686:	2300      	movs	r3, #0
 8009688:	613b      	str	r3, [r7, #16]
 800968a:	4b1e      	ldr	r3, [pc, #120]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 800968c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968e:	4a1d      	ldr	r2, [pc, #116]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 8009690:	f043 0301 	orr.w	r3, r3, #1
 8009694:	6313      	str	r3, [r2, #48]	@ 0x30
 8009696:	4b1b      	ldr	r3, [pc, #108]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 8009698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	613b      	str	r3, [r7, #16]
 80096a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80096a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096a8:	2302      	movs	r3, #2
 80096aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096b0:	2303      	movs	r3, #3
 80096b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80096b4:	230a      	movs	r3, #10
 80096b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b8:	f107 0314 	add.w	r3, r7, #20
 80096bc:	4619      	mov	r1, r3
 80096be:	4812      	ldr	r0, [pc, #72]	@ (8009708 <HAL_PCD_MspInit+0xa4>)
 80096c0:	f7f9 f854 	bl	800276c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80096c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 80096c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 80096ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80096d0:	2300      	movs	r3, #0
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 80096d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d8:	4a0a      	ldr	r2, [pc, #40]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 80096da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80096de:	6453      	str	r3, [r2, #68]	@ 0x44
 80096e0:	4b08      	ldr	r3, [pc, #32]	@ (8009704 <HAL_PCD_MspInit+0xa0>)
 80096e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	2043      	movs	r0, #67	@ 0x43
 80096f2:	f7f9 f804 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80096f6:	2043      	movs	r0, #67	@ 0x43
 80096f8:	f7f9 f81d 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80096fc:	bf00      	nop
 80096fe:	3728      	adds	r7, #40	@ 0x28
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	40023800 	.word	0x40023800
 8009708:	40020000 	.word	0x40020000

0800970c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009720:	4619      	mov	r1, r3
 8009722:	4610      	mov	r0, r2
 8009724:	f7fe fa77 	bl	8007c16 <USBD_LL_SetupStage>
}
 8009728:	bf00      	nop
 800972a:	3708      	adds	r7, #8
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b082      	sub	sp, #8
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	460b      	mov	r3, r1
 800973a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009742:	78fa      	ldrb	r2, [r7, #3]
 8009744:	6879      	ldr	r1, [r7, #4]
 8009746:	4613      	mov	r3, r2
 8009748:	00db      	lsls	r3, r3, #3
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	4619      	mov	r1, r3
 800975a:	f7fe fab1 	bl	8007cc0 <USBD_LL_DataOutStage>
}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	460b      	mov	r3, r1
 8009770:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009778:	78fa      	ldrb	r2, [r7, #3]
 800977a:	6879      	ldr	r1, [r7, #4]
 800977c:	4613      	mov	r3, r2
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	4413      	add	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	3320      	adds	r3, #32
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	4619      	mov	r1, r3
 800978e:	f7fe fb53 	bl	8007e38 <USBD_LL_DataInStage>
}
 8009792:	bf00      	nop
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fe fc97 	bl	80080dc <USBD_LL_SOF>
}
 80097ae:	bf00      	nop
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b084      	sub	sp, #16
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80097be:	2301      	movs	r3, #1
 80097c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	79db      	ldrb	r3, [r3, #7]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d102      	bne.n	80097d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80097ca:	2300      	movs	r3, #0
 80097cc:	73fb      	strb	r3, [r7, #15]
 80097ce:	e008      	b.n	80097e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	79db      	ldrb	r3, [r3, #7]
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d102      	bne.n	80097de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80097d8:	2301      	movs	r3, #1
 80097da:	73fb      	strb	r3, [r7, #15]
 80097dc:	e001      	b.n	80097e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80097de:	f7f7 fe9f 	bl	8001520 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097e8:	7bfa      	ldrb	r2, [r7, #15]
 80097ea:	4611      	mov	r1, r2
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7fe fc31 	bl	8008054 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fe fbd8 	bl	8007fae <USBD_LL_Reset>
}
 80097fe:	bf00      	nop
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009808 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe fc2c 	bl	8008074 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	6812      	ldr	r2, [r2, #0]
 800982a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800982e:	f043 0301 	orr.w	r3, r3, #1
 8009832:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	7adb      	ldrb	r3, [r3, #11]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d005      	beq.n	8009848 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800983c:	4b04      	ldr	r3, [pc, #16]	@ (8009850 <HAL_PCD_SuspendCallback+0x48>)
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	4a03      	ldr	r2, [pc, #12]	@ (8009850 <HAL_PCD_SuspendCallback+0x48>)
 8009842:	f043 0306 	orr.w	r3, r3, #6
 8009846:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	e000ed00 	.word	0xe000ed00

08009854 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009862:	4618      	mov	r0, r3
 8009864:	f7fe fc22 	bl	80080ac <USBD_LL_Resume>
}
 8009868:	bf00      	nop
 800986a:	3708      	adds	r7, #8
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}

08009870 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	460b      	mov	r3, r1
 800987a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009882:	78fa      	ldrb	r2, [r7, #3]
 8009884:	4611      	mov	r1, r2
 8009886:	4618      	mov	r0, r3
 8009888:	f7fe fc7a 	bl	8008180 <USBD_LL_IsoOUTIncomplete>
}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	460b      	mov	r3, r1
 800989e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098a6:	78fa      	ldrb	r2, [r7, #3]
 80098a8:	4611      	mov	r1, r2
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7fe fc36 	bl	800811c <USBD_LL_IsoINIncomplete>
}
 80098b0:	bf00      	nop
 80098b2:	3708      	adds	r7, #8
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098c6:	4618      	mov	r0, r3
 80098c8:	f7fe fc8c 	bl	80081e4 <USBD_LL_DevConnected>
}
 80098cc:	bf00      	nop
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fe fc89 	bl	80081fa <USBD_LL_DevDisconnected>
}
 80098e8:	bf00      	nop
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d13c      	bne.n	800997a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009900:	4a20      	ldr	r2, [pc, #128]	@ (8009984 <USBD_LL_Init+0x94>)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a1e      	ldr	r2, [pc, #120]	@ (8009984 <USBD_LL_Init+0x94>)
 800990c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009910:	4b1c      	ldr	r3, [pc, #112]	@ (8009984 <USBD_LL_Init+0x94>)
 8009912:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009916:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009918:	4b1a      	ldr	r3, [pc, #104]	@ (8009984 <USBD_LL_Init+0x94>)
 800991a:	2204      	movs	r2, #4
 800991c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800991e:	4b19      	ldr	r3, [pc, #100]	@ (8009984 <USBD_LL_Init+0x94>)
 8009920:	2202      	movs	r2, #2
 8009922:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009924:	4b17      	ldr	r3, [pc, #92]	@ (8009984 <USBD_LL_Init+0x94>)
 8009926:	2200      	movs	r2, #0
 8009928:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800992a:	4b16      	ldr	r3, [pc, #88]	@ (8009984 <USBD_LL_Init+0x94>)
 800992c:	2202      	movs	r2, #2
 800992e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009930:	4b14      	ldr	r3, [pc, #80]	@ (8009984 <USBD_LL_Init+0x94>)
 8009932:	2200      	movs	r2, #0
 8009934:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009936:	4b13      	ldr	r3, [pc, #76]	@ (8009984 <USBD_LL_Init+0x94>)
 8009938:	2200      	movs	r2, #0
 800993a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800993c:	4b11      	ldr	r3, [pc, #68]	@ (8009984 <USBD_LL_Init+0x94>)
 800993e:	2200      	movs	r2, #0
 8009940:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009942:	4b10      	ldr	r3, [pc, #64]	@ (8009984 <USBD_LL_Init+0x94>)
 8009944:	2200      	movs	r2, #0
 8009946:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009948:	4b0e      	ldr	r3, [pc, #56]	@ (8009984 <USBD_LL_Init+0x94>)
 800994a:	2200      	movs	r2, #0
 800994c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800994e:	480d      	ldr	r0, [pc, #52]	@ (8009984 <USBD_LL_Init+0x94>)
 8009950:	f7fa f9fa 	bl	8003d48 <HAL_PCD_Init>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800995a:	f7f7 fde1 	bl	8001520 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800995e:	2180      	movs	r1, #128	@ 0x80
 8009960:	4808      	ldr	r0, [pc, #32]	@ (8009984 <USBD_LL_Init+0x94>)
 8009962:	f7fb fc26 	bl	80051b2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009966:	2240      	movs	r2, #64	@ 0x40
 8009968:	2100      	movs	r1, #0
 800996a:	4806      	ldr	r0, [pc, #24]	@ (8009984 <USBD_LL_Init+0x94>)
 800996c:	f7fb fbda 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009970:	2280      	movs	r2, #128	@ 0x80
 8009972:	2101      	movs	r1, #1
 8009974:	4803      	ldr	r0, [pc, #12]	@ (8009984 <USBD_LL_Init+0x94>)
 8009976:	f7fb fbd5 	bl	8005124 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20001c8c 	.word	0x20001c8c

08009988 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fa fae1 	bl	8003f66 <HAL_PCD_Start>
 80099a4:	4603      	mov	r3, r0
 80099a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099a8:	7bfb      	ldrb	r3, [r7, #15]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f000 f942 	bl	8009c34 <USBD_Get_USB_Status>
 80099b0:	4603      	mov	r3, r0
 80099b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3710      	adds	r7, #16
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}

080099be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80099be:	b580      	push	{r7, lr}
 80099c0:	b084      	sub	sp, #16
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	461a      	mov	r2, r3
 80099cc:	4603      	mov	r3, r0
 80099ce:	70fb      	strb	r3, [r7, #3]
 80099d0:	460b      	mov	r3, r1
 80099d2:	70bb      	strb	r3, [r7, #2]
 80099d4:	4613      	mov	r3, r2
 80099d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099e6:	78bb      	ldrb	r3, [r7, #2]
 80099e8:	883a      	ldrh	r2, [r7, #0]
 80099ea:	78f9      	ldrb	r1, [r7, #3]
 80099ec:	f7fa ffb5 	bl	800495a <HAL_PCD_EP_Open>
 80099f0:	4603      	mov	r3, r0
 80099f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 f91c 	bl	8009c34 <USBD_Get_USB_Status>
 80099fc:	4603      	mov	r3, r0
 80099fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a00:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a16:	2300      	movs	r3, #0
 8009a18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a24:	78fa      	ldrb	r2, [r7, #3]
 8009a26:	4611      	mov	r1, r2
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fb f800 	bl	8004a2e <HAL_PCD_EP_Close>
 8009a2e:	4603      	mov	r3, r0
 8009a30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 f8fd 	bl	8009c34 <USBD_Get_USB_Status>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a54:	2300      	movs	r3, #0
 8009a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a62:	78fa      	ldrb	r2, [r7, #3]
 8009a64:	4611      	mov	r1, r2
 8009a66:	4618      	mov	r0, r3
 8009a68:	f7fb f8b8 	bl	8004bdc <HAL_PCD_EP_SetStall>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	4618      	mov	r0, r3
 8009a74:	f000 f8de 	bl	8009c34 <USBD_Get_USB_Status>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b084      	sub	sp, #16
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
 8009a8e:	460b      	mov	r3, r1
 8009a90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a92:	2300      	movs	r3, #0
 8009a94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009aa0:	78fa      	ldrb	r2, [r7, #3]
 8009aa2:	4611      	mov	r1, r2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fb f8fc 	bl	8004ca2 <HAL_PCD_EP_ClrStall>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 f8bf 	bl	8009c34 <USBD_Get_USB_Status>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3710      	adds	r7, #16
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	460b      	mov	r3, r1
 8009ace:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ad6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	da0b      	bge.n	8009af8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009ae6:	68f9      	ldr	r1, [r7, #12]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	00db      	lsls	r3, r3, #3
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	440b      	add	r3, r1
 8009af2:	3316      	adds	r3, #22
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	e00b      	b.n	8009b10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	4613      	mov	r3, r2
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	440b      	add	r3, r1
 8009b0a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009b0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	460b      	mov	r3, r1
 8009b26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b36:	78fa      	ldrb	r2, [r7, #3]
 8009b38:	4611      	mov	r1, r2
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fa fee9 	bl	8004912 <HAL_PCD_SetAddress>
 8009b40:	4603      	mov	r3, r0
 8009b42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f000 f874 	bl	8009c34 <USBD_Get_USB_Status>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b50:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3710      	adds	r7, #16
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b086      	sub	sp, #24
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	60f8      	str	r0, [r7, #12]
 8009b62:	607a      	str	r2, [r7, #4]
 8009b64:	603b      	str	r3, [r7, #0]
 8009b66:	460b      	mov	r3, r1
 8009b68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b78:	7af9      	ldrb	r1, [r7, #11]
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	f7fa fff3 	bl	8004b68 <HAL_PCD_EP_Transmit>
 8009b82:	4603      	mov	r3, r0
 8009b84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 f853 	bl	8009c34 <USBD_Get_USB_Status>
 8009b8e:	4603      	mov	r3, r0
 8009b90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009b92:	7dbb      	ldrb	r3, [r7, #22]
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3718      	adds	r7, #24
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bba:	7af9      	ldrb	r1, [r7, #11]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	f7fa ff7f 	bl	8004ac2 <HAL_PCD_EP_Receive>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f832 	bl	8009c34 <USBD_Get_USB_Status>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bd4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b082      	sub	sp, #8
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fa ff9f 	bl	8004b38 <HAL_PCD_EP_GetRxCount>
 8009bfa:	4603      	mov	r3, r0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c04:	b480      	push	{r7}
 8009c06:	b083      	sub	sp, #12
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c0c:	4b03      	ldr	r3, [pc, #12]	@ (8009c1c <USBD_static_malloc+0x18>)
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	370c      	adds	r7, #12
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	20002170 	.word	0x20002170

08009c20 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]

}
 8009c28:	bf00      	nop
 8009c2a:	370c      	adds	r7, #12
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c32:	4770      	bx	lr

08009c34 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b085      	sub	sp, #20
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d817      	bhi.n	8009c78 <USBD_Get_USB_Status+0x44>
 8009c48:	a201      	add	r2, pc, #4	@ (adr r2, 8009c50 <USBD_Get_USB_Status+0x1c>)
 8009c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4e:	bf00      	nop
 8009c50:	08009c61 	.word	0x08009c61
 8009c54:	08009c67 	.word	0x08009c67
 8009c58:	08009c6d 	.word	0x08009c6d
 8009c5c:	08009c73 	.word	0x08009c73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	73fb      	strb	r3, [r7, #15]
    break;
 8009c64:	e00b      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009c66:	2303      	movs	r3, #3
 8009c68:	73fb      	strb	r3, [r7, #15]
    break;
 8009c6a:	e008      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8009c70:	e005      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009c72:	2303      	movs	r3, #3
 8009c74:	73fb      	strb	r3, [r7, #15]
    break;
 8009c76:	e002      	b.n	8009c7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8009c7c:	bf00      	nop
  }
  return usb_status;
 8009c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <__cvt>:
 8009c8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c90:	ec57 6b10 	vmov	r6, r7, d0
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	460c      	mov	r4, r1
 8009c98:	4619      	mov	r1, r3
 8009c9a:	463b      	mov	r3, r7
 8009c9c:	bfbb      	ittet	lt
 8009c9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ca2:	461f      	movlt	r7, r3
 8009ca4:	2300      	movge	r3, #0
 8009ca6:	232d      	movlt	r3, #45	@ 0x2d
 8009ca8:	700b      	strb	r3, [r1, #0]
 8009caa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009cac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009cb0:	4691      	mov	r9, r2
 8009cb2:	f023 0820 	bic.w	r8, r3, #32
 8009cb6:	bfbc      	itt	lt
 8009cb8:	4632      	movlt	r2, r6
 8009cba:	4616      	movlt	r6, r2
 8009cbc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009cc0:	d005      	beq.n	8009cce <__cvt+0x42>
 8009cc2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009cc6:	d100      	bne.n	8009cca <__cvt+0x3e>
 8009cc8:	3401      	adds	r4, #1
 8009cca:	2102      	movs	r1, #2
 8009ccc:	e000      	b.n	8009cd0 <__cvt+0x44>
 8009cce:	2103      	movs	r1, #3
 8009cd0:	ab03      	add	r3, sp, #12
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	ab02      	add	r3, sp, #8
 8009cd6:	9300      	str	r3, [sp, #0]
 8009cd8:	ec47 6b10 	vmov	d0, r6, r7
 8009cdc:	4653      	mov	r3, sl
 8009cde:	4622      	mov	r2, r4
 8009ce0:	f000 fe96 	bl	800aa10 <_dtoa_r>
 8009ce4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009ce8:	4605      	mov	r5, r0
 8009cea:	d119      	bne.n	8009d20 <__cvt+0x94>
 8009cec:	f019 0f01 	tst.w	r9, #1
 8009cf0:	d00e      	beq.n	8009d10 <__cvt+0x84>
 8009cf2:	eb00 0904 	add.w	r9, r0, r4
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	f7f6 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d02:	b108      	cbz	r0, 8009d08 <__cvt+0x7c>
 8009d04:	f8cd 900c 	str.w	r9, [sp, #12]
 8009d08:	2230      	movs	r2, #48	@ 0x30
 8009d0a:	9b03      	ldr	r3, [sp, #12]
 8009d0c:	454b      	cmp	r3, r9
 8009d0e:	d31e      	bcc.n	8009d4e <__cvt+0xc2>
 8009d10:	9b03      	ldr	r3, [sp, #12]
 8009d12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d14:	1b5b      	subs	r3, r3, r5
 8009d16:	4628      	mov	r0, r5
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	b004      	add	sp, #16
 8009d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009d24:	eb00 0904 	add.w	r9, r0, r4
 8009d28:	d1e5      	bne.n	8009cf6 <__cvt+0x6a>
 8009d2a:	7803      	ldrb	r3, [r0, #0]
 8009d2c:	2b30      	cmp	r3, #48	@ 0x30
 8009d2e:	d10a      	bne.n	8009d46 <__cvt+0xba>
 8009d30:	2200      	movs	r2, #0
 8009d32:	2300      	movs	r3, #0
 8009d34:	4630      	mov	r0, r6
 8009d36:	4639      	mov	r1, r7
 8009d38:	f7f6 fec6 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d3c:	b918      	cbnz	r0, 8009d46 <__cvt+0xba>
 8009d3e:	f1c4 0401 	rsb	r4, r4, #1
 8009d42:	f8ca 4000 	str.w	r4, [sl]
 8009d46:	f8da 3000 	ldr.w	r3, [sl]
 8009d4a:	4499      	add	r9, r3
 8009d4c:	e7d3      	b.n	8009cf6 <__cvt+0x6a>
 8009d4e:	1c59      	adds	r1, r3, #1
 8009d50:	9103      	str	r1, [sp, #12]
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	e7d9      	b.n	8009d0a <__cvt+0x7e>

08009d56 <__exponent>:
 8009d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d58:	2900      	cmp	r1, #0
 8009d5a:	bfba      	itte	lt
 8009d5c:	4249      	neglt	r1, r1
 8009d5e:	232d      	movlt	r3, #45	@ 0x2d
 8009d60:	232b      	movge	r3, #43	@ 0x2b
 8009d62:	2909      	cmp	r1, #9
 8009d64:	7002      	strb	r2, [r0, #0]
 8009d66:	7043      	strb	r3, [r0, #1]
 8009d68:	dd29      	ble.n	8009dbe <__exponent+0x68>
 8009d6a:	f10d 0307 	add.w	r3, sp, #7
 8009d6e:	461d      	mov	r5, r3
 8009d70:	270a      	movs	r7, #10
 8009d72:	461a      	mov	r2, r3
 8009d74:	fbb1 f6f7 	udiv	r6, r1, r7
 8009d78:	fb07 1416 	mls	r4, r7, r6, r1
 8009d7c:	3430      	adds	r4, #48	@ 0x30
 8009d7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009d82:	460c      	mov	r4, r1
 8009d84:	2c63      	cmp	r4, #99	@ 0x63
 8009d86:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	dcf1      	bgt.n	8009d72 <__exponent+0x1c>
 8009d8e:	3130      	adds	r1, #48	@ 0x30
 8009d90:	1e94      	subs	r4, r2, #2
 8009d92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009d96:	1c41      	adds	r1, r0, #1
 8009d98:	4623      	mov	r3, r4
 8009d9a:	42ab      	cmp	r3, r5
 8009d9c:	d30a      	bcc.n	8009db4 <__exponent+0x5e>
 8009d9e:	f10d 0309 	add.w	r3, sp, #9
 8009da2:	1a9b      	subs	r3, r3, r2
 8009da4:	42ac      	cmp	r4, r5
 8009da6:	bf88      	it	hi
 8009da8:	2300      	movhi	r3, #0
 8009daa:	3302      	adds	r3, #2
 8009dac:	4403      	add	r3, r0
 8009dae:	1a18      	subs	r0, r3, r0
 8009db0:	b003      	add	sp, #12
 8009db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009db8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009dbc:	e7ed      	b.n	8009d9a <__exponent+0x44>
 8009dbe:	2330      	movs	r3, #48	@ 0x30
 8009dc0:	3130      	adds	r1, #48	@ 0x30
 8009dc2:	7083      	strb	r3, [r0, #2]
 8009dc4:	70c1      	strb	r1, [r0, #3]
 8009dc6:	1d03      	adds	r3, r0, #4
 8009dc8:	e7f1      	b.n	8009dae <__exponent+0x58>
	...

08009dcc <_printf_float>:
 8009dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd0:	b08d      	sub	sp, #52	@ 0x34
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009dd8:	4616      	mov	r6, r2
 8009dda:	461f      	mov	r7, r3
 8009ddc:	4605      	mov	r5, r0
 8009dde:	f000 fd09 	bl	800a7f4 <_localeconv_r>
 8009de2:	6803      	ldr	r3, [r0, #0]
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f7f6 fa42 	bl	8000270 <strlen>
 8009dec:	2300      	movs	r3, #0
 8009dee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009df0:	f8d8 3000 	ldr.w	r3, [r8]
 8009df4:	9005      	str	r0, [sp, #20]
 8009df6:	3307      	adds	r3, #7
 8009df8:	f023 0307 	bic.w	r3, r3, #7
 8009dfc:	f103 0208 	add.w	r2, r3, #8
 8009e00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009e04:	f8d4 b000 	ldr.w	fp, [r4]
 8009e08:	f8c8 2000 	str.w	r2, [r8]
 8009e0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e10:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009e14:	9307      	str	r3, [sp, #28]
 8009e16:	f8cd 8018 	str.w	r8, [sp, #24]
 8009e1a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e22:	4b9c      	ldr	r3, [pc, #624]	@ (800a094 <_printf_float+0x2c8>)
 8009e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e28:	f7f6 fe80 	bl	8000b2c <__aeabi_dcmpun>
 8009e2c:	bb70      	cbnz	r0, 8009e8c <_printf_float+0xc0>
 8009e2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e32:	4b98      	ldr	r3, [pc, #608]	@ (800a094 <_printf_float+0x2c8>)
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e38:	f7f6 fe5a 	bl	8000af0 <__aeabi_dcmple>
 8009e3c:	bb30      	cbnz	r0, 8009e8c <_printf_float+0xc0>
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2300      	movs	r3, #0
 8009e42:	4640      	mov	r0, r8
 8009e44:	4649      	mov	r1, r9
 8009e46:	f7f6 fe49 	bl	8000adc <__aeabi_dcmplt>
 8009e4a:	b110      	cbz	r0, 8009e52 <_printf_float+0x86>
 8009e4c:	232d      	movs	r3, #45	@ 0x2d
 8009e4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e52:	4a91      	ldr	r2, [pc, #580]	@ (800a098 <_printf_float+0x2cc>)
 8009e54:	4b91      	ldr	r3, [pc, #580]	@ (800a09c <_printf_float+0x2d0>)
 8009e56:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009e5a:	bf8c      	ite	hi
 8009e5c:	4690      	movhi	r8, r2
 8009e5e:	4698      	movls	r8, r3
 8009e60:	2303      	movs	r3, #3
 8009e62:	6123      	str	r3, [r4, #16]
 8009e64:	f02b 0304 	bic.w	r3, fp, #4
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	f04f 0900 	mov.w	r9, #0
 8009e6e:	9700      	str	r7, [sp, #0]
 8009e70:	4633      	mov	r3, r6
 8009e72:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009e74:	4621      	mov	r1, r4
 8009e76:	4628      	mov	r0, r5
 8009e78:	f000 f9d2 	bl	800a220 <_printf_common>
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	f040 808d 	bne.w	8009f9c <_printf_float+0x1d0>
 8009e82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e86:	b00d      	add	sp, #52	@ 0x34
 8009e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e8c:	4642      	mov	r2, r8
 8009e8e:	464b      	mov	r3, r9
 8009e90:	4640      	mov	r0, r8
 8009e92:	4649      	mov	r1, r9
 8009e94:	f7f6 fe4a 	bl	8000b2c <__aeabi_dcmpun>
 8009e98:	b140      	cbz	r0, 8009eac <_printf_float+0xe0>
 8009e9a:	464b      	mov	r3, r9
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	bfbc      	itt	lt
 8009ea0:	232d      	movlt	r3, #45	@ 0x2d
 8009ea2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009ea6:	4a7e      	ldr	r2, [pc, #504]	@ (800a0a0 <_printf_float+0x2d4>)
 8009ea8:	4b7e      	ldr	r3, [pc, #504]	@ (800a0a4 <_printf_float+0x2d8>)
 8009eaa:	e7d4      	b.n	8009e56 <_printf_float+0x8a>
 8009eac:	6863      	ldr	r3, [r4, #4]
 8009eae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009eb2:	9206      	str	r2, [sp, #24]
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	d13b      	bne.n	8009f30 <_printf_float+0x164>
 8009eb8:	2306      	movs	r3, #6
 8009eba:	6063      	str	r3, [r4, #4]
 8009ebc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	6022      	str	r2, [r4, #0]
 8009ec4:	9303      	str	r3, [sp, #12]
 8009ec6:	ab0a      	add	r3, sp, #40	@ 0x28
 8009ec8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ecc:	ab09      	add	r3, sp, #36	@ 0x24
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	6861      	ldr	r1, [r4, #4]
 8009ed2:	ec49 8b10 	vmov	d0, r8, r9
 8009ed6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009eda:	4628      	mov	r0, r5
 8009edc:	f7ff fed6 	bl	8009c8c <__cvt>
 8009ee0:	9b06      	ldr	r3, [sp, #24]
 8009ee2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ee4:	2b47      	cmp	r3, #71	@ 0x47
 8009ee6:	4680      	mov	r8, r0
 8009ee8:	d129      	bne.n	8009f3e <_printf_float+0x172>
 8009eea:	1cc8      	adds	r0, r1, #3
 8009eec:	db02      	blt.n	8009ef4 <_printf_float+0x128>
 8009eee:	6863      	ldr	r3, [r4, #4]
 8009ef0:	4299      	cmp	r1, r3
 8009ef2:	dd41      	ble.n	8009f78 <_printf_float+0x1ac>
 8009ef4:	f1aa 0a02 	sub.w	sl, sl, #2
 8009ef8:	fa5f fa8a 	uxtb.w	sl, sl
 8009efc:	3901      	subs	r1, #1
 8009efe:	4652      	mov	r2, sl
 8009f00:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009f04:	9109      	str	r1, [sp, #36]	@ 0x24
 8009f06:	f7ff ff26 	bl	8009d56 <__exponent>
 8009f0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f0c:	1813      	adds	r3, r2, r0
 8009f0e:	2a01      	cmp	r2, #1
 8009f10:	4681      	mov	r9, r0
 8009f12:	6123      	str	r3, [r4, #16]
 8009f14:	dc02      	bgt.n	8009f1c <_printf_float+0x150>
 8009f16:	6822      	ldr	r2, [r4, #0]
 8009f18:	07d2      	lsls	r2, r2, #31
 8009f1a:	d501      	bpl.n	8009f20 <_printf_float+0x154>
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	6123      	str	r3, [r4, #16]
 8009f20:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d0a2      	beq.n	8009e6e <_printf_float+0xa2>
 8009f28:	232d      	movs	r3, #45	@ 0x2d
 8009f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f2e:	e79e      	b.n	8009e6e <_printf_float+0xa2>
 8009f30:	9a06      	ldr	r2, [sp, #24]
 8009f32:	2a47      	cmp	r2, #71	@ 0x47
 8009f34:	d1c2      	bne.n	8009ebc <_printf_float+0xf0>
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1c0      	bne.n	8009ebc <_printf_float+0xf0>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e7bd      	b.n	8009eba <_printf_float+0xee>
 8009f3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009f42:	d9db      	bls.n	8009efc <_printf_float+0x130>
 8009f44:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009f48:	d118      	bne.n	8009f7c <_printf_float+0x1b0>
 8009f4a:	2900      	cmp	r1, #0
 8009f4c:	6863      	ldr	r3, [r4, #4]
 8009f4e:	dd0b      	ble.n	8009f68 <_printf_float+0x19c>
 8009f50:	6121      	str	r1, [r4, #16]
 8009f52:	b913      	cbnz	r3, 8009f5a <_printf_float+0x18e>
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	07d0      	lsls	r0, r2, #31
 8009f58:	d502      	bpl.n	8009f60 <_printf_float+0x194>
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	440b      	add	r3, r1
 8009f5e:	6123      	str	r3, [r4, #16]
 8009f60:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009f62:	f04f 0900 	mov.w	r9, #0
 8009f66:	e7db      	b.n	8009f20 <_printf_float+0x154>
 8009f68:	b913      	cbnz	r3, 8009f70 <_printf_float+0x1a4>
 8009f6a:	6822      	ldr	r2, [r4, #0]
 8009f6c:	07d2      	lsls	r2, r2, #31
 8009f6e:	d501      	bpl.n	8009f74 <_printf_float+0x1a8>
 8009f70:	3302      	adds	r3, #2
 8009f72:	e7f4      	b.n	8009f5e <_printf_float+0x192>
 8009f74:	2301      	movs	r3, #1
 8009f76:	e7f2      	b.n	8009f5e <_printf_float+0x192>
 8009f78:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009f7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f7e:	4299      	cmp	r1, r3
 8009f80:	db05      	blt.n	8009f8e <_printf_float+0x1c2>
 8009f82:	6823      	ldr	r3, [r4, #0]
 8009f84:	6121      	str	r1, [r4, #16]
 8009f86:	07d8      	lsls	r0, r3, #31
 8009f88:	d5ea      	bpl.n	8009f60 <_printf_float+0x194>
 8009f8a:	1c4b      	adds	r3, r1, #1
 8009f8c:	e7e7      	b.n	8009f5e <_printf_float+0x192>
 8009f8e:	2900      	cmp	r1, #0
 8009f90:	bfd4      	ite	le
 8009f92:	f1c1 0202 	rsble	r2, r1, #2
 8009f96:	2201      	movgt	r2, #1
 8009f98:	4413      	add	r3, r2
 8009f9a:	e7e0      	b.n	8009f5e <_printf_float+0x192>
 8009f9c:	6823      	ldr	r3, [r4, #0]
 8009f9e:	055a      	lsls	r2, r3, #21
 8009fa0:	d407      	bmi.n	8009fb2 <_printf_float+0x1e6>
 8009fa2:	6923      	ldr	r3, [r4, #16]
 8009fa4:	4642      	mov	r2, r8
 8009fa6:	4631      	mov	r1, r6
 8009fa8:	4628      	mov	r0, r5
 8009faa:	47b8      	blx	r7
 8009fac:	3001      	adds	r0, #1
 8009fae:	d12b      	bne.n	800a008 <_printf_float+0x23c>
 8009fb0:	e767      	b.n	8009e82 <_printf_float+0xb6>
 8009fb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009fb6:	f240 80dd 	bls.w	800a174 <_printf_float+0x3a8>
 8009fba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	f7f6 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d033      	beq.n	800a032 <_printf_float+0x266>
 8009fca:	4a37      	ldr	r2, [pc, #220]	@ (800a0a8 <_printf_float+0x2dc>)
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	f43f af54 	beq.w	8009e82 <_printf_float+0xb6>
 8009fda:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009fde:	4543      	cmp	r3, r8
 8009fe0:	db02      	blt.n	8009fe8 <_printf_float+0x21c>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	07d8      	lsls	r0, r3, #31
 8009fe6:	d50f      	bpl.n	800a008 <_printf_float+0x23c>
 8009fe8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009fec:	4631      	mov	r1, r6
 8009fee:	4628      	mov	r0, r5
 8009ff0:	47b8      	blx	r7
 8009ff2:	3001      	adds	r0, #1
 8009ff4:	f43f af45 	beq.w	8009e82 <_printf_float+0xb6>
 8009ff8:	f04f 0900 	mov.w	r9, #0
 8009ffc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a000:	f104 0a1a 	add.w	sl, r4, #26
 800a004:	45c8      	cmp	r8, r9
 800a006:	dc09      	bgt.n	800a01c <_printf_float+0x250>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	079b      	lsls	r3, r3, #30
 800a00c:	f100 8103 	bmi.w	800a216 <_printf_float+0x44a>
 800a010:	68e0      	ldr	r0, [r4, #12]
 800a012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a014:	4298      	cmp	r0, r3
 800a016:	bfb8      	it	lt
 800a018:	4618      	movlt	r0, r3
 800a01a:	e734      	b.n	8009e86 <_printf_float+0xba>
 800a01c:	2301      	movs	r3, #1
 800a01e:	4652      	mov	r2, sl
 800a020:	4631      	mov	r1, r6
 800a022:	4628      	mov	r0, r5
 800a024:	47b8      	blx	r7
 800a026:	3001      	adds	r0, #1
 800a028:	f43f af2b 	beq.w	8009e82 <_printf_float+0xb6>
 800a02c:	f109 0901 	add.w	r9, r9, #1
 800a030:	e7e8      	b.n	800a004 <_printf_float+0x238>
 800a032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a034:	2b00      	cmp	r3, #0
 800a036:	dc39      	bgt.n	800a0ac <_printf_float+0x2e0>
 800a038:	4a1b      	ldr	r2, [pc, #108]	@ (800a0a8 <_printf_float+0x2dc>)
 800a03a:	2301      	movs	r3, #1
 800a03c:	4631      	mov	r1, r6
 800a03e:	4628      	mov	r0, r5
 800a040:	47b8      	blx	r7
 800a042:	3001      	adds	r0, #1
 800a044:	f43f af1d 	beq.w	8009e82 <_printf_float+0xb6>
 800a048:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a04c:	ea59 0303 	orrs.w	r3, r9, r3
 800a050:	d102      	bne.n	800a058 <_printf_float+0x28c>
 800a052:	6823      	ldr	r3, [r4, #0]
 800a054:	07d9      	lsls	r1, r3, #31
 800a056:	d5d7      	bpl.n	800a008 <_printf_float+0x23c>
 800a058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a05c:	4631      	mov	r1, r6
 800a05e:	4628      	mov	r0, r5
 800a060:	47b8      	blx	r7
 800a062:	3001      	adds	r0, #1
 800a064:	f43f af0d 	beq.w	8009e82 <_printf_float+0xb6>
 800a068:	f04f 0a00 	mov.w	sl, #0
 800a06c:	f104 0b1a 	add.w	fp, r4, #26
 800a070:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a072:	425b      	negs	r3, r3
 800a074:	4553      	cmp	r3, sl
 800a076:	dc01      	bgt.n	800a07c <_printf_float+0x2b0>
 800a078:	464b      	mov	r3, r9
 800a07a:	e793      	b.n	8009fa4 <_printf_float+0x1d8>
 800a07c:	2301      	movs	r3, #1
 800a07e:	465a      	mov	r2, fp
 800a080:	4631      	mov	r1, r6
 800a082:	4628      	mov	r0, r5
 800a084:	47b8      	blx	r7
 800a086:	3001      	adds	r0, #1
 800a088:	f43f aefb 	beq.w	8009e82 <_printf_float+0xb6>
 800a08c:	f10a 0a01 	add.w	sl, sl, #1
 800a090:	e7ee      	b.n	800a070 <_printf_float+0x2a4>
 800a092:	bf00      	nop
 800a094:	7fefffff 	.word	0x7fefffff
 800a098:	0800d1a4 	.word	0x0800d1a4
 800a09c:	0800d1a0 	.word	0x0800d1a0
 800a0a0:	0800d1ac 	.word	0x0800d1ac
 800a0a4:	0800d1a8 	.word	0x0800d1a8
 800a0a8:	0800d1b0 	.word	0x0800d1b0
 800a0ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a0b2:	4553      	cmp	r3, sl
 800a0b4:	bfa8      	it	ge
 800a0b6:	4653      	movge	r3, sl
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	4699      	mov	r9, r3
 800a0bc:	dc36      	bgt.n	800a12c <_printf_float+0x360>
 800a0be:	f04f 0b00 	mov.w	fp, #0
 800a0c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a0c6:	f104 021a 	add.w	r2, r4, #26
 800a0ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a0cc:	9306      	str	r3, [sp, #24]
 800a0ce:	eba3 0309 	sub.w	r3, r3, r9
 800a0d2:	455b      	cmp	r3, fp
 800a0d4:	dc31      	bgt.n	800a13a <_printf_float+0x36e>
 800a0d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0d8:	459a      	cmp	sl, r3
 800a0da:	dc3a      	bgt.n	800a152 <_printf_float+0x386>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07da      	lsls	r2, r3, #31
 800a0e0:	d437      	bmi.n	800a152 <_printf_float+0x386>
 800a0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e4:	ebaa 0903 	sub.w	r9, sl, r3
 800a0e8:	9b06      	ldr	r3, [sp, #24]
 800a0ea:	ebaa 0303 	sub.w	r3, sl, r3
 800a0ee:	4599      	cmp	r9, r3
 800a0f0:	bfa8      	it	ge
 800a0f2:	4699      	movge	r9, r3
 800a0f4:	f1b9 0f00 	cmp.w	r9, #0
 800a0f8:	dc33      	bgt.n	800a162 <_printf_float+0x396>
 800a0fa:	f04f 0800 	mov.w	r8, #0
 800a0fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a102:	f104 0b1a 	add.w	fp, r4, #26
 800a106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a108:	ebaa 0303 	sub.w	r3, sl, r3
 800a10c:	eba3 0309 	sub.w	r3, r3, r9
 800a110:	4543      	cmp	r3, r8
 800a112:	f77f af79 	ble.w	800a008 <_printf_float+0x23c>
 800a116:	2301      	movs	r3, #1
 800a118:	465a      	mov	r2, fp
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f aeae 	beq.w	8009e82 <_printf_float+0xb6>
 800a126:	f108 0801 	add.w	r8, r8, #1
 800a12a:	e7ec      	b.n	800a106 <_printf_float+0x33a>
 800a12c:	4642      	mov	r2, r8
 800a12e:	4631      	mov	r1, r6
 800a130:	4628      	mov	r0, r5
 800a132:	47b8      	blx	r7
 800a134:	3001      	adds	r0, #1
 800a136:	d1c2      	bne.n	800a0be <_printf_float+0x2f2>
 800a138:	e6a3      	b.n	8009e82 <_printf_float+0xb6>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4631      	mov	r1, r6
 800a13e:	4628      	mov	r0, r5
 800a140:	9206      	str	r2, [sp, #24]
 800a142:	47b8      	blx	r7
 800a144:	3001      	adds	r0, #1
 800a146:	f43f ae9c 	beq.w	8009e82 <_printf_float+0xb6>
 800a14a:	9a06      	ldr	r2, [sp, #24]
 800a14c:	f10b 0b01 	add.w	fp, fp, #1
 800a150:	e7bb      	b.n	800a0ca <_printf_float+0x2fe>
 800a152:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a156:	4631      	mov	r1, r6
 800a158:	4628      	mov	r0, r5
 800a15a:	47b8      	blx	r7
 800a15c:	3001      	adds	r0, #1
 800a15e:	d1c0      	bne.n	800a0e2 <_printf_float+0x316>
 800a160:	e68f      	b.n	8009e82 <_printf_float+0xb6>
 800a162:	9a06      	ldr	r2, [sp, #24]
 800a164:	464b      	mov	r3, r9
 800a166:	4442      	add	r2, r8
 800a168:	4631      	mov	r1, r6
 800a16a:	4628      	mov	r0, r5
 800a16c:	47b8      	blx	r7
 800a16e:	3001      	adds	r0, #1
 800a170:	d1c3      	bne.n	800a0fa <_printf_float+0x32e>
 800a172:	e686      	b.n	8009e82 <_printf_float+0xb6>
 800a174:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a178:	f1ba 0f01 	cmp.w	sl, #1
 800a17c:	dc01      	bgt.n	800a182 <_printf_float+0x3b6>
 800a17e:	07db      	lsls	r3, r3, #31
 800a180:	d536      	bpl.n	800a1f0 <_printf_float+0x424>
 800a182:	2301      	movs	r3, #1
 800a184:	4642      	mov	r2, r8
 800a186:	4631      	mov	r1, r6
 800a188:	4628      	mov	r0, r5
 800a18a:	47b8      	blx	r7
 800a18c:	3001      	adds	r0, #1
 800a18e:	f43f ae78 	beq.w	8009e82 <_printf_float+0xb6>
 800a192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a196:	4631      	mov	r1, r6
 800a198:	4628      	mov	r0, r5
 800a19a:	47b8      	blx	r7
 800a19c:	3001      	adds	r0, #1
 800a19e:	f43f ae70 	beq.w	8009e82 <_printf_float+0xb6>
 800a1a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a1ae:	f7f6 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b2:	b9c0      	cbnz	r0, 800a1e6 <_printf_float+0x41a>
 800a1b4:	4653      	mov	r3, sl
 800a1b6:	f108 0201 	add.w	r2, r8, #1
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4628      	mov	r0, r5
 800a1be:	47b8      	blx	r7
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d10c      	bne.n	800a1de <_printf_float+0x412>
 800a1c4:	e65d      	b.n	8009e82 <_printf_float+0xb6>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	465a      	mov	r2, fp
 800a1ca:	4631      	mov	r1, r6
 800a1cc:	4628      	mov	r0, r5
 800a1ce:	47b8      	blx	r7
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	f43f ae56 	beq.w	8009e82 <_printf_float+0xb6>
 800a1d6:	f108 0801 	add.w	r8, r8, #1
 800a1da:	45d0      	cmp	r8, sl
 800a1dc:	dbf3      	blt.n	800a1c6 <_printf_float+0x3fa>
 800a1de:	464b      	mov	r3, r9
 800a1e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a1e4:	e6df      	b.n	8009fa6 <_printf_float+0x1da>
 800a1e6:	f04f 0800 	mov.w	r8, #0
 800a1ea:	f104 0b1a 	add.w	fp, r4, #26
 800a1ee:	e7f4      	b.n	800a1da <_printf_float+0x40e>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	4642      	mov	r2, r8
 800a1f4:	e7e1      	b.n	800a1ba <_printf_float+0x3ee>
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	464a      	mov	r2, r9
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	4628      	mov	r0, r5
 800a1fe:	47b8      	blx	r7
 800a200:	3001      	adds	r0, #1
 800a202:	f43f ae3e 	beq.w	8009e82 <_printf_float+0xb6>
 800a206:	f108 0801 	add.w	r8, r8, #1
 800a20a:	68e3      	ldr	r3, [r4, #12]
 800a20c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a20e:	1a5b      	subs	r3, r3, r1
 800a210:	4543      	cmp	r3, r8
 800a212:	dcf0      	bgt.n	800a1f6 <_printf_float+0x42a>
 800a214:	e6fc      	b.n	800a010 <_printf_float+0x244>
 800a216:	f04f 0800 	mov.w	r8, #0
 800a21a:	f104 0919 	add.w	r9, r4, #25
 800a21e:	e7f4      	b.n	800a20a <_printf_float+0x43e>

0800a220 <_printf_common>:
 800a220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	4616      	mov	r6, r2
 800a226:	4698      	mov	r8, r3
 800a228:	688a      	ldr	r2, [r1, #8]
 800a22a:	690b      	ldr	r3, [r1, #16]
 800a22c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a230:	4293      	cmp	r3, r2
 800a232:	bfb8      	it	lt
 800a234:	4613      	movlt	r3, r2
 800a236:	6033      	str	r3, [r6, #0]
 800a238:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a23c:	4607      	mov	r7, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	b10a      	cbz	r2, 800a246 <_printf_common+0x26>
 800a242:	3301      	adds	r3, #1
 800a244:	6033      	str	r3, [r6, #0]
 800a246:	6823      	ldr	r3, [r4, #0]
 800a248:	0699      	lsls	r1, r3, #26
 800a24a:	bf42      	ittt	mi
 800a24c:	6833      	ldrmi	r3, [r6, #0]
 800a24e:	3302      	addmi	r3, #2
 800a250:	6033      	strmi	r3, [r6, #0]
 800a252:	6825      	ldr	r5, [r4, #0]
 800a254:	f015 0506 	ands.w	r5, r5, #6
 800a258:	d106      	bne.n	800a268 <_printf_common+0x48>
 800a25a:	f104 0a19 	add.w	sl, r4, #25
 800a25e:	68e3      	ldr	r3, [r4, #12]
 800a260:	6832      	ldr	r2, [r6, #0]
 800a262:	1a9b      	subs	r3, r3, r2
 800a264:	42ab      	cmp	r3, r5
 800a266:	dc26      	bgt.n	800a2b6 <_printf_common+0x96>
 800a268:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a26c:	6822      	ldr	r2, [r4, #0]
 800a26e:	3b00      	subs	r3, #0
 800a270:	bf18      	it	ne
 800a272:	2301      	movne	r3, #1
 800a274:	0692      	lsls	r2, r2, #26
 800a276:	d42b      	bmi.n	800a2d0 <_printf_common+0xb0>
 800a278:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a27c:	4641      	mov	r1, r8
 800a27e:	4638      	mov	r0, r7
 800a280:	47c8      	blx	r9
 800a282:	3001      	adds	r0, #1
 800a284:	d01e      	beq.n	800a2c4 <_printf_common+0xa4>
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	6922      	ldr	r2, [r4, #16]
 800a28a:	f003 0306 	and.w	r3, r3, #6
 800a28e:	2b04      	cmp	r3, #4
 800a290:	bf02      	ittt	eq
 800a292:	68e5      	ldreq	r5, [r4, #12]
 800a294:	6833      	ldreq	r3, [r6, #0]
 800a296:	1aed      	subeq	r5, r5, r3
 800a298:	68a3      	ldr	r3, [r4, #8]
 800a29a:	bf0c      	ite	eq
 800a29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2a0:	2500      	movne	r5, #0
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	bfc4      	itt	gt
 800a2a6:	1a9b      	subgt	r3, r3, r2
 800a2a8:	18ed      	addgt	r5, r5, r3
 800a2aa:	2600      	movs	r6, #0
 800a2ac:	341a      	adds	r4, #26
 800a2ae:	42b5      	cmp	r5, r6
 800a2b0:	d11a      	bne.n	800a2e8 <_printf_common+0xc8>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	e008      	b.n	800a2c8 <_printf_common+0xa8>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	4652      	mov	r2, sl
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	4638      	mov	r0, r7
 800a2be:	47c8      	blx	r9
 800a2c0:	3001      	adds	r0, #1
 800a2c2:	d103      	bne.n	800a2cc <_printf_common+0xac>
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	e7c6      	b.n	800a25e <_printf_common+0x3e>
 800a2d0:	18e1      	adds	r1, r4, r3
 800a2d2:	1c5a      	adds	r2, r3, #1
 800a2d4:	2030      	movs	r0, #48	@ 0x30
 800a2d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a2da:	4422      	add	r2, r4
 800a2dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a2e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a2e4:	3302      	adds	r3, #2
 800a2e6:	e7c7      	b.n	800a278 <_printf_common+0x58>
 800a2e8:	2301      	movs	r3, #1
 800a2ea:	4622      	mov	r2, r4
 800a2ec:	4641      	mov	r1, r8
 800a2ee:	4638      	mov	r0, r7
 800a2f0:	47c8      	blx	r9
 800a2f2:	3001      	adds	r0, #1
 800a2f4:	d0e6      	beq.n	800a2c4 <_printf_common+0xa4>
 800a2f6:	3601      	adds	r6, #1
 800a2f8:	e7d9      	b.n	800a2ae <_printf_common+0x8e>
	...

0800a2fc <_printf_i>:
 800a2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a300:	7e0f      	ldrb	r7, [r1, #24]
 800a302:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a304:	2f78      	cmp	r7, #120	@ 0x78
 800a306:	4691      	mov	r9, r2
 800a308:	4680      	mov	r8, r0
 800a30a:	460c      	mov	r4, r1
 800a30c:	469a      	mov	sl, r3
 800a30e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a312:	d807      	bhi.n	800a324 <_printf_i+0x28>
 800a314:	2f62      	cmp	r7, #98	@ 0x62
 800a316:	d80a      	bhi.n	800a32e <_printf_i+0x32>
 800a318:	2f00      	cmp	r7, #0
 800a31a:	f000 80d1 	beq.w	800a4c0 <_printf_i+0x1c4>
 800a31e:	2f58      	cmp	r7, #88	@ 0x58
 800a320:	f000 80b8 	beq.w	800a494 <_printf_i+0x198>
 800a324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a328:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a32c:	e03a      	b.n	800a3a4 <_printf_i+0xa8>
 800a32e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a332:	2b15      	cmp	r3, #21
 800a334:	d8f6      	bhi.n	800a324 <_printf_i+0x28>
 800a336:	a101      	add	r1, pc, #4	@ (adr r1, 800a33c <_printf_i+0x40>)
 800a338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a33c:	0800a395 	.word	0x0800a395
 800a340:	0800a3a9 	.word	0x0800a3a9
 800a344:	0800a325 	.word	0x0800a325
 800a348:	0800a325 	.word	0x0800a325
 800a34c:	0800a325 	.word	0x0800a325
 800a350:	0800a325 	.word	0x0800a325
 800a354:	0800a3a9 	.word	0x0800a3a9
 800a358:	0800a325 	.word	0x0800a325
 800a35c:	0800a325 	.word	0x0800a325
 800a360:	0800a325 	.word	0x0800a325
 800a364:	0800a325 	.word	0x0800a325
 800a368:	0800a4a7 	.word	0x0800a4a7
 800a36c:	0800a3d3 	.word	0x0800a3d3
 800a370:	0800a461 	.word	0x0800a461
 800a374:	0800a325 	.word	0x0800a325
 800a378:	0800a325 	.word	0x0800a325
 800a37c:	0800a4c9 	.word	0x0800a4c9
 800a380:	0800a325 	.word	0x0800a325
 800a384:	0800a3d3 	.word	0x0800a3d3
 800a388:	0800a325 	.word	0x0800a325
 800a38c:	0800a325 	.word	0x0800a325
 800a390:	0800a469 	.word	0x0800a469
 800a394:	6833      	ldr	r3, [r6, #0]
 800a396:	1d1a      	adds	r2, r3, #4
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	6032      	str	r2, [r6, #0]
 800a39c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a3a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e09c      	b.n	800a4e2 <_printf_i+0x1e6>
 800a3a8:	6833      	ldr	r3, [r6, #0]
 800a3aa:	6820      	ldr	r0, [r4, #0]
 800a3ac:	1d19      	adds	r1, r3, #4
 800a3ae:	6031      	str	r1, [r6, #0]
 800a3b0:	0606      	lsls	r6, r0, #24
 800a3b2:	d501      	bpl.n	800a3b8 <_printf_i+0xbc>
 800a3b4:	681d      	ldr	r5, [r3, #0]
 800a3b6:	e003      	b.n	800a3c0 <_printf_i+0xc4>
 800a3b8:	0645      	lsls	r5, r0, #25
 800a3ba:	d5fb      	bpl.n	800a3b4 <_printf_i+0xb8>
 800a3bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a3c0:	2d00      	cmp	r5, #0
 800a3c2:	da03      	bge.n	800a3cc <_printf_i+0xd0>
 800a3c4:	232d      	movs	r3, #45	@ 0x2d
 800a3c6:	426d      	negs	r5, r5
 800a3c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a3cc:	4858      	ldr	r0, [pc, #352]	@ (800a530 <_printf_i+0x234>)
 800a3ce:	230a      	movs	r3, #10
 800a3d0:	e011      	b.n	800a3f6 <_printf_i+0xfa>
 800a3d2:	6821      	ldr	r1, [r4, #0]
 800a3d4:	6833      	ldr	r3, [r6, #0]
 800a3d6:	0608      	lsls	r0, r1, #24
 800a3d8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a3dc:	d402      	bmi.n	800a3e4 <_printf_i+0xe8>
 800a3de:	0649      	lsls	r1, r1, #25
 800a3e0:	bf48      	it	mi
 800a3e2:	b2ad      	uxthmi	r5, r5
 800a3e4:	2f6f      	cmp	r7, #111	@ 0x6f
 800a3e6:	4852      	ldr	r0, [pc, #328]	@ (800a530 <_printf_i+0x234>)
 800a3e8:	6033      	str	r3, [r6, #0]
 800a3ea:	bf14      	ite	ne
 800a3ec:	230a      	movne	r3, #10
 800a3ee:	2308      	moveq	r3, #8
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a3f6:	6866      	ldr	r6, [r4, #4]
 800a3f8:	60a6      	str	r6, [r4, #8]
 800a3fa:	2e00      	cmp	r6, #0
 800a3fc:	db05      	blt.n	800a40a <_printf_i+0x10e>
 800a3fe:	6821      	ldr	r1, [r4, #0]
 800a400:	432e      	orrs	r6, r5
 800a402:	f021 0104 	bic.w	r1, r1, #4
 800a406:	6021      	str	r1, [r4, #0]
 800a408:	d04b      	beq.n	800a4a2 <_printf_i+0x1a6>
 800a40a:	4616      	mov	r6, r2
 800a40c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a410:	fb03 5711 	mls	r7, r3, r1, r5
 800a414:	5dc7      	ldrb	r7, [r0, r7]
 800a416:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a41a:	462f      	mov	r7, r5
 800a41c:	42bb      	cmp	r3, r7
 800a41e:	460d      	mov	r5, r1
 800a420:	d9f4      	bls.n	800a40c <_printf_i+0x110>
 800a422:	2b08      	cmp	r3, #8
 800a424:	d10b      	bne.n	800a43e <_printf_i+0x142>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	07df      	lsls	r7, r3, #31
 800a42a:	d508      	bpl.n	800a43e <_printf_i+0x142>
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	6861      	ldr	r1, [r4, #4]
 800a430:	4299      	cmp	r1, r3
 800a432:	bfde      	ittt	le
 800a434:	2330      	movle	r3, #48	@ 0x30
 800a436:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a43a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a43e:	1b92      	subs	r2, r2, r6
 800a440:	6122      	str	r2, [r4, #16]
 800a442:	f8cd a000 	str.w	sl, [sp]
 800a446:	464b      	mov	r3, r9
 800a448:	aa03      	add	r2, sp, #12
 800a44a:	4621      	mov	r1, r4
 800a44c:	4640      	mov	r0, r8
 800a44e:	f7ff fee7 	bl	800a220 <_printf_common>
 800a452:	3001      	adds	r0, #1
 800a454:	d14a      	bne.n	800a4ec <_printf_i+0x1f0>
 800a456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a45a:	b004      	add	sp, #16
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	f043 0320 	orr.w	r3, r3, #32
 800a466:	6023      	str	r3, [r4, #0]
 800a468:	4832      	ldr	r0, [pc, #200]	@ (800a534 <_printf_i+0x238>)
 800a46a:	2778      	movs	r7, #120	@ 0x78
 800a46c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	6831      	ldr	r1, [r6, #0]
 800a474:	061f      	lsls	r7, r3, #24
 800a476:	f851 5b04 	ldr.w	r5, [r1], #4
 800a47a:	d402      	bmi.n	800a482 <_printf_i+0x186>
 800a47c:	065f      	lsls	r7, r3, #25
 800a47e:	bf48      	it	mi
 800a480:	b2ad      	uxthmi	r5, r5
 800a482:	6031      	str	r1, [r6, #0]
 800a484:	07d9      	lsls	r1, r3, #31
 800a486:	bf44      	itt	mi
 800a488:	f043 0320 	orrmi.w	r3, r3, #32
 800a48c:	6023      	strmi	r3, [r4, #0]
 800a48e:	b11d      	cbz	r5, 800a498 <_printf_i+0x19c>
 800a490:	2310      	movs	r3, #16
 800a492:	e7ad      	b.n	800a3f0 <_printf_i+0xf4>
 800a494:	4826      	ldr	r0, [pc, #152]	@ (800a530 <_printf_i+0x234>)
 800a496:	e7e9      	b.n	800a46c <_printf_i+0x170>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	f023 0320 	bic.w	r3, r3, #32
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	e7f6      	b.n	800a490 <_printf_i+0x194>
 800a4a2:	4616      	mov	r6, r2
 800a4a4:	e7bd      	b.n	800a422 <_printf_i+0x126>
 800a4a6:	6833      	ldr	r3, [r6, #0]
 800a4a8:	6825      	ldr	r5, [r4, #0]
 800a4aa:	6961      	ldr	r1, [r4, #20]
 800a4ac:	1d18      	adds	r0, r3, #4
 800a4ae:	6030      	str	r0, [r6, #0]
 800a4b0:	062e      	lsls	r6, r5, #24
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	d501      	bpl.n	800a4ba <_printf_i+0x1be>
 800a4b6:	6019      	str	r1, [r3, #0]
 800a4b8:	e002      	b.n	800a4c0 <_printf_i+0x1c4>
 800a4ba:	0668      	lsls	r0, r5, #25
 800a4bc:	d5fb      	bpl.n	800a4b6 <_printf_i+0x1ba>
 800a4be:	8019      	strh	r1, [r3, #0]
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	6123      	str	r3, [r4, #16]
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	e7bc      	b.n	800a442 <_printf_i+0x146>
 800a4c8:	6833      	ldr	r3, [r6, #0]
 800a4ca:	1d1a      	adds	r2, r3, #4
 800a4cc:	6032      	str	r2, [r6, #0]
 800a4ce:	681e      	ldr	r6, [r3, #0]
 800a4d0:	6862      	ldr	r2, [r4, #4]
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7f5 fe7b 	bl	80001d0 <memchr>
 800a4da:	b108      	cbz	r0, 800a4e0 <_printf_i+0x1e4>
 800a4dc:	1b80      	subs	r0, r0, r6
 800a4de:	6060      	str	r0, [r4, #4]
 800a4e0:	6863      	ldr	r3, [r4, #4]
 800a4e2:	6123      	str	r3, [r4, #16]
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a4ea:	e7aa      	b.n	800a442 <_printf_i+0x146>
 800a4ec:	6923      	ldr	r3, [r4, #16]
 800a4ee:	4632      	mov	r2, r6
 800a4f0:	4649      	mov	r1, r9
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	47d0      	blx	sl
 800a4f6:	3001      	adds	r0, #1
 800a4f8:	d0ad      	beq.n	800a456 <_printf_i+0x15a>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	079b      	lsls	r3, r3, #30
 800a4fe:	d413      	bmi.n	800a528 <_printf_i+0x22c>
 800a500:	68e0      	ldr	r0, [r4, #12]
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	4298      	cmp	r0, r3
 800a506:	bfb8      	it	lt
 800a508:	4618      	movlt	r0, r3
 800a50a:	e7a6      	b.n	800a45a <_printf_i+0x15e>
 800a50c:	2301      	movs	r3, #1
 800a50e:	4632      	mov	r2, r6
 800a510:	4649      	mov	r1, r9
 800a512:	4640      	mov	r0, r8
 800a514:	47d0      	blx	sl
 800a516:	3001      	adds	r0, #1
 800a518:	d09d      	beq.n	800a456 <_printf_i+0x15a>
 800a51a:	3501      	adds	r5, #1
 800a51c:	68e3      	ldr	r3, [r4, #12]
 800a51e:	9903      	ldr	r1, [sp, #12]
 800a520:	1a5b      	subs	r3, r3, r1
 800a522:	42ab      	cmp	r3, r5
 800a524:	dcf2      	bgt.n	800a50c <_printf_i+0x210>
 800a526:	e7eb      	b.n	800a500 <_printf_i+0x204>
 800a528:	2500      	movs	r5, #0
 800a52a:	f104 0619 	add.w	r6, r4, #25
 800a52e:	e7f5      	b.n	800a51c <_printf_i+0x220>
 800a530:	0800d1b2 	.word	0x0800d1b2
 800a534:	0800d1c3 	.word	0x0800d1c3

0800a538 <std>:
 800a538:	2300      	movs	r3, #0
 800a53a:	b510      	push	{r4, lr}
 800a53c:	4604      	mov	r4, r0
 800a53e:	e9c0 3300 	strd	r3, r3, [r0]
 800a542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a546:	6083      	str	r3, [r0, #8]
 800a548:	8181      	strh	r1, [r0, #12]
 800a54a:	6643      	str	r3, [r0, #100]	@ 0x64
 800a54c:	81c2      	strh	r2, [r0, #14]
 800a54e:	6183      	str	r3, [r0, #24]
 800a550:	4619      	mov	r1, r3
 800a552:	2208      	movs	r2, #8
 800a554:	305c      	adds	r0, #92	@ 0x5c
 800a556:	f000 f944 	bl	800a7e2 <memset>
 800a55a:	4b0d      	ldr	r3, [pc, #52]	@ (800a590 <std+0x58>)
 800a55c:	6263      	str	r3, [r4, #36]	@ 0x24
 800a55e:	4b0d      	ldr	r3, [pc, #52]	@ (800a594 <std+0x5c>)
 800a560:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a562:	4b0d      	ldr	r3, [pc, #52]	@ (800a598 <std+0x60>)
 800a564:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a566:	4b0d      	ldr	r3, [pc, #52]	@ (800a59c <std+0x64>)
 800a568:	6323      	str	r3, [r4, #48]	@ 0x30
 800a56a:	4b0d      	ldr	r3, [pc, #52]	@ (800a5a0 <std+0x68>)
 800a56c:	6224      	str	r4, [r4, #32]
 800a56e:	429c      	cmp	r4, r3
 800a570:	d006      	beq.n	800a580 <std+0x48>
 800a572:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a576:	4294      	cmp	r4, r2
 800a578:	d002      	beq.n	800a580 <std+0x48>
 800a57a:	33d0      	adds	r3, #208	@ 0xd0
 800a57c:	429c      	cmp	r4, r3
 800a57e:	d105      	bne.n	800a58c <std+0x54>
 800a580:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a584:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a588:	f000 b9a8 	b.w	800a8dc <__retarget_lock_init_recursive>
 800a58c:	bd10      	pop	{r4, pc}
 800a58e:	bf00      	nop
 800a590:	0800a729 	.word	0x0800a729
 800a594:	0800a74b 	.word	0x0800a74b
 800a598:	0800a783 	.word	0x0800a783
 800a59c:	0800a7a7 	.word	0x0800a7a7
 800a5a0:	20002390 	.word	0x20002390

0800a5a4 <stdio_exit_handler>:
 800a5a4:	4a02      	ldr	r2, [pc, #8]	@ (800a5b0 <stdio_exit_handler+0xc>)
 800a5a6:	4903      	ldr	r1, [pc, #12]	@ (800a5b4 <stdio_exit_handler+0x10>)
 800a5a8:	4803      	ldr	r0, [pc, #12]	@ (800a5b8 <stdio_exit_handler+0x14>)
 800a5aa:	f000 b869 	b.w	800a680 <_fwalk_sglue>
 800a5ae:	bf00      	nop
 800a5b0:	200000fc 	.word	0x200000fc
 800a5b4:	0800c25d 	.word	0x0800c25d
 800a5b8:	2000010c 	.word	0x2000010c

0800a5bc <cleanup_stdio>:
 800a5bc:	6841      	ldr	r1, [r0, #4]
 800a5be:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f0 <cleanup_stdio+0x34>)
 800a5c0:	4299      	cmp	r1, r3
 800a5c2:	b510      	push	{r4, lr}
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	d001      	beq.n	800a5cc <cleanup_stdio+0x10>
 800a5c8:	f001 fe48 	bl	800c25c <_fflush_r>
 800a5cc:	68a1      	ldr	r1, [r4, #8]
 800a5ce:	4b09      	ldr	r3, [pc, #36]	@ (800a5f4 <cleanup_stdio+0x38>)
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	d002      	beq.n	800a5da <cleanup_stdio+0x1e>
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f001 fe41 	bl	800c25c <_fflush_r>
 800a5da:	68e1      	ldr	r1, [r4, #12]
 800a5dc:	4b06      	ldr	r3, [pc, #24]	@ (800a5f8 <cleanup_stdio+0x3c>)
 800a5de:	4299      	cmp	r1, r3
 800a5e0:	d004      	beq.n	800a5ec <cleanup_stdio+0x30>
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5e8:	f001 be38 	b.w	800c25c <_fflush_r>
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	bf00      	nop
 800a5f0:	20002390 	.word	0x20002390
 800a5f4:	200023f8 	.word	0x200023f8
 800a5f8:	20002460 	.word	0x20002460

0800a5fc <global_stdio_init.part.0>:
 800a5fc:	b510      	push	{r4, lr}
 800a5fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a62c <global_stdio_init.part.0+0x30>)
 800a600:	4c0b      	ldr	r4, [pc, #44]	@ (800a630 <global_stdio_init.part.0+0x34>)
 800a602:	4a0c      	ldr	r2, [pc, #48]	@ (800a634 <global_stdio_init.part.0+0x38>)
 800a604:	601a      	str	r2, [r3, #0]
 800a606:	4620      	mov	r0, r4
 800a608:	2200      	movs	r2, #0
 800a60a:	2104      	movs	r1, #4
 800a60c:	f7ff ff94 	bl	800a538 <std>
 800a610:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a614:	2201      	movs	r2, #1
 800a616:	2109      	movs	r1, #9
 800a618:	f7ff ff8e 	bl	800a538 <std>
 800a61c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a620:	2202      	movs	r2, #2
 800a622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a626:	2112      	movs	r1, #18
 800a628:	f7ff bf86 	b.w	800a538 <std>
 800a62c:	200024c8 	.word	0x200024c8
 800a630:	20002390 	.word	0x20002390
 800a634:	0800a5a5 	.word	0x0800a5a5

0800a638 <__sfp_lock_acquire>:
 800a638:	4801      	ldr	r0, [pc, #4]	@ (800a640 <__sfp_lock_acquire+0x8>)
 800a63a:	f000 b950 	b.w	800a8de <__retarget_lock_acquire_recursive>
 800a63e:	bf00      	nop
 800a640:	200024d1 	.word	0x200024d1

0800a644 <__sfp_lock_release>:
 800a644:	4801      	ldr	r0, [pc, #4]	@ (800a64c <__sfp_lock_release+0x8>)
 800a646:	f000 b94b 	b.w	800a8e0 <__retarget_lock_release_recursive>
 800a64a:	bf00      	nop
 800a64c:	200024d1 	.word	0x200024d1

0800a650 <__sinit>:
 800a650:	b510      	push	{r4, lr}
 800a652:	4604      	mov	r4, r0
 800a654:	f7ff fff0 	bl	800a638 <__sfp_lock_acquire>
 800a658:	6a23      	ldr	r3, [r4, #32]
 800a65a:	b11b      	cbz	r3, 800a664 <__sinit+0x14>
 800a65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a660:	f7ff bff0 	b.w	800a644 <__sfp_lock_release>
 800a664:	4b04      	ldr	r3, [pc, #16]	@ (800a678 <__sinit+0x28>)
 800a666:	6223      	str	r3, [r4, #32]
 800a668:	4b04      	ldr	r3, [pc, #16]	@ (800a67c <__sinit+0x2c>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d1f5      	bne.n	800a65c <__sinit+0xc>
 800a670:	f7ff ffc4 	bl	800a5fc <global_stdio_init.part.0>
 800a674:	e7f2      	b.n	800a65c <__sinit+0xc>
 800a676:	bf00      	nop
 800a678:	0800a5bd 	.word	0x0800a5bd
 800a67c:	200024c8 	.word	0x200024c8

0800a680 <_fwalk_sglue>:
 800a680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a684:	4607      	mov	r7, r0
 800a686:	4688      	mov	r8, r1
 800a688:	4614      	mov	r4, r2
 800a68a:	2600      	movs	r6, #0
 800a68c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a690:	f1b9 0901 	subs.w	r9, r9, #1
 800a694:	d505      	bpl.n	800a6a2 <_fwalk_sglue+0x22>
 800a696:	6824      	ldr	r4, [r4, #0]
 800a698:	2c00      	cmp	r4, #0
 800a69a:	d1f7      	bne.n	800a68c <_fwalk_sglue+0xc>
 800a69c:	4630      	mov	r0, r6
 800a69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	d907      	bls.n	800a6b8 <_fwalk_sglue+0x38>
 800a6a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	d003      	beq.n	800a6b8 <_fwalk_sglue+0x38>
 800a6b0:	4629      	mov	r1, r5
 800a6b2:	4638      	mov	r0, r7
 800a6b4:	47c0      	blx	r8
 800a6b6:	4306      	orrs	r6, r0
 800a6b8:	3568      	adds	r5, #104	@ 0x68
 800a6ba:	e7e9      	b.n	800a690 <_fwalk_sglue+0x10>

0800a6bc <sniprintf>:
 800a6bc:	b40c      	push	{r2, r3}
 800a6be:	b530      	push	{r4, r5, lr}
 800a6c0:	4b18      	ldr	r3, [pc, #96]	@ (800a724 <sniprintf+0x68>)
 800a6c2:	1e0c      	subs	r4, r1, #0
 800a6c4:	681d      	ldr	r5, [r3, #0]
 800a6c6:	b09d      	sub	sp, #116	@ 0x74
 800a6c8:	da08      	bge.n	800a6dc <sniprintf+0x20>
 800a6ca:	238b      	movs	r3, #139	@ 0x8b
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6d2:	b01d      	add	sp, #116	@ 0x74
 800a6d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6d8:	b002      	add	sp, #8
 800a6da:	4770      	bx	lr
 800a6dc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a6e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a6e4:	f04f 0300 	mov.w	r3, #0
 800a6e8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a6ea:	bf14      	ite	ne
 800a6ec:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a6f0:	4623      	moveq	r3, r4
 800a6f2:	9304      	str	r3, [sp, #16]
 800a6f4:	9307      	str	r3, [sp, #28]
 800a6f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a6fa:	9002      	str	r0, [sp, #8]
 800a6fc:	9006      	str	r0, [sp, #24]
 800a6fe:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a702:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a704:	ab21      	add	r3, sp, #132	@ 0x84
 800a706:	a902      	add	r1, sp, #8
 800a708:	4628      	mov	r0, r5
 800a70a:	9301      	str	r3, [sp, #4]
 800a70c:	f001 fc26 	bl	800bf5c <_svfiprintf_r>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	bfbc      	itt	lt
 800a714:	238b      	movlt	r3, #139	@ 0x8b
 800a716:	602b      	strlt	r3, [r5, #0]
 800a718:	2c00      	cmp	r4, #0
 800a71a:	d0da      	beq.n	800a6d2 <sniprintf+0x16>
 800a71c:	9b02      	ldr	r3, [sp, #8]
 800a71e:	2200      	movs	r2, #0
 800a720:	701a      	strb	r2, [r3, #0]
 800a722:	e7d6      	b.n	800a6d2 <sniprintf+0x16>
 800a724:	20000108 	.word	0x20000108

0800a728 <__sread>:
 800a728:	b510      	push	{r4, lr}
 800a72a:	460c      	mov	r4, r1
 800a72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a730:	f000 f886 	bl	800a840 <_read_r>
 800a734:	2800      	cmp	r0, #0
 800a736:	bfab      	itete	ge
 800a738:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a73a:	89a3      	ldrhlt	r3, [r4, #12]
 800a73c:	181b      	addge	r3, r3, r0
 800a73e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a742:	bfac      	ite	ge
 800a744:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a746:	81a3      	strhlt	r3, [r4, #12]
 800a748:	bd10      	pop	{r4, pc}

0800a74a <__swrite>:
 800a74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a74e:	461f      	mov	r7, r3
 800a750:	898b      	ldrh	r3, [r1, #12]
 800a752:	05db      	lsls	r3, r3, #23
 800a754:	4605      	mov	r5, r0
 800a756:	460c      	mov	r4, r1
 800a758:	4616      	mov	r6, r2
 800a75a:	d505      	bpl.n	800a768 <__swrite+0x1e>
 800a75c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a760:	2302      	movs	r3, #2
 800a762:	2200      	movs	r2, #0
 800a764:	f000 f85a 	bl	800a81c <_lseek_r>
 800a768:	89a3      	ldrh	r3, [r4, #12]
 800a76a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a76e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a772:	81a3      	strh	r3, [r4, #12]
 800a774:	4632      	mov	r2, r6
 800a776:	463b      	mov	r3, r7
 800a778:	4628      	mov	r0, r5
 800a77a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a77e:	f000 b871 	b.w	800a864 <_write_r>

0800a782 <__sseek>:
 800a782:	b510      	push	{r4, lr}
 800a784:	460c      	mov	r4, r1
 800a786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a78a:	f000 f847 	bl	800a81c <_lseek_r>
 800a78e:	1c43      	adds	r3, r0, #1
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	bf15      	itete	ne
 800a794:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a796:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a79a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a79e:	81a3      	strheq	r3, [r4, #12]
 800a7a0:	bf18      	it	ne
 800a7a2:	81a3      	strhne	r3, [r4, #12]
 800a7a4:	bd10      	pop	{r4, pc}

0800a7a6 <__sclose>:
 800a7a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7aa:	f000 b827 	b.w	800a7fc <_close_r>

0800a7ae <memmove>:
 800a7ae:	4288      	cmp	r0, r1
 800a7b0:	b510      	push	{r4, lr}
 800a7b2:	eb01 0402 	add.w	r4, r1, r2
 800a7b6:	d902      	bls.n	800a7be <memmove+0x10>
 800a7b8:	4284      	cmp	r4, r0
 800a7ba:	4623      	mov	r3, r4
 800a7bc:	d807      	bhi.n	800a7ce <memmove+0x20>
 800a7be:	1e43      	subs	r3, r0, #1
 800a7c0:	42a1      	cmp	r1, r4
 800a7c2:	d008      	beq.n	800a7d6 <memmove+0x28>
 800a7c4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7c8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7cc:	e7f8      	b.n	800a7c0 <memmove+0x12>
 800a7ce:	4402      	add	r2, r0
 800a7d0:	4601      	mov	r1, r0
 800a7d2:	428a      	cmp	r2, r1
 800a7d4:	d100      	bne.n	800a7d8 <memmove+0x2a>
 800a7d6:	bd10      	pop	{r4, pc}
 800a7d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a7dc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a7e0:	e7f7      	b.n	800a7d2 <memmove+0x24>

0800a7e2 <memset>:
 800a7e2:	4402      	add	r2, r0
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d100      	bne.n	800a7ec <memset+0xa>
 800a7ea:	4770      	bx	lr
 800a7ec:	f803 1b01 	strb.w	r1, [r3], #1
 800a7f0:	e7f9      	b.n	800a7e6 <memset+0x4>
	...

0800a7f4 <_localeconv_r>:
 800a7f4:	4800      	ldr	r0, [pc, #0]	@ (800a7f8 <_localeconv_r+0x4>)
 800a7f6:	4770      	bx	lr
 800a7f8:	20000248 	.word	0x20000248

0800a7fc <_close_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4d06      	ldr	r5, [pc, #24]	@ (800a818 <_close_r+0x1c>)
 800a800:	2300      	movs	r3, #0
 800a802:	4604      	mov	r4, r0
 800a804:	4608      	mov	r0, r1
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	f7f6 ff4e 	bl	80016a8 <_close>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_close_r+0x1a>
 800a810:	682b      	ldr	r3, [r5, #0]
 800a812:	b103      	cbz	r3, 800a816 <_close_r+0x1a>
 800a814:	6023      	str	r3, [r4, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	200024cc 	.word	0x200024cc

0800a81c <_lseek_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	@ (800a83c <_lseek_r+0x20>)
 800a820:	4604      	mov	r4, r0
 800a822:	4608      	mov	r0, r1
 800a824:	4611      	mov	r1, r2
 800a826:	2200      	movs	r2, #0
 800a828:	602a      	str	r2, [r5, #0]
 800a82a:	461a      	mov	r2, r3
 800a82c:	f7f6 ff63 	bl	80016f6 <_lseek>
 800a830:	1c43      	adds	r3, r0, #1
 800a832:	d102      	bne.n	800a83a <_lseek_r+0x1e>
 800a834:	682b      	ldr	r3, [r5, #0]
 800a836:	b103      	cbz	r3, 800a83a <_lseek_r+0x1e>
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	bd38      	pop	{r3, r4, r5, pc}
 800a83c:	200024cc 	.word	0x200024cc

0800a840 <_read_r>:
 800a840:	b538      	push	{r3, r4, r5, lr}
 800a842:	4d07      	ldr	r5, [pc, #28]	@ (800a860 <_read_r+0x20>)
 800a844:	4604      	mov	r4, r0
 800a846:	4608      	mov	r0, r1
 800a848:	4611      	mov	r1, r2
 800a84a:	2200      	movs	r2, #0
 800a84c:	602a      	str	r2, [r5, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	f7f6 fef1 	bl	8001636 <_read>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_read_r+0x1e>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_read_r+0x1e>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	200024cc 	.word	0x200024cc

0800a864 <_write_r>:
 800a864:	b538      	push	{r3, r4, r5, lr}
 800a866:	4d07      	ldr	r5, [pc, #28]	@ (800a884 <_write_r+0x20>)
 800a868:	4604      	mov	r4, r0
 800a86a:	4608      	mov	r0, r1
 800a86c:	4611      	mov	r1, r2
 800a86e:	2200      	movs	r2, #0
 800a870:	602a      	str	r2, [r5, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	f7f6 fefc 	bl	8001670 <_write>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_write_r+0x1e>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_write_r+0x1e>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	200024cc 	.word	0x200024cc

0800a888 <__errno>:
 800a888:	4b01      	ldr	r3, [pc, #4]	@ (800a890 <__errno+0x8>)
 800a88a:	6818      	ldr	r0, [r3, #0]
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop
 800a890:	20000108 	.word	0x20000108

0800a894 <__libc_init_array>:
 800a894:	b570      	push	{r4, r5, r6, lr}
 800a896:	4d0d      	ldr	r5, [pc, #52]	@ (800a8cc <__libc_init_array+0x38>)
 800a898:	4c0d      	ldr	r4, [pc, #52]	@ (800a8d0 <__libc_init_array+0x3c>)
 800a89a:	1b64      	subs	r4, r4, r5
 800a89c:	10a4      	asrs	r4, r4, #2
 800a89e:	2600      	movs	r6, #0
 800a8a0:	42a6      	cmp	r6, r4
 800a8a2:	d109      	bne.n	800a8b8 <__libc_init_array+0x24>
 800a8a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8d4 <__libc_init_array+0x40>)
 800a8a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a8d8 <__libc_init_array+0x44>)
 800a8a8:	f002 f84e 	bl	800c948 <_init>
 800a8ac:	1b64      	subs	r4, r4, r5
 800a8ae:	10a4      	asrs	r4, r4, #2
 800a8b0:	2600      	movs	r6, #0
 800a8b2:	42a6      	cmp	r6, r4
 800a8b4:	d105      	bne.n	800a8c2 <__libc_init_array+0x2e>
 800a8b6:	bd70      	pop	{r4, r5, r6, pc}
 800a8b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8bc:	4798      	blx	r3
 800a8be:	3601      	adds	r6, #1
 800a8c0:	e7ee      	b.n	800a8a0 <__libc_init_array+0xc>
 800a8c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8c6:	4798      	blx	r3
 800a8c8:	3601      	adds	r6, #1
 800a8ca:	e7f2      	b.n	800a8b2 <__libc_init_array+0x1e>
 800a8cc:	0800d51c 	.word	0x0800d51c
 800a8d0:	0800d51c 	.word	0x0800d51c
 800a8d4:	0800d51c 	.word	0x0800d51c
 800a8d8:	0800d520 	.word	0x0800d520

0800a8dc <__retarget_lock_init_recursive>:
 800a8dc:	4770      	bx	lr

0800a8de <__retarget_lock_acquire_recursive>:
 800a8de:	4770      	bx	lr

0800a8e0 <__retarget_lock_release_recursive>:
 800a8e0:	4770      	bx	lr

0800a8e2 <memcpy>:
 800a8e2:	440a      	add	r2, r1
 800a8e4:	4291      	cmp	r1, r2
 800a8e6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a8ea:	d100      	bne.n	800a8ee <memcpy+0xc>
 800a8ec:	4770      	bx	lr
 800a8ee:	b510      	push	{r4, lr}
 800a8f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8f8:	4291      	cmp	r1, r2
 800a8fa:	d1f9      	bne.n	800a8f0 <memcpy+0xe>
 800a8fc:	bd10      	pop	{r4, pc}

0800a8fe <quorem>:
 800a8fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a902:	6903      	ldr	r3, [r0, #16]
 800a904:	690c      	ldr	r4, [r1, #16]
 800a906:	42a3      	cmp	r3, r4
 800a908:	4607      	mov	r7, r0
 800a90a:	db7e      	blt.n	800aa0a <quorem+0x10c>
 800a90c:	3c01      	subs	r4, #1
 800a90e:	f101 0814 	add.w	r8, r1, #20
 800a912:	00a3      	lsls	r3, r4, #2
 800a914:	f100 0514 	add.w	r5, r0, #20
 800a918:	9300      	str	r3, [sp, #0]
 800a91a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a928:	3301      	adds	r3, #1
 800a92a:	429a      	cmp	r2, r3
 800a92c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a930:	fbb2 f6f3 	udiv	r6, r2, r3
 800a934:	d32e      	bcc.n	800a994 <quorem+0x96>
 800a936:	f04f 0a00 	mov.w	sl, #0
 800a93a:	46c4      	mov	ip, r8
 800a93c:	46ae      	mov	lr, r5
 800a93e:	46d3      	mov	fp, sl
 800a940:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a944:	b298      	uxth	r0, r3
 800a946:	fb06 a000 	mla	r0, r6, r0, sl
 800a94a:	0c02      	lsrs	r2, r0, #16
 800a94c:	0c1b      	lsrs	r3, r3, #16
 800a94e:	fb06 2303 	mla	r3, r6, r3, r2
 800a952:	f8de 2000 	ldr.w	r2, [lr]
 800a956:	b280      	uxth	r0, r0
 800a958:	b292      	uxth	r2, r2
 800a95a:	1a12      	subs	r2, r2, r0
 800a95c:	445a      	add	r2, fp
 800a95e:	f8de 0000 	ldr.w	r0, [lr]
 800a962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a966:	b29b      	uxth	r3, r3
 800a968:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a96c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a970:	b292      	uxth	r2, r2
 800a972:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a976:	45e1      	cmp	r9, ip
 800a978:	f84e 2b04 	str.w	r2, [lr], #4
 800a97c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a980:	d2de      	bcs.n	800a940 <quorem+0x42>
 800a982:	9b00      	ldr	r3, [sp, #0]
 800a984:	58eb      	ldr	r3, [r5, r3]
 800a986:	b92b      	cbnz	r3, 800a994 <quorem+0x96>
 800a988:	9b01      	ldr	r3, [sp, #4]
 800a98a:	3b04      	subs	r3, #4
 800a98c:	429d      	cmp	r5, r3
 800a98e:	461a      	mov	r2, r3
 800a990:	d32f      	bcc.n	800a9f2 <quorem+0xf4>
 800a992:	613c      	str	r4, [r7, #16]
 800a994:	4638      	mov	r0, r7
 800a996:	f001 f97d 	bl	800bc94 <__mcmp>
 800a99a:	2800      	cmp	r0, #0
 800a99c:	db25      	blt.n	800a9ea <quorem+0xec>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	2000      	movs	r0, #0
 800a9a2:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9a6:	f8d1 c000 	ldr.w	ip, [r1]
 800a9aa:	fa1f fe82 	uxth.w	lr, r2
 800a9ae:	fa1f f38c 	uxth.w	r3, ip
 800a9b2:	eba3 030e 	sub.w	r3, r3, lr
 800a9b6:	4403      	add	r3, r0
 800a9b8:	0c12      	lsrs	r2, r2, #16
 800a9ba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9be:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9c8:	45c1      	cmp	r9, r8
 800a9ca:	f841 3b04 	str.w	r3, [r1], #4
 800a9ce:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9d2:	d2e6      	bcs.n	800a9a2 <quorem+0xa4>
 800a9d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9dc:	b922      	cbnz	r2, 800a9e8 <quorem+0xea>
 800a9de:	3b04      	subs	r3, #4
 800a9e0:	429d      	cmp	r5, r3
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	d30b      	bcc.n	800a9fe <quorem+0x100>
 800a9e6:	613c      	str	r4, [r7, #16]
 800a9e8:	3601      	adds	r6, #1
 800a9ea:	4630      	mov	r0, r6
 800a9ec:	b003      	add	sp, #12
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	6812      	ldr	r2, [r2, #0]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	2a00      	cmp	r2, #0
 800a9f8:	d1cb      	bne.n	800a992 <quorem+0x94>
 800a9fa:	3c01      	subs	r4, #1
 800a9fc:	e7c6      	b.n	800a98c <quorem+0x8e>
 800a9fe:	6812      	ldr	r2, [r2, #0]
 800aa00:	3b04      	subs	r3, #4
 800aa02:	2a00      	cmp	r2, #0
 800aa04:	d1ef      	bne.n	800a9e6 <quorem+0xe8>
 800aa06:	3c01      	subs	r4, #1
 800aa08:	e7ea      	b.n	800a9e0 <quorem+0xe2>
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	e7ee      	b.n	800a9ec <quorem+0xee>
	...

0800aa10 <_dtoa_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	69c7      	ldr	r7, [r0, #28]
 800aa16:	b097      	sub	sp, #92	@ 0x5c
 800aa18:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa1c:	ec55 4b10 	vmov	r4, r5, d0
 800aa20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aa22:	9107      	str	r1, [sp, #28]
 800aa24:	4681      	mov	r9, r0
 800aa26:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa28:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa2a:	b97f      	cbnz	r7, 800aa4c <_dtoa_r+0x3c>
 800aa2c:	2010      	movs	r0, #16
 800aa2e:	f000 fe09 	bl	800b644 <malloc>
 800aa32:	4602      	mov	r2, r0
 800aa34:	f8c9 001c 	str.w	r0, [r9, #28]
 800aa38:	b920      	cbnz	r0, 800aa44 <_dtoa_r+0x34>
 800aa3a:	4ba9      	ldr	r3, [pc, #676]	@ (800ace0 <_dtoa_r+0x2d0>)
 800aa3c:	21ef      	movs	r1, #239	@ 0xef
 800aa3e:	48a9      	ldr	r0, [pc, #676]	@ (800ace4 <_dtoa_r+0x2d4>)
 800aa40:	f001 fc44 	bl	800c2cc <__assert_func>
 800aa44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa48:	6007      	str	r7, [r0, #0]
 800aa4a:	60c7      	str	r7, [r0, #12]
 800aa4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa50:	6819      	ldr	r1, [r3, #0]
 800aa52:	b159      	cbz	r1, 800aa6c <_dtoa_r+0x5c>
 800aa54:	685a      	ldr	r2, [r3, #4]
 800aa56:	604a      	str	r2, [r1, #4]
 800aa58:	2301      	movs	r3, #1
 800aa5a:	4093      	lsls	r3, r2
 800aa5c:	608b      	str	r3, [r1, #8]
 800aa5e:	4648      	mov	r0, r9
 800aa60:	f000 fee6 	bl	800b830 <_Bfree>
 800aa64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	1e2b      	subs	r3, r5, #0
 800aa6e:	bfb9      	ittee	lt
 800aa70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa74:	9305      	strlt	r3, [sp, #20]
 800aa76:	2300      	movge	r3, #0
 800aa78:	6033      	strge	r3, [r6, #0]
 800aa7a:	9f05      	ldr	r7, [sp, #20]
 800aa7c:	4b9a      	ldr	r3, [pc, #616]	@ (800ace8 <_dtoa_r+0x2d8>)
 800aa7e:	bfbc      	itt	lt
 800aa80:	2201      	movlt	r2, #1
 800aa82:	6032      	strlt	r2, [r6, #0]
 800aa84:	43bb      	bics	r3, r7
 800aa86:	d112      	bne.n	800aaae <_dtoa_r+0x9e>
 800aa88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aa8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa94:	4323      	orrs	r3, r4
 800aa96:	f000 855a 	beq.w	800b54e <_dtoa_r+0xb3e>
 800aa9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800acfc <_dtoa_r+0x2ec>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 855c 	beq.w	800b55e <_dtoa_r+0xb4e>
 800aaa6:	f10a 0303 	add.w	r3, sl, #3
 800aaaa:	f000 bd56 	b.w	800b55a <_dtoa_r+0xb4a>
 800aaae:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aab2:	2200      	movs	r2, #0
 800aab4:	ec51 0b17 	vmov	r0, r1, d7
 800aab8:	2300      	movs	r3, #0
 800aaba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aabe:	f7f6 f803 	bl	8000ac8 <__aeabi_dcmpeq>
 800aac2:	4680      	mov	r8, r0
 800aac4:	b158      	cbz	r0, 800aade <_dtoa_r+0xce>
 800aac6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aac8:	2301      	movs	r3, #1
 800aaca:	6013      	str	r3, [r2, #0]
 800aacc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aace:	b113      	cbz	r3, 800aad6 <_dtoa_r+0xc6>
 800aad0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aad2:	4b86      	ldr	r3, [pc, #536]	@ (800acec <_dtoa_r+0x2dc>)
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ad00 <_dtoa_r+0x2f0>
 800aada:	f000 bd40 	b.w	800b55e <_dtoa_r+0xb4e>
 800aade:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800aae2:	aa14      	add	r2, sp, #80	@ 0x50
 800aae4:	a915      	add	r1, sp, #84	@ 0x54
 800aae6:	4648      	mov	r0, r9
 800aae8:	f001 f984 	bl	800bdf4 <__d2b>
 800aaec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800aaf0:	9002      	str	r0, [sp, #8]
 800aaf2:	2e00      	cmp	r6, #0
 800aaf4:	d078      	beq.n	800abe8 <_dtoa_r+0x1d8>
 800aaf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aaf8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800aafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab10:	4619      	mov	r1, r3
 800ab12:	2200      	movs	r2, #0
 800ab14:	4b76      	ldr	r3, [pc, #472]	@ (800acf0 <_dtoa_r+0x2e0>)
 800ab16:	f7f5 fbb7 	bl	8000288 <__aeabi_dsub>
 800ab1a:	a36b      	add	r3, pc, #428	@ (adr r3, 800acc8 <_dtoa_r+0x2b8>)
 800ab1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab20:	f7f5 fd6a 	bl	80005f8 <__aeabi_dmul>
 800ab24:	a36a      	add	r3, pc, #424	@ (adr r3, 800acd0 <_dtoa_r+0x2c0>)
 800ab26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2a:	f7f5 fbaf 	bl	800028c <__adddf3>
 800ab2e:	4604      	mov	r4, r0
 800ab30:	4630      	mov	r0, r6
 800ab32:	460d      	mov	r5, r1
 800ab34:	f7f5 fcf6 	bl	8000524 <__aeabi_i2d>
 800ab38:	a367      	add	r3, pc, #412	@ (adr r3, 800acd8 <_dtoa_r+0x2c8>)
 800ab3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3e:	f7f5 fd5b 	bl	80005f8 <__aeabi_dmul>
 800ab42:	4602      	mov	r2, r0
 800ab44:	460b      	mov	r3, r1
 800ab46:	4620      	mov	r0, r4
 800ab48:	4629      	mov	r1, r5
 800ab4a:	f7f5 fb9f 	bl	800028c <__adddf3>
 800ab4e:	4604      	mov	r4, r0
 800ab50:	460d      	mov	r5, r1
 800ab52:	f7f6 f801 	bl	8000b58 <__aeabi_d2iz>
 800ab56:	2200      	movs	r2, #0
 800ab58:	4607      	mov	r7, r0
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	4629      	mov	r1, r5
 800ab60:	f7f5 ffbc 	bl	8000adc <__aeabi_dcmplt>
 800ab64:	b140      	cbz	r0, 800ab78 <_dtoa_r+0x168>
 800ab66:	4638      	mov	r0, r7
 800ab68:	f7f5 fcdc 	bl	8000524 <__aeabi_i2d>
 800ab6c:	4622      	mov	r2, r4
 800ab6e:	462b      	mov	r3, r5
 800ab70:	f7f5 ffaa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab74:	b900      	cbnz	r0, 800ab78 <_dtoa_r+0x168>
 800ab76:	3f01      	subs	r7, #1
 800ab78:	2f16      	cmp	r7, #22
 800ab7a:	d852      	bhi.n	800ac22 <_dtoa_r+0x212>
 800ab7c:	4b5d      	ldr	r3, [pc, #372]	@ (800acf4 <_dtoa_r+0x2e4>)
 800ab7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab8a:	f7f5 ffa7 	bl	8000adc <__aeabi_dcmplt>
 800ab8e:	2800      	cmp	r0, #0
 800ab90:	d049      	beq.n	800ac26 <_dtoa_r+0x216>
 800ab92:	3f01      	subs	r7, #1
 800ab94:	2300      	movs	r3, #0
 800ab96:	9310      	str	r3, [sp, #64]	@ 0x40
 800ab98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ab9a:	1b9b      	subs	r3, r3, r6
 800ab9c:	1e5a      	subs	r2, r3, #1
 800ab9e:	bf45      	ittet	mi
 800aba0:	f1c3 0301 	rsbmi	r3, r3, #1
 800aba4:	9300      	strmi	r3, [sp, #0]
 800aba6:	2300      	movpl	r3, #0
 800aba8:	2300      	movmi	r3, #0
 800abaa:	9206      	str	r2, [sp, #24]
 800abac:	bf54      	ite	pl
 800abae:	9300      	strpl	r3, [sp, #0]
 800abb0:	9306      	strmi	r3, [sp, #24]
 800abb2:	2f00      	cmp	r7, #0
 800abb4:	db39      	blt.n	800ac2a <_dtoa_r+0x21a>
 800abb6:	9b06      	ldr	r3, [sp, #24]
 800abb8:	970d      	str	r7, [sp, #52]	@ 0x34
 800abba:	443b      	add	r3, r7
 800abbc:	9306      	str	r3, [sp, #24]
 800abbe:	2300      	movs	r3, #0
 800abc0:	9308      	str	r3, [sp, #32]
 800abc2:	9b07      	ldr	r3, [sp, #28]
 800abc4:	2b09      	cmp	r3, #9
 800abc6:	d863      	bhi.n	800ac90 <_dtoa_r+0x280>
 800abc8:	2b05      	cmp	r3, #5
 800abca:	bfc4      	itt	gt
 800abcc:	3b04      	subgt	r3, #4
 800abce:	9307      	strgt	r3, [sp, #28]
 800abd0:	9b07      	ldr	r3, [sp, #28]
 800abd2:	f1a3 0302 	sub.w	r3, r3, #2
 800abd6:	bfcc      	ite	gt
 800abd8:	2400      	movgt	r4, #0
 800abda:	2401      	movle	r4, #1
 800abdc:	2b03      	cmp	r3, #3
 800abde:	d863      	bhi.n	800aca8 <_dtoa_r+0x298>
 800abe0:	e8df f003 	tbb	[pc, r3]
 800abe4:	2b375452 	.word	0x2b375452
 800abe8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800abec:	441e      	add	r6, r3
 800abee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800abf2:	2b20      	cmp	r3, #32
 800abf4:	bfc1      	itttt	gt
 800abf6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800abfa:	409f      	lslgt	r7, r3
 800abfc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac00:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac04:	bfd6      	itet	le
 800ac06:	f1c3 0320 	rsble	r3, r3, #32
 800ac0a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ac0e:	fa04 f003 	lslle.w	r0, r4, r3
 800ac12:	f7f5 fc77 	bl	8000504 <__aeabi_ui2d>
 800ac16:	2201      	movs	r2, #1
 800ac18:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac1c:	3e01      	subs	r6, #1
 800ac1e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac20:	e776      	b.n	800ab10 <_dtoa_r+0x100>
 800ac22:	2301      	movs	r3, #1
 800ac24:	e7b7      	b.n	800ab96 <_dtoa_r+0x186>
 800ac26:	9010      	str	r0, [sp, #64]	@ 0x40
 800ac28:	e7b6      	b.n	800ab98 <_dtoa_r+0x188>
 800ac2a:	9b00      	ldr	r3, [sp, #0]
 800ac2c:	1bdb      	subs	r3, r3, r7
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	427b      	negs	r3, r7
 800ac32:	9308      	str	r3, [sp, #32]
 800ac34:	2300      	movs	r3, #0
 800ac36:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac38:	e7c3      	b.n	800abc2 <_dtoa_r+0x1b2>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac40:	eb07 0b03 	add.w	fp, r7, r3
 800ac44:	f10b 0301 	add.w	r3, fp, #1
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	9303      	str	r3, [sp, #12]
 800ac4c:	bfb8      	it	lt
 800ac4e:	2301      	movlt	r3, #1
 800ac50:	e006      	b.n	800ac60 <_dtoa_r+0x250>
 800ac52:	2301      	movs	r3, #1
 800ac54:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	dd28      	ble.n	800acae <_dtoa_r+0x29e>
 800ac5c:	469b      	mov	fp, r3
 800ac5e:	9303      	str	r3, [sp, #12]
 800ac60:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ac64:	2100      	movs	r1, #0
 800ac66:	2204      	movs	r2, #4
 800ac68:	f102 0514 	add.w	r5, r2, #20
 800ac6c:	429d      	cmp	r5, r3
 800ac6e:	d926      	bls.n	800acbe <_dtoa_r+0x2ae>
 800ac70:	6041      	str	r1, [r0, #4]
 800ac72:	4648      	mov	r0, r9
 800ac74:	f000 fd9c 	bl	800b7b0 <_Balloc>
 800ac78:	4682      	mov	sl, r0
 800ac7a:	2800      	cmp	r0, #0
 800ac7c:	d142      	bne.n	800ad04 <_dtoa_r+0x2f4>
 800ac7e:	4b1e      	ldr	r3, [pc, #120]	@ (800acf8 <_dtoa_r+0x2e8>)
 800ac80:	4602      	mov	r2, r0
 800ac82:	f240 11af 	movw	r1, #431	@ 0x1af
 800ac86:	e6da      	b.n	800aa3e <_dtoa_r+0x2e>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	e7e3      	b.n	800ac54 <_dtoa_r+0x244>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	e7d5      	b.n	800ac3c <_dtoa_r+0x22c>
 800ac90:	2401      	movs	r4, #1
 800ac92:	2300      	movs	r3, #0
 800ac94:	9307      	str	r3, [sp, #28]
 800ac96:	9409      	str	r4, [sp, #36]	@ 0x24
 800ac98:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f8cd b00c 	str.w	fp, [sp, #12]
 800aca2:	2312      	movs	r3, #18
 800aca4:	920c      	str	r2, [sp, #48]	@ 0x30
 800aca6:	e7db      	b.n	800ac60 <_dtoa_r+0x250>
 800aca8:	2301      	movs	r3, #1
 800acaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800acac:	e7f4      	b.n	800ac98 <_dtoa_r+0x288>
 800acae:	f04f 0b01 	mov.w	fp, #1
 800acb2:	f8cd b00c 	str.w	fp, [sp, #12]
 800acb6:	465b      	mov	r3, fp
 800acb8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800acbc:	e7d0      	b.n	800ac60 <_dtoa_r+0x250>
 800acbe:	3101      	adds	r1, #1
 800acc0:	0052      	lsls	r2, r2, #1
 800acc2:	e7d1      	b.n	800ac68 <_dtoa_r+0x258>
 800acc4:	f3af 8000 	nop.w
 800acc8:	636f4361 	.word	0x636f4361
 800accc:	3fd287a7 	.word	0x3fd287a7
 800acd0:	8b60c8b3 	.word	0x8b60c8b3
 800acd4:	3fc68a28 	.word	0x3fc68a28
 800acd8:	509f79fb 	.word	0x509f79fb
 800acdc:	3fd34413 	.word	0x3fd34413
 800ace0:	0800d1e1 	.word	0x0800d1e1
 800ace4:	0800d1f8 	.word	0x0800d1f8
 800ace8:	7ff00000 	.word	0x7ff00000
 800acec:	0800d1b1 	.word	0x0800d1b1
 800acf0:	3ff80000 	.word	0x3ff80000
 800acf4:	0800d348 	.word	0x0800d348
 800acf8:	0800d250 	.word	0x0800d250
 800acfc:	0800d1dd 	.word	0x0800d1dd
 800ad00:	0800d1b0 	.word	0x0800d1b0
 800ad04:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad08:	6018      	str	r0, [r3, #0]
 800ad0a:	9b03      	ldr	r3, [sp, #12]
 800ad0c:	2b0e      	cmp	r3, #14
 800ad0e:	f200 80a1 	bhi.w	800ae54 <_dtoa_r+0x444>
 800ad12:	2c00      	cmp	r4, #0
 800ad14:	f000 809e 	beq.w	800ae54 <_dtoa_r+0x444>
 800ad18:	2f00      	cmp	r7, #0
 800ad1a:	dd33      	ble.n	800ad84 <_dtoa_r+0x374>
 800ad1c:	4b9c      	ldr	r3, [pc, #624]	@ (800af90 <_dtoa_r+0x580>)
 800ad1e:	f007 020f 	and.w	r2, r7, #15
 800ad22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad26:	ed93 7b00 	vldr	d7, [r3]
 800ad2a:	05f8      	lsls	r0, r7, #23
 800ad2c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ad30:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad34:	d516      	bpl.n	800ad64 <_dtoa_r+0x354>
 800ad36:	4b97      	ldr	r3, [pc, #604]	@ (800af94 <_dtoa_r+0x584>)
 800ad38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad40:	f7f5 fd84 	bl	800084c <__aeabi_ddiv>
 800ad44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad48:	f004 040f 	and.w	r4, r4, #15
 800ad4c:	2603      	movs	r6, #3
 800ad4e:	4d91      	ldr	r5, [pc, #580]	@ (800af94 <_dtoa_r+0x584>)
 800ad50:	b954      	cbnz	r4, 800ad68 <_dtoa_r+0x358>
 800ad52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad5a:	f7f5 fd77 	bl	800084c <__aeabi_ddiv>
 800ad5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad62:	e028      	b.n	800adb6 <_dtoa_r+0x3a6>
 800ad64:	2602      	movs	r6, #2
 800ad66:	e7f2      	b.n	800ad4e <_dtoa_r+0x33e>
 800ad68:	07e1      	lsls	r1, r4, #31
 800ad6a:	d508      	bpl.n	800ad7e <_dtoa_r+0x36e>
 800ad6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad70:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad74:	f7f5 fc40 	bl	80005f8 <__aeabi_dmul>
 800ad78:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	1064      	asrs	r4, r4, #1
 800ad80:	3508      	adds	r5, #8
 800ad82:	e7e5      	b.n	800ad50 <_dtoa_r+0x340>
 800ad84:	f000 80af 	beq.w	800aee6 <_dtoa_r+0x4d6>
 800ad88:	427c      	negs	r4, r7
 800ad8a:	4b81      	ldr	r3, [pc, #516]	@ (800af90 <_dtoa_r+0x580>)
 800ad8c:	4d81      	ldr	r5, [pc, #516]	@ (800af94 <_dtoa_r+0x584>)
 800ad8e:	f004 020f 	and.w	r2, r4, #15
 800ad92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad9e:	f7f5 fc2b 	bl	80005f8 <__aeabi_dmul>
 800ada2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ada6:	1124      	asrs	r4, r4, #4
 800ada8:	2300      	movs	r3, #0
 800adaa:	2602      	movs	r6, #2
 800adac:	2c00      	cmp	r4, #0
 800adae:	f040 808f 	bne.w	800aed0 <_dtoa_r+0x4c0>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1d3      	bne.n	800ad5e <_dtoa_r+0x34e>
 800adb6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adb8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 8094 	beq.w	800aeea <_dtoa_r+0x4da>
 800adc2:	4b75      	ldr	r3, [pc, #468]	@ (800af98 <_dtoa_r+0x588>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	4620      	mov	r0, r4
 800adc8:	4629      	mov	r1, r5
 800adca:	f7f5 fe87 	bl	8000adc <__aeabi_dcmplt>
 800adce:	2800      	cmp	r0, #0
 800add0:	f000 808b 	beq.w	800aeea <_dtoa_r+0x4da>
 800add4:	9b03      	ldr	r3, [sp, #12]
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 8087 	beq.w	800aeea <_dtoa_r+0x4da>
 800addc:	f1bb 0f00 	cmp.w	fp, #0
 800ade0:	dd34      	ble.n	800ae4c <_dtoa_r+0x43c>
 800ade2:	4620      	mov	r0, r4
 800ade4:	4b6d      	ldr	r3, [pc, #436]	@ (800af9c <_dtoa_r+0x58c>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	4629      	mov	r1, r5
 800adea:	f7f5 fc05 	bl	80005f8 <__aeabi_dmul>
 800adee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adf2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800adf6:	3601      	adds	r6, #1
 800adf8:	465c      	mov	r4, fp
 800adfa:	4630      	mov	r0, r6
 800adfc:	f7f5 fb92 	bl	8000524 <__aeabi_i2d>
 800ae00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae04:	f7f5 fbf8 	bl	80005f8 <__aeabi_dmul>
 800ae08:	4b65      	ldr	r3, [pc, #404]	@ (800afa0 <_dtoa_r+0x590>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f7f5 fa3e 	bl	800028c <__adddf3>
 800ae10:	4605      	mov	r5, r0
 800ae12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae16:	2c00      	cmp	r4, #0
 800ae18:	d16a      	bne.n	800aef0 <_dtoa_r+0x4e0>
 800ae1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae1e:	4b61      	ldr	r3, [pc, #388]	@ (800afa4 <_dtoa_r+0x594>)
 800ae20:	2200      	movs	r2, #0
 800ae22:	f7f5 fa31 	bl	8000288 <__aeabi_dsub>
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae2e:	462a      	mov	r2, r5
 800ae30:	4633      	mov	r3, r6
 800ae32:	f7f5 fe71 	bl	8000b18 <__aeabi_dcmpgt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f040 8298 	bne.w	800b36c <_dtoa_r+0x95c>
 800ae3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae40:	462a      	mov	r2, r5
 800ae42:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae46:	f7f5 fe49 	bl	8000adc <__aeabi_dcmplt>
 800ae4a:	bb38      	cbnz	r0, 800ae9c <_dtoa_r+0x48c>
 800ae4c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ae50:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	f2c0 8157 	blt.w	800b10a <_dtoa_r+0x6fa>
 800ae5c:	2f0e      	cmp	r7, #14
 800ae5e:	f300 8154 	bgt.w	800b10a <_dtoa_r+0x6fa>
 800ae62:	4b4b      	ldr	r3, [pc, #300]	@ (800af90 <_dtoa_r+0x580>)
 800ae64:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae68:	ed93 7b00 	vldr	d7, [r3]
 800ae6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	ed8d 7b00 	vstr	d7, [sp]
 800ae74:	f280 80e5 	bge.w	800b042 <_dtoa_r+0x632>
 800ae78:	9b03      	ldr	r3, [sp, #12]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f300 80e1 	bgt.w	800b042 <_dtoa_r+0x632>
 800ae80:	d10c      	bne.n	800ae9c <_dtoa_r+0x48c>
 800ae82:	4b48      	ldr	r3, [pc, #288]	@ (800afa4 <_dtoa_r+0x594>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	ec51 0b17 	vmov	r0, r1, d7
 800ae8a:	f7f5 fbb5 	bl	80005f8 <__aeabi_dmul>
 800ae8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae92:	f7f5 fe37 	bl	8000b04 <__aeabi_dcmpge>
 800ae96:	2800      	cmp	r0, #0
 800ae98:	f000 8266 	beq.w	800b368 <_dtoa_r+0x958>
 800ae9c:	2400      	movs	r4, #0
 800ae9e:	4625      	mov	r5, r4
 800aea0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aea2:	4656      	mov	r6, sl
 800aea4:	ea6f 0803 	mvn.w	r8, r3
 800aea8:	2700      	movs	r7, #0
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4648      	mov	r0, r9
 800aeae:	f000 fcbf 	bl	800b830 <_Bfree>
 800aeb2:	2d00      	cmp	r5, #0
 800aeb4:	f000 80bd 	beq.w	800b032 <_dtoa_r+0x622>
 800aeb8:	b12f      	cbz	r7, 800aec6 <_dtoa_r+0x4b6>
 800aeba:	42af      	cmp	r7, r5
 800aebc:	d003      	beq.n	800aec6 <_dtoa_r+0x4b6>
 800aebe:	4639      	mov	r1, r7
 800aec0:	4648      	mov	r0, r9
 800aec2:	f000 fcb5 	bl	800b830 <_Bfree>
 800aec6:	4629      	mov	r1, r5
 800aec8:	4648      	mov	r0, r9
 800aeca:	f000 fcb1 	bl	800b830 <_Bfree>
 800aece:	e0b0      	b.n	800b032 <_dtoa_r+0x622>
 800aed0:	07e2      	lsls	r2, r4, #31
 800aed2:	d505      	bpl.n	800aee0 <_dtoa_r+0x4d0>
 800aed4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aed8:	f7f5 fb8e 	bl	80005f8 <__aeabi_dmul>
 800aedc:	3601      	adds	r6, #1
 800aede:	2301      	movs	r3, #1
 800aee0:	1064      	asrs	r4, r4, #1
 800aee2:	3508      	adds	r5, #8
 800aee4:	e762      	b.n	800adac <_dtoa_r+0x39c>
 800aee6:	2602      	movs	r6, #2
 800aee8:	e765      	b.n	800adb6 <_dtoa_r+0x3a6>
 800aeea:	9c03      	ldr	r4, [sp, #12]
 800aeec:	46b8      	mov	r8, r7
 800aeee:	e784      	b.n	800adfa <_dtoa_r+0x3ea>
 800aef0:	4b27      	ldr	r3, [pc, #156]	@ (800af90 <_dtoa_r+0x580>)
 800aef2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aef4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aef8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aefc:	4454      	add	r4, sl
 800aefe:	2900      	cmp	r1, #0
 800af00:	d054      	beq.n	800afac <_dtoa_r+0x59c>
 800af02:	4929      	ldr	r1, [pc, #164]	@ (800afa8 <_dtoa_r+0x598>)
 800af04:	2000      	movs	r0, #0
 800af06:	f7f5 fca1 	bl	800084c <__aeabi_ddiv>
 800af0a:	4633      	mov	r3, r6
 800af0c:	462a      	mov	r2, r5
 800af0e:	f7f5 f9bb 	bl	8000288 <__aeabi_dsub>
 800af12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af16:	4656      	mov	r6, sl
 800af18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af1c:	f7f5 fe1c 	bl	8000b58 <__aeabi_d2iz>
 800af20:	4605      	mov	r5, r0
 800af22:	f7f5 faff 	bl	8000524 <__aeabi_i2d>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af2e:	f7f5 f9ab 	bl	8000288 <__aeabi_dsub>
 800af32:	3530      	adds	r5, #48	@ 0x30
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af3c:	f806 5b01 	strb.w	r5, [r6], #1
 800af40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af44:	f7f5 fdca 	bl	8000adc <__aeabi_dcmplt>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d172      	bne.n	800b032 <_dtoa_r+0x622>
 800af4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af50:	4911      	ldr	r1, [pc, #68]	@ (800af98 <_dtoa_r+0x588>)
 800af52:	2000      	movs	r0, #0
 800af54:	f7f5 f998 	bl	8000288 <__aeabi_dsub>
 800af58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af5c:	f7f5 fdbe 	bl	8000adc <__aeabi_dcmplt>
 800af60:	2800      	cmp	r0, #0
 800af62:	f040 80b4 	bne.w	800b0ce <_dtoa_r+0x6be>
 800af66:	42a6      	cmp	r6, r4
 800af68:	f43f af70 	beq.w	800ae4c <_dtoa_r+0x43c>
 800af6c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800af70:	4b0a      	ldr	r3, [pc, #40]	@ (800af9c <_dtoa_r+0x58c>)
 800af72:	2200      	movs	r2, #0
 800af74:	f7f5 fb40 	bl	80005f8 <__aeabi_dmul>
 800af78:	4b08      	ldr	r3, [pc, #32]	@ (800af9c <_dtoa_r+0x58c>)
 800af7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af7e:	2200      	movs	r2, #0
 800af80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af84:	f7f5 fb38 	bl	80005f8 <__aeabi_dmul>
 800af88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800af8c:	e7c4      	b.n	800af18 <_dtoa_r+0x508>
 800af8e:	bf00      	nop
 800af90:	0800d348 	.word	0x0800d348
 800af94:	0800d320 	.word	0x0800d320
 800af98:	3ff00000 	.word	0x3ff00000
 800af9c:	40240000 	.word	0x40240000
 800afa0:	401c0000 	.word	0x401c0000
 800afa4:	40140000 	.word	0x40140000
 800afa8:	3fe00000 	.word	0x3fe00000
 800afac:	4631      	mov	r1, r6
 800afae:	4628      	mov	r0, r5
 800afb0:	f7f5 fb22 	bl	80005f8 <__aeabi_dmul>
 800afb4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afb8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800afba:	4656      	mov	r6, sl
 800afbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afc0:	f7f5 fdca 	bl	8000b58 <__aeabi_d2iz>
 800afc4:	4605      	mov	r5, r0
 800afc6:	f7f5 faad 	bl	8000524 <__aeabi_i2d>
 800afca:	4602      	mov	r2, r0
 800afcc:	460b      	mov	r3, r1
 800afce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afd2:	f7f5 f959 	bl	8000288 <__aeabi_dsub>
 800afd6:	3530      	adds	r5, #48	@ 0x30
 800afd8:	f806 5b01 	strb.w	r5, [r6], #1
 800afdc:	4602      	mov	r2, r0
 800afde:	460b      	mov	r3, r1
 800afe0:	42a6      	cmp	r6, r4
 800afe2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afe6:	f04f 0200 	mov.w	r2, #0
 800afea:	d124      	bne.n	800b036 <_dtoa_r+0x626>
 800afec:	4baf      	ldr	r3, [pc, #700]	@ (800b2ac <_dtoa_r+0x89c>)
 800afee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aff2:	f7f5 f94b 	bl	800028c <__adddf3>
 800aff6:	4602      	mov	r2, r0
 800aff8:	460b      	mov	r3, r1
 800affa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800affe:	f7f5 fd8b 	bl	8000b18 <__aeabi_dcmpgt>
 800b002:	2800      	cmp	r0, #0
 800b004:	d163      	bne.n	800b0ce <_dtoa_r+0x6be>
 800b006:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b00a:	49a8      	ldr	r1, [pc, #672]	@ (800b2ac <_dtoa_r+0x89c>)
 800b00c:	2000      	movs	r0, #0
 800b00e:	f7f5 f93b 	bl	8000288 <__aeabi_dsub>
 800b012:	4602      	mov	r2, r0
 800b014:	460b      	mov	r3, r1
 800b016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b01a:	f7f5 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800b01e:	2800      	cmp	r0, #0
 800b020:	f43f af14 	beq.w	800ae4c <_dtoa_r+0x43c>
 800b024:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b026:	1e73      	subs	r3, r6, #1
 800b028:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b02a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b02e:	2b30      	cmp	r3, #48	@ 0x30
 800b030:	d0f8      	beq.n	800b024 <_dtoa_r+0x614>
 800b032:	4647      	mov	r7, r8
 800b034:	e03b      	b.n	800b0ae <_dtoa_r+0x69e>
 800b036:	4b9e      	ldr	r3, [pc, #632]	@ (800b2b0 <_dtoa_r+0x8a0>)
 800b038:	f7f5 fade 	bl	80005f8 <__aeabi_dmul>
 800b03c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b040:	e7bc      	b.n	800afbc <_dtoa_r+0x5ac>
 800b042:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b046:	4656      	mov	r6, sl
 800b048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b04c:	4620      	mov	r0, r4
 800b04e:	4629      	mov	r1, r5
 800b050:	f7f5 fbfc 	bl	800084c <__aeabi_ddiv>
 800b054:	f7f5 fd80 	bl	8000b58 <__aeabi_d2iz>
 800b058:	4680      	mov	r8, r0
 800b05a:	f7f5 fa63 	bl	8000524 <__aeabi_i2d>
 800b05e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b062:	f7f5 fac9 	bl	80005f8 <__aeabi_dmul>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	4620      	mov	r0, r4
 800b06c:	4629      	mov	r1, r5
 800b06e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b072:	f7f5 f909 	bl	8000288 <__aeabi_dsub>
 800b076:	f806 4b01 	strb.w	r4, [r6], #1
 800b07a:	9d03      	ldr	r5, [sp, #12]
 800b07c:	eba6 040a 	sub.w	r4, r6, sl
 800b080:	42a5      	cmp	r5, r4
 800b082:	4602      	mov	r2, r0
 800b084:	460b      	mov	r3, r1
 800b086:	d133      	bne.n	800b0f0 <_dtoa_r+0x6e0>
 800b088:	f7f5 f900 	bl	800028c <__adddf3>
 800b08c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	f7f5 fd40 	bl	8000b18 <__aeabi_dcmpgt>
 800b098:	b9c0      	cbnz	r0, 800b0cc <_dtoa_r+0x6bc>
 800b09a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b09e:	4620      	mov	r0, r4
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	f7f5 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0a6:	b110      	cbz	r0, 800b0ae <_dtoa_r+0x69e>
 800b0a8:	f018 0f01 	tst.w	r8, #1
 800b0ac:	d10e      	bne.n	800b0cc <_dtoa_r+0x6bc>
 800b0ae:	9902      	ldr	r1, [sp, #8]
 800b0b0:	4648      	mov	r0, r9
 800b0b2:	f000 fbbd 	bl	800b830 <_Bfree>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	7033      	strb	r3, [r6, #0]
 800b0ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0bc:	3701      	adds	r7, #1
 800b0be:	601f      	str	r7, [r3, #0]
 800b0c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 824b 	beq.w	800b55e <_dtoa_r+0xb4e>
 800b0c8:	601e      	str	r6, [r3, #0]
 800b0ca:	e248      	b.n	800b55e <_dtoa_r+0xb4e>
 800b0cc:	46b8      	mov	r8, r7
 800b0ce:	4633      	mov	r3, r6
 800b0d0:	461e      	mov	r6, r3
 800b0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0d6:	2a39      	cmp	r2, #57	@ 0x39
 800b0d8:	d106      	bne.n	800b0e8 <_dtoa_r+0x6d8>
 800b0da:	459a      	cmp	sl, r3
 800b0dc:	d1f8      	bne.n	800b0d0 <_dtoa_r+0x6c0>
 800b0de:	2230      	movs	r2, #48	@ 0x30
 800b0e0:	f108 0801 	add.w	r8, r8, #1
 800b0e4:	f88a 2000 	strb.w	r2, [sl]
 800b0e8:	781a      	ldrb	r2, [r3, #0]
 800b0ea:	3201      	adds	r2, #1
 800b0ec:	701a      	strb	r2, [r3, #0]
 800b0ee:	e7a0      	b.n	800b032 <_dtoa_r+0x622>
 800b0f0:	4b6f      	ldr	r3, [pc, #444]	@ (800b2b0 <_dtoa_r+0x8a0>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f7f5 fa80 	bl	80005f8 <__aeabi_dmul>
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	460d      	mov	r5, r1
 800b100:	f7f5 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b104:	2800      	cmp	r0, #0
 800b106:	d09f      	beq.n	800b048 <_dtoa_r+0x638>
 800b108:	e7d1      	b.n	800b0ae <_dtoa_r+0x69e>
 800b10a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b10c:	2a00      	cmp	r2, #0
 800b10e:	f000 80ea 	beq.w	800b2e6 <_dtoa_r+0x8d6>
 800b112:	9a07      	ldr	r2, [sp, #28]
 800b114:	2a01      	cmp	r2, #1
 800b116:	f300 80cd 	bgt.w	800b2b4 <_dtoa_r+0x8a4>
 800b11a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b11c:	2a00      	cmp	r2, #0
 800b11e:	f000 80c1 	beq.w	800b2a4 <_dtoa_r+0x894>
 800b122:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b126:	9c08      	ldr	r4, [sp, #32]
 800b128:	9e00      	ldr	r6, [sp, #0]
 800b12a:	9a00      	ldr	r2, [sp, #0]
 800b12c:	441a      	add	r2, r3
 800b12e:	9200      	str	r2, [sp, #0]
 800b130:	9a06      	ldr	r2, [sp, #24]
 800b132:	2101      	movs	r1, #1
 800b134:	441a      	add	r2, r3
 800b136:	4648      	mov	r0, r9
 800b138:	9206      	str	r2, [sp, #24]
 800b13a:	f000 fc2d 	bl	800b998 <__i2b>
 800b13e:	4605      	mov	r5, r0
 800b140:	b166      	cbz	r6, 800b15c <_dtoa_r+0x74c>
 800b142:	9b06      	ldr	r3, [sp, #24]
 800b144:	2b00      	cmp	r3, #0
 800b146:	dd09      	ble.n	800b15c <_dtoa_r+0x74c>
 800b148:	42b3      	cmp	r3, r6
 800b14a:	9a00      	ldr	r2, [sp, #0]
 800b14c:	bfa8      	it	ge
 800b14e:	4633      	movge	r3, r6
 800b150:	1ad2      	subs	r2, r2, r3
 800b152:	9200      	str	r2, [sp, #0]
 800b154:	9a06      	ldr	r2, [sp, #24]
 800b156:	1af6      	subs	r6, r6, r3
 800b158:	1ad3      	subs	r3, r2, r3
 800b15a:	9306      	str	r3, [sp, #24]
 800b15c:	9b08      	ldr	r3, [sp, #32]
 800b15e:	b30b      	cbz	r3, 800b1a4 <_dtoa_r+0x794>
 800b160:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b162:	2b00      	cmp	r3, #0
 800b164:	f000 80c6 	beq.w	800b2f4 <_dtoa_r+0x8e4>
 800b168:	2c00      	cmp	r4, #0
 800b16a:	f000 80c0 	beq.w	800b2ee <_dtoa_r+0x8de>
 800b16e:	4629      	mov	r1, r5
 800b170:	4622      	mov	r2, r4
 800b172:	4648      	mov	r0, r9
 800b174:	f000 fcc8 	bl	800bb08 <__pow5mult>
 800b178:	9a02      	ldr	r2, [sp, #8]
 800b17a:	4601      	mov	r1, r0
 800b17c:	4605      	mov	r5, r0
 800b17e:	4648      	mov	r0, r9
 800b180:	f000 fc20 	bl	800b9c4 <__multiply>
 800b184:	9902      	ldr	r1, [sp, #8]
 800b186:	4680      	mov	r8, r0
 800b188:	4648      	mov	r0, r9
 800b18a:	f000 fb51 	bl	800b830 <_Bfree>
 800b18e:	9b08      	ldr	r3, [sp, #32]
 800b190:	1b1b      	subs	r3, r3, r4
 800b192:	9308      	str	r3, [sp, #32]
 800b194:	f000 80b1 	beq.w	800b2fa <_dtoa_r+0x8ea>
 800b198:	9a08      	ldr	r2, [sp, #32]
 800b19a:	4641      	mov	r1, r8
 800b19c:	4648      	mov	r0, r9
 800b19e:	f000 fcb3 	bl	800bb08 <__pow5mult>
 800b1a2:	9002      	str	r0, [sp, #8]
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	4648      	mov	r0, r9
 800b1a8:	f000 fbf6 	bl	800b998 <__i2b>
 800b1ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	f000 81d8 	beq.w	800b566 <_dtoa_r+0xb56>
 800b1b6:	461a      	mov	r2, r3
 800b1b8:	4601      	mov	r1, r0
 800b1ba:	4648      	mov	r0, r9
 800b1bc:	f000 fca4 	bl	800bb08 <__pow5mult>
 800b1c0:	9b07      	ldr	r3, [sp, #28]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	f300 809f 	bgt.w	800b308 <_dtoa_r+0x8f8>
 800b1ca:	9b04      	ldr	r3, [sp, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f040 8097 	bne.w	800b300 <_dtoa_r+0x8f0>
 800b1d2:	9b05      	ldr	r3, [sp, #20]
 800b1d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	f040 8093 	bne.w	800b304 <_dtoa_r+0x8f4>
 800b1de:	9b05      	ldr	r3, [sp, #20]
 800b1e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b1e4:	0d1b      	lsrs	r3, r3, #20
 800b1e6:	051b      	lsls	r3, r3, #20
 800b1e8:	b133      	cbz	r3, 800b1f8 <_dtoa_r+0x7e8>
 800b1ea:	9b00      	ldr	r3, [sp, #0]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	9300      	str	r3, [sp, #0]
 800b1f0:	9b06      	ldr	r3, [sp, #24]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	9306      	str	r3, [sp, #24]
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	9308      	str	r3, [sp, #32]
 800b1fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 81b8 	beq.w	800b572 <_dtoa_r+0xb62>
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b208:	6918      	ldr	r0, [r3, #16]
 800b20a:	f000 fb79 	bl	800b900 <__hi0bits>
 800b20e:	f1c0 0020 	rsb	r0, r0, #32
 800b212:	9b06      	ldr	r3, [sp, #24]
 800b214:	4418      	add	r0, r3
 800b216:	f010 001f 	ands.w	r0, r0, #31
 800b21a:	f000 8082 	beq.w	800b322 <_dtoa_r+0x912>
 800b21e:	f1c0 0320 	rsb	r3, r0, #32
 800b222:	2b04      	cmp	r3, #4
 800b224:	dd73      	ble.n	800b30e <_dtoa_r+0x8fe>
 800b226:	9b00      	ldr	r3, [sp, #0]
 800b228:	f1c0 001c 	rsb	r0, r0, #28
 800b22c:	4403      	add	r3, r0
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	9b06      	ldr	r3, [sp, #24]
 800b232:	4403      	add	r3, r0
 800b234:	4406      	add	r6, r0
 800b236:	9306      	str	r3, [sp, #24]
 800b238:	9b00      	ldr	r3, [sp, #0]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	dd05      	ble.n	800b24a <_dtoa_r+0x83a>
 800b23e:	9902      	ldr	r1, [sp, #8]
 800b240:	461a      	mov	r2, r3
 800b242:	4648      	mov	r0, r9
 800b244:	f000 fcba 	bl	800bbbc <__lshift>
 800b248:	9002      	str	r0, [sp, #8]
 800b24a:	9b06      	ldr	r3, [sp, #24]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	dd05      	ble.n	800b25c <_dtoa_r+0x84c>
 800b250:	4621      	mov	r1, r4
 800b252:	461a      	mov	r2, r3
 800b254:	4648      	mov	r0, r9
 800b256:	f000 fcb1 	bl	800bbbc <__lshift>
 800b25a:	4604      	mov	r4, r0
 800b25c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d061      	beq.n	800b326 <_dtoa_r+0x916>
 800b262:	9802      	ldr	r0, [sp, #8]
 800b264:	4621      	mov	r1, r4
 800b266:	f000 fd15 	bl	800bc94 <__mcmp>
 800b26a:	2800      	cmp	r0, #0
 800b26c:	da5b      	bge.n	800b326 <_dtoa_r+0x916>
 800b26e:	2300      	movs	r3, #0
 800b270:	9902      	ldr	r1, [sp, #8]
 800b272:	220a      	movs	r2, #10
 800b274:	4648      	mov	r0, r9
 800b276:	f000 fafd 	bl	800b874 <__multadd>
 800b27a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b27c:	9002      	str	r0, [sp, #8]
 800b27e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b282:	2b00      	cmp	r3, #0
 800b284:	f000 8177 	beq.w	800b576 <_dtoa_r+0xb66>
 800b288:	4629      	mov	r1, r5
 800b28a:	2300      	movs	r3, #0
 800b28c:	220a      	movs	r2, #10
 800b28e:	4648      	mov	r0, r9
 800b290:	f000 faf0 	bl	800b874 <__multadd>
 800b294:	f1bb 0f00 	cmp.w	fp, #0
 800b298:	4605      	mov	r5, r0
 800b29a:	dc6f      	bgt.n	800b37c <_dtoa_r+0x96c>
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	dc49      	bgt.n	800b336 <_dtoa_r+0x926>
 800b2a2:	e06b      	b.n	800b37c <_dtoa_r+0x96c>
 800b2a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b2aa:	e73c      	b.n	800b126 <_dtoa_r+0x716>
 800b2ac:	3fe00000 	.word	0x3fe00000
 800b2b0:	40240000 	.word	0x40240000
 800b2b4:	9b03      	ldr	r3, [sp, #12]
 800b2b6:	1e5c      	subs	r4, r3, #1
 800b2b8:	9b08      	ldr	r3, [sp, #32]
 800b2ba:	42a3      	cmp	r3, r4
 800b2bc:	db09      	blt.n	800b2d2 <_dtoa_r+0x8c2>
 800b2be:	1b1c      	subs	r4, r3, r4
 800b2c0:	9b03      	ldr	r3, [sp, #12]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	f6bf af30 	bge.w	800b128 <_dtoa_r+0x718>
 800b2c8:	9b00      	ldr	r3, [sp, #0]
 800b2ca:	9a03      	ldr	r2, [sp, #12]
 800b2cc:	1a9e      	subs	r6, r3, r2
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	e72b      	b.n	800b12a <_dtoa_r+0x71a>
 800b2d2:	9b08      	ldr	r3, [sp, #32]
 800b2d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2d6:	9408      	str	r4, [sp, #32]
 800b2d8:	1ae3      	subs	r3, r4, r3
 800b2da:	441a      	add	r2, r3
 800b2dc:	9e00      	ldr	r6, [sp, #0]
 800b2de:	9b03      	ldr	r3, [sp, #12]
 800b2e0:	920d      	str	r2, [sp, #52]	@ 0x34
 800b2e2:	2400      	movs	r4, #0
 800b2e4:	e721      	b.n	800b12a <_dtoa_r+0x71a>
 800b2e6:	9c08      	ldr	r4, [sp, #32]
 800b2e8:	9e00      	ldr	r6, [sp, #0]
 800b2ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b2ec:	e728      	b.n	800b140 <_dtoa_r+0x730>
 800b2ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b2f2:	e751      	b.n	800b198 <_dtoa_r+0x788>
 800b2f4:	9a08      	ldr	r2, [sp, #32]
 800b2f6:	9902      	ldr	r1, [sp, #8]
 800b2f8:	e750      	b.n	800b19c <_dtoa_r+0x78c>
 800b2fa:	f8cd 8008 	str.w	r8, [sp, #8]
 800b2fe:	e751      	b.n	800b1a4 <_dtoa_r+0x794>
 800b300:	2300      	movs	r3, #0
 800b302:	e779      	b.n	800b1f8 <_dtoa_r+0x7e8>
 800b304:	9b04      	ldr	r3, [sp, #16]
 800b306:	e777      	b.n	800b1f8 <_dtoa_r+0x7e8>
 800b308:	2300      	movs	r3, #0
 800b30a:	9308      	str	r3, [sp, #32]
 800b30c:	e779      	b.n	800b202 <_dtoa_r+0x7f2>
 800b30e:	d093      	beq.n	800b238 <_dtoa_r+0x828>
 800b310:	9a00      	ldr	r2, [sp, #0]
 800b312:	331c      	adds	r3, #28
 800b314:	441a      	add	r2, r3
 800b316:	9200      	str	r2, [sp, #0]
 800b318:	9a06      	ldr	r2, [sp, #24]
 800b31a:	441a      	add	r2, r3
 800b31c:	441e      	add	r6, r3
 800b31e:	9206      	str	r2, [sp, #24]
 800b320:	e78a      	b.n	800b238 <_dtoa_r+0x828>
 800b322:	4603      	mov	r3, r0
 800b324:	e7f4      	b.n	800b310 <_dtoa_r+0x900>
 800b326:	9b03      	ldr	r3, [sp, #12]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	46b8      	mov	r8, r7
 800b32c:	dc20      	bgt.n	800b370 <_dtoa_r+0x960>
 800b32e:	469b      	mov	fp, r3
 800b330:	9b07      	ldr	r3, [sp, #28]
 800b332:	2b02      	cmp	r3, #2
 800b334:	dd1e      	ble.n	800b374 <_dtoa_r+0x964>
 800b336:	f1bb 0f00 	cmp.w	fp, #0
 800b33a:	f47f adb1 	bne.w	800aea0 <_dtoa_r+0x490>
 800b33e:	4621      	mov	r1, r4
 800b340:	465b      	mov	r3, fp
 800b342:	2205      	movs	r2, #5
 800b344:	4648      	mov	r0, r9
 800b346:	f000 fa95 	bl	800b874 <__multadd>
 800b34a:	4601      	mov	r1, r0
 800b34c:	4604      	mov	r4, r0
 800b34e:	9802      	ldr	r0, [sp, #8]
 800b350:	f000 fca0 	bl	800bc94 <__mcmp>
 800b354:	2800      	cmp	r0, #0
 800b356:	f77f ada3 	ble.w	800aea0 <_dtoa_r+0x490>
 800b35a:	4656      	mov	r6, sl
 800b35c:	2331      	movs	r3, #49	@ 0x31
 800b35e:	f806 3b01 	strb.w	r3, [r6], #1
 800b362:	f108 0801 	add.w	r8, r8, #1
 800b366:	e59f      	b.n	800aea8 <_dtoa_r+0x498>
 800b368:	9c03      	ldr	r4, [sp, #12]
 800b36a:	46b8      	mov	r8, r7
 800b36c:	4625      	mov	r5, r4
 800b36e:	e7f4      	b.n	800b35a <_dtoa_r+0x94a>
 800b370:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 8101 	beq.w	800b57e <_dtoa_r+0xb6e>
 800b37c:	2e00      	cmp	r6, #0
 800b37e:	dd05      	ble.n	800b38c <_dtoa_r+0x97c>
 800b380:	4629      	mov	r1, r5
 800b382:	4632      	mov	r2, r6
 800b384:	4648      	mov	r0, r9
 800b386:	f000 fc19 	bl	800bbbc <__lshift>
 800b38a:	4605      	mov	r5, r0
 800b38c:	9b08      	ldr	r3, [sp, #32]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d05c      	beq.n	800b44c <_dtoa_r+0xa3c>
 800b392:	6869      	ldr	r1, [r5, #4]
 800b394:	4648      	mov	r0, r9
 800b396:	f000 fa0b 	bl	800b7b0 <_Balloc>
 800b39a:	4606      	mov	r6, r0
 800b39c:	b928      	cbnz	r0, 800b3aa <_dtoa_r+0x99a>
 800b39e:	4b82      	ldr	r3, [pc, #520]	@ (800b5a8 <_dtoa_r+0xb98>)
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b3a6:	f7ff bb4a 	b.w	800aa3e <_dtoa_r+0x2e>
 800b3aa:	692a      	ldr	r2, [r5, #16]
 800b3ac:	3202      	adds	r2, #2
 800b3ae:	0092      	lsls	r2, r2, #2
 800b3b0:	f105 010c 	add.w	r1, r5, #12
 800b3b4:	300c      	adds	r0, #12
 800b3b6:	f7ff fa94 	bl	800a8e2 <memcpy>
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	4631      	mov	r1, r6
 800b3be:	4648      	mov	r0, r9
 800b3c0:	f000 fbfc 	bl	800bbbc <__lshift>
 800b3c4:	f10a 0301 	add.w	r3, sl, #1
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	eb0a 030b 	add.w	r3, sl, fp
 800b3ce:	9308      	str	r3, [sp, #32]
 800b3d0:	9b04      	ldr	r3, [sp, #16]
 800b3d2:	f003 0301 	and.w	r3, r3, #1
 800b3d6:	462f      	mov	r7, r5
 800b3d8:	9306      	str	r3, [sp, #24]
 800b3da:	4605      	mov	r5, r0
 800b3dc:	9b00      	ldr	r3, [sp, #0]
 800b3de:	9802      	ldr	r0, [sp, #8]
 800b3e0:	4621      	mov	r1, r4
 800b3e2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b3e6:	f7ff fa8a 	bl	800a8fe <quorem>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	3330      	adds	r3, #48	@ 0x30
 800b3ee:	9003      	str	r0, [sp, #12]
 800b3f0:	4639      	mov	r1, r7
 800b3f2:	9802      	ldr	r0, [sp, #8]
 800b3f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3f6:	f000 fc4d 	bl	800bc94 <__mcmp>
 800b3fa:	462a      	mov	r2, r5
 800b3fc:	9004      	str	r0, [sp, #16]
 800b3fe:	4621      	mov	r1, r4
 800b400:	4648      	mov	r0, r9
 800b402:	f000 fc63 	bl	800bccc <__mdiff>
 800b406:	68c2      	ldr	r2, [r0, #12]
 800b408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b40a:	4606      	mov	r6, r0
 800b40c:	bb02      	cbnz	r2, 800b450 <_dtoa_r+0xa40>
 800b40e:	4601      	mov	r1, r0
 800b410:	9802      	ldr	r0, [sp, #8]
 800b412:	f000 fc3f 	bl	800bc94 <__mcmp>
 800b416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b418:	4602      	mov	r2, r0
 800b41a:	4631      	mov	r1, r6
 800b41c:	4648      	mov	r0, r9
 800b41e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b420:	9309      	str	r3, [sp, #36]	@ 0x24
 800b422:	f000 fa05 	bl	800b830 <_Bfree>
 800b426:	9b07      	ldr	r3, [sp, #28]
 800b428:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b42a:	9e00      	ldr	r6, [sp, #0]
 800b42c:	ea42 0103 	orr.w	r1, r2, r3
 800b430:	9b06      	ldr	r3, [sp, #24]
 800b432:	4319      	orrs	r1, r3
 800b434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b436:	d10d      	bne.n	800b454 <_dtoa_r+0xa44>
 800b438:	2b39      	cmp	r3, #57	@ 0x39
 800b43a:	d027      	beq.n	800b48c <_dtoa_r+0xa7c>
 800b43c:	9a04      	ldr	r2, [sp, #16]
 800b43e:	2a00      	cmp	r2, #0
 800b440:	dd01      	ble.n	800b446 <_dtoa_r+0xa36>
 800b442:	9b03      	ldr	r3, [sp, #12]
 800b444:	3331      	adds	r3, #49	@ 0x31
 800b446:	f88b 3000 	strb.w	r3, [fp]
 800b44a:	e52e      	b.n	800aeaa <_dtoa_r+0x49a>
 800b44c:	4628      	mov	r0, r5
 800b44e:	e7b9      	b.n	800b3c4 <_dtoa_r+0x9b4>
 800b450:	2201      	movs	r2, #1
 800b452:	e7e2      	b.n	800b41a <_dtoa_r+0xa0a>
 800b454:	9904      	ldr	r1, [sp, #16]
 800b456:	2900      	cmp	r1, #0
 800b458:	db04      	blt.n	800b464 <_dtoa_r+0xa54>
 800b45a:	9807      	ldr	r0, [sp, #28]
 800b45c:	4301      	orrs	r1, r0
 800b45e:	9806      	ldr	r0, [sp, #24]
 800b460:	4301      	orrs	r1, r0
 800b462:	d120      	bne.n	800b4a6 <_dtoa_r+0xa96>
 800b464:	2a00      	cmp	r2, #0
 800b466:	ddee      	ble.n	800b446 <_dtoa_r+0xa36>
 800b468:	9902      	ldr	r1, [sp, #8]
 800b46a:	9300      	str	r3, [sp, #0]
 800b46c:	2201      	movs	r2, #1
 800b46e:	4648      	mov	r0, r9
 800b470:	f000 fba4 	bl	800bbbc <__lshift>
 800b474:	4621      	mov	r1, r4
 800b476:	9002      	str	r0, [sp, #8]
 800b478:	f000 fc0c 	bl	800bc94 <__mcmp>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	9b00      	ldr	r3, [sp, #0]
 800b480:	dc02      	bgt.n	800b488 <_dtoa_r+0xa78>
 800b482:	d1e0      	bne.n	800b446 <_dtoa_r+0xa36>
 800b484:	07da      	lsls	r2, r3, #31
 800b486:	d5de      	bpl.n	800b446 <_dtoa_r+0xa36>
 800b488:	2b39      	cmp	r3, #57	@ 0x39
 800b48a:	d1da      	bne.n	800b442 <_dtoa_r+0xa32>
 800b48c:	2339      	movs	r3, #57	@ 0x39
 800b48e:	f88b 3000 	strb.w	r3, [fp]
 800b492:	4633      	mov	r3, r6
 800b494:	461e      	mov	r6, r3
 800b496:	3b01      	subs	r3, #1
 800b498:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b49c:	2a39      	cmp	r2, #57	@ 0x39
 800b49e:	d04e      	beq.n	800b53e <_dtoa_r+0xb2e>
 800b4a0:	3201      	adds	r2, #1
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	e501      	b.n	800aeaa <_dtoa_r+0x49a>
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	dd03      	ble.n	800b4b2 <_dtoa_r+0xaa2>
 800b4aa:	2b39      	cmp	r3, #57	@ 0x39
 800b4ac:	d0ee      	beq.n	800b48c <_dtoa_r+0xa7c>
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	e7c9      	b.n	800b446 <_dtoa_r+0xa36>
 800b4b2:	9a00      	ldr	r2, [sp, #0]
 800b4b4:	9908      	ldr	r1, [sp, #32]
 800b4b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4ba:	428a      	cmp	r2, r1
 800b4bc:	d028      	beq.n	800b510 <_dtoa_r+0xb00>
 800b4be:	9902      	ldr	r1, [sp, #8]
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	220a      	movs	r2, #10
 800b4c4:	4648      	mov	r0, r9
 800b4c6:	f000 f9d5 	bl	800b874 <__multadd>
 800b4ca:	42af      	cmp	r7, r5
 800b4cc:	9002      	str	r0, [sp, #8]
 800b4ce:	f04f 0300 	mov.w	r3, #0
 800b4d2:	f04f 020a 	mov.w	r2, #10
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	4648      	mov	r0, r9
 800b4da:	d107      	bne.n	800b4ec <_dtoa_r+0xadc>
 800b4dc:	f000 f9ca 	bl	800b874 <__multadd>
 800b4e0:	4607      	mov	r7, r0
 800b4e2:	4605      	mov	r5, r0
 800b4e4:	9b00      	ldr	r3, [sp, #0]
 800b4e6:	3301      	adds	r3, #1
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	e777      	b.n	800b3dc <_dtoa_r+0x9cc>
 800b4ec:	f000 f9c2 	bl	800b874 <__multadd>
 800b4f0:	4629      	mov	r1, r5
 800b4f2:	4607      	mov	r7, r0
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	220a      	movs	r2, #10
 800b4f8:	4648      	mov	r0, r9
 800b4fa:	f000 f9bb 	bl	800b874 <__multadd>
 800b4fe:	4605      	mov	r5, r0
 800b500:	e7f0      	b.n	800b4e4 <_dtoa_r+0xad4>
 800b502:	f1bb 0f00 	cmp.w	fp, #0
 800b506:	bfcc      	ite	gt
 800b508:	465e      	movgt	r6, fp
 800b50a:	2601      	movle	r6, #1
 800b50c:	4456      	add	r6, sl
 800b50e:	2700      	movs	r7, #0
 800b510:	9902      	ldr	r1, [sp, #8]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	2201      	movs	r2, #1
 800b516:	4648      	mov	r0, r9
 800b518:	f000 fb50 	bl	800bbbc <__lshift>
 800b51c:	4621      	mov	r1, r4
 800b51e:	9002      	str	r0, [sp, #8]
 800b520:	f000 fbb8 	bl	800bc94 <__mcmp>
 800b524:	2800      	cmp	r0, #0
 800b526:	dcb4      	bgt.n	800b492 <_dtoa_r+0xa82>
 800b528:	d102      	bne.n	800b530 <_dtoa_r+0xb20>
 800b52a:	9b00      	ldr	r3, [sp, #0]
 800b52c:	07db      	lsls	r3, r3, #31
 800b52e:	d4b0      	bmi.n	800b492 <_dtoa_r+0xa82>
 800b530:	4633      	mov	r3, r6
 800b532:	461e      	mov	r6, r3
 800b534:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b538:	2a30      	cmp	r2, #48	@ 0x30
 800b53a:	d0fa      	beq.n	800b532 <_dtoa_r+0xb22>
 800b53c:	e4b5      	b.n	800aeaa <_dtoa_r+0x49a>
 800b53e:	459a      	cmp	sl, r3
 800b540:	d1a8      	bne.n	800b494 <_dtoa_r+0xa84>
 800b542:	2331      	movs	r3, #49	@ 0x31
 800b544:	f108 0801 	add.w	r8, r8, #1
 800b548:	f88a 3000 	strb.w	r3, [sl]
 800b54c:	e4ad      	b.n	800aeaa <_dtoa_r+0x49a>
 800b54e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b550:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b5ac <_dtoa_r+0xb9c>
 800b554:	b11b      	cbz	r3, 800b55e <_dtoa_r+0xb4e>
 800b556:	f10a 0308 	add.w	r3, sl, #8
 800b55a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	4650      	mov	r0, sl
 800b560:	b017      	add	sp, #92	@ 0x5c
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	9b07      	ldr	r3, [sp, #28]
 800b568:	2b01      	cmp	r3, #1
 800b56a:	f77f ae2e 	ble.w	800b1ca <_dtoa_r+0x7ba>
 800b56e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b570:	9308      	str	r3, [sp, #32]
 800b572:	2001      	movs	r0, #1
 800b574:	e64d      	b.n	800b212 <_dtoa_r+0x802>
 800b576:	f1bb 0f00 	cmp.w	fp, #0
 800b57a:	f77f aed9 	ble.w	800b330 <_dtoa_r+0x920>
 800b57e:	4656      	mov	r6, sl
 800b580:	9802      	ldr	r0, [sp, #8]
 800b582:	4621      	mov	r1, r4
 800b584:	f7ff f9bb 	bl	800a8fe <quorem>
 800b588:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b58c:	f806 3b01 	strb.w	r3, [r6], #1
 800b590:	eba6 020a 	sub.w	r2, r6, sl
 800b594:	4593      	cmp	fp, r2
 800b596:	ddb4      	ble.n	800b502 <_dtoa_r+0xaf2>
 800b598:	9902      	ldr	r1, [sp, #8]
 800b59a:	2300      	movs	r3, #0
 800b59c:	220a      	movs	r2, #10
 800b59e:	4648      	mov	r0, r9
 800b5a0:	f000 f968 	bl	800b874 <__multadd>
 800b5a4:	9002      	str	r0, [sp, #8]
 800b5a6:	e7eb      	b.n	800b580 <_dtoa_r+0xb70>
 800b5a8:	0800d250 	.word	0x0800d250
 800b5ac:	0800d1d4 	.word	0x0800d1d4

0800b5b0 <_free_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	2900      	cmp	r1, #0
 800b5b6:	d041      	beq.n	800b63c <_free_r+0x8c>
 800b5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5bc:	1f0c      	subs	r4, r1, #4
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bfb8      	it	lt
 800b5c2:	18e4      	addlt	r4, r4, r3
 800b5c4:	f000 f8e8 	bl	800b798 <__malloc_lock>
 800b5c8:	4a1d      	ldr	r2, [pc, #116]	@ (800b640 <_free_r+0x90>)
 800b5ca:	6813      	ldr	r3, [r2, #0]
 800b5cc:	b933      	cbnz	r3, 800b5dc <_free_r+0x2c>
 800b5ce:	6063      	str	r3, [r4, #4]
 800b5d0:	6014      	str	r4, [r2, #0]
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5d8:	f000 b8e4 	b.w	800b7a4 <__malloc_unlock>
 800b5dc:	42a3      	cmp	r3, r4
 800b5de:	d908      	bls.n	800b5f2 <_free_r+0x42>
 800b5e0:	6820      	ldr	r0, [r4, #0]
 800b5e2:	1821      	adds	r1, r4, r0
 800b5e4:	428b      	cmp	r3, r1
 800b5e6:	bf01      	itttt	eq
 800b5e8:	6819      	ldreq	r1, [r3, #0]
 800b5ea:	685b      	ldreq	r3, [r3, #4]
 800b5ec:	1809      	addeq	r1, r1, r0
 800b5ee:	6021      	streq	r1, [r4, #0]
 800b5f0:	e7ed      	b.n	800b5ce <_free_r+0x1e>
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	685b      	ldr	r3, [r3, #4]
 800b5f6:	b10b      	cbz	r3, 800b5fc <_free_r+0x4c>
 800b5f8:	42a3      	cmp	r3, r4
 800b5fa:	d9fa      	bls.n	800b5f2 <_free_r+0x42>
 800b5fc:	6811      	ldr	r1, [r2, #0]
 800b5fe:	1850      	adds	r0, r2, r1
 800b600:	42a0      	cmp	r0, r4
 800b602:	d10b      	bne.n	800b61c <_free_r+0x6c>
 800b604:	6820      	ldr	r0, [r4, #0]
 800b606:	4401      	add	r1, r0
 800b608:	1850      	adds	r0, r2, r1
 800b60a:	4283      	cmp	r3, r0
 800b60c:	6011      	str	r1, [r2, #0]
 800b60e:	d1e0      	bne.n	800b5d2 <_free_r+0x22>
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	6053      	str	r3, [r2, #4]
 800b616:	4408      	add	r0, r1
 800b618:	6010      	str	r0, [r2, #0]
 800b61a:	e7da      	b.n	800b5d2 <_free_r+0x22>
 800b61c:	d902      	bls.n	800b624 <_free_r+0x74>
 800b61e:	230c      	movs	r3, #12
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	e7d6      	b.n	800b5d2 <_free_r+0x22>
 800b624:	6820      	ldr	r0, [r4, #0]
 800b626:	1821      	adds	r1, r4, r0
 800b628:	428b      	cmp	r3, r1
 800b62a:	bf04      	itt	eq
 800b62c:	6819      	ldreq	r1, [r3, #0]
 800b62e:	685b      	ldreq	r3, [r3, #4]
 800b630:	6063      	str	r3, [r4, #4]
 800b632:	bf04      	itt	eq
 800b634:	1809      	addeq	r1, r1, r0
 800b636:	6021      	streq	r1, [r4, #0]
 800b638:	6054      	str	r4, [r2, #4]
 800b63a:	e7ca      	b.n	800b5d2 <_free_r+0x22>
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
 800b63e:	bf00      	nop
 800b640:	200024d8 	.word	0x200024d8

0800b644 <malloc>:
 800b644:	4b02      	ldr	r3, [pc, #8]	@ (800b650 <malloc+0xc>)
 800b646:	4601      	mov	r1, r0
 800b648:	6818      	ldr	r0, [r3, #0]
 800b64a:	f000 b825 	b.w	800b698 <_malloc_r>
 800b64e:	bf00      	nop
 800b650:	20000108 	.word	0x20000108

0800b654 <sbrk_aligned>:
 800b654:	b570      	push	{r4, r5, r6, lr}
 800b656:	4e0f      	ldr	r6, [pc, #60]	@ (800b694 <sbrk_aligned+0x40>)
 800b658:	460c      	mov	r4, r1
 800b65a:	6831      	ldr	r1, [r6, #0]
 800b65c:	4605      	mov	r5, r0
 800b65e:	b911      	cbnz	r1, 800b666 <sbrk_aligned+0x12>
 800b660:	f000 fe24 	bl	800c2ac <_sbrk_r>
 800b664:	6030      	str	r0, [r6, #0]
 800b666:	4621      	mov	r1, r4
 800b668:	4628      	mov	r0, r5
 800b66a:	f000 fe1f 	bl	800c2ac <_sbrk_r>
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	d103      	bne.n	800b67a <sbrk_aligned+0x26>
 800b672:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b676:	4620      	mov	r0, r4
 800b678:	bd70      	pop	{r4, r5, r6, pc}
 800b67a:	1cc4      	adds	r4, r0, #3
 800b67c:	f024 0403 	bic.w	r4, r4, #3
 800b680:	42a0      	cmp	r0, r4
 800b682:	d0f8      	beq.n	800b676 <sbrk_aligned+0x22>
 800b684:	1a21      	subs	r1, r4, r0
 800b686:	4628      	mov	r0, r5
 800b688:	f000 fe10 	bl	800c2ac <_sbrk_r>
 800b68c:	3001      	adds	r0, #1
 800b68e:	d1f2      	bne.n	800b676 <sbrk_aligned+0x22>
 800b690:	e7ef      	b.n	800b672 <sbrk_aligned+0x1e>
 800b692:	bf00      	nop
 800b694:	200024d4 	.word	0x200024d4

0800b698 <_malloc_r>:
 800b698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b69c:	1ccd      	adds	r5, r1, #3
 800b69e:	f025 0503 	bic.w	r5, r5, #3
 800b6a2:	3508      	adds	r5, #8
 800b6a4:	2d0c      	cmp	r5, #12
 800b6a6:	bf38      	it	cc
 800b6a8:	250c      	movcc	r5, #12
 800b6aa:	2d00      	cmp	r5, #0
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	db01      	blt.n	800b6b4 <_malloc_r+0x1c>
 800b6b0:	42a9      	cmp	r1, r5
 800b6b2:	d904      	bls.n	800b6be <_malloc_r+0x26>
 800b6b4:	230c      	movs	r3, #12
 800b6b6:	6033      	str	r3, [r6, #0]
 800b6b8:	2000      	movs	r0, #0
 800b6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b794 <_malloc_r+0xfc>
 800b6c2:	f000 f869 	bl	800b798 <__malloc_lock>
 800b6c6:	f8d8 3000 	ldr.w	r3, [r8]
 800b6ca:	461c      	mov	r4, r3
 800b6cc:	bb44      	cbnz	r4, 800b720 <_malloc_r+0x88>
 800b6ce:	4629      	mov	r1, r5
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7ff ffbf 	bl	800b654 <sbrk_aligned>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	4604      	mov	r4, r0
 800b6da:	d158      	bne.n	800b78e <_malloc_r+0xf6>
 800b6dc:	f8d8 4000 	ldr.w	r4, [r8]
 800b6e0:	4627      	mov	r7, r4
 800b6e2:	2f00      	cmp	r7, #0
 800b6e4:	d143      	bne.n	800b76e <_malloc_r+0xd6>
 800b6e6:	2c00      	cmp	r4, #0
 800b6e8:	d04b      	beq.n	800b782 <_malloc_r+0xea>
 800b6ea:	6823      	ldr	r3, [r4, #0]
 800b6ec:	4639      	mov	r1, r7
 800b6ee:	4630      	mov	r0, r6
 800b6f0:	eb04 0903 	add.w	r9, r4, r3
 800b6f4:	f000 fdda 	bl	800c2ac <_sbrk_r>
 800b6f8:	4581      	cmp	r9, r0
 800b6fa:	d142      	bne.n	800b782 <_malloc_r+0xea>
 800b6fc:	6821      	ldr	r1, [r4, #0]
 800b6fe:	1a6d      	subs	r5, r5, r1
 800b700:	4629      	mov	r1, r5
 800b702:	4630      	mov	r0, r6
 800b704:	f7ff ffa6 	bl	800b654 <sbrk_aligned>
 800b708:	3001      	adds	r0, #1
 800b70a:	d03a      	beq.n	800b782 <_malloc_r+0xea>
 800b70c:	6823      	ldr	r3, [r4, #0]
 800b70e:	442b      	add	r3, r5
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	f8d8 3000 	ldr.w	r3, [r8]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	bb62      	cbnz	r2, 800b774 <_malloc_r+0xdc>
 800b71a:	f8c8 7000 	str.w	r7, [r8]
 800b71e:	e00f      	b.n	800b740 <_malloc_r+0xa8>
 800b720:	6822      	ldr	r2, [r4, #0]
 800b722:	1b52      	subs	r2, r2, r5
 800b724:	d420      	bmi.n	800b768 <_malloc_r+0xd0>
 800b726:	2a0b      	cmp	r2, #11
 800b728:	d917      	bls.n	800b75a <_malloc_r+0xc2>
 800b72a:	1961      	adds	r1, r4, r5
 800b72c:	42a3      	cmp	r3, r4
 800b72e:	6025      	str	r5, [r4, #0]
 800b730:	bf18      	it	ne
 800b732:	6059      	strne	r1, [r3, #4]
 800b734:	6863      	ldr	r3, [r4, #4]
 800b736:	bf08      	it	eq
 800b738:	f8c8 1000 	streq.w	r1, [r8]
 800b73c:	5162      	str	r2, [r4, r5]
 800b73e:	604b      	str	r3, [r1, #4]
 800b740:	4630      	mov	r0, r6
 800b742:	f000 f82f 	bl	800b7a4 <__malloc_unlock>
 800b746:	f104 000b 	add.w	r0, r4, #11
 800b74a:	1d23      	adds	r3, r4, #4
 800b74c:	f020 0007 	bic.w	r0, r0, #7
 800b750:	1ac2      	subs	r2, r0, r3
 800b752:	bf1c      	itt	ne
 800b754:	1a1b      	subne	r3, r3, r0
 800b756:	50a3      	strne	r3, [r4, r2]
 800b758:	e7af      	b.n	800b6ba <_malloc_r+0x22>
 800b75a:	6862      	ldr	r2, [r4, #4]
 800b75c:	42a3      	cmp	r3, r4
 800b75e:	bf0c      	ite	eq
 800b760:	f8c8 2000 	streq.w	r2, [r8]
 800b764:	605a      	strne	r2, [r3, #4]
 800b766:	e7eb      	b.n	800b740 <_malloc_r+0xa8>
 800b768:	4623      	mov	r3, r4
 800b76a:	6864      	ldr	r4, [r4, #4]
 800b76c:	e7ae      	b.n	800b6cc <_malloc_r+0x34>
 800b76e:	463c      	mov	r4, r7
 800b770:	687f      	ldr	r7, [r7, #4]
 800b772:	e7b6      	b.n	800b6e2 <_malloc_r+0x4a>
 800b774:	461a      	mov	r2, r3
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	42a3      	cmp	r3, r4
 800b77a:	d1fb      	bne.n	800b774 <_malloc_r+0xdc>
 800b77c:	2300      	movs	r3, #0
 800b77e:	6053      	str	r3, [r2, #4]
 800b780:	e7de      	b.n	800b740 <_malloc_r+0xa8>
 800b782:	230c      	movs	r3, #12
 800b784:	6033      	str	r3, [r6, #0]
 800b786:	4630      	mov	r0, r6
 800b788:	f000 f80c 	bl	800b7a4 <__malloc_unlock>
 800b78c:	e794      	b.n	800b6b8 <_malloc_r+0x20>
 800b78e:	6005      	str	r5, [r0, #0]
 800b790:	e7d6      	b.n	800b740 <_malloc_r+0xa8>
 800b792:	bf00      	nop
 800b794:	200024d8 	.word	0x200024d8

0800b798 <__malloc_lock>:
 800b798:	4801      	ldr	r0, [pc, #4]	@ (800b7a0 <__malloc_lock+0x8>)
 800b79a:	f7ff b8a0 	b.w	800a8de <__retarget_lock_acquire_recursive>
 800b79e:	bf00      	nop
 800b7a0:	200024d0 	.word	0x200024d0

0800b7a4 <__malloc_unlock>:
 800b7a4:	4801      	ldr	r0, [pc, #4]	@ (800b7ac <__malloc_unlock+0x8>)
 800b7a6:	f7ff b89b 	b.w	800a8e0 <__retarget_lock_release_recursive>
 800b7aa:	bf00      	nop
 800b7ac:	200024d0 	.word	0x200024d0

0800b7b0 <_Balloc>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	69c6      	ldr	r6, [r0, #28]
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	b976      	cbnz	r6, 800b7d8 <_Balloc+0x28>
 800b7ba:	2010      	movs	r0, #16
 800b7bc:	f7ff ff42 	bl	800b644 <malloc>
 800b7c0:	4602      	mov	r2, r0
 800b7c2:	61e0      	str	r0, [r4, #28]
 800b7c4:	b920      	cbnz	r0, 800b7d0 <_Balloc+0x20>
 800b7c6:	4b18      	ldr	r3, [pc, #96]	@ (800b828 <_Balloc+0x78>)
 800b7c8:	4818      	ldr	r0, [pc, #96]	@ (800b82c <_Balloc+0x7c>)
 800b7ca:	216b      	movs	r1, #107	@ 0x6b
 800b7cc:	f000 fd7e 	bl	800c2cc <__assert_func>
 800b7d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7d4:	6006      	str	r6, [r0, #0]
 800b7d6:	60c6      	str	r6, [r0, #12]
 800b7d8:	69e6      	ldr	r6, [r4, #28]
 800b7da:	68f3      	ldr	r3, [r6, #12]
 800b7dc:	b183      	cbz	r3, 800b800 <_Balloc+0x50>
 800b7de:	69e3      	ldr	r3, [r4, #28]
 800b7e0:	68db      	ldr	r3, [r3, #12]
 800b7e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b7e6:	b9b8      	cbnz	r0, 800b818 <_Balloc+0x68>
 800b7e8:	2101      	movs	r1, #1
 800b7ea:	fa01 f605 	lsl.w	r6, r1, r5
 800b7ee:	1d72      	adds	r2, r6, #5
 800b7f0:	0092      	lsls	r2, r2, #2
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	f000 fd88 	bl	800c308 <_calloc_r>
 800b7f8:	b160      	cbz	r0, 800b814 <_Balloc+0x64>
 800b7fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b7fe:	e00e      	b.n	800b81e <_Balloc+0x6e>
 800b800:	2221      	movs	r2, #33	@ 0x21
 800b802:	2104      	movs	r1, #4
 800b804:	4620      	mov	r0, r4
 800b806:	f000 fd7f 	bl	800c308 <_calloc_r>
 800b80a:	69e3      	ldr	r3, [r4, #28]
 800b80c:	60f0      	str	r0, [r6, #12]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1e4      	bne.n	800b7de <_Balloc+0x2e>
 800b814:	2000      	movs	r0, #0
 800b816:	bd70      	pop	{r4, r5, r6, pc}
 800b818:	6802      	ldr	r2, [r0, #0]
 800b81a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b81e:	2300      	movs	r3, #0
 800b820:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b824:	e7f7      	b.n	800b816 <_Balloc+0x66>
 800b826:	bf00      	nop
 800b828:	0800d1e1 	.word	0x0800d1e1
 800b82c:	0800d261 	.word	0x0800d261

0800b830 <_Bfree>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	69c6      	ldr	r6, [r0, #28]
 800b834:	4605      	mov	r5, r0
 800b836:	460c      	mov	r4, r1
 800b838:	b976      	cbnz	r6, 800b858 <_Bfree+0x28>
 800b83a:	2010      	movs	r0, #16
 800b83c:	f7ff ff02 	bl	800b644 <malloc>
 800b840:	4602      	mov	r2, r0
 800b842:	61e8      	str	r0, [r5, #28]
 800b844:	b920      	cbnz	r0, 800b850 <_Bfree+0x20>
 800b846:	4b09      	ldr	r3, [pc, #36]	@ (800b86c <_Bfree+0x3c>)
 800b848:	4809      	ldr	r0, [pc, #36]	@ (800b870 <_Bfree+0x40>)
 800b84a:	218f      	movs	r1, #143	@ 0x8f
 800b84c:	f000 fd3e 	bl	800c2cc <__assert_func>
 800b850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b854:	6006      	str	r6, [r0, #0]
 800b856:	60c6      	str	r6, [r0, #12]
 800b858:	b13c      	cbz	r4, 800b86a <_Bfree+0x3a>
 800b85a:	69eb      	ldr	r3, [r5, #28]
 800b85c:	6862      	ldr	r2, [r4, #4]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b864:	6021      	str	r1, [r4, #0]
 800b866:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b86a:	bd70      	pop	{r4, r5, r6, pc}
 800b86c:	0800d1e1 	.word	0x0800d1e1
 800b870:	0800d261 	.word	0x0800d261

0800b874 <__multadd>:
 800b874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b878:	690d      	ldr	r5, [r1, #16]
 800b87a:	4607      	mov	r7, r0
 800b87c:	460c      	mov	r4, r1
 800b87e:	461e      	mov	r6, r3
 800b880:	f101 0c14 	add.w	ip, r1, #20
 800b884:	2000      	movs	r0, #0
 800b886:	f8dc 3000 	ldr.w	r3, [ip]
 800b88a:	b299      	uxth	r1, r3
 800b88c:	fb02 6101 	mla	r1, r2, r1, r6
 800b890:	0c1e      	lsrs	r6, r3, #16
 800b892:	0c0b      	lsrs	r3, r1, #16
 800b894:	fb02 3306 	mla	r3, r2, r6, r3
 800b898:	b289      	uxth	r1, r1
 800b89a:	3001      	adds	r0, #1
 800b89c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b8a0:	4285      	cmp	r5, r0
 800b8a2:	f84c 1b04 	str.w	r1, [ip], #4
 800b8a6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b8aa:	dcec      	bgt.n	800b886 <__multadd+0x12>
 800b8ac:	b30e      	cbz	r6, 800b8f2 <__multadd+0x7e>
 800b8ae:	68a3      	ldr	r3, [r4, #8]
 800b8b0:	42ab      	cmp	r3, r5
 800b8b2:	dc19      	bgt.n	800b8e8 <__multadd+0x74>
 800b8b4:	6861      	ldr	r1, [r4, #4]
 800b8b6:	4638      	mov	r0, r7
 800b8b8:	3101      	adds	r1, #1
 800b8ba:	f7ff ff79 	bl	800b7b0 <_Balloc>
 800b8be:	4680      	mov	r8, r0
 800b8c0:	b928      	cbnz	r0, 800b8ce <__multadd+0x5a>
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8f8 <__multadd+0x84>)
 800b8c6:	480d      	ldr	r0, [pc, #52]	@ (800b8fc <__multadd+0x88>)
 800b8c8:	21ba      	movs	r1, #186	@ 0xba
 800b8ca:	f000 fcff 	bl	800c2cc <__assert_func>
 800b8ce:	6922      	ldr	r2, [r4, #16]
 800b8d0:	3202      	adds	r2, #2
 800b8d2:	f104 010c 	add.w	r1, r4, #12
 800b8d6:	0092      	lsls	r2, r2, #2
 800b8d8:	300c      	adds	r0, #12
 800b8da:	f7ff f802 	bl	800a8e2 <memcpy>
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	f7ff ffa5 	bl	800b830 <_Bfree>
 800b8e6:	4644      	mov	r4, r8
 800b8e8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b8ec:	3501      	adds	r5, #1
 800b8ee:	615e      	str	r6, [r3, #20]
 800b8f0:	6125      	str	r5, [r4, #16]
 800b8f2:	4620      	mov	r0, r4
 800b8f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f8:	0800d250 	.word	0x0800d250
 800b8fc:	0800d261 	.word	0x0800d261

0800b900 <__hi0bits>:
 800b900:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b904:	4603      	mov	r3, r0
 800b906:	bf36      	itet	cc
 800b908:	0403      	lslcc	r3, r0, #16
 800b90a:	2000      	movcs	r0, #0
 800b90c:	2010      	movcc	r0, #16
 800b90e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b912:	bf3c      	itt	cc
 800b914:	021b      	lslcc	r3, r3, #8
 800b916:	3008      	addcc	r0, #8
 800b918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b91c:	bf3c      	itt	cc
 800b91e:	011b      	lslcc	r3, r3, #4
 800b920:	3004      	addcc	r0, #4
 800b922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b926:	bf3c      	itt	cc
 800b928:	009b      	lslcc	r3, r3, #2
 800b92a:	3002      	addcc	r0, #2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	db05      	blt.n	800b93c <__hi0bits+0x3c>
 800b930:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b934:	f100 0001 	add.w	r0, r0, #1
 800b938:	bf08      	it	eq
 800b93a:	2020      	moveq	r0, #32
 800b93c:	4770      	bx	lr

0800b93e <__lo0bits>:
 800b93e:	6803      	ldr	r3, [r0, #0]
 800b940:	4602      	mov	r2, r0
 800b942:	f013 0007 	ands.w	r0, r3, #7
 800b946:	d00b      	beq.n	800b960 <__lo0bits+0x22>
 800b948:	07d9      	lsls	r1, r3, #31
 800b94a:	d421      	bmi.n	800b990 <__lo0bits+0x52>
 800b94c:	0798      	lsls	r0, r3, #30
 800b94e:	bf49      	itett	mi
 800b950:	085b      	lsrmi	r3, r3, #1
 800b952:	089b      	lsrpl	r3, r3, #2
 800b954:	2001      	movmi	r0, #1
 800b956:	6013      	strmi	r3, [r2, #0]
 800b958:	bf5c      	itt	pl
 800b95a:	6013      	strpl	r3, [r2, #0]
 800b95c:	2002      	movpl	r0, #2
 800b95e:	4770      	bx	lr
 800b960:	b299      	uxth	r1, r3
 800b962:	b909      	cbnz	r1, 800b968 <__lo0bits+0x2a>
 800b964:	0c1b      	lsrs	r3, r3, #16
 800b966:	2010      	movs	r0, #16
 800b968:	b2d9      	uxtb	r1, r3
 800b96a:	b909      	cbnz	r1, 800b970 <__lo0bits+0x32>
 800b96c:	3008      	adds	r0, #8
 800b96e:	0a1b      	lsrs	r3, r3, #8
 800b970:	0719      	lsls	r1, r3, #28
 800b972:	bf04      	itt	eq
 800b974:	091b      	lsreq	r3, r3, #4
 800b976:	3004      	addeq	r0, #4
 800b978:	0799      	lsls	r1, r3, #30
 800b97a:	bf04      	itt	eq
 800b97c:	089b      	lsreq	r3, r3, #2
 800b97e:	3002      	addeq	r0, #2
 800b980:	07d9      	lsls	r1, r3, #31
 800b982:	d403      	bmi.n	800b98c <__lo0bits+0x4e>
 800b984:	085b      	lsrs	r3, r3, #1
 800b986:	f100 0001 	add.w	r0, r0, #1
 800b98a:	d003      	beq.n	800b994 <__lo0bits+0x56>
 800b98c:	6013      	str	r3, [r2, #0]
 800b98e:	4770      	bx	lr
 800b990:	2000      	movs	r0, #0
 800b992:	4770      	bx	lr
 800b994:	2020      	movs	r0, #32
 800b996:	4770      	bx	lr

0800b998 <__i2b>:
 800b998:	b510      	push	{r4, lr}
 800b99a:	460c      	mov	r4, r1
 800b99c:	2101      	movs	r1, #1
 800b99e:	f7ff ff07 	bl	800b7b0 <_Balloc>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	b928      	cbnz	r0, 800b9b2 <__i2b+0x1a>
 800b9a6:	4b05      	ldr	r3, [pc, #20]	@ (800b9bc <__i2b+0x24>)
 800b9a8:	4805      	ldr	r0, [pc, #20]	@ (800b9c0 <__i2b+0x28>)
 800b9aa:	f240 1145 	movw	r1, #325	@ 0x145
 800b9ae:	f000 fc8d 	bl	800c2cc <__assert_func>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	6144      	str	r4, [r0, #20]
 800b9b6:	6103      	str	r3, [r0, #16]
 800b9b8:	bd10      	pop	{r4, pc}
 800b9ba:	bf00      	nop
 800b9bc:	0800d250 	.word	0x0800d250
 800b9c0:	0800d261 	.word	0x0800d261

0800b9c4 <__multiply>:
 800b9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c8:	4617      	mov	r7, r2
 800b9ca:	690a      	ldr	r2, [r1, #16]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	bfa8      	it	ge
 800b9d2:	463b      	movge	r3, r7
 800b9d4:	4689      	mov	r9, r1
 800b9d6:	bfa4      	itt	ge
 800b9d8:	460f      	movge	r7, r1
 800b9da:	4699      	movge	r9, r3
 800b9dc:	693d      	ldr	r5, [r7, #16]
 800b9de:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	6879      	ldr	r1, [r7, #4]
 800b9e6:	eb05 060a 	add.w	r6, r5, sl
 800b9ea:	42b3      	cmp	r3, r6
 800b9ec:	b085      	sub	sp, #20
 800b9ee:	bfb8      	it	lt
 800b9f0:	3101      	addlt	r1, #1
 800b9f2:	f7ff fedd 	bl	800b7b0 <_Balloc>
 800b9f6:	b930      	cbnz	r0, 800ba06 <__multiply+0x42>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	4b41      	ldr	r3, [pc, #260]	@ (800bb00 <__multiply+0x13c>)
 800b9fc:	4841      	ldr	r0, [pc, #260]	@ (800bb04 <__multiply+0x140>)
 800b9fe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ba02:	f000 fc63 	bl	800c2cc <__assert_func>
 800ba06:	f100 0414 	add.w	r4, r0, #20
 800ba0a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ba0e:	4623      	mov	r3, r4
 800ba10:	2200      	movs	r2, #0
 800ba12:	4573      	cmp	r3, lr
 800ba14:	d320      	bcc.n	800ba58 <__multiply+0x94>
 800ba16:	f107 0814 	add.w	r8, r7, #20
 800ba1a:	f109 0114 	add.w	r1, r9, #20
 800ba1e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ba22:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ba26:	9302      	str	r3, [sp, #8]
 800ba28:	1beb      	subs	r3, r5, r7
 800ba2a:	3b15      	subs	r3, #21
 800ba2c:	f023 0303 	bic.w	r3, r3, #3
 800ba30:	3304      	adds	r3, #4
 800ba32:	3715      	adds	r7, #21
 800ba34:	42bd      	cmp	r5, r7
 800ba36:	bf38      	it	cc
 800ba38:	2304      	movcc	r3, #4
 800ba3a:	9301      	str	r3, [sp, #4]
 800ba3c:	9b02      	ldr	r3, [sp, #8]
 800ba3e:	9103      	str	r1, [sp, #12]
 800ba40:	428b      	cmp	r3, r1
 800ba42:	d80c      	bhi.n	800ba5e <__multiply+0x9a>
 800ba44:	2e00      	cmp	r6, #0
 800ba46:	dd03      	ble.n	800ba50 <__multiply+0x8c>
 800ba48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d055      	beq.n	800bafc <__multiply+0x138>
 800ba50:	6106      	str	r6, [r0, #16]
 800ba52:	b005      	add	sp, #20
 800ba54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba58:	f843 2b04 	str.w	r2, [r3], #4
 800ba5c:	e7d9      	b.n	800ba12 <__multiply+0x4e>
 800ba5e:	f8b1 a000 	ldrh.w	sl, [r1]
 800ba62:	f1ba 0f00 	cmp.w	sl, #0
 800ba66:	d01f      	beq.n	800baa8 <__multiply+0xe4>
 800ba68:	46c4      	mov	ip, r8
 800ba6a:	46a1      	mov	r9, r4
 800ba6c:	2700      	movs	r7, #0
 800ba6e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ba72:	f8d9 3000 	ldr.w	r3, [r9]
 800ba76:	fa1f fb82 	uxth.w	fp, r2
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ba80:	443b      	add	r3, r7
 800ba82:	f8d9 7000 	ldr.w	r7, [r9]
 800ba86:	0c12      	lsrs	r2, r2, #16
 800ba88:	0c3f      	lsrs	r7, r7, #16
 800ba8a:	fb0a 7202 	mla	r2, sl, r2, r7
 800ba8e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba98:	4565      	cmp	r5, ip
 800ba9a:	f849 3b04 	str.w	r3, [r9], #4
 800ba9e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800baa2:	d8e4      	bhi.n	800ba6e <__multiply+0xaa>
 800baa4:	9b01      	ldr	r3, [sp, #4]
 800baa6:	50e7      	str	r7, [r4, r3]
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800baae:	3104      	adds	r1, #4
 800bab0:	f1b9 0f00 	cmp.w	r9, #0
 800bab4:	d020      	beq.n	800baf8 <__multiply+0x134>
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	4647      	mov	r7, r8
 800baba:	46a4      	mov	ip, r4
 800babc:	f04f 0a00 	mov.w	sl, #0
 800bac0:	f8b7 b000 	ldrh.w	fp, [r7]
 800bac4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bac8:	fb09 220b 	mla	r2, r9, fp, r2
 800bacc:	4452      	add	r2, sl
 800bace:	b29b      	uxth	r3, r3
 800bad0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bad4:	f84c 3b04 	str.w	r3, [ip], #4
 800bad8:	f857 3b04 	ldr.w	r3, [r7], #4
 800badc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bae0:	f8bc 3000 	ldrh.w	r3, [ip]
 800bae4:	fb09 330a 	mla	r3, r9, sl, r3
 800bae8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800baec:	42bd      	cmp	r5, r7
 800baee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800baf2:	d8e5      	bhi.n	800bac0 <__multiply+0xfc>
 800baf4:	9a01      	ldr	r2, [sp, #4]
 800baf6:	50a3      	str	r3, [r4, r2]
 800baf8:	3404      	adds	r4, #4
 800bafa:	e79f      	b.n	800ba3c <__multiply+0x78>
 800bafc:	3e01      	subs	r6, #1
 800bafe:	e7a1      	b.n	800ba44 <__multiply+0x80>
 800bb00:	0800d250 	.word	0x0800d250
 800bb04:	0800d261 	.word	0x0800d261

0800bb08 <__pow5mult>:
 800bb08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb0c:	4615      	mov	r5, r2
 800bb0e:	f012 0203 	ands.w	r2, r2, #3
 800bb12:	4607      	mov	r7, r0
 800bb14:	460e      	mov	r6, r1
 800bb16:	d007      	beq.n	800bb28 <__pow5mult+0x20>
 800bb18:	4c25      	ldr	r4, [pc, #148]	@ (800bbb0 <__pow5mult+0xa8>)
 800bb1a:	3a01      	subs	r2, #1
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb22:	f7ff fea7 	bl	800b874 <__multadd>
 800bb26:	4606      	mov	r6, r0
 800bb28:	10ad      	asrs	r5, r5, #2
 800bb2a:	d03d      	beq.n	800bba8 <__pow5mult+0xa0>
 800bb2c:	69fc      	ldr	r4, [r7, #28]
 800bb2e:	b97c      	cbnz	r4, 800bb50 <__pow5mult+0x48>
 800bb30:	2010      	movs	r0, #16
 800bb32:	f7ff fd87 	bl	800b644 <malloc>
 800bb36:	4602      	mov	r2, r0
 800bb38:	61f8      	str	r0, [r7, #28]
 800bb3a:	b928      	cbnz	r0, 800bb48 <__pow5mult+0x40>
 800bb3c:	4b1d      	ldr	r3, [pc, #116]	@ (800bbb4 <__pow5mult+0xac>)
 800bb3e:	481e      	ldr	r0, [pc, #120]	@ (800bbb8 <__pow5mult+0xb0>)
 800bb40:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bb44:	f000 fbc2 	bl	800c2cc <__assert_func>
 800bb48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb4c:	6004      	str	r4, [r0, #0]
 800bb4e:	60c4      	str	r4, [r0, #12]
 800bb50:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bb54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb58:	b94c      	cbnz	r4, 800bb6e <__pow5mult+0x66>
 800bb5a:	f240 2171 	movw	r1, #625	@ 0x271
 800bb5e:	4638      	mov	r0, r7
 800bb60:	f7ff ff1a 	bl	800b998 <__i2b>
 800bb64:	2300      	movs	r3, #0
 800bb66:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	6003      	str	r3, [r0, #0]
 800bb6e:	f04f 0900 	mov.w	r9, #0
 800bb72:	07eb      	lsls	r3, r5, #31
 800bb74:	d50a      	bpl.n	800bb8c <__pow5mult+0x84>
 800bb76:	4631      	mov	r1, r6
 800bb78:	4622      	mov	r2, r4
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	f7ff ff22 	bl	800b9c4 <__multiply>
 800bb80:	4631      	mov	r1, r6
 800bb82:	4680      	mov	r8, r0
 800bb84:	4638      	mov	r0, r7
 800bb86:	f7ff fe53 	bl	800b830 <_Bfree>
 800bb8a:	4646      	mov	r6, r8
 800bb8c:	106d      	asrs	r5, r5, #1
 800bb8e:	d00b      	beq.n	800bba8 <__pow5mult+0xa0>
 800bb90:	6820      	ldr	r0, [r4, #0]
 800bb92:	b938      	cbnz	r0, 800bba4 <__pow5mult+0x9c>
 800bb94:	4622      	mov	r2, r4
 800bb96:	4621      	mov	r1, r4
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f7ff ff13 	bl	800b9c4 <__multiply>
 800bb9e:	6020      	str	r0, [r4, #0]
 800bba0:	f8c0 9000 	str.w	r9, [r0]
 800bba4:	4604      	mov	r4, r0
 800bba6:	e7e4      	b.n	800bb72 <__pow5mult+0x6a>
 800bba8:	4630      	mov	r0, r6
 800bbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbae:	bf00      	nop
 800bbb0:	0800d314 	.word	0x0800d314
 800bbb4:	0800d1e1 	.word	0x0800d1e1
 800bbb8:	0800d261 	.word	0x0800d261

0800bbbc <__lshift>:
 800bbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	6849      	ldr	r1, [r1, #4]
 800bbc4:	6923      	ldr	r3, [r4, #16]
 800bbc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbca:	68a3      	ldr	r3, [r4, #8]
 800bbcc:	4607      	mov	r7, r0
 800bbce:	4691      	mov	r9, r2
 800bbd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbd4:	f108 0601 	add.w	r6, r8, #1
 800bbd8:	42b3      	cmp	r3, r6
 800bbda:	db0b      	blt.n	800bbf4 <__lshift+0x38>
 800bbdc:	4638      	mov	r0, r7
 800bbde:	f7ff fde7 	bl	800b7b0 <_Balloc>
 800bbe2:	4605      	mov	r5, r0
 800bbe4:	b948      	cbnz	r0, 800bbfa <__lshift+0x3e>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	4b28      	ldr	r3, [pc, #160]	@ (800bc8c <__lshift+0xd0>)
 800bbea:	4829      	ldr	r0, [pc, #164]	@ (800bc90 <__lshift+0xd4>)
 800bbec:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bbf0:	f000 fb6c 	bl	800c2cc <__assert_func>
 800bbf4:	3101      	adds	r1, #1
 800bbf6:	005b      	lsls	r3, r3, #1
 800bbf8:	e7ee      	b.n	800bbd8 <__lshift+0x1c>
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f100 0114 	add.w	r1, r0, #20
 800bc00:	f100 0210 	add.w	r2, r0, #16
 800bc04:	4618      	mov	r0, r3
 800bc06:	4553      	cmp	r3, sl
 800bc08:	db33      	blt.n	800bc72 <__lshift+0xb6>
 800bc0a:	6920      	ldr	r0, [r4, #16]
 800bc0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc10:	f104 0314 	add.w	r3, r4, #20
 800bc14:	f019 091f 	ands.w	r9, r9, #31
 800bc18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bc20:	d02b      	beq.n	800bc7a <__lshift+0xbe>
 800bc22:	f1c9 0e20 	rsb	lr, r9, #32
 800bc26:	468a      	mov	sl, r1
 800bc28:	2200      	movs	r2, #0
 800bc2a:	6818      	ldr	r0, [r3, #0]
 800bc2c:	fa00 f009 	lsl.w	r0, r0, r9
 800bc30:	4310      	orrs	r0, r2
 800bc32:	f84a 0b04 	str.w	r0, [sl], #4
 800bc36:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc3a:	459c      	cmp	ip, r3
 800bc3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800bc40:	d8f3      	bhi.n	800bc2a <__lshift+0x6e>
 800bc42:	ebac 0304 	sub.w	r3, ip, r4
 800bc46:	3b15      	subs	r3, #21
 800bc48:	f023 0303 	bic.w	r3, r3, #3
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	f104 0015 	add.w	r0, r4, #21
 800bc52:	4560      	cmp	r0, ip
 800bc54:	bf88      	it	hi
 800bc56:	2304      	movhi	r3, #4
 800bc58:	50ca      	str	r2, [r1, r3]
 800bc5a:	b10a      	cbz	r2, 800bc60 <__lshift+0xa4>
 800bc5c:	f108 0602 	add.w	r6, r8, #2
 800bc60:	3e01      	subs	r6, #1
 800bc62:	4638      	mov	r0, r7
 800bc64:	612e      	str	r6, [r5, #16]
 800bc66:	4621      	mov	r1, r4
 800bc68:	f7ff fde2 	bl	800b830 <_Bfree>
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc72:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc76:	3301      	adds	r3, #1
 800bc78:	e7c5      	b.n	800bc06 <__lshift+0x4a>
 800bc7a:	3904      	subs	r1, #4
 800bc7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc80:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc84:	459c      	cmp	ip, r3
 800bc86:	d8f9      	bhi.n	800bc7c <__lshift+0xc0>
 800bc88:	e7ea      	b.n	800bc60 <__lshift+0xa4>
 800bc8a:	bf00      	nop
 800bc8c:	0800d250 	.word	0x0800d250
 800bc90:	0800d261 	.word	0x0800d261

0800bc94 <__mcmp>:
 800bc94:	690a      	ldr	r2, [r1, #16]
 800bc96:	4603      	mov	r3, r0
 800bc98:	6900      	ldr	r0, [r0, #16]
 800bc9a:	1a80      	subs	r0, r0, r2
 800bc9c:	b530      	push	{r4, r5, lr}
 800bc9e:	d10e      	bne.n	800bcbe <__mcmp+0x2a>
 800bca0:	3314      	adds	r3, #20
 800bca2:	3114      	adds	r1, #20
 800bca4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bca8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bcac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bcb0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bcb4:	4295      	cmp	r5, r2
 800bcb6:	d003      	beq.n	800bcc0 <__mcmp+0x2c>
 800bcb8:	d205      	bcs.n	800bcc6 <__mcmp+0x32>
 800bcba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bcbe:	bd30      	pop	{r4, r5, pc}
 800bcc0:	42a3      	cmp	r3, r4
 800bcc2:	d3f3      	bcc.n	800bcac <__mcmp+0x18>
 800bcc4:	e7fb      	b.n	800bcbe <__mcmp+0x2a>
 800bcc6:	2001      	movs	r0, #1
 800bcc8:	e7f9      	b.n	800bcbe <__mcmp+0x2a>
	...

0800bccc <__mdiff>:
 800bccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd0:	4689      	mov	r9, r1
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	4611      	mov	r1, r2
 800bcd6:	4648      	mov	r0, r9
 800bcd8:	4614      	mov	r4, r2
 800bcda:	f7ff ffdb 	bl	800bc94 <__mcmp>
 800bcde:	1e05      	subs	r5, r0, #0
 800bce0:	d112      	bne.n	800bd08 <__mdiff+0x3c>
 800bce2:	4629      	mov	r1, r5
 800bce4:	4630      	mov	r0, r6
 800bce6:	f7ff fd63 	bl	800b7b0 <_Balloc>
 800bcea:	4602      	mov	r2, r0
 800bcec:	b928      	cbnz	r0, 800bcfa <__mdiff+0x2e>
 800bcee:	4b3f      	ldr	r3, [pc, #252]	@ (800bdec <__mdiff+0x120>)
 800bcf0:	f240 2137 	movw	r1, #567	@ 0x237
 800bcf4:	483e      	ldr	r0, [pc, #248]	@ (800bdf0 <__mdiff+0x124>)
 800bcf6:	f000 fae9 	bl	800c2cc <__assert_func>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd00:	4610      	mov	r0, r2
 800bd02:	b003      	add	sp, #12
 800bd04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd08:	bfbc      	itt	lt
 800bd0a:	464b      	movlt	r3, r9
 800bd0c:	46a1      	movlt	r9, r4
 800bd0e:	4630      	mov	r0, r6
 800bd10:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bd14:	bfba      	itte	lt
 800bd16:	461c      	movlt	r4, r3
 800bd18:	2501      	movlt	r5, #1
 800bd1a:	2500      	movge	r5, #0
 800bd1c:	f7ff fd48 	bl	800b7b0 <_Balloc>
 800bd20:	4602      	mov	r2, r0
 800bd22:	b918      	cbnz	r0, 800bd2c <__mdiff+0x60>
 800bd24:	4b31      	ldr	r3, [pc, #196]	@ (800bdec <__mdiff+0x120>)
 800bd26:	f240 2145 	movw	r1, #581	@ 0x245
 800bd2a:	e7e3      	b.n	800bcf4 <__mdiff+0x28>
 800bd2c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bd30:	6926      	ldr	r6, [r4, #16]
 800bd32:	60c5      	str	r5, [r0, #12]
 800bd34:	f109 0310 	add.w	r3, r9, #16
 800bd38:	f109 0514 	add.w	r5, r9, #20
 800bd3c:	f104 0e14 	add.w	lr, r4, #20
 800bd40:	f100 0b14 	add.w	fp, r0, #20
 800bd44:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bd48:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bd4c:	9301      	str	r3, [sp, #4]
 800bd4e:	46d9      	mov	r9, fp
 800bd50:	f04f 0c00 	mov.w	ip, #0
 800bd54:	9b01      	ldr	r3, [sp, #4]
 800bd56:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bd5a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	fa1f f38a 	uxth.w	r3, sl
 800bd64:	4619      	mov	r1, r3
 800bd66:	b283      	uxth	r3, r0
 800bd68:	1acb      	subs	r3, r1, r3
 800bd6a:	0c00      	lsrs	r0, r0, #16
 800bd6c:	4463      	add	r3, ip
 800bd6e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bd72:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bd7c:	4576      	cmp	r6, lr
 800bd7e:	f849 3b04 	str.w	r3, [r9], #4
 800bd82:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd86:	d8e5      	bhi.n	800bd54 <__mdiff+0x88>
 800bd88:	1b33      	subs	r3, r6, r4
 800bd8a:	3b15      	subs	r3, #21
 800bd8c:	f023 0303 	bic.w	r3, r3, #3
 800bd90:	3415      	adds	r4, #21
 800bd92:	3304      	adds	r3, #4
 800bd94:	42a6      	cmp	r6, r4
 800bd96:	bf38      	it	cc
 800bd98:	2304      	movcc	r3, #4
 800bd9a:	441d      	add	r5, r3
 800bd9c:	445b      	add	r3, fp
 800bd9e:	461e      	mov	r6, r3
 800bda0:	462c      	mov	r4, r5
 800bda2:	4544      	cmp	r4, r8
 800bda4:	d30e      	bcc.n	800bdc4 <__mdiff+0xf8>
 800bda6:	f108 0103 	add.w	r1, r8, #3
 800bdaa:	1b49      	subs	r1, r1, r5
 800bdac:	f021 0103 	bic.w	r1, r1, #3
 800bdb0:	3d03      	subs	r5, #3
 800bdb2:	45a8      	cmp	r8, r5
 800bdb4:	bf38      	it	cc
 800bdb6:	2100      	movcc	r1, #0
 800bdb8:	440b      	add	r3, r1
 800bdba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bdbe:	b191      	cbz	r1, 800bde6 <__mdiff+0x11a>
 800bdc0:	6117      	str	r7, [r2, #16]
 800bdc2:	e79d      	b.n	800bd00 <__mdiff+0x34>
 800bdc4:	f854 1b04 	ldr.w	r1, [r4], #4
 800bdc8:	46e6      	mov	lr, ip
 800bdca:	0c08      	lsrs	r0, r1, #16
 800bdcc:	fa1c fc81 	uxtah	ip, ip, r1
 800bdd0:	4471      	add	r1, lr
 800bdd2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bdd6:	b289      	uxth	r1, r1
 800bdd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bddc:	f846 1b04 	str.w	r1, [r6], #4
 800bde0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bde4:	e7dd      	b.n	800bda2 <__mdiff+0xd6>
 800bde6:	3f01      	subs	r7, #1
 800bde8:	e7e7      	b.n	800bdba <__mdiff+0xee>
 800bdea:	bf00      	nop
 800bdec:	0800d250 	.word	0x0800d250
 800bdf0:	0800d261 	.word	0x0800d261

0800bdf4 <__d2b>:
 800bdf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	ec59 8b10 	vmov	r8, r9, d0
 800be00:	4616      	mov	r6, r2
 800be02:	f7ff fcd5 	bl	800b7b0 <_Balloc>
 800be06:	4604      	mov	r4, r0
 800be08:	b930      	cbnz	r0, 800be18 <__d2b+0x24>
 800be0a:	4602      	mov	r2, r0
 800be0c:	4b23      	ldr	r3, [pc, #140]	@ (800be9c <__d2b+0xa8>)
 800be0e:	4824      	ldr	r0, [pc, #144]	@ (800bea0 <__d2b+0xac>)
 800be10:	f240 310f 	movw	r1, #783	@ 0x30f
 800be14:	f000 fa5a 	bl	800c2cc <__assert_func>
 800be18:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be1c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be20:	b10d      	cbz	r5, 800be26 <__d2b+0x32>
 800be22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be26:	9301      	str	r3, [sp, #4]
 800be28:	f1b8 0300 	subs.w	r3, r8, #0
 800be2c:	d023      	beq.n	800be76 <__d2b+0x82>
 800be2e:	4668      	mov	r0, sp
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	f7ff fd84 	bl	800b93e <__lo0bits>
 800be36:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be3a:	b1d0      	cbz	r0, 800be72 <__d2b+0x7e>
 800be3c:	f1c0 0320 	rsb	r3, r0, #32
 800be40:	fa02 f303 	lsl.w	r3, r2, r3
 800be44:	430b      	orrs	r3, r1
 800be46:	40c2      	lsrs	r2, r0
 800be48:	6163      	str	r3, [r4, #20]
 800be4a:	9201      	str	r2, [sp, #4]
 800be4c:	9b01      	ldr	r3, [sp, #4]
 800be4e:	61a3      	str	r3, [r4, #24]
 800be50:	2b00      	cmp	r3, #0
 800be52:	bf0c      	ite	eq
 800be54:	2201      	moveq	r2, #1
 800be56:	2202      	movne	r2, #2
 800be58:	6122      	str	r2, [r4, #16]
 800be5a:	b1a5      	cbz	r5, 800be86 <__d2b+0x92>
 800be5c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be60:	4405      	add	r5, r0
 800be62:	603d      	str	r5, [r7, #0]
 800be64:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be68:	6030      	str	r0, [r6, #0]
 800be6a:	4620      	mov	r0, r4
 800be6c:	b003      	add	sp, #12
 800be6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be72:	6161      	str	r1, [r4, #20]
 800be74:	e7ea      	b.n	800be4c <__d2b+0x58>
 800be76:	a801      	add	r0, sp, #4
 800be78:	f7ff fd61 	bl	800b93e <__lo0bits>
 800be7c:	9b01      	ldr	r3, [sp, #4]
 800be7e:	6163      	str	r3, [r4, #20]
 800be80:	3020      	adds	r0, #32
 800be82:	2201      	movs	r2, #1
 800be84:	e7e8      	b.n	800be58 <__d2b+0x64>
 800be86:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be8a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be8e:	6038      	str	r0, [r7, #0]
 800be90:	6918      	ldr	r0, [r3, #16]
 800be92:	f7ff fd35 	bl	800b900 <__hi0bits>
 800be96:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be9a:	e7e5      	b.n	800be68 <__d2b+0x74>
 800be9c:	0800d250 	.word	0x0800d250
 800bea0:	0800d261 	.word	0x0800d261

0800bea4 <__ssputs_r>:
 800bea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea8:	688e      	ldr	r6, [r1, #8]
 800beaa:	461f      	mov	r7, r3
 800beac:	42be      	cmp	r6, r7
 800beae:	680b      	ldr	r3, [r1, #0]
 800beb0:	4682      	mov	sl, r0
 800beb2:	460c      	mov	r4, r1
 800beb4:	4690      	mov	r8, r2
 800beb6:	d82d      	bhi.n	800bf14 <__ssputs_r+0x70>
 800beb8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bebc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bec0:	d026      	beq.n	800bf10 <__ssputs_r+0x6c>
 800bec2:	6965      	ldr	r5, [r4, #20]
 800bec4:	6909      	ldr	r1, [r1, #16]
 800bec6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800beca:	eba3 0901 	sub.w	r9, r3, r1
 800bece:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bed2:	1c7b      	adds	r3, r7, #1
 800bed4:	444b      	add	r3, r9
 800bed6:	106d      	asrs	r5, r5, #1
 800bed8:	429d      	cmp	r5, r3
 800beda:	bf38      	it	cc
 800bedc:	461d      	movcc	r5, r3
 800bede:	0553      	lsls	r3, r2, #21
 800bee0:	d527      	bpl.n	800bf32 <__ssputs_r+0x8e>
 800bee2:	4629      	mov	r1, r5
 800bee4:	f7ff fbd8 	bl	800b698 <_malloc_r>
 800bee8:	4606      	mov	r6, r0
 800beea:	b360      	cbz	r0, 800bf46 <__ssputs_r+0xa2>
 800beec:	6921      	ldr	r1, [r4, #16]
 800beee:	464a      	mov	r2, r9
 800bef0:	f7fe fcf7 	bl	800a8e2 <memcpy>
 800bef4:	89a3      	ldrh	r3, [r4, #12]
 800bef6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800befa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800befe:	81a3      	strh	r3, [r4, #12]
 800bf00:	6126      	str	r6, [r4, #16]
 800bf02:	6165      	str	r5, [r4, #20]
 800bf04:	444e      	add	r6, r9
 800bf06:	eba5 0509 	sub.w	r5, r5, r9
 800bf0a:	6026      	str	r6, [r4, #0]
 800bf0c:	60a5      	str	r5, [r4, #8]
 800bf0e:	463e      	mov	r6, r7
 800bf10:	42be      	cmp	r6, r7
 800bf12:	d900      	bls.n	800bf16 <__ssputs_r+0x72>
 800bf14:	463e      	mov	r6, r7
 800bf16:	6820      	ldr	r0, [r4, #0]
 800bf18:	4632      	mov	r2, r6
 800bf1a:	4641      	mov	r1, r8
 800bf1c:	f7fe fc47 	bl	800a7ae <memmove>
 800bf20:	68a3      	ldr	r3, [r4, #8]
 800bf22:	1b9b      	subs	r3, r3, r6
 800bf24:	60a3      	str	r3, [r4, #8]
 800bf26:	6823      	ldr	r3, [r4, #0]
 800bf28:	4433      	add	r3, r6
 800bf2a:	6023      	str	r3, [r4, #0]
 800bf2c:	2000      	movs	r0, #0
 800bf2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf32:	462a      	mov	r2, r5
 800bf34:	f000 fa0e 	bl	800c354 <_realloc_r>
 800bf38:	4606      	mov	r6, r0
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d1e0      	bne.n	800bf00 <__ssputs_r+0x5c>
 800bf3e:	6921      	ldr	r1, [r4, #16]
 800bf40:	4650      	mov	r0, sl
 800bf42:	f7ff fb35 	bl	800b5b0 <_free_r>
 800bf46:	230c      	movs	r3, #12
 800bf48:	f8ca 3000 	str.w	r3, [sl]
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf52:	81a3      	strh	r3, [r4, #12]
 800bf54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf58:	e7e9      	b.n	800bf2e <__ssputs_r+0x8a>
	...

0800bf5c <_svfiprintf_r>:
 800bf5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf60:	4698      	mov	r8, r3
 800bf62:	898b      	ldrh	r3, [r1, #12]
 800bf64:	061b      	lsls	r3, r3, #24
 800bf66:	b09d      	sub	sp, #116	@ 0x74
 800bf68:	4607      	mov	r7, r0
 800bf6a:	460d      	mov	r5, r1
 800bf6c:	4614      	mov	r4, r2
 800bf6e:	d510      	bpl.n	800bf92 <_svfiprintf_r+0x36>
 800bf70:	690b      	ldr	r3, [r1, #16]
 800bf72:	b973      	cbnz	r3, 800bf92 <_svfiprintf_r+0x36>
 800bf74:	2140      	movs	r1, #64	@ 0x40
 800bf76:	f7ff fb8f 	bl	800b698 <_malloc_r>
 800bf7a:	6028      	str	r0, [r5, #0]
 800bf7c:	6128      	str	r0, [r5, #16]
 800bf7e:	b930      	cbnz	r0, 800bf8e <_svfiprintf_r+0x32>
 800bf80:	230c      	movs	r3, #12
 800bf82:	603b      	str	r3, [r7, #0]
 800bf84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf88:	b01d      	add	sp, #116	@ 0x74
 800bf8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8e:	2340      	movs	r3, #64	@ 0x40
 800bf90:	616b      	str	r3, [r5, #20]
 800bf92:	2300      	movs	r3, #0
 800bf94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf96:	2320      	movs	r3, #32
 800bf98:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf9c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfa0:	2330      	movs	r3, #48	@ 0x30
 800bfa2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c140 <_svfiprintf_r+0x1e4>
 800bfa6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfaa:	f04f 0901 	mov.w	r9, #1
 800bfae:	4623      	mov	r3, r4
 800bfb0:	469a      	mov	sl, r3
 800bfb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfb6:	b10a      	cbz	r2, 800bfbc <_svfiprintf_r+0x60>
 800bfb8:	2a25      	cmp	r2, #37	@ 0x25
 800bfba:	d1f9      	bne.n	800bfb0 <_svfiprintf_r+0x54>
 800bfbc:	ebba 0b04 	subs.w	fp, sl, r4
 800bfc0:	d00b      	beq.n	800bfda <_svfiprintf_r+0x7e>
 800bfc2:	465b      	mov	r3, fp
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4629      	mov	r1, r5
 800bfc8:	4638      	mov	r0, r7
 800bfca:	f7ff ff6b 	bl	800bea4 <__ssputs_r>
 800bfce:	3001      	adds	r0, #1
 800bfd0:	f000 80a7 	beq.w	800c122 <_svfiprintf_r+0x1c6>
 800bfd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfd6:	445a      	add	r2, fp
 800bfd8:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfda:	f89a 3000 	ldrb.w	r3, [sl]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	f000 809f 	beq.w	800c122 <_svfiprintf_r+0x1c6>
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfee:	f10a 0a01 	add.w	sl, sl, #1
 800bff2:	9304      	str	r3, [sp, #16]
 800bff4:	9307      	str	r3, [sp, #28]
 800bff6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bffa:	931a      	str	r3, [sp, #104]	@ 0x68
 800bffc:	4654      	mov	r4, sl
 800bffe:	2205      	movs	r2, #5
 800c000:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c004:	484e      	ldr	r0, [pc, #312]	@ (800c140 <_svfiprintf_r+0x1e4>)
 800c006:	f7f4 f8e3 	bl	80001d0 <memchr>
 800c00a:	9a04      	ldr	r2, [sp, #16]
 800c00c:	b9d8      	cbnz	r0, 800c046 <_svfiprintf_r+0xea>
 800c00e:	06d0      	lsls	r0, r2, #27
 800c010:	bf44      	itt	mi
 800c012:	2320      	movmi	r3, #32
 800c014:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c018:	0711      	lsls	r1, r2, #28
 800c01a:	bf44      	itt	mi
 800c01c:	232b      	movmi	r3, #43	@ 0x2b
 800c01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c022:	f89a 3000 	ldrb.w	r3, [sl]
 800c026:	2b2a      	cmp	r3, #42	@ 0x2a
 800c028:	d015      	beq.n	800c056 <_svfiprintf_r+0xfa>
 800c02a:	9a07      	ldr	r2, [sp, #28]
 800c02c:	4654      	mov	r4, sl
 800c02e:	2000      	movs	r0, #0
 800c030:	f04f 0c0a 	mov.w	ip, #10
 800c034:	4621      	mov	r1, r4
 800c036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c03a:	3b30      	subs	r3, #48	@ 0x30
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	d94b      	bls.n	800c0d8 <_svfiprintf_r+0x17c>
 800c040:	b1b0      	cbz	r0, 800c070 <_svfiprintf_r+0x114>
 800c042:	9207      	str	r2, [sp, #28]
 800c044:	e014      	b.n	800c070 <_svfiprintf_r+0x114>
 800c046:	eba0 0308 	sub.w	r3, r0, r8
 800c04a:	fa09 f303 	lsl.w	r3, r9, r3
 800c04e:	4313      	orrs	r3, r2
 800c050:	9304      	str	r3, [sp, #16]
 800c052:	46a2      	mov	sl, r4
 800c054:	e7d2      	b.n	800bffc <_svfiprintf_r+0xa0>
 800c056:	9b03      	ldr	r3, [sp, #12]
 800c058:	1d19      	adds	r1, r3, #4
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	9103      	str	r1, [sp, #12]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	bfbb      	ittet	lt
 800c062:	425b      	neglt	r3, r3
 800c064:	f042 0202 	orrlt.w	r2, r2, #2
 800c068:	9307      	strge	r3, [sp, #28]
 800c06a:	9307      	strlt	r3, [sp, #28]
 800c06c:	bfb8      	it	lt
 800c06e:	9204      	strlt	r2, [sp, #16]
 800c070:	7823      	ldrb	r3, [r4, #0]
 800c072:	2b2e      	cmp	r3, #46	@ 0x2e
 800c074:	d10a      	bne.n	800c08c <_svfiprintf_r+0x130>
 800c076:	7863      	ldrb	r3, [r4, #1]
 800c078:	2b2a      	cmp	r3, #42	@ 0x2a
 800c07a:	d132      	bne.n	800c0e2 <_svfiprintf_r+0x186>
 800c07c:	9b03      	ldr	r3, [sp, #12]
 800c07e:	1d1a      	adds	r2, r3, #4
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	9203      	str	r2, [sp, #12]
 800c084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c088:	3402      	adds	r4, #2
 800c08a:	9305      	str	r3, [sp, #20]
 800c08c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c150 <_svfiprintf_r+0x1f4>
 800c090:	7821      	ldrb	r1, [r4, #0]
 800c092:	2203      	movs	r2, #3
 800c094:	4650      	mov	r0, sl
 800c096:	f7f4 f89b 	bl	80001d0 <memchr>
 800c09a:	b138      	cbz	r0, 800c0ac <_svfiprintf_r+0x150>
 800c09c:	9b04      	ldr	r3, [sp, #16]
 800c09e:	eba0 000a 	sub.w	r0, r0, sl
 800c0a2:	2240      	movs	r2, #64	@ 0x40
 800c0a4:	4082      	lsls	r2, r0
 800c0a6:	4313      	orrs	r3, r2
 800c0a8:	3401      	adds	r4, #1
 800c0aa:	9304      	str	r3, [sp, #16]
 800c0ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0b0:	4824      	ldr	r0, [pc, #144]	@ (800c144 <_svfiprintf_r+0x1e8>)
 800c0b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0b6:	2206      	movs	r2, #6
 800c0b8:	f7f4 f88a 	bl	80001d0 <memchr>
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d036      	beq.n	800c12e <_svfiprintf_r+0x1d2>
 800c0c0:	4b21      	ldr	r3, [pc, #132]	@ (800c148 <_svfiprintf_r+0x1ec>)
 800c0c2:	bb1b      	cbnz	r3, 800c10c <_svfiprintf_r+0x1b0>
 800c0c4:	9b03      	ldr	r3, [sp, #12]
 800c0c6:	3307      	adds	r3, #7
 800c0c8:	f023 0307 	bic.w	r3, r3, #7
 800c0cc:	3308      	adds	r3, #8
 800c0ce:	9303      	str	r3, [sp, #12]
 800c0d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d2:	4433      	add	r3, r6
 800c0d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0d6:	e76a      	b.n	800bfae <_svfiprintf_r+0x52>
 800c0d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0dc:	460c      	mov	r4, r1
 800c0de:	2001      	movs	r0, #1
 800c0e0:	e7a8      	b.n	800c034 <_svfiprintf_r+0xd8>
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	3401      	adds	r4, #1
 800c0e6:	9305      	str	r3, [sp, #20]
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	f04f 0c0a 	mov.w	ip, #10
 800c0ee:	4620      	mov	r0, r4
 800c0f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0f4:	3a30      	subs	r2, #48	@ 0x30
 800c0f6:	2a09      	cmp	r2, #9
 800c0f8:	d903      	bls.n	800c102 <_svfiprintf_r+0x1a6>
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0c6      	beq.n	800c08c <_svfiprintf_r+0x130>
 800c0fe:	9105      	str	r1, [sp, #20]
 800c100:	e7c4      	b.n	800c08c <_svfiprintf_r+0x130>
 800c102:	fb0c 2101 	mla	r1, ip, r1, r2
 800c106:	4604      	mov	r4, r0
 800c108:	2301      	movs	r3, #1
 800c10a:	e7f0      	b.n	800c0ee <_svfiprintf_r+0x192>
 800c10c:	ab03      	add	r3, sp, #12
 800c10e:	9300      	str	r3, [sp, #0]
 800c110:	462a      	mov	r2, r5
 800c112:	4b0e      	ldr	r3, [pc, #56]	@ (800c14c <_svfiprintf_r+0x1f0>)
 800c114:	a904      	add	r1, sp, #16
 800c116:	4638      	mov	r0, r7
 800c118:	f7fd fe58 	bl	8009dcc <_printf_float>
 800c11c:	1c42      	adds	r2, r0, #1
 800c11e:	4606      	mov	r6, r0
 800c120:	d1d6      	bne.n	800c0d0 <_svfiprintf_r+0x174>
 800c122:	89ab      	ldrh	r3, [r5, #12]
 800c124:	065b      	lsls	r3, r3, #25
 800c126:	f53f af2d 	bmi.w	800bf84 <_svfiprintf_r+0x28>
 800c12a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c12c:	e72c      	b.n	800bf88 <_svfiprintf_r+0x2c>
 800c12e:	ab03      	add	r3, sp, #12
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	462a      	mov	r2, r5
 800c134:	4b05      	ldr	r3, [pc, #20]	@ (800c14c <_svfiprintf_r+0x1f0>)
 800c136:	a904      	add	r1, sp, #16
 800c138:	4638      	mov	r0, r7
 800c13a:	f7fe f8df 	bl	800a2fc <_printf_i>
 800c13e:	e7ed      	b.n	800c11c <_svfiprintf_r+0x1c0>
 800c140:	0800d2ba 	.word	0x0800d2ba
 800c144:	0800d2c4 	.word	0x0800d2c4
 800c148:	08009dcd 	.word	0x08009dcd
 800c14c:	0800bea5 	.word	0x0800bea5
 800c150:	0800d2c0 	.word	0x0800d2c0

0800c154 <__sflush_r>:
 800c154:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c15c:	0716      	lsls	r6, r2, #28
 800c15e:	4605      	mov	r5, r0
 800c160:	460c      	mov	r4, r1
 800c162:	d454      	bmi.n	800c20e <__sflush_r+0xba>
 800c164:	684b      	ldr	r3, [r1, #4]
 800c166:	2b00      	cmp	r3, #0
 800c168:	dc02      	bgt.n	800c170 <__sflush_r+0x1c>
 800c16a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dd48      	ble.n	800c202 <__sflush_r+0xae>
 800c170:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c172:	2e00      	cmp	r6, #0
 800c174:	d045      	beq.n	800c202 <__sflush_r+0xae>
 800c176:	2300      	movs	r3, #0
 800c178:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c17c:	682f      	ldr	r7, [r5, #0]
 800c17e:	6a21      	ldr	r1, [r4, #32]
 800c180:	602b      	str	r3, [r5, #0]
 800c182:	d030      	beq.n	800c1e6 <__sflush_r+0x92>
 800c184:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c186:	89a3      	ldrh	r3, [r4, #12]
 800c188:	0759      	lsls	r1, r3, #29
 800c18a:	d505      	bpl.n	800c198 <__sflush_r+0x44>
 800c18c:	6863      	ldr	r3, [r4, #4]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c192:	b10b      	cbz	r3, 800c198 <__sflush_r+0x44>
 800c194:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c196:	1ad2      	subs	r2, r2, r3
 800c198:	2300      	movs	r3, #0
 800c19a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c19c:	6a21      	ldr	r1, [r4, #32]
 800c19e:	4628      	mov	r0, r5
 800c1a0:	47b0      	blx	r6
 800c1a2:	1c43      	adds	r3, r0, #1
 800c1a4:	89a3      	ldrh	r3, [r4, #12]
 800c1a6:	d106      	bne.n	800c1b6 <__sflush_r+0x62>
 800c1a8:	6829      	ldr	r1, [r5, #0]
 800c1aa:	291d      	cmp	r1, #29
 800c1ac:	d82b      	bhi.n	800c206 <__sflush_r+0xb2>
 800c1ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c258 <__sflush_r+0x104>)
 800c1b0:	40ca      	lsrs	r2, r1
 800c1b2:	07d6      	lsls	r6, r2, #31
 800c1b4:	d527      	bpl.n	800c206 <__sflush_r+0xb2>
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	6062      	str	r2, [r4, #4]
 800c1ba:	04d9      	lsls	r1, r3, #19
 800c1bc:	6922      	ldr	r2, [r4, #16]
 800c1be:	6022      	str	r2, [r4, #0]
 800c1c0:	d504      	bpl.n	800c1cc <__sflush_r+0x78>
 800c1c2:	1c42      	adds	r2, r0, #1
 800c1c4:	d101      	bne.n	800c1ca <__sflush_r+0x76>
 800c1c6:	682b      	ldr	r3, [r5, #0]
 800c1c8:	b903      	cbnz	r3, 800c1cc <__sflush_r+0x78>
 800c1ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800c1cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c1ce:	602f      	str	r7, [r5, #0]
 800c1d0:	b1b9      	cbz	r1, 800c202 <__sflush_r+0xae>
 800c1d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c1d6:	4299      	cmp	r1, r3
 800c1d8:	d002      	beq.n	800c1e0 <__sflush_r+0x8c>
 800c1da:	4628      	mov	r0, r5
 800c1dc:	f7ff f9e8 	bl	800b5b0 <_free_r>
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c1e4:	e00d      	b.n	800c202 <__sflush_r+0xae>
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b0      	blx	r6
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	1c50      	adds	r0, r2, #1
 800c1f0:	d1c9      	bne.n	800c186 <__sflush_r+0x32>
 800c1f2:	682b      	ldr	r3, [r5, #0]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0c6      	beq.n	800c186 <__sflush_r+0x32>
 800c1f8:	2b1d      	cmp	r3, #29
 800c1fa:	d001      	beq.n	800c200 <__sflush_r+0xac>
 800c1fc:	2b16      	cmp	r3, #22
 800c1fe:	d11e      	bne.n	800c23e <__sflush_r+0xea>
 800c200:	602f      	str	r7, [r5, #0]
 800c202:	2000      	movs	r0, #0
 800c204:	e022      	b.n	800c24c <__sflush_r+0xf8>
 800c206:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c20a:	b21b      	sxth	r3, r3
 800c20c:	e01b      	b.n	800c246 <__sflush_r+0xf2>
 800c20e:	690f      	ldr	r7, [r1, #16]
 800c210:	2f00      	cmp	r7, #0
 800c212:	d0f6      	beq.n	800c202 <__sflush_r+0xae>
 800c214:	0793      	lsls	r3, r2, #30
 800c216:	680e      	ldr	r6, [r1, #0]
 800c218:	bf08      	it	eq
 800c21a:	694b      	ldreq	r3, [r1, #20]
 800c21c:	600f      	str	r7, [r1, #0]
 800c21e:	bf18      	it	ne
 800c220:	2300      	movne	r3, #0
 800c222:	eba6 0807 	sub.w	r8, r6, r7
 800c226:	608b      	str	r3, [r1, #8]
 800c228:	f1b8 0f00 	cmp.w	r8, #0
 800c22c:	dde9      	ble.n	800c202 <__sflush_r+0xae>
 800c22e:	6a21      	ldr	r1, [r4, #32]
 800c230:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c232:	4643      	mov	r3, r8
 800c234:	463a      	mov	r2, r7
 800c236:	4628      	mov	r0, r5
 800c238:	47b0      	blx	r6
 800c23a:	2800      	cmp	r0, #0
 800c23c:	dc08      	bgt.n	800c250 <__sflush_r+0xfc>
 800c23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c250:	4407      	add	r7, r0
 800c252:	eba8 0800 	sub.w	r8, r8, r0
 800c256:	e7e7      	b.n	800c228 <__sflush_r+0xd4>
 800c258:	20400001 	.word	0x20400001

0800c25c <_fflush_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	690b      	ldr	r3, [r1, #16]
 800c260:	4605      	mov	r5, r0
 800c262:	460c      	mov	r4, r1
 800c264:	b913      	cbnz	r3, 800c26c <_fflush_r+0x10>
 800c266:	2500      	movs	r5, #0
 800c268:	4628      	mov	r0, r5
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	b118      	cbz	r0, 800c276 <_fflush_r+0x1a>
 800c26e:	6a03      	ldr	r3, [r0, #32]
 800c270:	b90b      	cbnz	r3, 800c276 <_fflush_r+0x1a>
 800c272:	f7fe f9ed 	bl	800a650 <__sinit>
 800c276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0f3      	beq.n	800c266 <_fflush_r+0xa>
 800c27e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c280:	07d0      	lsls	r0, r2, #31
 800c282:	d404      	bmi.n	800c28e <_fflush_r+0x32>
 800c284:	0599      	lsls	r1, r3, #22
 800c286:	d402      	bmi.n	800c28e <_fflush_r+0x32>
 800c288:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c28a:	f7fe fb28 	bl	800a8de <__retarget_lock_acquire_recursive>
 800c28e:	4628      	mov	r0, r5
 800c290:	4621      	mov	r1, r4
 800c292:	f7ff ff5f 	bl	800c154 <__sflush_r>
 800c296:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c298:	07da      	lsls	r2, r3, #31
 800c29a:	4605      	mov	r5, r0
 800c29c:	d4e4      	bmi.n	800c268 <_fflush_r+0xc>
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	059b      	lsls	r3, r3, #22
 800c2a2:	d4e1      	bmi.n	800c268 <_fflush_r+0xc>
 800c2a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c2a6:	f7fe fb1b 	bl	800a8e0 <__retarget_lock_release_recursive>
 800c2aa:	e7dd      	b.n	800c268 <_fflush_r+0xc>

0800c2ac <_sbrk_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d06      	ldr	r5, [pc, #24]	@ (800c2c8 <_sbrk_r+0x1c>)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	f7f5 fa2a 	bl	8001710 <_sbrk>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_sbrk_r+0x1a>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_sbrk_r+0x1a>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	200024cc 	.word	0x200024cc

0800c2cc <__assert_func>:
 800c2cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2ce:	4614      	mov	r4, r2
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	4b09      	ldr	r3, [pc, #36]	@ (800c2f8 <__assert_func+0x2c>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	68d8      	ldr	r0, [r3, #12]
 800c2da:	b14c      	cbz	r4, 800c2f0 <__assert_func+0x24>
 800c2dc:	4b07      	ldr	r3, [pc, #28]	@ (800c2fc <__assert_func+0x30>)
 800c2de:	9100      	str	r1, [sp, #0]
 800c2e0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2e4:	4906      	ldr	r1, [pc, #24]	@ (800c300 <__assert_func+0x34>)
 800c2e6:	462b      	mov	r3, r5
 800c2e8:	f000 f870 	bl	800c3cc <fiprintf>
 800c2ec:	f000 f880 	bl	800c3f0 <abort>
 800c2f0:	4b04      	ldr	r3, [pc, #16]	@ (800c304 <__assert_func+0x38>)
 800c2f2:	461c      	mov	r4, r3
 800c2f4:	e7f3      	b.n	800c2de <__assert_func+0x12>
 800c2f6:	bf00      	nop
 800c2f8:	20000108 	.word	0x20000108
 800c2fc:	0800d2d5 	.word	0x0800d2d5
 800c300:	0800d2e2 	.word	0x0800d2e2
 800c304:	0800d310 	.word	0x0800d310

0800c308 <_calloc_r>:
 800c308:	b570      	push	{r4, r5, r6, lr}
 800c30a:	fba1 5402 	umull	r5, r4, r1, r2
 800c30e:	b934      	cbnz	r4, 800c31e <_calloc_r+0x16>
 800c310:	4629      	mov	r1, r5
 800c312:	f7ff f9c1 	bl	800b698 <_malloc_r>
 800c316:	4606      	mov	r6, r0
 800c318:	b928      	cbnz	r0, 800c326 <_calloc_r+0x1e>
 800c31a:	4630      	mov	r0, r6
 800c31c:	bd70      	pop	{r4, r5, r6, pc}
 800c31e:	220c      	movs	r2, #12
 800c320:	6002      	str	r2, [r0, #0]
 800c322:	2600      	movs	r6, #0
 800c324:	e7f9      	b.n	800c31a <_calloc_r+0x12>
 800c326:	462a      	mov	r2, r5
 800c328:	4621      	mov	r1, r4
 800c32a:	f7fe fa5a 	bl	800a7e2 <memset>
 800c32e:	e7f4      	b.n	800c31a <_calloc_r+0x12>

0800c330 <__ascii_mbtowc>:
 800c330:	b082      	sub	sp, #8
 800c332:	b901      	cbnz	r1, 800c336 <__ascii_mbtowc+0x6>
 800c334:	a901      	add	r1, sp, #4
 800c336:	b142      	cbz	r2, 800c34a <__ascii_mbtowc+0x1a>
 800c338:	b14b      	cbz	r3, 800c34e <__ascii_mbtowc+0x1e>
 800c33a:	7813      	ldrb	r3, [r2, #0]
 800c33c:	600b      	str	r3, [r1, #0]
 800c33e:	7812      	ldrb	r2, [r2, #0]
 800c340:	1e10      	subs	r0, r2, #0
 800c342:	bf18      	it	ne
 800c344:	2001      	movne	r0, #1
 800c346:	b002      	add	sp, #8
 800c348:	4770      	bx	lr
 800c34a:	4610      	mov	r0, r2
 800c34c:	e7fb      	b.n	800c346 <__ascii_mbtowc+0x16>
 800c34e:	f06f 0001 	mvn.w	r0, #1
 800c352:	e7f8      	b.n	800c346 <__ascii_mbtowc+0x16>

0800c354 <_realloc_r>:
 800c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c358:	4607      	mov	r7, r0
 800c35a:	4614      	mov	r4, r2
 800c35c:	460d      	mov	r5, r1
 800c35e:	b921      	cbnz	r1, 800c36a <_realloc_r+0x16>
 800c360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c364:	4611      	mov	r1, r2
 800c366:	f7ff b997 	b.w	800b698 <_malloc_r>
 800c36a:	b92a      	cbnz	r2, 800c378 <_realloc_r+0x24>
 800c36c:	f7ff f920 	bl	800b5b0 <_free_r>
 800c370:	4625      	mov	r5, r4
 800c372:	4628      	mov	r0, r5
 800c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c378:	f000 f841 	bl	800c3fe <_malloc_usable_size_r>
 800c37c:	4284      	cmp	r4, r0
 800c37e:	4606      	mov	r6, r0
 800c380:	d802      	bhi.n	800c388 <_realloc_r+0x34>
 800c382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c386:	d8f4      	bhi.n	800c372 <_realloc_r+0x1e>
 800c388:	4621      	mov	r1, r4
 800c38a:	4638      	mov	r0, r7
 800c38c:	f7ff f984 	bl	800b698 <_malloc_r>
 800c390:	4680      	mov	r8, r0
 800c392:	b908      	cbnz	r0, 800c398 <_realloc_r+0x44>
 800c394:	4645      	mov	r5, r8
 800c396:	e7ec      	b.n	800c372 <_realloc_r+0x1e>
 800c398:	42b4      	cmp	r4, r6
 800c39a:	4622      	mov	r2, r4
 800c39c:	4629      	mov	r1, r5
 800c39e:	bf28      	it	cs
 800c3a0:	4632      	movcs	r2, r6
 800c3a2:	f7fe fa9e 	bl	800a8e2 <memcpy>
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f7ff f901 	bl	800b5b0 <_free_r>
 800c3ae:	e7f1      	b.n	800c394 <_realloc_r+0x40>

0800c3b0 <__ascii_wctomb>:
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	4608      	mov	r0, r1
 800c3b4:	b141      	cbz	r1, 800c3c8 <__ascii_wctomb+0x18>
 800c3b6:	2aff      	cmp	r2, #255	@ 0xff
 800c3b8:	d904      	bls.n	800c3c4 <__ascii_wctomb+0x14>
 800c3ba:	228a      	movs	r2, #138	@ 0x8a
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3c2:	4770      	bx	lr
 800c3c4:	700a      	strb	r2, [r1, #0]
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	4770      	bx	lr
	...

0800c3cc <fiprintf>:
 800c3cc:	b40e      	push	{r1, r2, r3}
 800c3ce:	b503      	push	{r0, r1, lr}
 800c3d0:	4601      	mov	r1, r0
 800c3d2:	ab03      	add	r3, sp, #12
 800c3d4:	4805      	ldr	r0, [pc, #20]	@ (800c3ec <fiprintf+0x20>)
 800c3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3da:	6800      	ldr	r0, [r0, #0]
 800c3dc:	9301      	str	r3, [sp, #4]
 800c3de:	f000 f83f 	bl	800c460 <_vfiprintf_r>
 800c3e2:	b002      	add	sp, #8
 800c3e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3e8:	b003      	add	sp, #12
 800c3ea:	4770      	bx	lr
 800c3ec:	20000108 	.word	0x20000108

0800c3f0 <abort>:
 800c3f0:	b508      	push	{r3, lr}
 800c3f2:	2006      	movs	r0, #6
 800c3f4:	f000 fa08 	bl	800c808 <raise>
 800c3f8:	2001      	movs	r0, #1
 800c3fa:	f7f5 f911 	bl	8001620 <_exit>

0800c3fe <_malloc_usable_size_r>:
 800c3fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c402:	1f18      	subs	r0, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	bfbc      	itt	lt
 800c408:	580b      	ldrlt	r3, [r1, r0]
 800c40a:	18c0      	addlt	r0, r0, r3
 800c40c:	4770      	bx	lr

0800c40e <__sfputc_r>:
 800c40e:	6893      	ldr	r3, [r2, #8]
 800c410:	3b01      	subs	r3, #1
 800c412:	2b00      	cmp	r3, #0
 800c414:	b410      	push	{r4}
 800c416:	6093      	str	r3, [r2, #8]
 800c418:	da08      	bge.n	800c42c <__sfputc_r+0x1e>
 800c41a:	6994      	ldr	r4, [r2, #24]
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	db01      	blt.n	800c424 <__sfputc_r+0x16>
 800c420:	290a      	cmp	r1, #10
 800c422:	d103      	bne.n	800c42c <__sfputc_r+0x1e>
 800c424:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c428:	f000 b932 	b.w	800c690 <__swbuf_r>
 800c42c:	6813      	ldr	r3, [r2, #0]
 800c42e:	1c58      	adds	r0, r3, #1
 800c430:	6010      	str	r0, [r2, #0]
 800c432:	7019      	strb	r1, [r3, #0]
 800c434:	4608      	mov	r0, r1
 800c436:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <__sfputs_r>:
 800c43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c43e:	4606      	mov	r6, r0
 800c440:	460f      	mov	r7, r1
 800c442:	4614      	mov	r4, r2
 800c444:	18d5      	adds	r5, r2, r3
 800c446:	42ac      	cmp	r4, r5
 800c448:	d101      	bne.n	800c44e <__sfputs_r+0x12>
 800c44a:	2000      	movs	r0, #0
 800c44c:	e007      	b.n	800c45e <__sfputs_r+0x22>
 800c44e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c452:	463a      	mov	r2, r7
 800c454:	4630      	mov	r0, r6
 800c456:	f7ff ffda 	bl	800c40e <__sfputc_r>
 800c45a:	1c43      	adds	r3, r0, #1
 800c45c:	d1f3      	bne.n	800c446 <__sfputs_r+0xa>
 800c45e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c460 <_vfiprintf_r>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	460d      	mov	r5, r1
 800c466:	b09d      	sub	sp, #116	@ 0x74
 800c468:	4614      	mov	r4, r2
 800c46a:	4698      	mov	r8, r3
 800c46c:	4606      	mov	r6, r0
 800c46e:	b118      	cbz	r0, 800c478 <_vfiprintf_r+0x18>
 800c470:	6a03      	ldr	r3, [r0, #32]
 800c472:	b90b      	cbnz	r3, 800c478 <_vfiprintf_r+0x18>
 800c474:	f7fe f8ec 	bl	800a650 <__sinit>
 800c478:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c47a:	07d9      	lsls	r1, r3, #31
 800c47c:	d405      	bmi.n	800c48a <_vfiprintf_r+0x2a>
 800c47e:	89ab      	ldrh	r3, [r5, #12]
 800c480:	059a      	lsls	r2, r3, #22
 800c482:	d402      	bmi.n	800c48a <_vfiprintf_r+0x2a>
 800c484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c486:	f7fe fa2a 	bl	800a8de <__retarget_lock_acquire_recursive>
 800c48a:	89ab      	ldrh	r3, [r5, #12]
 800c48c:	071b      	lsls	r3, r3, #28
 800c48e:	d501      	bpl.n	800c494 <_vfiprintf_r+0x34>
 800c490:	692b      	ldr	r3, [r5, #16]
 800c492:	b99b      	cbnz	r3, 800c4bc <_vfiprintf_r+0x5c>
 800c494:	4629      	mov	r1, r5
 800c496:	4630      	mov	r0, r6
 800c498:	f000 f938 	bl	800c70c <__swsetup_r>
 800c49c:	b170      	cbz	r0, 800c4bc <_vfiprintf_r+0x5c>
 800c49e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c4a0:	07dc      	lsls	r4, r3, #31
 800c4a2:	d504      	bpl.n	800c4ae <_vfiprintf_r+0x4e>
 800c4a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4a8:	b01d      	add	sp, #116	@ 0x74
 800c4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ae:	89ab      	ldrh	r3, [r5, #12]
 800c4b0:	0598      	lsls	r0, r3, #22
 800c4b2:	d4f7      	bmi.n	800c4a4 <_vfiprintf_r+0x44>
 800c4b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c4b6:	f7fe fa13 	bl	800a8e0 <__retarget_lock_release_recursive>
 800c4ba:	e7f3      	b.n	800c4a4 <_vfiprintf_r+0x44>
 800c4bc:	2300      	movs	r3, #0
 800c4be:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4c0:	2320      	movs	r3, #32
 800c4c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c4c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4ca:	2330      	movs	r3, #48	@ 0x30
 800c4cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c67c <_vfiprintf_r+0x21c>
 800c4d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4d4:	f04f 0901 	mov.w	r9, #1
 800c4d8:	4623      	mov	r3, r4
 800c4da:	469a      	mov	sl, r3
 800c4dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4e0:	b10a      	cbz	r2, 800c4e6 <_vfiprintf_r+0x86>
 800c4e2:	2a25      	cmp	r2, #37	@ 0x25
 800c4e4:	d1f9      	bne.n	800c4da <_vfiprintf_r+0x7a>
 800c4e6:	ebba 0b04 	subs.w	fp, sl, r4
 800c4ea:	d00b      	beq.n	800c504 <_vfiprintf_r+0xa4>
 800c4ec:	465b      	mov	r3, fp
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	4629      	mov	r1, r5
 800c4f2:	4630      	mov	r0, r6
 800c4f4:	f7ff ffa2 	bl	800c43c <__sfputs_r>
 800c4f8:	3001      	adds	r0, #1
 800c4fa:	f000 80a7 	beq.w	800c64c <_vfiprintf_r+0x1ec>
 800c4fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c500:	445a      	add	r2, fp
 800c502:	9209      	str	r2, [sp, #36]	@ 0x24
 800c504:	f89a 3000 	ldrb.w	r3, [sl]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f000 809f 	beq.w	800c64c <_vfiprintf_r+0x1ec>
 800c50e:	2300      	movs	r3, #0
 800c510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c514:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c518:	f10a 0a01 	add.w	sl, sl, #1
 800c51c:	9304      	str	r3, [sp, #16]
 800c51e:	9307      	str	r3, [sp, #28]
 800c520:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c524:	931a      	str	r3, [sp, #104]	@ 0x68
 800c526:	4654      	mov	r4, sl
 800c528:	2205      	movs	r2, #5
 800c52a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c52e:	4853      	ldr	r0, [pc, #332]	@ (800c67c <_vfiprintf_r+0x21c>)
 800c530:	f7f3 fe4e 	bl	80001d0 <memchr>
 800c534:	9a04      	ldr	r2, [sp, #16]
 800c536:	b9d8      	cbnz	r0, 800c570 <_vfiprintf_r+0x110>
 800c538:	06d1      	lsls	r1, r2, #27
 800c53a:	bf44      	itt	mi
 800c53c:	2320      	movmi	r3, #32
 800c53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c542:	0713      	lsls	r3, r2, #28
 800c544:	bf44      	itt	mi
 800c546:	232b      	movmi	r3, #43	@ 0x2b
 800c548:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c54c:	f89a 3000 	ldrb.w	r3, [sl]
 800c550:	2b2a      	cmp	r3, #42	@ 0x2a
 800c552:	d015      	beq.n	800c580 <_vfiprintf_r+0x120>
 800c554:	9a07      	ldr	r2, [sp, #28]
 800c556:	4654      	mov	r4, sl
 800c558:	2000      	movs	r0, #0
 800c55a:	f04f 0c0a 	mov.w	ip, #10
 800c55e:	4621      	mov	r1, r4
 800c560:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c564:	3b30      	subs	r3, #48	@ 0x30
 800c566:	2b09      	cmp	r3, #9
 800c568:	d94b      	bls.n	800c602 <_vfiprintf_r+0x1a2>
 800c56a:	b1b0      	cbz	r0, 800c59a <_vfiprintf_r+0x13a>
 800c56c:	9207      	str	r2, [sp, #28]
 800c56e:	e014      	b.n	800c59a <_vfiprintf_r+0x13a>
 800c570:	eba0 0308 	sub.w	r3, r0, r8
 800c574:	fa09 f303 	lsl.w	r3, r9, r3
 800c578:	4313      	orrs	r3, r2
 800c57a:	9304      	str	r3, [sp, #16]
 800c57c:	46a2      	mov	sl, r4
 800c57e:	e7d2      	b.n	800c526 <_vfiprintf_r+0xc6>
 800c580:	9b03      	ldr	r3, [sp, #12]
 800c582:	1d19      	adds	r1, r3, #4
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	9103      	str	r1, [sp, #12]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	bfbb      	ittet	lt
 800c58c:	425b      	neglt	r3, r3
 800c58e:	f042 0202 	orrlt.w	r2, r2, #2
 800c592:	9307      	strge	r3, [sp, #28]
 800c594:	9307      	strlt	r3, [sp, #28]
 800c596:	bfb8      	it	lt
 800c598:	9204      	strlt	r2, [sp, #16]
 800c59a:	7823      	ldrb	r3, [r4, #0]
 800c59c:	2b2e      	cmp	r3, #46	@ 0x2e
 800c59e:	d10a      	bne.n	800c5b6 <_vfiprintf_r+0x156>
 800c5a0:	7863      	ldrb	r3, [r4, #1]
 800c5a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c5a4:	d132      	bne.n	800c60c <_vfiprintf_r+0x1ac>
 800c5a6:	9b03      	ldr	r3, [sp, #12]
 800c5a8:	1d1a      	adds	r2, r3, #4
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	9203      	str	r2, [sp, #12]
 800c5ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c5b2:	3402      	adds	r4, #2
 800c5b4:	9305      	str	r3, [sp, #20]
 800c5b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c68c <_vfiprintf_r+0x22c>
 800c5ba:	7821      	ldrb	r1, [r4, #0]
 800c5bc:	2203      	movs	r2, #3
 800c5be:	4650      	mov	r0, sl
 800c5c0:	f7f3 fe06 	bl	80001d0 <memchr>
 800c5c4:	b138      	cbz	r0, 800c5d6 <_vfiprintf_r+0x176>
 800c5c6:	9b04      	ldr	r3, [sp, #16]
 800c5c8:	eba0 000a 	sub.w	r0, r0, sl
 800c5cc:	2240      	movs	r2, #64	@ 0x40
 800c5ce:	4082      	lsls	r2, r0
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	3401      	adds	r4, #1
 800c5d4:	9304      	str	r3, [sp, #16]
 800c5d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5da:	4829      	ldr	r0, [pc, #164]	@ (800c680 <_vfiprintf_r+0x220>)
 800c5dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5e0:	2206      	movs	r2, #6
 800c5e2:	f7f3 fdf5 	bl	80001d0 <memchr>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	d03f      	beq.n	800c66a <_vfiprintf_r+0x20a>
 800c5ea:	4b26      	ldr	r3, [pc, #152]	@ (800c684 <_vfiprintf_r+0x224>)
 800c5ec:	bb1b      	cbnz	r3, 800c636 <_vfiprintf_r+0x1d6>
 800c5ee:	9b03      	ldr	r3, [sp, #12]
 800c5f0:	3307      	adds	r3, #7
 800c5f2:	f023 0307 	bic.w	r3, r3, #7
 800c5f6:	3308      	adds	r3, #8
 800c5f8:	9303      	str	r3, [sp, #12]
 800c5fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5fc:	443b      	add	r3, r7
 800c5fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c600:	e76a      	b.n	800c4d8 <_vfiprintf_r+0x78>
 800c602:	fb0c 3202 	mla	r2, ip, r2, r3
 800c606:	460c      	mov	r4, r1
 800c608:	2001      	movs	r0, #1
 800c60a:	e7a8      	b.n	800c55e <_vfiprintf_r+0xfe>
 800c60c:	2300      	movs	r3, #0
 800c60e:	3401      	adds	r4, #1
 800c610:	9305      	str	r3, [sp, #20]
 800c612:	4619      	mov	r1, r3
 800c614:	f04f 0c0a 	mov.w	ip, #10
 800c618:	4620      	mov	r0, r4
 800c61a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c61e:	3a30      	subs	r2, #48	@ 0x30
 800c620:	2a09      	cmp	r2, #9
 800c622:	d903      	bls.n	800c62c <_vfiprintf_r+0x1cc>
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0c6      	beq.n	800c5b6 <_vfiprintf_r+0x156>
 800c628:	9105      	str	r1, [sp, #20]
 800c62a:	e7c4      	b.n	800c5b6 <_vfiprintf_r+0x156>
 800c62c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c630:	4604      	mov	r4, r0
 800c632:	2301      	movs	r3, #1
 800c634:	e7f0      	b.n	800c618 <_vfiprintf_r+0x1b8>
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4b12      	ldr	r3, [pc, #72]	@ (800c688 <_vfiprintf_r+0x228>)
 800c63e:	a904      	add	r1, sp, #16
 800c640:	4630      	mov	r0, r6
 800c642:	f7fd fbc3 	bl	8009dcc <_printf_float>
 800c646:	4607      	mov	r7, r0
 800c648:	1c78      	adds	r0, r7, #1
 800c64a:	d1d6      	bne.n	800c5fa <_vfiprintf_r+0x19a>
 800c64c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c64e:	07d9      	lsls	r1, r3, #31
 800c650:	d405      	bmi.n	800c65e <_vfiprintf_r+0x1fe>
 800c652:	89ab      	ldrh	r3, [r5, #12]
 800c654:	059a      	lsls	r2, r3, #22
 800c656:	d402      	bmi.n	800c65e <_vfiprintf_r+0x1fe>
 800c658:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c65a:	f7fe f941 	bl	800a8e0 <__retarget_lock_release_recursive>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	065b      	lsls	r3, r3, #25
 800c662:	f53f af1f 	bmi.w	800c4a4 <_vfiprintf_r+0x44>
 800c666:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c668:	e71e      	b.n	800c4a8 <_vfiprintf_r+0x48>
 800c66a:	ab03      	add	r3, sp, #12
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	462a      	mov	r2, r5
 800c670:	4b05      	ldr	r3, [pc, #20]	@ (800c688 <_vfiprintf_r+0x228>)
 800c672:	a904      	add	r1, sp, #16
 800c674:	4630      	mov	r0, r6
 800c676:	f7fd fe41 	bl	800a2fc <_printf_i>
 800c67a:	e7e4      	b.n	800c646 <_vfiprintf_r+0x1e6>
 800c67c:	0800d2ba 	.word	0x0800d2ba
 800c680:	0800d2c4 	.word	0x0800d2c4
 800c684:	08009dcd 	.word	0x08009dcd
 800c688:	0800c43d 	.word	0x0800c43d
 800c68c:	0800d2c0 	.word	0x0800d2c0

0800c690 <__swbuf_r>:
 800c690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c692:	460e      	mov	r6, r1
 800c694:	4614      	mov	r4, r2
 800c696:	4605      	mov	r5, r0
 800c698:	b118      	cbz	r0, 800c6a2 <__swbuf_r+0x12>
 800c69a:	6a03      	ldr	r3, [r0, #32]
 800c69c:	b90b      	cbnz	r3, 800c6a2 <__swbuf_r+0x12>
 800c69e:	f7fd ffd7 	bl	800a650 <__sinit>
 800c6a2:	69a3      	ldr	r3, [r4, #24]
 800c6a4:	60a3      	str	r3, [r4, #8]
 800c6a6:	89a3      	ldrh	r3, [r4, #12]
 800c6a8:	071a      	lsls	r2, r3, #28
 800c6aa:	d501      	bpl.n	800c6b0 <__swbuf_r+0x20>
 800c6ac:	6923      	ldr	r3, [r4, #16]
 800c6ae:	b943      	cbnz	r3, 800c6c2 <__swbuf_r+0x32>
 800c6b0:	4621      	mov	r1, r4
 800c6b2:	4628      	mov	r0, r5
 800c6b4:	f000 f82a 	bl	800c70c <__swsetup_r>
 800c6b8:	b118      	cbz	r0, 800c6c2 <__swbuf_r+0x32>
 800c6ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c6be:	4638      	mov	r0, r7
 800c6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	6922      	ldr	r2, [r4, #16]
 800c6c6:	1a98      	subs	r0, r3, r2
 800c6c8:	6963      	ldr	r3, [r4, #20]
 800c6ca:	b2f6      	uxtb	r6, r6
 800c6cc:	4283      	cmp	r3, r0
 800c6ce:	4637      	mov	r7, r6
 800c6d0:	dc05      	bgt.n	800c6de <__swbuf_r+0x4e>
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	f7ff fdc1 	bl	800c25c <_fflush_r>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d1ed      	bne.n	800c6ba <__swbuf_r+0x2a>
 800c6de:	68a3      	ldr	r3, [r4, #8]
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	60a3      	str	r3, [r4, #8]
 800c6e4:	6823      	ldr	r3, [r4, #0]
 800c6e6:	1c5a      	adds	r2, r3, #1
 800c6e8:	6022      	str	r2, [r4, #0]
 800c6ea:	701e      	strb	r6, [r3, #0]
 800c6ec:	6962      	ldr	r2, [r4, #20]
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d004      	beq.n	800c6fe <__swbuf_r+0x6e>
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	07db      	lsls	r3, r3, #31
 800c6f8:	d5e1      	bpl.n	800c6be <__swbuf_r+0x2e>
 800c6fa:	2e0a      	cmp	r6, #10
 800c6fc:	d1df      	bne.n	800c6be <__swbuf_r+0x2e>
 800c6fe:	4621      	mov	r1, r4
 800c700:	4628      	mov	r0, r5
 800c702:	f7ff fdab 	bl	800c25c <_fflush_r>
 800c706:	2800      	cmp	r0, #0
 800c708:	d0d9      	beq.n	800c6be <__swbuf_r+0x2e>
 800c70a:	e7d6      	b.n	800c6ba <__swbuf_r+0x2a>

0800c70c <__swsetup_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4b29      	ldr	r3, [pc, #164]	@ (800c7b4 <__swsetup_r+0xa8>)
 800c710:	4605      	mov	r5, r0
 800c712:	6818      	ldr	r0, [r3, #0]
 800c714:	460c      	mov	r4, r1
 800c716:	b118      	cbz	r0, 800c720 <__swsetup_r+0x14>
 800c718:	6a03      	ldr	r3, [r0, #32]
 800c71a:	b90b      	cbnz	r3, 800c720 <__swsetup_r+0x14>
 800c71c:	f7fd ff98 	bl	800a650 <__sinit>
 800c720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c724:	0719      	lsls	r1, r3, #28
 800c726:	d422      	bmi.n	800c76e <__swsetup_r+0x62>
 800c728:	06da      	lsls	r2, r3, #27
 800c72a:	d407      	bmi.n	800c73c <__swsetup_r+0x30>
 800c72c:	2209      	movs	r2, #9
 800c72e:	602a      	str	r2, [r5, #0]
 800c730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c734:	81a3      	strh	r3, [r4, #12]
 800c736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c73a:	e033      	b.n	800c7a4 <__swsetup_r+0x98>
 800c73c:	0758      	lsls	r0, r3, #29
 800c73e:	d512      	bpl.n	800c766 <__swsetup_r+0x5a>
 800c740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c742:	b141      	cbz	r1, 800c756 <__swsetup_r+0x4a>
 800c744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c748:	4299      	cmp	r1, r3
 800c74a:	d002      	beq.n	800c752 <__swsetup_r+0x46>
 800c74c:	4628      	mov	r0, r5
 800c74e:	f7fe ff2f 	bl	800b5b0 <_free_r>
 800c752:	2300      	movs	r3, #0
 800c754:	6363      	str	r3, [r4, #52]	@ 0x34
 800c756:	89a3      	ldrh	r3, [r4, #12]
 800c758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c75c:	81a3      	strh	r3, [r4, #12]
 800c75e:	2300      	movs	r3, #0
 800c760:	6063      	str	r3, [r4, #4]
 800c762:	6923      	ldr	r3, [r4, #16]
 800c764:	6023      	str	r3, [r4, #0]
 800c766:	89a3      	ldrh	r3, [r4, #12]
 800c768:	f043 0308 	orr.w	r3, r3, #8
 800c76c:	81a3      	strh	r3, [r4, #12]
 800c76e:	6923      	ldr	r3, [r4, #16]
 800c770:	b94b      	cbnz	r3, 800c786 <__swsetup_r+0x7a>
 800c772:	89a3      	ldrh	r3, [r4, #12]
 800c774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c77c:	d003      	beq.n	800c786 <__swsetup_r+0x7a>
 800c77e:	4621      	mov	r1, r4
 800c780:	4628      	mov	r0, r5
 800c782:	f000 f883 	bl	800c88c <__smakebuf_r>
 800c786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c78a:	f013 0201 	ands.w	r2, r3, #1
 800c78e:	d00a      	beq.n	800c7a6 <__swsetup_r+0x9a>
 800c790:	2200      	movs	r2, #0
 800c792:	60a2      	str	r2, [r4, #8]
 800c794:	6962      	ldr	r2, [r4, #20]
 800c796:	4252      	negs	r2, r2
 800c798:	61a2      	str	r2, [r4, #24]
 800c79a:	6922      	ldr	r2, [r4, #16]
 800c79c:	b942      	cbnz	r2, 800c7b0 <__swsetup_r+0xa4>
 800c79e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c7a2:	d1c5      	bne.n	800c730 <__swsetup_r+0x24>
 800c7a4:	bd38      	pop	{r3, r4, r5, pc}
 800c7a6:	0799      	lsls	r1, r3, #30
 800c7a8:	bf58      	it	pl
 800c7aa:	6962      	ldrpl	r2, [r4, #20]
 800c7ac:	60a2      	str	r2, [r4, #8]
 800c7ae:	e7f4      	b.n	800c79a <__swsetup_r+0x8e>
 800c7b0:	2000      	movs	r0, #0
 800c7b2:	e7f7      	b.n	800c7a4 <__swsetup_r+0x98>
 800c7b4:	20000108 	.word	0x20000108

0800c7b8 <_raise_r>:
 800c7b8:	291f      	cmp	r1, #31
 800c7ba:	b538      	push	{r3, r4, r5, lr}
 800c7bc:	4605      	mov	r5, r0
 800c7be:	460c      	mov	r4, r1
 800c7c0:	d904      	bls.n	800c7cc <_raise_r+0x14>
 800c7c2:	2316      	movs	r3, #22
 800c7c4:	6003      	str	r3, [r0, #0]
 800c7c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c7ce:	b112      	cbz	r2, 800c7d6 <_raise_r+0x1e>
 800c7d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c7d4:	b94b      	cbnz	r3, 800c7ea <_raise_r+0x32>
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	f000 f830 	bl	800c83c <_getpid_r>
 800c7dc:	4622      	mov	r2, r4
 800c7de:	4601      	mov	r1, r0
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7e6:	f000 b817 	b.w	800c818 <_kill_r>
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d00a      	beq.n	800c804 <_raise_r+0x4c>
 800c7ee:	1c59      	adds	r1, r3, #1
 800c7f0:	d103      	bne.n	800c7fa <_raise_r+0x42>
 800c7f2:	2316      	movs	r3, #22
 800c7f4:	6003      	str	r3, [r0, #0]
 800c7f6:	2001      	movs	r0, #1
 800c7f8:	e7e7      	b.n	800c7ca <_raise_r+0x12>
 800c7fa:	2100      	movs	r1, #0
 800c7fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c800:	4620      	mov	r0, r4
 800c802:	4798      	blx	r3
 800c804:	2000      	movs	r0, #0
 800c806:	e7e0      	b.n	800c7ca <_raise_r+0x12>

0800c808 <raise>:
 800c808:	4b02      	ldr	r3, [pc, #8]	@ (800c814 <raise+0xc>)
 800c80a:	4601      	mov	r1, r0
 800c80c:	6818      	ldr	r0, [r3, #0]
 800c80e:	f7ff bfd3 	b.w	800c7b8 <_raise_r>
 800c812:	bf00      	nop
 800c814:	20000108 	.word	0x20000108

0800c818 <_kill_r>:
 800c818:	b538      	push	{r3, r4, r5, lr}
 800c81a:	4d07      	ldr	r5, [pc, #28]	@ (800c838 <_kill_r+0x20>)
 800c81c:	2300      	movs	r3, #0
 800c81e:	4604      	mov	r4, r0
 800c820:	4608      	mov	r0, r1
 800c822:	4611      	mov	r1, r2
 800c824:	602b      	str	r3, [r5, #0]
 800c826:	f7f4 feeb 	bl	8001600 <_kill>
 800c82a:	1c43      	adds	r3, r0, #1
 800c82c:	d102      	bne.n	800c834 <_kill_r+0x1c>
 800c82e:	682b      	ldr	r3, [r5, #0]
 800c830:	b103      	cbz	r3, 800c834 <_kill_r+0x1c>
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	bd38      	pop	{r3, r4, r5, pc}
 800c836:	bf00      	nop
 800c838:	200024cc 	.word	0x200024cc

0800c83c <_getpid_r>:
 800c83c:	f7f4 bed8 	b.w	80015f0 <_getpid>

0800c840 <__swhatbuf_r>:
 800c840:	b570      	push	{r4, r5, r6, lr}
 800c842:	460c      	mov	r4, r1
 800c844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c848:	2900      	cmp	r1, #0
 800c84a:	b096      	sub	sp, #88	@ 0x58
 800c84c:	4615      	mov	r5, r2
 800c84e:	461e      	mov	r6, r3
 800c850:	da0d      	bge.n	800c86e <__swhatbuf_r+0x2e>
 800c852:	89a3      	ldrh	r3, [r4, #12]
 800c854:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c858:	f04f 0100 	mov.w	r1, #0
 800c85c:	bf14      	ite	ne
 800c85e:	2340      	movne	r3, #64	@ 0x40
 800c860:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c864:	2000      	movs	r0, #0
 800c866:	6031      	str	r1, [r6, #0]
 800c868:	602b      	str	r3, [r5, #0]
 800c86a:	b016      	add	sp, #88	@ 0x58
 800c86c:	bd70      	pop	{r4, r5, r6, pc}
 800c86e:	466a      	mov	r2, sp
 800c870:	f000 f848 	bl	800c904 <_fstat_r>
 800c874:	2800      	cmp	r0, #0
 800c876:	dbec      	blt.n	800c852 <__swhatbuf_r+0x12>
 800c878:	9901      	ldr	r1, [sp, #4]
 800c87a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c87e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c882:	4259      	negs	r1, r3
 800c884:	4159      	adcs	r1, r3
 800c886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c88a:	e7eb      	b.n	800c864 <__swhatbuf_r+0x24>

0800c88c <__smakebuf_r>:
 800c88c:	898b      	ldrh	r3, [r1, #12]
 800c88e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c890:	079d      	lsls	r5, r3, #30
 800c892:	4606      	mov	r6, r0
 800c894:	460c      	mov	r4, r1
 800c896:	d507      	bpl.n	800c8a8 <__smakebuf_r+0x1c>
 800c898:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c89c:	6023      	str	r3, [r4, #0]
 800c89e:	6123      	str	r3, [r4, #16]
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	6163      	str	r3, [r4, #20]
 800c8a4:	b003      	add	sp, #12
 800c8a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8a8:	ab01      	add	r3, sp, #4
 800c8aa:	466a      	mov	r2, sp
 800c8ac:	f7ff ffc8 	bl	800c840 <__swhatbuf_r>
 800c8b0:	9f00      	ldr	r7, [sp, #0]
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	f7fe feee 	bl	800b698 <_malloc_r>
 800c8bc:	b948      	cbnz	r0, 800c8d2 <__smakebuf_r+0x46>
 800c8be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8c2:	059a      	lsls	r2, r3, #22
 800c8c4:	d4ee      	bmi.n	800c8a4 <__smakebuf_r+0x18>
 800c8c6:	f023 0303 	bic.w	r3, r3, #3
 800c8ca:	f043 0302 	orr.w	r3, r3, #2
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	e7e2      	b.n	800c898 <__smakebuf_r+0xc>
 800c8d2:	89a3      	ldrh	r3, [r4, #12]
 800c8d4:	6020      	str	r0, [r4, #0]
 800c8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8da:	81a3      	strh	r3, [r4, #12]
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c8e2:	b15b      	cbz	r3, 800c8fc <__smakebuf_r+0x70>
 800c8e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f000 f81d 	bl	800c928 <_isatty_r>
 800c8ee:	b128      	cbz	r0, 800c8fc <__smakebuf_r+0x70>
 800c8f0:	89a3      	ldrh	r3, [r4, #12]
 800c8f2:	f023 0303 	bic.w	r3, r3, #3
 800c8f6:	f043 0301 	orr.w	r3, r3, #1
 800c8fa:	81a3      	strh	r3, [r4, #12]
 800c8fc:	89a3      	ldrh	r3, [r4, #12]
 800c8fe:	431d      	orrs	r5, r3
 800c900:	81a5      	strh	r5, [r4, #12]
 800c902:	e7cf      	b.n	800c8a4 <__smakebuf_r+0x18>

0800c904 <_fstat_r>:
 800c904:	b538      	push	{r3, r4, r5, lr}
 800c906:	4d07      	ldr	r5, [pc, #28]	@ (800c924 <_fstat_r+0x20>)
 800c908:	2300      	movs	r3, #0
 800c90a:	4604      	mov	r4, r0
 800c90c:	4608      	mov	r0, r1
 800c90e:	4611      	mov	r1, r2
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	f7f4 fed5 	bl	80016c0 <_fstat>
 800c916:	1c43      	adds	r3, r0, #1
 800c918:	d102      	bne.n	800c920 <_fstat_r+0x1c>
 800c91a:	682b      	ldr	r3, [r5, #0]
 800c91c:	b103      	cbz	r3, 800c920 <_fstat_r+0x1c>
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	bd38      	pop	{r3, r4, r5, pc}
 800c922:	bf00      	nop
 800c924:	200024cc 	.word	0x200024cc

0800c928 <_isatty_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4d06      	ldr	r5, [pc, #24]	@ (800c944 <_isatty_r+0x1c>)
 800c92c:	2300      	movs	r3, #0
 800c92e:	4604      	mov	r4, r0
 800c930:	4608      	mov	r0, r1
 800c932:	602b      	str	r3, [r5, #0]
 800c934:	f7f4 fed4 	bl	80016e0 <_isatty>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_isatty_r+0x1a>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_isatty_r+0x1a>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	200024cc 	.word	0x200024cc

0800c948 <_init>:
 800c948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94a:	bf00      	nop
 800c94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c94e:	bc08      	pop	{r3}
 800c950:	469e      	mov	lr, r3
 800c952:	4770      	bx	lr

0800c954 <_fini>:
 800c954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c956:	bf00      	nop
 800c958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c95a:	bc08      	pop	{r3}
 800c95c:	469e      	mov	lr, r3
 800c95e:	4770      	bx	lr
