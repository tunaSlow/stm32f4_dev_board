
stm32f4_mobile_base_sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b9c  0800c778  0800c778  0000d778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d314  0800d314  0000f2c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d314  0800d314  0000e314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d31c  0800d31c  0000f2c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d31c  0800d31c  0000e31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d320  0800d320  0000e320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0800d324  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2c4  2**0
                  CONTENTS
 10 .bss          00002254  200002c4  200002c4  0000f2c4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002518  20002518  0000f2c4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014008  00000000  00000000  0000f2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a5f  00000000  00000000  000232fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00026d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cee  00000000  00000000  00027ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026282  00000000  00000000  00028b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017c15  00000000  00000000  0004ee10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d633c  00000000  00000000  00066a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013cd61  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000571c  00000000  00000000  0013cda4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000081  00000000  00000000  001424c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002c4 	.word	0x200002c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c760 	.word	0x0800c760

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002c8 	.word	0x200002c8
 80001cc:	0800c760 	.word	0x0800c760

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	463b      	mov	r3, r7
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ee8:	4a21      	ldr	r2, [pc, #132]	@ (8000f70 <MX_ADC1_Init+0x9c>)
 8000eea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0c:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f12:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f14:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <MX_ADC1_Init+0xa0>)
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f32:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f34:	f000 ff08 	bl	8001d48 <HAL_ADC_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f3e:	f000 fabb 	bl	80014b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000f42:	230d      	movs	r3, #13
 8000f44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f4e:	463b      	mov	r3, r7
 8000f50:	4619      	mov	r1, r3
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <MX_ADC1_Init+0x98>)
 8000f54:	f001 f8a6 	bl	80020a4 <HAL_ADC_ConfigChannel>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f5e:	f000 faab 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002e0 	.word	0x200002e0
 8000f70:	40012000 	.word	0x40012000
 8000f74:	0f000001 	.word	0x0f000001

08000f78 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	@ (8000ff4 <HAL_ADC_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d127      	bne.n	8000fea <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a15      	ldr	r2, [pc, #84]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b13      	ldr	r3, [pc, #76]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc0:	f043 0304 	orr.w	r3, r3, #4
 8000fc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <HAL_ADC_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fca:	f003 0304 	and.w	r3, r3, #4
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd2:	2308      	movs	r3, #8
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <HAL_ADC_MspInit+0x84>)
 8000fe6:	f001 fb8d 	bl	8002704 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	@ 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40012000 	.word	0x40012000
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020800 	.word	0x40020800

08001000 <Read_ADC_Channel>:
  }
}

/* USER CODE BEGIN 1 */
uint32_t Read_ADC_Channel(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001004:	4808      	ldr	r0, [pc, #32]	@ (8001028 <Read_ADC_Channel+0x28>)
 8001006:	f000 fee3 	bl	8001dd0 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 800100a:	210a      	movs	r1, #10
 800100c:	4806      	ldr	r0, [pc, #24]	@ (8001028 <Read_ADC_Channel+0x28>)
 800100e:	f000 ffb1 	bl	8001f74 <HAL_ADC_PollForConversion>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d104      	bne.n	8001022 <Read_ADC_Channel+0x22>
    {
        return HAL_ADC_GetValue(&hadc1);
 8001018:	4803      	ldr	r0, [pc, #12]	@ (8001028 <Read_ADC_Channel+0x28>)
 800101a:	f001 f836 	bl	800208a <HAL_ADC_GetValue>
 800101e:	4603      	mov	r3, r0
 8001020:	e000      	b.n	8001024 <Read_ADC_Channel+0x24>
    }
    return 0; // Read failed
 8001022:	2300      	movs	r3, #0
}
 8001024:	4618      	mov	r0, r3
 8001026:	bd80      	pop	{r7, pc}
 8001028:	200002e0 	.word	0x200002e0

0800102c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b1e      	ldr	r3, [pc, #120]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	4a1d      	ldr	r2, [pc, #116]	@ (80010b0 <MX_GPIO_Init+0x84>)
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6313      	str	r3, [r2, #48]	@ 0x30
 8001042:	4b1b      	ldr	r3, [pc, #108]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a16      	ldr	r2, [pc, #88]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a0f      	ldr	r2, [pc, #60]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b0d      	ldr	r3, [pc, #52]	@ (80010b0 <MX_GPIO_Init+0x84>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0304 	and.w	r3, r3, #4
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_GPIO_Init+0x84>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	4a08      	ldr	r2, [pc, #32]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6313      	str	r3, [r2, #48]	@ 0x30
 8001096:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_GPIO_Init+0x84>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]

}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800

080010b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010ba:	4a13      	ldr	r2, [pc, #76]	@ (8001108 <MX_I2C2_Init+0x54>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010c0:	4a12      	ldr	r2, [pc, #72]	@ (800110c <MX_I2C2_Init+0x58>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010da:	2200      	movs	r2, #0
 80010dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_I2C2_Init+0x50>)
 80010f2:	f001 fca3 	bl	8002a3c <HAL_I2C_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 f9dc 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000328 	.word	0x20000328
 8001108:	40005800 	.word	0x40005800
 800110c:	000186a0 	.word	0x000186a0

08001110 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	@ 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a19      	ldr	r2, [pc, #100]	@ (8001194 <HAL_I2C_MspInit+0x84>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d12b      	bne.n	800118a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
 8001136:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113a:	4a17      	ldr	r2, [pc, #92]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 800113c:	f043 0320 	orr.w	r3, r3, #32
 8001140:	6313      	str	r3, [r2, #48]	@ 0x30
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	f003 0320 	and.w	r3, r3, #32
 800114a:	613b      	str	r3, [r7, #16]
 800114c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800114e:	2303      	movs	r3, #3
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001152:	2312      	movs	r3, #18
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800115e:	2304      	movs	r3, #4
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480c      	ldr	r0, [pc, #48]	@ (800119c <HAL_I2C_MspInit+0x8c>)
 800116a:	f001 facb 	bl	8002704 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	4a08      	ldr	r2, [pc, #32]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001178:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800117c:	6413      	str	r3, [r2, #64]	@ 0x40
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_I2C_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	@ 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40005800 	.word	0x40005800
 8001198:	40023800 	.word	0x40023800
 800119c:	40021400 	.word	0x40021400

080011a0 <I2C_ScanAndFindLM75A>:

#define LM75A_TEMP_REG  0x00
uint8_t lm75a_addr = 0; // Will be set after scan

void I2C_ScanAndFindLM75A(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	for (uint8_t addr = 1; addr < 127; addr++)
 80011a6:	2301      	movs	r3, #1
 80011a8:	71fb      	strb	r3, [r7, #7]
 80011aa:	e017      	b.n	80011dc <I2C_ScanAndFindLM75A+0x3c>
	{
		if (HAL_I2C_IsDeviceReady(&hi2c2, (addr << 1), 3, 5) == HAL_OK)
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b299      	uxth	r1, r3
 80011b4:	2305      	movs	r3, #5
 80011b6:	2203      	movs	r2, #3
 80011b8:	480c      	ldr	r0, [pc, #48]	@ (80011ec <I2C_ScanAndFindLM75A+0x4c>)
 80011ba:	f002 f8af 	bl	800331c <HAL_I2C_IsDeviceReady>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d108      	bne.n	80011d6 <I2C_ScanAndFindLM75A+0x36>
		{
			if (addr == 0x4F) // Found LM75A
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80011c8:	d105      	bne.n	80011d6 <I2C_ScanAndFindLM75A+0x36>
			{
				lm75a_addr = addr << 1; // Save 8-bit form for HAL
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <I2C_ScanAndFindLM75A+0x50>)
 80011d2:	701a      	strb	r2, [r3, #0]
				break;
 80011d4:	e006      	b.n	80011e4 <I2C_ScanAndFindLM75A+0x44>
	for (uint8_t addr = 1; addr < 127; addr++)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	3301      	adds	r3, #1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	2b7e      	cmp	r3, #126	@ 0x7e
 80011e0:	d9e4      	bls.n	80011ac <I2C_ScanAndFindLM75A+0xc>
			}
		}
	}
}
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000328 	.word	0x20000328
 80011f0:	2000037c 	.word	0x2000037c

080011f4 <LM75A_ReadTemperature_Fine>:

float LM75A_ReadTemperature_Fine(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af04      	add	r7, sp, #16
	uint8_t temp_data[2];
	int16_t raw_temp;
	float temperature;

	if (HAL_I2C_Mem_Read(&hi2c2, lm75a_addr, LM75A_TEMP_REG,
 80011fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <LM75A_ReadTemperature_Fine+0x84>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001204:	9302      	str	r3, [sp, #8]
 8001206:	2302      	movs	r3, #2
 8001208:	9301      	str	r3, [sp, #4]
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2301      	movs	r3, #1
 8001210:	2200      	movs	r2, #0
 8001212:	481a      	ldr	r0, [pc, #104]	@ (800127c <LM75A_ReadTemperature_Fine+0x88>)
 8001214:	f001 fe50 	bl	8002eb8 <HAL_I2C_Mem_Read>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <LM75A_ReadTemperature_Fine+0x2e>
			I2C_MEMADD_SIZE_8BIT, temp_data, 2, HAL_MAX_DELAY) != HAL_OK)
	{
		return -1000.0f; // Error
 800121e:	4b18      	ldr	r3, [pc, #96]	@ (8001280 <LM75A_ReadTemperature_Fine+0x8c>)
 8001220:	e023      	b.n	800126a <LM75A_ReadTemperature_Fine+0x76>
	}

	// Combine MSB and LSB
	raw_temp = (temp_data[0] << 8) | temp_data[1];
 8001222:	793b      	ldrb	r3, [r7, #4]
 8001224:	b21b      	sxth	r3, r3
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21a      	sxth	r2, r3
 800122a:	797b      	ldrb	r3, [r7, #5]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	81fb      	strh	r3, [r7, #14]

	// Shift right by 5 to get rid of unused bits (bits 4..0)
	raw_temp >>= 5;
 8001232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001236:	115b      	asrs	r3, r3, #5
 8001238:	81fb      	strh	r3, [r7, #14]

	// Sign extend 11-bit signed number if needed
	if (raw_temp & 0x400) // Check sign bit (bit 10)
 800123a:	89fb      	ldrh	r3, [r7, #14]
 800123c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <LM75A_ReadTemperature_Fine+0x5c>
	{
		raw_temp |= 0xF800; // Set upper bits to 1 for negative numbers
 8001244:	89fb      	ldrh	r3, [r7, #14]
 8001246:	ea6f 5343 	mvn.w	r3, r3, lsl #21
 800124a:	ea6f 5353 	mvn.w	r3, r3, lsr #21
 800124e:	81fb      	strh	r3, [r7, #14]
	}

	temperature = raw_temp * 0.125f;
 8001250:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800125c:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001264:	edc7 7a02 	vstr	s15, [r7, #8]

	return temperature;
 8001268:	68bb      	ldr	r3, [r7, #8]
}
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000037c 	.word	0x2000037c
 800127c:	20000328 	.word	0x20000328
 8001280:	c47a0000 	.word	0xc47a0000

08001284 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	@ 0x28
 8001288:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800128a:	f000 fcc7 	bl	8001c1c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800128e:	f000 f8a7 	bl	80013e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001292:	f7ff fecb 	bl	800102c <MX_GPIO_Init>
	MX_I2C2_Init();
 8001296:	f7ff ff0d 	bl	80010b4 <MX_I2C2_Init>
	MX_ADC1_Init();
 800129a:	f7ff fe1b 	bl	8000ed4 <MX_ADC1_Init>
	MX_USB_DEVICE_Init();
 800129e:	f007 fef3 	bl	8009088 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
	ssd1306_Init();
 80012a2:	f000 fa83 	bl	80017ac <ssd1306_Init>
	I2C_ScanAndFindLM75A();
 80012a6:	f7ff ff7b 	bl	80011a0 <I2C_ScanAndFindLM75A>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		float temp = LM75A_ReadTemperature_Fine();
 80012aa:	f7ff ffa3 	bl	80011f4 <LM75A_ReadTemperature_Fine>
 80012ae:	ed87 0a07 	vstr	s0, [r7, #28]
		uint32_t adc_val = Read_ADC_Channel();
 80012b2:	f7ff fea5 	bl	8001000 <Read_ADC_Channel>
 80012b6:	61b8      	str	r0, [r7, #24]
		float voltage = adc_val * 3.3f / 4095.0f;
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	ee07 3a90 	vmov	s15, r3
 80012be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c2:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 80013b8 <main+0x134>
 80012c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012ca:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80013bc <main+0x138>
 80012ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d2:	edc7 7a05 	vstr	s15, [r7, #20]

		// Clear the display
		ssd1306_Fill(Black);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f000 fad2 	bl	8001880 <ssd1306_Fill>

		// Line 1: Temperature
		ssd1306_SetCursor(2, 0);
 80012dc:	2100      	movs	r1, #0
 80012de:	2002      	movs	r0, #2
 80012e0:	f000 fc28 	bl	8001b34 <ssd1306_SetCursor>
		snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C",
 80012e4:	edd7 7a07 	vldr	s15, [r7, #28]
 80012e8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int)temp, (int)((temp - (int)temp) * 100));
 80012ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80012f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f8:	ed97 7a07 	vldr	s14, [r7, #28]
 80012fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001300:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80013c0 <main+0x13c>
 8001304:	ee67 7a87 	vmul.f32	s15, s15, s14
		snprintf(buffer, sizeof(buffer), "Temp: %d.%02d C",
 8001308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130c:	ee17 3a90 	vmov	r3, s15
 8001310:	4638      	mov	r0, r7
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	ee16 3a90 	vmov	r3, s13
 8001318:	4a2a      	ldr	r2, [pc, #168]	@ (80013c4 <main+0x140>)
 800131a:	2114      	movs	r1, #20
 800131c:	f009 f8d8 	bl	800a4d0 <sniprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8001320:	4b29      	ldr	r3, [pc, #164]	@ (80013c8 <main+0x144>)
 8001322:	4638      	mov	r0, r7
 8001324:	2201      	movs	r2, #1
 8001326:	9200      	str	r2, [sp, #0]
 8001328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800132a:	f000 fbdd 	bl	8001ae8 <ssd1306_WriteString>

		// Line 2: Potentiometer
		ssd1306_SetCursor(2, 12);
 800132e:	210c      	movs	r1, #12
 8001330:	2002      	movs	r0, #2
 8001332:	f000 fbff 	bl	8001b34 <ssd1306_SetCursor>
		snprintf(buffer, sizeof(buffer), "Pot: %ld (%.2fV)", adc_val, voltage);
 8001336:	6978      	ldr	r0, [r7, #20]
 8001338:	f7ff f906 	bl	8000548 <__aeabi_f2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4638      	mov	r0, r7
 8001342:	e9cd 2300 	strd	r2, r3, [sp]
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4a20      	ldr	r2, [pc, #128]	@ (80013cc <main+0x148>)
 800134a:	2114      	movs	r1, #20
 800134c:	f009 f8c0 	bl	800a4d0 <sniprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 8001350:	4b1d      	ldr	r3, [pc, #116]	@ (80013c8 <main+0x144>)
 8001352:	4638      	mov	r0, r7
 8001354:	2201      	movs	r2, #1
 8001356:	9200      	str	r2, [sp, #0]
 8001358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800135a:	f000 fbc5 	bl	8001ae8 <ssd1306_WriteString>

		// Line 3: USB Data (if available)
		if (usb_data_received)
 800135e:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <main+0x14c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d010      	beq.n	800138a <main+0x106>
		{
			usb_data_received = 0;
 8001368:	4b19      	ldr	r3, [pc, #100]	@ (80013d0 <main+0x14c>)
 800136a:	2200      	movs	r2, #0
 800136c:	701a      	strb	r2, [r3, #0]

			// Null-terminate safely
			if (usb_rx_length < USB_RX_BUFFER_SIZE) {
 800136e:	4b19      	ldr	r3, [pc, #100]	@ (80013d4 <main+0x150>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2b3f      	cmp	r3, #63	@ 0x3f
 8001374:	d805      	bhi.n	8001382 <main+0xfe>
				usb_rx_buffer[usb_rx_length] = '\0';
 8001376:	4b17      	ldr	r3, [pc, #92]	@ (80013d4 <main+0x150>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <main+0x154>)
 800137c:	2100      	movs	r1, #0
 800137e:	54d1      	strb	r1, [r2, r3]
 8001380:	e003      	b.n	800138a <main+0x106>
			} else {
				usb_rx_buffer[USB_RX_BUFFER_SIZE - 1] = '\0';
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <main+0x154>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
			}
		}

		// Always show last received USB message
		ssd1306_SetCursor(2, 24);
 800138a:	2118      	movs	r1, #24
 800138c:	2002      	movs	r0, #2
 800138e:	f000 fbd1 	bl	8001b34 <ssd1306_SetCursor>

		snprintf(buffer, sizeof(buffer), "Data: %s", usb_rx_buffer);
 8001392:	4638      	mov	r0, r7
 8001394:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <main+0x154>)
 8001396:	4a11      	ldr	r2, [pc, #68]	@ (80013dc <main+0x158>)
 8001398:	2114      	movs	r1, #20
 800139a:	f009 f899 	bl	800a4d0 <sniprintf>
		ssd1306_WriteString(buffer, Font_7x10, White);
 800139e:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <main+0x144>)
 80013a0:	4638      	mov	r0, r7
 80013a2:	2201      	movs	r2, #1
 80013a4:	9200      	str	r2, [sp, #0]
 80013a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a8:	f000 fb9e 	bl	8001ae8 <ssd1306_WriteString>

		// Update the display
		ssd1306_UpdateScreen();
 80013ac:	f000 fa80 	bl	80018b0 <ssd1306_UpdateScreen>

		HAL_Delay(10);
 80013b0:	200a      	movs	r0, #10
 80013b2:	f000 fca5 	bl	8001d00 <HAL_Delay>
	{
 80013b6:	e778      	b.n	80012aa <main+0x26>
 80013b8:	40533333 	.word	0x40533333
 80013bc:	457ff000 	.word	0x457ff000
 80013c0:	42c80000 	.word	0x42c80000
 80013c4:	0800c798 	.word	0x0800c798
 80013c8:	0800cf94 	.word	0x0800cf94
 80013cc:	0800c7a8 	.word	0x0800c7a8
 80013d0:	20000ac4 	.word	0x20000ac4
 80013d4:	20000ac0 	.word	0x20000ac0
 80013d8:	20000a80 	.word	0x20000a80
 80013dc:	0800c7bc 	.word	0x0800c7bc

080013e0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b094      	sub	sp, #80	@ 0x50
 80013e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	2230      	movs	r2, #48	@ 0x30
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f009 f901 	bl	800a5f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	4b29      	ldr	r3, [pc, #164]	@ (80014b0 <SystemClock_Config+0xd0>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	4a28      	ldr	r2, [pc, #160]	@ (80014b0 <SystemClock_Config+0xd0>)
 800140e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001412:	6413      	str	r3, [r2, #64]	@ 0x40
 8001414:	4b26      	ldr	r3, [pc, #152]	@ (80014b0 <SystemClock_Config+0xd0>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	4b23      	ldr	r3, [pc, #140]	@ (80014b4 <SystemClock_Config+0xd4>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a22      	ldr	r2, [pc, #136]	@ (80014b4 <SystemClock_Config+0xd4>)
 800142a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <SystemClock_Config+0xd4>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800143c:	2303      	movs	r3, #3
 800143e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001440:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001446:	2301      	movs	r3, #1
 8001448:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144a:	2310      	movs	r3, #16
 800144c:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144e:	2302      	movs	r3, #2
 8001450:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001452:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001456:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001458:	2304      	movs	r3, #4
 800145a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 800145c:	2348      	movs	r3, #72	@ 0x48
 800145e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001460:	2302      	movs	r3, #2
 8001462:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8001464:	2303      	movs	r3, #3
 8001466:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0320 	add.w	r3, r7, #32
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fe89 	bl	8005184 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x9c>
	{
		Error_Handler();
 8001478:	f000 f81e 	bl	80014b8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001488:	2300      	movs	r3, #0
 800148a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f8ec 	bl	8005674 <HAL_RCC_ClockConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <SystemClock_Config+0xc6>
	{
		Error_Handler();
 80014a2:	f000 f809 	bl	80014b8 <Error_Handler>
	}
}
 80014a6:	bf00      	nop
 80014a8:	3750      	adds	r7, #80	@ 0x50
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40007000 	.word	0x40007000

080014b8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80014c0:	bf00      	nop
 80014c2:	e7fd      	b.n	80014c0 <Error_Handler+0x8>

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <HAL_MspInit+0x4c>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001510 <HAL_MspInit+0x4c>)
 80014d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014da:	4b0d      	ldr	r3, [pc, #52]	@ (8001510 <HAL_MspInit+0x4c>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_MspInit+0x4c>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a08      	ldr	r2, [pc, #32]	@ (8001510 <HAL_MspInit+0x4c>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <HAL_MspInit+0x4c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <NMI_Handler+0x4>

0800151c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <HardFault_Handler+0x4>

08001524 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <MemManage_Handler+0x4>

0800152c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <UsageFault_Handler+0x4>

0800153c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156a:	f000 fba9 	bl	8001cc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	@ (8001584 <OTG_FS_IRQHandler+0x10>)
 800157a:	f002 fcf5 	bl	8003f68 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20001cc8 	.word	0x20001cc8

08001588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return 1;
 800158c:	2301      	movs	r3, #1
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_kill>:

int _kill(int pid, int sig)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015a2:	f009 f87b 	bl	800a69c <__errno>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2216      	movs	r2, #22
 80015aa:	601a      	str	r2, [r3, #0]
  return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ffe7 	bl	8001598 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ca:	bf00      	nop
 80015cc:	e7fd      	b.n	80015ca <_exit+0x12>

080015ce <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	60f8      	str	r0, [r7, #12]
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
 80015de:	e00a      	b.n	80015f6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e0:	f3af 8000 	nop.w
 80015e4:	4601      	mov	r1, r0
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	60ba      	str	r2, [r7, #8]
 80015ec:	b2ca      	uxtb	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	dbf0      	blt.n	80015e0 <_read+0x12>
  }

  return len;
 80015fe:	687b      	ldr	r3, [r7, #4]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	2300      	movs	r3, #0
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	e009      	b.n	800162e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	60ba      	str	r2, [r7, #8]
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3301      	adds	r3, #1
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	429a      	cmp	r2, r3
 8001634:	dbf1      	blt.n	800161a <_write+0x12>
  }
  return len;
 8001636:	687b      	ldr	r3, [r7, #4]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <_close>:

int _close(int file)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001668:	605a      	str	r2, [r3, #4]
  return 0;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_isatty>:

int _isatty(int file)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001680:	2301      	movs	r3, #1
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr

0800168e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800168e:	b480      	push	{r7}
 8001690:	b085      	sub	sp, #20
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b0:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <_sbrk+0x5c>)
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <_sbrk+0x60>)
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016bc:	4b13      	ldr	r3, [pc, #76]	@ (800170c <_sbrk+0x64>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d102      	bne.n	80016ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <_sbrk+0x64>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <_sbrk+0x68>)
 80016c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <_sbrk+0x64>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d207      	bcs.n	80016e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d8:	f008 ffe0 	bl	800a69c <__errno>
 80016dc:	4603      	mov	r3, r0
 80016de:	220c      	movs	r2, #12
 80016e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016e6:	e009      	b.n	80016fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e8:	4b08      	ldr	r3, [pc, #32]	@ (800170c <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ee:	4b07      	ldr	r3, [pc, #28]	@ (800170c <_sbrk+0x64>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	4a05      	ldr	r2, [pc, #20]	@ (800170c <_sbrk+0x64>)
 80016f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016fa:	68fb      	ldr	r3, [r7, #12]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3718      	adds	r7, #24
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20020000 	.word	0x20020000
 8001708:	00000400 	.word	0x00000400
 800170c:	20000380 	.word	0x20000380
 8001710:	20002518 	.word	0x20002518

08001714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <SystemInit+0x20>)
 800171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <SystemInit+0x20>)
 8001720:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001724:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af04      	add	r7, sp, #16
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001752:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001756:	9302      	str	r3, [sp, #8]
 8001758:	2301      	movs	r3, #1
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	1dfb      	adds	r3, r7, #7
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2301      	movs	r3, #1
 8001762:	2200      	movs	r2, #0
 8001764:	2178      	movs	r1, #120	@ 0x78
 8001766:	4803      	ldr	r0, [pc, #12]	@ (8001774 <ssd1306_WriteCommand+0x2c>)
 8001768:	f001 faac 	bl	8002cc4 <HAL_I2C_Mem_Write>
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000328 	.word	0x20000328

08001778 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af04      	add	r7, sp, #16
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b29b      	uxth	r3, r3
 8001786:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800178a:	9202      	str	r2, [sp, #8]
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	2240      	movs	r2, #64	@ 0x40
 8001796:	2178      	movs	r1, #120	@ 0x78
 8001798:	4803      	ldr	r0, [pc, #12]	@ (80017a8 <ssd1306_WriteData+0x30>)
 800179a:	f001 fa93 	bl	8002cc4 <HAL_I2C_Mem_Write>
}
 800179e:	bf00      	nop
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000328 	.word	0x20000328

080017ac <ssd1306_Init>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Init(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80017b0:	f7ff ffc2 	bl	8001738 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80017b4:	2064      	movs	r0, #100	@ 0x64
 80017b6:	f000 faa3 	bl	8001d00 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80017ba:	2000      	movs	r0, #0
 80017bc:	f000 f9e6 	bl	8001b8c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80017c0:	2020      	movs	r0, #32
 80017c2:	f7ff ffc1 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80017c6:	2000      	movs	r0, #0
 80017c8:	f7ff ffbe 	bl	8001748 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid
//    ssd1306_WriteCommand(0x02); // low column start
//    ssd1306_WriteCommand(0x10); // high column start

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80017cc:	20b0      	movs	r0, #176	@ 0xb0
 80017ce:	f7ff ffbb 	bl	8001748 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80017d2:	20c8      	movs	r0, #200	@ 0xc8
 80017d4:	f7ff ffb8 	bl	8001748 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff ffb5 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80017de:	2010      	movs	r0, #16
 80017e0:	f7ff ffb2 	bl	8001748 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80017e4:	2040      	movs	r0, #64	@ 0x40
 80017e6:	f7ff ffaf 	bl	8001748 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80017ea:	20ff      	movs	r0, #255	@ 0xff
 80017ec:	f000 f9ba 	bl	8001b64 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80017f0:	20a1      	movs	r0, #161	@ 0xa1
 80017f2:	f7ff ffa9 	bl	8001748 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80017f6:	20a6      	movs	r0, #166	@ 0xa6
 80017f8:	f7ff ffa6 	bl	8001748 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017fc:	20a8      	movs	r0, #168	@ 0xa8
 80017fe:	f7ff ffa3 	bl	8001748 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001802:	203f      	movs	r0, #63	@ 0x3f
 8001804:	f7ff ffa0 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001808:	20a4      	movs	r0, #164	@ 0xa4
 800180a:	f7ff ff9d 	bl	8001748 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800180e:	20d3      	movs	r0, #211	@ 0xd3
 8001810:	f7ff ff9a 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001814:	2000      	movs	r0, #0
 8001816:	f7ff ff97 	bl	8001748 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800181a:	20d5      	movs	r0, #213	@ 0xd5
 800181c:	f7ff ff94 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001820:	20f0      	movs	r0, #240	@ 0xf0
 8001822:	f7ff ff91 	bl	8001748 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001826:	20d9      	movs	r0, #217	@ 0xd9
 8001828:	f7ff ff8e 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800182c:	2022      	movs	r0, #34	@ 0x22
 800182e:	f7ff ff8b 	bl	8001748 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001832:	20da      	movs	r0, #218	@ 0xda
 8001834:	f7ff ff88 	bl	8001748 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001838:	2012      	movs	r0, #18
 800183a:	f7ff ff85 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800183e:	20db      	movs	r0, #219	@ 0xdb
 8001840:	f7ff ff82 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001844:	2020      	movs	r0, #32
 8001846:	f7ff ff7f 	bl	8001748 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800184a:	208d      	movs	r0, #141	@ 0x8d
 800184c:	f7ff ff7c 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001850:	2014      	movs	r0, #20
 8001852:	f7ff ff79 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001856:	2001      	movs	r0, #1
 8001858:	f000 f998 	bl	8001b8c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800185c:	2000      	movs	r0, #0
 800185e:	f000 f80f 	bl	8001880 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001862:	f000 f825 	bl	80018b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <ssd1306_Init+0xd0>)
 8001868:	2200      	movs	r2, #0
 800186a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800186c:	4b03      	ldr	r3, [pc, #12]	@ (800187c <ssd1306_Init+0xd0>)
 800186e:	2200      	movs	r2, #0
 8001870:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001872:	4b02      	ldr	r3, [pc, #8]	@ (800187c <ssd1306_Init+0xd0>)
 8001874:	2201      	movs	r2, #1
 8001876:	711a      	strb	r2, [r3, #4]
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000794 	.word	0x20000794

08001880 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <ssd1306_Fill+0x14>
 8001890:	2300      	movs	r3, #0
 8001892:	e000      	b.n	8001896 <ssd1306_Fill+0x16>
 8001894:	23ff      	movs	r3, #255	@ 0xff
 8001896:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 800189a:	4619      	mov	r1, r3
 800189c:	4803      	ldr	r0, [pc, #12]	@ (80018ac <ssd1306_Fill+0x2c>)
 800189e:	f008 feaa 	bl	800a5f6 <memset>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000384 	.word	0x20000384

080018b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018b6:	2300      	movs	r3, #0
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e01a      	b.n	80018f2 <ssd1306_UpdateScreen+0x42>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	3b50      	subs	r3, #80	@ 0x50
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff40 	bl	8001748 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff ff3d 	bl	8001748 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80018ce:	2010      	movs	r0, #16
 80018d0:	f7ff ff3a 	bl	8001748 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80018d4:	79fa      	ldrb	r2, [r7, #7]
 80018d6:	4613      	mov	r3, r2
 80018d8:	019b      	lsls	r3, r3, #6
 80018da:	4413      	add	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	461a      	mov	r2, r3
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <ssd1306_UpdateScreen+0x54>)
 80018e2:	4413      	add	r3, r2
 80018e4:	2182      	movs	r1, #130	@ 0x82
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff46 	bl	8001778 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	3301      	adds	r3, #1
 80018f0:	71fb      	strb	r3, [r7, #7]
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b07      	cmp	r3, #7
 80018f6:	d9e1      	bls.n	80018bc <ssd1306_UpdateScreen+0xc>
    }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000384 	.word	0x20000384

08001908 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001908:	b490      	push	{r4, r7}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
 8001912:	460b      	mov	r3, r1
 8001914:	71bb      	strb	r3, [r7, #6]
 8001916:	4613      	mov	r3, r2
 8001918:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b81      	cmp	r3, #129	@ 0x81
 800191e:	d849      	bhi.n	80019b4 <ssd1306_DrawPixel+0xac>
 8001920:	79bb      	ldrb	r3, [r7, #6]
 8001922:	2b3f      	cmp	r3, #63	@ 0x3f
 8001924:	d846      	bhi.n	80019b4 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001926:	797b      	ldrb	r3, [r7, #5]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d120      	bne.n	800196e <ssd1306_DrawPixel+0x66>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800192c:	79fa      	ldrb	r2, [r7, #7]
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	b2d8      	uxtb	r0, r3
 8001934:	4601      	mov	r1, r0
 8001936:	460b      	mov	r3, r1
 8001938:	019b      	lsls	r3, r3, #6
 800193a:	440b      	add	r3, r1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <ssd1306_DrawPixel+0xb8>)
 8001942:	5cd3      	ldrb	r3, [r2, r3]
 8001944:	b25a      	sxtb	r2, r3
 8001946:	79bb      	ldrb	r3, [r7, #6]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	2101      	movs	r1, #1
 800194e:	fa01 f303 	lsl.w	r3, r1, r3
 8001952:	b25b      	sxtb	r3, r3
 8001954:	4313      	orrs	r3, r2
 8001956:	b25c      	sxtb	r4, r3
 8001958:	79fa      	ldrb	r2, [r7, #7]
 800195a:	4601      	mov	r1, r0
 800195c:	460b      	mov	r3, r1
 800195e:	019b      	lsls	r3, r3, #6
 8001960:	440b      	add	r3, r1
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	4413      	add	r3, r2
 8001966:	b2e1      	uxtb	r1, r4
 8001968:	4a15      	ldr	r2, [pc, #84]	@ (80019c0 <ssd1306_DrawPixel+0xb8>)
 800196a:	54d1      	strb	r1, [r2, r3]
 800196c:	e023      	b.n	80019b6 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800196e:	79fa      	ldrb	r2, [r7, #7]
 8001970:	79bb      	ldrb	r3, [r7, #6]
 8001972:	08db      	lsrs	r3, r3, #3
 8001974:	b2d8      	uxtb	r0, r3
 8001976:	4601      	mov	r1, r0
 8001978:	460b      	mov	r3, r1
 800197a:	019b      	lsls	r3, r3, #6
 800197c:	440b      	add	r3, r1
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	4a0f      	ldr	r2, [pc, #60]	@ (80019c0 <ssd1306_DrawPixel+0xb8>)
 8001984:	5cd3      	ldrb	r3, [r2, r3]
 8001986:	b25a      	sxtb	r2, r3
 8001988:	79bb      	ldrb	r3, [r7, #6]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	b25b      	sxtb	r3, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	b25b      	sxtb	r3, r3
 800199a:	4013      	ands	r3, r2
 800199c:	b25c      	sxtb	r4, r3
 800199e:	79fa      	ldrb	r2, [r7, #7]
 80019a0:	4601      	mov	r1, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	019b      	lsls	r3, r3, #6
 80019a6:	440b      	add	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	b2e1      	uxtb	r1, r4
 80019ae:	4a04      	ldr	r2, [pc, #16]	@ (80019c0 <ssd1306_DrawPixel+0xb8>)
 80019b0:	54d1      	strb	r1, [r2, r3]
 80019b2:	e000      	b.n	80019b6 <ssd1306_DrawPixel+0xae>
        return;
 80019b4:	bf00      	nop
    }
}
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc90      	pop	{r4, r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000384 	.word	0x20000384

080019c4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80019c4:	b590      	push	{r4, r7, lr}
 80019c6:	b089      	sub	sp, #36	@ 0x24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4604      	mov	r4, r0
 80019cc:	4638      	mov	r0, r7
 80019ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80019d2:	4623      	mov	r3, r4
 80019d4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b1f      	cmp	r3, #31
 80019da:	d902      	bls.n	80019e2 <ssd1306_WriteChar+0x1e>
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	2b7e      	cmp	r3, #126	@ 0x7e
 80019e0:	d901      	bls.n	80019e6 <ssd1306_WriteChar+0x22>
        return 0;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e079      	b.n	8001ada <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <ssd1306_WriteChar+0x34>
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	3b20      	subs	r3, #32
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	e000      	b.n	80019fa <ssd1306_WriteChar+0x36>
 80019f8:	783b      	ldrb	r3, [r7, #0]
 80019fa:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80019fc:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 80019fe:	881b      	ldrh	r3, [r3, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	4413      	add	r3, r2
 8001a06:	2b82      	cmp	r3, #130	@ 0x82
 8001a08:	dc06      	bgt.n	8001a18 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001a0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 8001a0c:	885b      	ldrh	r3, [r3, #2]
 8001a0e:	461a      	mov	r2, r3
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001a14:	2b40      	cmp	r3, #64	@ 0x40
 8001a16:	dd01      	ble.n	8001a1c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e05e      	b.n	8001ada <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	e04d      	b.n	8001abe <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	7bfb      	ldrb	r3, [r7, #15]
 8001a26:	3b20      	subs	r3, #32
 8001a28:	7879      	ldrb	r1, [r7, #1]
 8001a2a:	fb01 f303 	mul.w	r3, r1, r3
 8001a2e:	4619      	mov	r1, r3
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	440b      	add	r3, r1
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	4413      	add	r3, r2
 8001a38:	881b      	ldrh	r3, [r3, #0]
 8001a3a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	e036      	b.n	8001ab0 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d013      	beq.n	8001a7a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001a52:	4b24      	ldr	r3, [pc, #144]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b2d8      	uxtb	r0, r3
 8001a60:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 8001a62:	885b      	ldrh	r3, [r3, #2]
 8001a64:	b2da      	uxtb	r2, r3
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001a72:	4619      	mov	r1, r3
 8001a74:	f7ff ff48 	bl	8001908 <ssd1306_DrawPixel>
 8001a78:	e017      	b.n	8001aaa <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	4413      	add	r3, r2
 8001a86:	b2d8      	uxtb	r0, r3
 8001a88:	4b16      	ldr	r3, [pc, #88]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 8001a8a:	885b      	ldrh	r3, [r3, #2]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	b2d9      	uxtb	r1, r3
 8001a96:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	bf0c      	ite	eq
 8001a9e:	2301      	moveq	r3, #1
 8001aa0:	2300      	movne	r3, #0
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	f7ff ff2f 	bl	8001908 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d3c4      	bcc.n	8001a42 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	3301      	adds	r3, #1
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	787b      	ldrb	r3, [r7, #1]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d3ac      	bcc.n	8001a22 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 8001aca:	881a      	ldrh	r2, [r3, #0]
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <ssd1306_WriteChar+0x120>)
 8001ad6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3724      	adds	r7, #36	@ 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000794 	.word	0x20000794

08001ae8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af02      	add	r7, sp, #8
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	4638      	mov	r0, r7
 8001af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001af6:	e013      	b.n	8001b20 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	7818      	ldrb	r0, [r3, #0]
 8001afc:	7e3b      	ldrb	r3, [r7, #24]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	463b      	mov	r3, r7
 8001b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b04:	f7ff ff5e 	bl	80019c4 <ssd1306_WriteChar>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d002      	beq.n	8001b1a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	e008      	b.n	8001b2c <ssd1306_WriteString+0x44>
        }
        str++;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1e7      	bne.n	8001af8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	781b      	ldrb	r3, [r3, #0]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	460a      	mov	r2, r1
 8001b3e:	71fb      	strb	r3, [r7, #7]
 8001b40:	4613      	mov	r3, r2
 8001b42:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	4b05      	ldr	r3, [pc, #20]	@ (8001b60 <ssd1306_SetCursor+0x2c>)
 8001b4a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001b4c:	79bb      	ldrb	r3, [r7, #6]
 8001b4e:	b29a      	uxth	r2, r3
 8001b50:	4b03      	ldr	r3, [pc, #12]	@ (8001b60 <ssd1306_SetCursor+0x2c>)
 8001b52:	805a      	strh	r2, [r3, #2]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000794 	.word	0x20000794

08001b64 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001b6e:	2381      	movs	r3, #129	@ 0x81
 8001b70:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fde7 	bl	8001748 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fde3 	bl	8001748 <ssd1306_WriteCommand>
}
 8001b82:	bf00      	nop
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b96:	79fb      	ldrb	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b9c:	23af      	movs	r3, #175	@ 0xaf
 8001b9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ba0:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <ssd1306_SetDisplayOn+0x38>)
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	715a      	strb	r2, [r3, #5]
 8001ba6:	e004      	b.n	8001bb2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ba8:	23ae      	movs	r3, #174	@ 0xae
 8001baa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001bac:	4b05      	ldr	r3, [pc, #20]	@ (8001bc4 <ssd1306_SetDisplayOn+0x38>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fdc7 	bl	8001748 <ssd1306_WriteCommand>
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000794 	.word	0x20000794

08001bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bcc:	f7ff fda2 	bl	8001714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd0:	480c      	ldr	r0, [pc, #48]	@ (8001c04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bd2:	490d      	ldr	r1, [pc, #52]	@ (8001c08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd8:	e002      	b.n	8001be0 <LoopCopyDataInit>

08001bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bde:	3304      	adds	r3, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be4:	d3f9      	bcc.n	8001bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001be6:	4a0a      	ldr	r2, [pc, #40]	@ (8001c10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001be8:	4c0a      	ldr	r4, [pc, #40]	@ (8001c14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bec:	e001      	b.n	8001bf2 <LoopFillZerobss>

08001bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf0:	3204      	adds	r2, #4

08001bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf4:	d3fb      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bf6:	f008 fd57 	bl	800a6a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bfa:	f7ff fb43 	bl	8001284 <main>
  bx  lr    
 8001bfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c08:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8001c0c:	0800d324 	.word	0x0800d324
  ldr r2, =_sbss
 8001c10:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8001c14:	20002518 	.word	0x20002518

08001c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c18:	e7fe      	b.n	8001c18 <ADC_IRQHandler>
	...

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c20:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <HAL_Init+0x40>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <HAL_Init+0x40>)
 8001c26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <HAL_Init+0x40>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_Init+0x40>)
 8001c32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_Init+0x40>)
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c44:	2003      	movs	r0, #3
 8001c46:	f000 fd1b 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c4a:	200f      	movs	r0, #15
 8001c4c:	f000 f808 	bl	8001c60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c50:	f7ff fc38 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023c00 	.word	0x40023c00

08001c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <HAL_InitTick+0x54>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_InitTick+0x58>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4619      	mov	r1, r3
 8001c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f000 fd33 	bl	80026ea <HAL_SYSTICK_Config>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e00e      	b.n	8001cac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0f      	cmp	r3, #15
 8001c92:	d80a      	bhi.n	8001caa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c94:	2200      	movs	r2, #0
 8001c96:	6879      	ldr	r1, [r7, #4]
 8001c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c9c:	f000 fcfb 	bl	8002696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca0:	4a06      	ldr	r2, [pc, #24]	@ (8001cbc <HAL_InitTick+0x5c>)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e000      	b.n	8001cac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000008 	.word	0x20000008
 8001cbc:	20000004 	.word	0x20000004

08001cc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_IncTick+0x20>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4413      	add	r3, r2
 8001cd0:	4a04      	ldr	r2, [pc, #16]	@ (8001ce4 <HAL_IncTick+0x24>)
 8001cd2:	6013      	str	r3, [r2, #0]
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	2000079c 	.word	0x2000079c

08001ce8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return uwTick;
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <HAL_GetTick+0x14>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	2000079c 	.word	0x2000079c

08001d00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d08:	f7ff ffee 	bl	8001ce8 <HAL_GetTick>
 8001d0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d18:	d005      	beq.n	8001d26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_Delay+0x44>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d26:	bf00      	nop
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	68fa      	ldr	r2, [r7, #12]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d8f7      	bhi.n	8001d28 <HAL_Delay+0x28>
  {
  }
}
 8001d38:	bf00      	nop
 8001d3a:	bf00      	nop
 8001d3c:	3710      	adds	r7, #16
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	20000008 	.word	0x20000008

08001d48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e033      	b.n	8001dc6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff f906 	bl	8000f78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d118      	bne.n	8001db8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d8e:	f023 0302 	bic.w	r3, r3, #2
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 faa4 	bl	80022e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f023 0303 	bic.w	r3, r3, #3
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001db6:	e001      	b.n	8001dbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_ADC_Start+0x1a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0b2      	b.n	8001f50 <HAL_ADC_Start+0x180>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d018      	beq.n	8001e32 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e10:	4b52      	ldr	r3, [pc, #328]	@ (8001f5c <HAL_ADC_Start+0x18c>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a52      	ldr	r2, [pc, #328]	@ (8001f60 <HAL_ADC_Start+0x190>)
 8001e16:	fba2 2303 	umull	r2, r3, r2, r3
 8001e1a:	0c9a      	lsrs	r2, r3, #18
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e24:	e002      	b.n	8001e2c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f9      	bne.n	8001e26 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d17a      	bne.n	8001f36 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e44:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d007      	beq.n	8001e72 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e6a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e7e:	d106      	bne.n	8001e8e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e84:	f023 0206 	bic.w	r2, r3, #6
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e8c:	e002      	b.n	8001e94 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_ADC_Start+0x194>)
 8001e9e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001ea8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 031f 	and.w	r3, r3, #31
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d12a      	bne.n	8001f0c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a2b      	ldr	r2, [pc, #172]	@ (8001f68 <HAL_ADC_Start+0x198>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d015      	beq.n	8001eec <HAL_ADC_Start+0x11c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a29      	ldr	r2, [pc, #164]	@ (8001f6c <HAL_ADC_Start+0x19c>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d105      	bne.n	8001ed6 <HAL_ADC_Start+0x106>
 8001eca:	4b26      	ldr	r3, [pc, #152]	@ (8001f64 <HAL_ADC_Start+0x194>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 031f 	and.w	r3, r3, #31
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00a      	beq.n	8001eec <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a25      	ldr	r2, [pc, #148]	@ (8001f70 <HAL_ADC_Start+0x1a0>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d136      	bne.n	8001f4e <HAL_ADC_Start+0x17e>
 8001ee0:	4b20      	ldr	r3, [pc, #128]	@ (8001f64 <HAL_ADC_Start+0x194>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d130      	bne.n	8001f4e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d129      	bne.n	8001f4e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f08:	609a      	str	r2, [r3, #8]
 8001f0a:	e020      	b.n	8001f4e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a15      	ldr	r2, [pc, #84]	@ (8001f68 <HAL_ADC_Start+0x198>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d11b      	bne.n	8001f4e <HAL_ADC_Start+0x17e>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d114      	bne.n	8001f4e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	e00b      	b.n	8001f4e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	431bde83 	.word	0x431bde83
 8001f64:	40012300 	.word	0x40012300
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	40012100 	.word	0x40012100
 8001f70:	40012200 	.word	0x40012200

08001f74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f90:	d113      	bne.n	8001fba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa0:	d10b      	bne.n	8001fba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f043 0220 	orr.w	r2, r3, #32
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e063      	b.n	8002082 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fba:	f7ff fe95 	bl	8001ce8 <HAL_GetTick>
 8001fbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fc0:	e021      	b.n	8002006 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fc8:	d01d      	beq.n	8002006 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d007      	beq.n	8001fe0 <HAL_ADC_PollForConversion+0x6c>
 8001fd0:	f7ff fe8a 	bl	8001ce8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d212      	bcs.n	8002006 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d00b      	beq.n	8002006 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f043 0204 	orr.w	r2, r3, #4
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e03d      	b.n	8002082 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b02      	cmp	r3, #2
 8002012:	d1d6      	bne.n	8001fc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0212 	mvn.w	r2, #18
 800201c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002022:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d123      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11f      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002060:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002078:	f043 0201 	orr.w	r2, r3, #1
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002098:	4618      	mov	r0, r3
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b085      	sub	sp, #20
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x1c>
 80020bc:	2302      	movs	r3, #2
 80020be:	e105      	b.n	80022cc <HAL_ADC_ConfigChannel+0x228>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d925      	bls.n	800211c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	461a      	mov	r2, r3
 80020de:	4613      	mov	r3, r2
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	4413      	add	r3, r2
 80020e4:	3b1e      	subs	r3, #30
 80020e6:	2207      	movs	r2, #7
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43da      	mvns	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	400a      	ands	r2, r1
 80020f4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68d9      	ldr	r1, [r3, #12]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	b29b      	uxth	r3, r3
 8002106:	4618      	mov	r0, r3
 8002108:	4603      	mov	r3, r0
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	4403      	add	r3, r0
 800210e:	3b1e      	subs	r3, #30
 8002110:	409a      	lsls	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	e022      	b.n	8002162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6919      	ldr	r1, [r3, #16]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29b      	uxth	r3, r3
 8002128:	461a      	mov	r2, r3
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	2207      	movs	r2, #7
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43da      	mvns	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	400a      	ands	r2, r1
 800213e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6919      	ldr	r1, [r3, #16]
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	b29b      	uxth	r3, r3
 8002150:	4618      	mov	r0, r3
 8002152:	4603      	mov	r3, r0
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	4403      	add	r3, r0
 8002158:	409a      	lsls	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b06      	cmp	r3, #6
 8002168:	d824      	bhi.n	80021b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	3b05      	subs	r3, #5
 800217c:	221f      	movs	r2, #31
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	43da      	mvns	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	400a      	ands	r2, r1
 800218a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	b29b      	uxth	r3, r3
 8002198:	4618      	mov	r0, r3
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	3b05      	subs	r3, #5
 80021a6:	fa00 f203 	lsl.w	r2, r0, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80021b2:	e04c      	b.n	800224e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b0c      	cmp	r3, #12
 80021ba:	d824      	bhi.n	8002206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	3b23      	subs	r3, #35	@ 0x23
 80021ce:	221f      	movs	r2, #31
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43da      	mvns	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	400a      	ands	r2, r1
 80021dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	4618      	mov	r0, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	3b23      	subs	r3, #35	@ 0x23
 80021f8:	fa00 f203 	lsl.w	r2, r0, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	631a      	str	r2, [r3, #48]	@ 0x30
 8002204:	e023      	b.n	800224e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	4613      	mov	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	3b41      	subs	r3, #65	@ 0x41
 8002218:	221f      	movs	r2, #31
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43da      	mvns	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	400a      	ands	r2, r1
 8002226:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	b29b      	uxth	r3, r3
 8002234:	4618      	mov	r0, r3
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	3b41      	subs	r3, #65	@ 0x41
 8002242:	fa00 f203 	lsl.w	r2, r0, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800224e:	4b22      	ldr	r3, [pc, #136]	@ (80022d8 <HAL_ADC_ConfigChannel+0x234>)
 8002250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <HAL_ADC_ConfigChannel+0x238>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d109      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1cc>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b12      	cmp	r3, #18
 8002262:	d105      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a19      	ldr	r2, [pc, #100]	@ (80022dc <HAL_ADC_ConfigChannel+0x238>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d123      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x21e>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b10      	cmp	r3, #16
 8002280:	d003      	beq.n	800228a <HAL_ADC_ConfigChannel+0x1e6>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b11      	cmp	r3, #17
 8002288:	d11b      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b10      	cmp	r3, #16
 800229c:	d111      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800229e:	4b10      	ldr	r3, [pc, #64]	@ (80022e0 <HAL_ADC_ConfigChannel+0x23c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <HAL_ADC_ConfigChannel+0x240>)
 80022a4:	fba2 2303 	umull	r2, r3, r2, r3
 80022a8:	0c9a      	lsrs	r2, r3, #18
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40012300 	.word	0x40012300
 80022dc:	40012000 	.word	0x40012000
 80022e0:	20000000 	.word	0x20000000
 80022e4:	431bde83 	.word	0x431bde83

080022e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f0:	4b79      	ldr	r3, [pc, #484]	@ (80024d8 <ADC_Init+0x1f0>)
 80022f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800231c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6859      	ldr	r1, [r3, #4]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	021a      	lsls	r2, r3, #8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	430a      	orrs	r2, r1
 8002330:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002340:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6899      	ldr	r1, [r3, #8]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	430a      	orrs	r2, r1
 8002374:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800237a:	4a58      	ldr	r2, [pc, #352]	@ (80024dc <ADC_Init+0x1f4>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d022      	beq.n	80023c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689a      	ldr	r2, [r3, #8]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800238e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6899      	ldr	r1, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6899      	ldr	r1, [r3, #8]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	e00f      	b.n	80023e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0202 	bic.w	r2, r2, #2
 80023f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6899      	ldr	r1, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7e1b      	ldrb	r3, [r3, #24]
 8002400:	005a      	lsls	r2, r3, #1
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d01b      	beq.n	800244c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002422:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002432:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6859      	ldr	r1, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	3b01      	subs	r3, #1
 8002440:	035a      	lsls	r2, r3, #13
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
 800244a:	e007      	b.n	800245c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800245a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69db      	ldr	r3, [r3, #28]
 8002476:	3b01      	subs	r3, #1
 8002478:	051a      	lsls	r2, r3, #20
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002490:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	6899      	ldr	r1, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800249e:	025a      	lsls	r2, r3, #9
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	029a      	lsls	r2, r3, #10
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	40012300 	.word	0x40012300
 80024dc:	0f000001 	.word	0x0f000001

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002508:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800250c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002512:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	60d3      	str	r3, [r2, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4907      	ldr	r1, [pc, #28]	@ (800257c <__NVIC_EnableIRQ+0x38>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	@ (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	@ (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	@ 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	@ 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002660:	f7ff ff8e 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	@ (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff29 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff3e 	bl	8002528 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff8e 	bl	80025d4 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5d 	bl	8002580 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff31 	bl	8002544 <__NVIC_EnableIRQ>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa2 	bl	800263c <SysTick_Config>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b480      	push	{r7}
 8002706:	b089      	sub	sp, #36	@ 0x24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
 800271e:	e16b      	b.n	80029f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002720:	2201      	movs	r2, #1
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	4013      	ands	r3, r2
 8002732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	429a      	cmp	r2, r3
 800273a:	f040 815a 	bne.w	80029f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 0303 	and.w	r3, r3, #3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d005      	beq.n	8002756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002752:	2b02      	cmp	r3, #2
 8002754:	d130      	bne.n	80027b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	2203      	movs	r2, #3
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4313      	orrs	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 0201 	and.w	r2, r3, #1
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b03      	cmp	r3, #3
 80027c2:	d017      	beq.n	80027f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d123      	bne.n	8002848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	08da      	lsrs	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3208      	adds	r2, #8
 8002808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800280c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	220f      	movs	r2, #15
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	69ba      	ldr	r2, [r7, #24]
 8002820:	4013      	ands	r3, r2
 8002822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	fa02 f303 	lsl.w	r3, r2, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	08da      	lsrs	r2, r3, #3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	3208      	adds	r2, #8
 8002842:	69b9      	ldr	r1, [r7, #24]
 8002844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	2203      	movs	r2, #3
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	43db      	mvns	r3, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4013      	ands	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0203 	and.w	r2, r3, #3
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002884:	2b00      	cmp	r3, #0
 8002886:	f000 80b4 	beq.w	80029f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b60      	ldr	r3, [pc, #384]	@ (8002a10 <HAL_GPIO_Init+0x30c>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	4a5f      	ldr	r2, [pc, #380]	@ (8002a10 <HAL_GPIO_Init+0x30c>)
 8002894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002898:	6453      	str	r3, [r2, #68]	@ 0x44
 800289a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a10 <HAL_GPIO_Init+0x30c>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a14 <HAL_GPIO_Init+0x310>)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	089b      	lsrs	r3, r3, #2
 80028ac:	3302      	adds	r3, #2
 80028ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	220f      	movs	r2, #15
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a52      	ldr	r2, [pc, #328]	@ (8002a18 <HAL_GPIO_Init+0x314>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d02b      	beq.n	800292a <HAL_GPIO_Init+0x226>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a51      	ldr	r2, [pc, #324]	@ (8002a1c <HAL_GPIO_Init+0x318>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d025      	beq.n	8002926 <HAL_GPIO_Init+0x222>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a50      	ldr	r2, [pc, #320]	@ (8002a20 <HAL_GPIO_Init+0x31c>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01f      	beq.n	8002922 <HAL_GPIO_Init+0x21e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4f      	ldr	r2, [pc, #316]	@ (8002a24 <HAL_GPIO_Init+0x320>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d019      	beq.n	800291e <HAL_GPIO_Init+0x21a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002a28 <HAL_GPIO_Init+0x324>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_GPIO_Init+0x216>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a2c <HAL_GPIO_Init+0x328>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00d      	beq.n	8002916 <HAL_GPIO_Init+0x212>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a4c      	ldr	r2, [pc, #304]	@ (8002a30 <HAL_GPIO_Init+0x32c>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d007      	beq.n	8002912 <HAL_GPIO_Init+0x20e>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a4b      	ldr	r2, [pc, #300]	@ (8002a34 <HAL_GPIO_Init+0x330>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d101      	bne.n	800290e <HAL_GPIO_Init+0x20a>
 800290a:	2307      	movs	r3, #7
 800290c:	e00e      	b.n	800292c <HAL_GPIO_Init+0x228>
 800290e:	2308      	movs	r3, #8
 8002910:	e00c      	b.n	800292c <HAL_GPIO_Init+0x228>
 8002912:	2306      	movs	r3, #6
 8002914:	e00a      	b.n	800292c <HAL_GPIO_Init+0x228>
 8002916:	2305      	movs	r3, #5
 8002918:	e008      	b.n	800292c <HAL_GPIO_Init+0x228>
 800291a:	2304      	movs	r3, #4
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x228>
 800291e:	2303      	movs	r3, #3
 8002920:	e004      	b.n	800292c <HAL_GPIO_Init+0x228>
 8002922:	2302      	movs	r3, #2
 8002924:	e002      	b.n	800292c <HAL_GPIO_Init+0x228>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_GPIO_Init+0x228>
 800292a:	2300      	movs	r3, #0
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f002 0203 	and.w	r2, r2, #3
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	4093      	lsls	r3, r2
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800293c:	4935      	ldr	r1, [pc, #212]	@ (8002a14 <HAL_GPIO_Init+0x310>)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3302      	adds	r3, #2
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296e:	4a32      	ldr	r2, [pc, #200]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002974:	4b30      	ldr	r3, [pc, #192]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002998:	4a27      	ldr	r2, [pc, #156]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800299e:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ec:	4a12      	ldr	r2, [pc, #72]	@ (8002a38 <HAL_GPIO_Init+0x334>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3301      	adds	r3, #1
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b0f      	cmp	r3, #15
 80029fc:	f67f ae90 	bls.w	8002720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3724      	adds	r7, #36	@ 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40013800 	.word	0x40013800
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40020800 	.word	0x40020800
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40021400 	.word	0x40021400
 8002a30:	40021800 	.word	0x40021800
 8002a34:	40021c00 	.word	0x40021c00
 8002a38:	40013c00 	.word	0x40013c00

08002a3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e12b      	b.n	8002ca6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe fb54 	bl	8001110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	@ 0x24
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a8e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002aa0:	f002 ffe0 	bl	8005a64 <HAL_RCC_GetPCLK1Freq>
 8002aa4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	4a81      	ldr	r2, [pc, #516]	@ (8002cb0 <HAL_I2C_Init+0x274>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d807      	bhi.n	8002ac0 <HAL_I2C_Init+0x84>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a80      	ldr	r2, [pc, #512]	@ (8002cb4 <HAL_I2C_Init+0x278>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	bf94      	ite	ls
 8002ab8:	2301      	movls	r3, #1
 8002aba:	2300      	movhi	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	e006      	b.n	8002ace <HAL_I2C_Init+0x92>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a7d      	ldr	r2, [pc, #500]	@ (8002cb8 <HAL_I2C_Init+0x27c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	bf94      	ite	ls
 8002ac8:	2301      	movls	r3, #1
 8002aca:	2300      	movhi	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e0e7      	b.n	8002ca6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4a78      	ldr	r2, [pc, #480]	@ (8002cbc <HAL_I2C_Init+0x280>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	0c9b      	lsrs	r3, r3, #18
 8002ae0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4a6a      	ldr	r2, [pc, #424]	@ (8002cb0 <HAL_I2C_Init+0x274>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d802      	bhi.n	8002b10 <HAL_I2C_Init+0xd4>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	e009      	b.n	8002b24 <HAL_I2C_Init+0xe8>
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002b16:	fb02 f303 	mul.w	r3, r2, r3
 8002b1a:	4a69      	ldr	r2, [pc, #420]	@ (8002cc0 <HAL_I2C_Init+0x284>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	3301      	adds	r3, #1
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002b36:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	495c      	ldr	r1, [pc, #368]	@ (8002cb0 <HAL_I2C_Init+0x274>)
 8002b40:	428b      	cmp	r3, r1
 8002b42:	d819      	bhi.n	8002b78 <HAL_I2C_Init+0x13c>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1e59      	subs	r1, r3, #1
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b52:	1c59      	adds	r1, r3, #1
 8002b54:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b58:	400b      	ands	r3, r1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_I2C_Init+0x138>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1e59      	subs	r1, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b72:	e051      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002b74:	2304      	movs	r3, #4
 8002b76:	e04f      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d111      	bne.n	8002ba4 <HAL_I2C_Init+0x168>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	1e58      	subs	r0, r3, #1
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6859      	ldr	r1, [r3, #4]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bf0c      	ite	eq
 8002b9c:	2301      	moveq	r3, #1
 8002b9e:	2300      	movne	r3, #0
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	e012      	b.n	8002bca <HAL_I2C_Init+0x18e>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	1e58      	subs	r0, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	460b      	mov	r3, r1
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	0099      	lsls	r1, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bba:	3301      	adds	r3, #1
 8002bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf0c      	ite	eq
 8002bc4:	2301      	moveq	r3, #1
 8002bc6:	2300      	movne	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <HAL_I2C_Init+0x196>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e022      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10e      	bne.n	8002bf8 <HAL_I2C_Init+0x1bc>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1e58      	subs	r0, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6859      	ldr	r1, [r3, #4]
 8002be2:	460b      	mov	r3, r1
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	440b      	add	r3, r1
 8002be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bec:	3301      	adds	r3, #1
 8002bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002bf6:	e00f      	b.n	8002c18 <HAL_I2C_Init+0x1dc>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	0099      	lsls	r1, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0e:	3301      	adds	r3, #1
 8002c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6809      	ldr	r1, [r1, #0]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002c46:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6911      	ldr	r1, [r2, #16]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68d2      	ldr	r2, [r2, #12]
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	000186a0 	.word	0x000186a0
 8002cb4:	001e847f 	.word	0x001e847f
 8002cb8:	003d08ff 	.word	0x003d08ff
 8002cbc:	431bde83 	.word	0x431bde83
 8002cc0:	10624dd3 	.word	0x10624dd3

08002cc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	817b      	strh	r3, [r7, #10]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	813b      	strh	r3, [r7, #8]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002cde:	f7ff f803 	bl	8001ce8 <HAL_GetTick>
 8002ce2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b20      	cmp	r3, #32
 8002cee:	f040 80d9 	bne.w	8002ea4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2319      	movs	r3, #25
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	496d      	ldr	r1, [pc, #436]	@ (8002eb0 <HAL_I2C_Mem_Write+0x1ec>)
 8002cfc:	68f8      	ldr	r0, [r7, #12]
 8002cfe:	f000 fdb9 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0cc      	b.n	8002ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_I2C_Mem_Write+0x56>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e0c5      	b.n	8002ea6 <HAL_I2C_Mem_Write+0x1e2>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d007      	beq.n	8002d40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0201 	orr.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2221      	movs	r2, #33	@ 0x21
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	@ 0x40
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002d70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb4 <HAL_I2C_Mem_Write+0x1f0>)
 8002d80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d82:	88f8      	ldrh	r0, [r7, #6]
 8002d84:	893a      	ldrh	r2, [r7, #8]
 8002d86:	8979      	ldrh	r1, [r7, #10]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	9301      	str	r3, [sp, #4]
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 fbf0 	bl	8003578 <I2C_RequestMemoryWrite>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d052      	beq.n	8002e44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e081      	b.n	8002ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fe7e 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00d      	beq.n	8002dce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d107      	bne.n	8002dca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e06b      	b.n	8002ea6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002de8:	3b01      	subs	r3, #1
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	3b01      	subs	r3, #1
 8002df8:	b29a      	uxth	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b04      	cmp	r3, #4
 8002e0a:	d11b      	bne.n	8002e44 <HAL_I2C_Mem_Write+0x180>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d017      	beq.n	8002e44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e24:	1c5a      	adds	r2, r3, #1
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	b29a      	uxth	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1aa      	bne.n	8002da2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 fe71 	bl	8003b38 <I2C_WaitOnBTFFlagUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00d      	beq.n	8002e78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	2b04      	cmp	r3, #4
 8002e62:	d107      	bne.n	8002e74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e016      	b.n	8002ea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	e000      	b.n	8002ea6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2302      	movs	r3, #2
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	00100002 	.word	0x00100002
 8002eb4:	ffff0000 	.word	0xffff0000

08002eb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08c      	sub	sp, #48	@ 0x30
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	4608      	mov	r0, r1
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	817b      	strh	r3, [r7, #10]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	813b      	strh	r3, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ed2:	f7fe ff09 	bl	8001ce8 <HAL_GetTick>
 8002ed6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	f040 8214 	bne.w	800330e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2319      	movs	r3, #25
 8002eec:	2201      	movs	r2, #1
 8002eee:	497b      	ldr	r1, [pc, #492]	@ (80030dc <HAL_I2C_Mem_Read+0x224>)
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fcbf 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002efc:	2302      	movs	r3, #2
 8002efe:	e207      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Mem_Read+0x56>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e200      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d007      	beq.n	8002f34 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f042 0201 	orr.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2222      	movs	r2, #34	@ 0x22
 8002f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2240      	movs	r2, #64	@ 0x40
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002f64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4a5b      	ldr	r2, [pc, #364]	@ (80030e0 <HAL_I2C_Mem_Read+0x228>)
 8002f74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f76:	88f8      	ldrh	r0, [r7, #6]
 8002f78:	893a      	ldrh	r2, [r7, #8]
 8002f7a:	8979      	ldrh	r1, [r7, #10]
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7e:	9301      	str	r3, [sp, #4]
 8002f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	4603      	mov	r3, r0
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f000 fb8c 	bl	80036a4 <I2C_RequestMemoryRead>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e1bc      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d113      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	623b      	str	r3, [r7, #32]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	623b      	str	r3, [r7, #32]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	699b      	ldr	r3, [r3, #24]
 8002fb0:	623b      	str	r3, [r7, #32]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	e190      	b.n	80032e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d11b      	bne.n	8003006 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	61fb      	str	r3, [r7, #28]
 8002ff2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	e170      	b.n	80032e8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300a:	2b02      	cmp	r3, #2
 800300c:	d11b      	bne.n	8003046 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800301c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800302c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	61bb      	str	r3, [r7, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	61bb      	str	r3, [r7, #24]
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	e150      	b.n	80032e8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003046:	2300      	movs	r3, #0
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	617b      	str	r3, [r7, #20]
 800305a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800305c:	e144      	b.n	80032e8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	2b03      	cmp	r3, #3
 8003064:	f200 80f1 	bhi.w	800324a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	2b01      	cmp	r3, #1
 800306e:	d123      	bne.n	80030b8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003072:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 fda7 	bl	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e145      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691a      	ldr	r2, [r3, #16]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80030b6:	e117      	b.n	80032e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d14e      	bne.n	800315e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030c6:	2200      	movs	r2, #0
 80030c8:	4906      	ldr	r1, [pc, #24]	@ (80030e4 <HAL_I2C_Mem_Read+0x22c>)
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fbd2 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d008      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e11a      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
 80030da:	bf00      	nop
 80030dc:	00100002 	.word	0x00100002
 80030e0:	ffff0000 	.word	0xffff0000
 80030e4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691a      	ldr	r2, [r3, #16]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003120:	b29b      	uxth	r3, r3
 8003122:	3b01      	subs	r3, #1
 8003124:	b29a      	uxth	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	b2d2      	uxtb	r2, r2
 8003136:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003146:	3b01      	subs	r3, #1
 8003148:	b29a      	uxth	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003152:	b29b      	uxth	r3, r3
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800315c:	e0c4      	b.n	80032e8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003164:	2200      	movs	r2, #0
 8003166:	496c      	ldr	r1, [pc, #432]	@ (8003318 <HAL_I2C_Mem_Read+0x460>)
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb83 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e0cb      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003186:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	9300      	str	r3, [sp, #0]
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	2200      	movs	r2, #0
 80031c2:	4955      	ldr	r1, [pc, #340]	@ (8003318 <HAL_I2C_Mem_Read+0x460>)
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fb55 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e09d      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	691a      	ldr	r2, [r3, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	3b01      	subs	r3, #1
 8003210:	b29a      	uxth	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003248:	e04e      	b.n	80032e8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800324a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800324c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fcba 	bl	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e058      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	691a      	ldr	r2, [r3, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003270:	1c5a      	adds	r2, r3, #1
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327a:	3b01      	subs	r3, #1
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003286:	b29b      	uxth	r3, r3
 8003288:	3b01      	subs	r3, #1
 800328a:	b29a      	uxth	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	f003 0304 	and.w	r3, r3, #4
 800329a:	2b04      	cmp	r3, #4
 800329c:	d124      	bne.n	80032e8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d107      	bne.n	80032b6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032b4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	1c5a      	adds	r2, r3, #1
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032d2:	3b01      	subs	r3, #1
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f47f aeb6 	bne.w	800305e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2220      	movs	r2, #32
 80032f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800330a:	2300      	movs	r3, #0
 800330c:	e000      	b.n	8003310 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800330e:	2302      	movs	r3, #2
  }
}
 8003310:	4618      	mov	r0, r3
 8003312:	3728      	adds	r7, #40	@ 0x28
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	00010004 	.word	0x00010004

0800331c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	@ 0x28
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	607a      	str	r2, [r7, #4]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	460b      	mov	r3, r1
 800332a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800332c:	f7fe fcdc 	bl	8001ce8 <HAL_GetTick>
 8003330:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 8111 	bne.w	8003566 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	9300      	str	r3, [sp, #0]
 8003348:	2319      	movs	r3, #25
 800334a:	2201      	movs	r2, #1
 800334c:	4988      	ldr	r1, [pc, #544]	@ (8003570 <HAL_I2C_IsDeviceReady+0x254>)
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fa90 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
 800335c:	e104      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003364:	2b01      	cmp	r3, #1
 8003366:	d101      	bne.n	800336c <HAL_I2C_IsDeviceReady+0x50>
 8003368:	2302      	movs	r3, #2
 800336a:	e0fd      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x24c>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b01      	cmp	r3, #1
 8003380:	d007      	beq.n	8003392 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2224      	movs	r2, #36	@ 0x24
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a70      	ldr	r2, [pc, #448]	@ (8003574 <HAL_I2C_IsDeviceReady+0x258>)
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033c4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fa4e 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ec:	d103      	bne.n	80033f6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033f4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0b6      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033fa:	897b      	ldrh	r3, [r7, #10]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003408:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800340a:	f7fe fc6d 	bl	8001ce8 <HAL_GetTick>
 800340e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b02      	cmp	r3, #2
 800341c:	bf0c      	ite	eq
 800341e:	2301      	moveq	r3, #1
 8003420:	2300      	movne	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003434:	bf0c      	ite	eq
 8003436:	2301      	moveq	r3, #1
 8003438:	2300      	movne	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800343e:	e025      	b.n	800348c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003440:	f7fe fc52 	bl	8001ce8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <HAL_I2C_IsDeviceReady+0x13a>
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d103      	bne.n	800345e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	22a0      	movs	r2, #160	@ 0xa0
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b02      	cmp	r3, #2
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003482:	bf0c      	ite	eq
 8003484:	2301      	moveq	r3, #1
 8003486:	2300      	movne	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2ba0      	cmp	r3, #160	@ 0xa0
 8003496:	d005      	beq.n	80034a4 <HAL_I2C_IsDeviceReady+0x188>
 8003498:	7dfb      	ldrb	r3, [r7, #23]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <HAL_I2C_IsDeviceReady+0x188>
 800349e:	7dbb      	ldrb	r3, [r7, #22]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0cd      	beq.n	8003440 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d129      	bne.n	800350e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034c8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	4921      	ldr	r1, [pc, #132]	@ (8003570 <HAL_I2C_IsDeviceReady+0x254>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f9c2 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e036      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e02c      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003526:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	2319      	movs	r3, #25
 800352e:	2201      	movs	r2, #1
 8003530:	490f      	ldr	r1, [pc, #60]	@ (8003570 <HAL_I2C_IsDeviceReady+0x254>)
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f99e 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e012      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	3301      	adds	r3, #1
 8003546:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	f4ff af32 	bcc.w	80033b6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
  }
}
 8003568:	4618      	mov	r0, r3
 800356a:	3720      	adds	r7, #32
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	00100002 	.word	0x00100002
 8003574:	ffff0000 	.word	0xffff0000

08003578 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b088      	sub	sp, #32
 800357c:	af02      	add	r7, sp, #8
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	461a      	mov	r2, r3
 8003586:	4603      	mov	r3, r0
 8003588:	817b      	strh	r3, [r7, #10]
 800358a:	460b      	mov	r3, r1
 800358c:	813b      	strh	r3, [r7, #8]
 800358e:	4613      	mov	r3, r2
 8003590:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f960 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035c8:	d103      	bne.n	80035d2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e05f      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035d6:	897b      	ldrh	r3, [r7, #10]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e8:	6a3a      	ldr	r2, [r7, #32]
 80035ea:	492d      	ldr	r1, [pc, #180]	@ (80036a0 <I2C_RequestMemoryWrite+0x128>)
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f9bb 	bl	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e04c      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003614:	6a39      	ldr	r1, [r7, #32]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fa46 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00d      	beq.n	800363e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003626:	2b04      	cmp	r3, #4
 8003628:	d107      	bne.n	800363a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003638:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e02b      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800363e:	88fb      	ldrh	r3, [r7, #6]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d105      	bne.n	8003650 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003644:	893b      	ldrh	r3, [r7, #8]
 8003646:	b2da      	uxtb	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	611a      	str	r2, [r3, #16]
 800364e:	e021      	b.n	8003694 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003650:	893b      	ldrh	r3, [r7, #8]
 8003652:	0a1b      	lsrs	r3, r3, #8
 8003654:	b29b      	uxth	r3, r3
 8003656:	b2da      	uxtb	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800365e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003660:	6a39      	ldr	r1, [r7, #32]
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fa20 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00d      	beq.n	800368a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003672:	2b04      	cmp	r3, #4
 8003674:	d107      	bne.n	8003686 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003684:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e005      	b.n	8003696 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800368a:	893b      	ldrh	r3, [r7, #8]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	00010002 	.word	0x00010002

080036a4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af02      	add	r7, sp, #8
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	4608      	mov	r0, r1
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	4603      	mov	r3, r0
 80036b4:	817b      	strh	r3, [r7, #10]
 80036b6:	460b      	mov	r3, r1
 80036b8:	813b      	strh	r3, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036cc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036dc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f8c2 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003704:	d103      	bne.n	800370e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800370c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e0aa      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003712:	897b      	ldrh	r3, [r7, #10]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003720:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	4952      	ldr	r1, [pc, #328]	@ (8003870 <I2C_RequestMemoryRead+0x1cc>)
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f91d 	bl	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e097      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003738:	2300      	movs	r3, #0
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003750:	6a39      	ldr	r1, [r7, #32]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f9a8 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00d      	beq.n	800377a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003762:	2b04      	cmp	r3, #4
 8003764:	d107      	bne.n	8003776 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003774:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e076      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800377a:	88fb      	ldrh	r3, [r7, #6]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d105      	bne.n	800378c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003780:	893b      	ldrh	r3, [r7, #8]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	611a      	str	r2, [r3, #16]
 800378a:	e021      	b.n	80037d0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800378c:	893b      	ldrh	r3, [r7, #8]
 800378e:	0a1b      	lsrs	r3, r3, #8
 8003790:	b29b      	uxth	r3, r3
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800379a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379c:	6a39      	ldr	r1, [r7, #32]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f982 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00d      	beq.n	80037c6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d107      	bne.n	80037c2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037c0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e050      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c6:	893b      	ldrh	r3, [r7, #8]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d2:	6a39      	ldr	r1, [r7, #32]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f967 	bl	8003aa8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00d      	beq.n	80037fc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e4:	2b04      	cmp	r3, #4
 80037e6:	d107      	bne.n	80037f8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037f6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e035      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800380a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	6a3b      	ldr	r3, [r7, #32]
 8003812:	2200      	movs	r2, #0
 8003814:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f82b 	bl	8003874 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00d      	beq.n	8003840 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800382e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003832:	d103      	bne.n	800383c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800383a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e013      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003840:	897b      	ldrh	r3, [r7, #10]
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003852:	6a3a      	ldr	r2, [r7, #32]
 8003854:	4906      	ldr	r1, [pc, #24]	@ (8003870 <I2C_RequestMemoryRead+0x1cc>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f886 	bl	8003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	00010002 	.word	0x00010002

08003874 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	4613      	mov	r3, r2
 8003882:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003884:	e048      	b.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800388c:	d044      	beq.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800388e:	f7fe fa2b 	bl	8001ce8 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	429a      	cmp	r2, r3
 800389c:	d302      	bcc.n	80038a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d139      	bne.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	0c1b      	lsrs	r3, r3, #16
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d10d      	bne.n	80038ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	43da      	mvns	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4013      	ands	r3, r2
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	e00c      	b.n	80038e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	43da      	mvns	r2, r3
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d116      	bne.n	8003918 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003904:	f043 0220 	orr.w	r2, r3, #32
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e023      	b.n	8003960 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	0c1b      	lsrs	r3, r3, #16
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10d      	bne.n	800393e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	43da      	mvns	r2, r3
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	4013      	ands	r3, r2
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	bf0c      	ite	eq
 8003934:	2301      	moveq	r3, #1
 8003936:	2300      	movne	r3, #0
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	e00c      	b.n	8003958 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	699b      	ldr	r3, [r3, #24]
 8003944:	43da      	mvns	r2, r3
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4013      	ands	r3, r2
 800394a:	b29b      	uxth	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	461a      	mov	r2, r3
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	429a      	cmp	r2, r3
 800395c:	d093      	beq.n	8003886 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003976:	e071      	b.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003986:	d123      	bne.n	80039d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003996:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80039a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	f043 0204 	orr.w	r2, r3, #4
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e067      	b.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039d6:	d041      	beq.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039d8:	f7fe f986 	bl	8001ce8 <HAL_GetTick>
 80039dc:	4602      	mov	r2, r0
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d136      	bne.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	0c1b      	lsrs	r3, r3, #16
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d10c      	bne.n	8003a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	43da      	mvns	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	4013      	ands	r3, r2
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bf14      	ite	ne
 8003a0a:	2301      	movne	r3, #1
 8003a0c:	2300      	moveq	r3, #0
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	e00b      	b.n	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	bf14      	ite	ne
 8003a24:	2301      	movne	r3, #1
 8003a26:	2300      	moveq	r3, #0
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e021      	b.n	8003aa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	0c1b      	lsrs	r3, r3, #16
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d10c      	bne.n	8003a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	43da      	mvns	r2, r3
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	4013      	ands	r3, r2
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bf14      	ite	ne
 8003a78:	2301      	movne	r3, #1
 8003a7a:	2300      	moveq	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e00b      	b.n	8003a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f af6d 	bne.w	8003978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ab4:	e034      	b.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 f8e3 	bl	8003c82 <I2C_IsAcknowledgeFailed>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e034      	b.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003acc:	d028      	beq.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ace:	f7fe f90b 	bl	8001ce8 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d302      	bcc.n	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d11d      	bne.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aee:	2b80      	cmp	r3, #128	@ 0x80
 8003af0:	d016      	beq.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0c:	f043 0220 	orr.w	r2, r3, #32
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e007      	b.n	8003b30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b2a:	2b80      	cmp	r3, #128	@ 0x80
 8003b2c:	d1c3      	bne.n	8003ab6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b44:	e034      	b.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 f89b 	bl	8003c82 <I2C_IsAcknowledgeFailed>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e034      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b5c:	d028      	beq.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b5e:	f7fe f8c3 	bl	8001ce8 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11d      	bne.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d016      	beq.n	8003bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	f043 0220 	orr.w	r2, r3, #32
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e007      	b.n	8003bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d1c3      	bne.n	8003b46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd4:	e049      	b.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b10      	cmp	r3, #16
 8003be2:	d119      	bne.n	8003c18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f06f 0210 	mvn.w	r2, #16
 8003bec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e030      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c18:	f7fe f866 	bl	8001ce8 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d302      	bcc.n	8003c2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d11d      	bne.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	2b40      	cmp	r3, #64	@ 0x40
 8003c3a:	d016      	beq.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2220      	movs	r2, #32
 8003c46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f043 0220 	orr.w	r2, r3, #32
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e007      	b.n	8003c7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c74:	2b40      	cmp	r3, #64	@ 0x40
 8003c76:	d1ae      	bne.n	8003bd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d11b      	bne.n	8003cd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ca2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cbe:	f043 0204 	orr.w	r2, r3, #4
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e101      	b.n	8003ef6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d106      	bne.n	8003d12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f005 fbb3 	bl	8009478 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d20:	d102      	bne.n	8003d28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f001 ffc4 	bl	8005cba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6818      	ldr	r0, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	7c1a      	ldrb	r2, [r3, #16]
 8003d3a:	f88d 2000 	strb.w	r2, [sp]
 8003d3e:	3304      	adds	r3, #4
 8003d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d42:	f001 fea3 	bl	8005a8c <USB_CoreInit>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0ce      	b.n	8003ef6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2100      	movs	r1, #0
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 ffbc 	bl	8005cdc <USB_SetCurrentMode>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2202      	movs	r2, #2
 8003d6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e0bf      	b.n	8003ef6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d76:	2300      	movs	r3, #0
 8003d78:	73fb      	strb	r3, [r7, #15]
 8003d7a:	e04a      	b.n	8003e12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d7c:	7bfa      	ldrb	r2, [r7, #15]
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	3315      	adds	r3, #21
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d90:	7bfa      	ldrb	r2, [r7, #15]
 8003d92:	6879      	ldr	r1, [r7, #4]
 8003d94:	4613      	mov	r3, r2
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	4413      	add	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	3314      	adds	r3, #20
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	7bfb      	ldrb	r3, [r7, #15]
 8003da8:	b298      	uxth	r0, r3
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	332e      	adds	r3, #46	@ 0x2e
 8003db8:	4602      	mov	r2, r0
 8003dba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003dbc:	7bfa      	ldrb	r2, [r7, #15]
 8003dbe:	6879      	ldr	r1, [r7, #4]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	3318      	adds	r3, #24
 8003dcc:	2200      	movs	r2, #0
 8003dce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dd0:	7bfa      	ldrb	r2, [r7, #15]
 8003dd2:	6879      	ldr	r1, [r7, #4]
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	331c      	adds	r3, #28
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003de4:	7bfa      	ldrb	r2, [r7, #15]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3320      	adds	r3, #32
 8003df4:	2200      	movs	r2, #0
 8003df6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3324      	adds	r3, #36	@ 0x24
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	791b      	ldrb	r3, [r3, #4]
 8003e16:	7bfa      	ldrb	r2, [r7, #15]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d3af      	bcc.n	8003d7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	73fb      	strb	r3, [r7, #15]
 8003e20:	e044      	b.n	8003eac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003e34:	2200      	movs	r2, #0
 8003e36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e38:	7bfa      	ldrb	r2, [r7, #15]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	6879      	ldr	r1, [r7, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4413      	add	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	440b      	add	r3, r1
 8003e5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e60:	2200      	movs	r2, #0
 8003e62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e64:	7bfa      	ldrb	r2, [r7, #15]
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e7a:	7bfa      	ldrb	r2, [r7, #15]
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	4413      	add	r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	440b      	add	r3, r1
 8003e88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e90:	7bfa      	ldrb	r2, [r7, #15]
 8003e92:	6879      	ldr	r1, [r7, #4]
 8003e94:	4613      	mov	r3, r2
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	4413      	add	r3, r2
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	73fb      	strb	r3, [r7, #15]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	791b      	ldrb	r3, [r3, #4]
 8003eb0:	7bfa      	ldrb	r2, [r7, #15]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d3b5      	bcc.n	8003e22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6818      	ldr	r0, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	7c1a      	ldrb	r2, [r3, #16]
 8003ebe:	f88d 2000 	strb.w	r2, [sp]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ec6:	f001 ff55 	bl	8005d74 <USB_DevInit>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e00c      	b.n	8003ef6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 ff9f 	bl	8006e32 <USB_DevDisconnect>

  return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3710      	adds	r7, #16
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b084      	sub	sp, #16
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_PCD_Start+0x1c>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e022      	b.n	8003f60 <HAL_PCD_Start+0x62>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f3a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f001 fea6 	bl	8005c98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f002 ff4d 	bl	8006df0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b08d      	sub	sp, #52	@ 0x34
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f003 f80b 	bl	8006f9a <USB_GetMode>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	f040 848c 	bne.w	80048a4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f002 ff6f 	bl	8006e74 <USB_ReadInterrupts>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 8482 	beq.w	80048a2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f002 ff5c 	bl	8006e74 <USB_ReadInterrupts>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d107      	bne.n	8003fd6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f002 0202 	and.w	r2, r2, #2
 8003fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f002 ff4a 	bl	8006e74 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f003 0310 	and.w	r3, r3, #16
 8003fe6:	2b10      	cmp	r3, #16
 8003fe8:	d161      	bne.n	80040ae <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	699a      	ldr	r2, [r3, #24]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0210 	bic.w	r2, r2, #16
 8003ff8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f003 020f 	and.w	r2, r3, #15
 8004006:	4613      	mov	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	4413      	add	r3, r2
 8004016:	3304      	adds	r3, #4
 8004018:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004020:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004024:	d124      	bne.n	8004070 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d035      	beq.n	800409e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	091b      	lsrs	r3, r3, #4
 800403a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800403c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004040:	b29b      	uxth	r3, r3
 8004042:	461a      	mov	r2, r3
 8004044:	6a38      	ldr	r0, [r7, #32]
 8004046:	f002 fd81 	bl	8006b4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	091b      	lsrs	r3, r3, #4
 8004052:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004056:	441a      	add	r2, r3
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	695a      	ldr	r2, [r3, #20]
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	091b      	lsrs	r3, r3, #4
 8004064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004068:	441a      	add	r2, r3
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	615a      	str	r2, [r3, #20]
 800406e:	e016      	b.n	800409e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004076:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800407a:	d110      	bne.n	800409e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004082:	2208      	movs	r2, #8
 8004084:	4619      	mov	r1, r3
 8004086:	6a38      	ldr	r0, [r7, #32]
 8004088:	f002 fd60 	bl	8006b4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	695a      	ldr	r2, [r3, #20]
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004098:	441a      	add	r2, r3
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699a      	ldr	r2, [r3, #24]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0210 	orr.w	r2, r2, #16
 80040ac:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f002 fede 	bl	8006e74 <USB_ReadInterrupts>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040be:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040c2:	f040 80a7 	bne.w	8004214 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80040c6:	2300      	movs	r3, #0
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 fee3 	bl	8006e9a <USB_ReadDevAllOutEpInterrupt>
 80040d4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80040d6:	e099      	b.n	800420c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 808e 	beq.w	8004200 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	4611      	mov	r1, r2
 80040ee:	4618      	mov	r0, r3
 80040f0:	f002 ff07 	bl	8006f02 <USB_ReadDevOutEPInterrupt>
 80040f4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00c      	beq.n	800411a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004102:	015a      	lsls	r2, r3, #5
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	4413      	add	r3, r2
 8004108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410c:	461a      	mov	r2, r3
 800410e:	2301      	movs	r3, #1
 8004110:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004112:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f000 fea3 	bl	8004e60 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004130:	461a      	mov	r2, r3
 8004132:	2308      	movs	r3, #8
 8004134:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004136:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 ff79 	bl	8005030 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004154:	461a      	mov	r2, r3
 8004156:	2310      	movs	r3, #16
 8004158:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d030      	beq.n	80041c6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800416c:	2b80      	cmp	r3, #128	@ 0x80
 800416e:	d109      	bne.n	8004184 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	69fa      	ldr	r2, [r7, #28]
 800417a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800417e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004182:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4413      	add	r3, r2
 8004196:	3304      	adds	r3, #4
 8004198:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	78db      	ldrb	r3, [r3, #3]
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d108      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	4619      	mov	r1, r3
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f005 fa68 	bl	8009684 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80041b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041c0:	461a      	mov	r2, r3
 80041c2:	2302      	movs	r3, #2
 80041c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f003 0320 	and.w	r3, r3, #32
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041dc:	461a      	mov	r2, r3
 80041de:	2320      	movs	r3, #32
 80041e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80041ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041f8:	461a      	mov	r2, r3
 80041fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80041fe:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004202:	3301      	adds	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	085b      	lsrs	r3, r3, #1
 800420a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800420c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	f47f af62 	bne.w	80040d8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4618      	mov	r0, r3
 800421a:	f002 fe2b 	bl	8006e74 <USB_ReadInterrupts>
 800421e:	4603      	mov	r3, r0
 8004220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004224:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004228:	f040 80db 	bne.w	80043e2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f002 fe4c 	bl	8006ece <USB_ReadDevAllInEpInterrupt>
 8004236:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004238:	2300      	movs	r3, #0
 800423a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800423c:	e0cd      	b.n	80043da <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800423e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 80c2 	beq.w	80043ce <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	4611      	mov	r1, r2
 8004254:	4618      	mov	r0, r3
 8004256:	f002 fe72 	bl	8006f3e <USB_ReadDevInEPInterrupt>
 800425a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d057      	beq.n	8004316 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	f003 030f 	and.w	r3, r3, #15
 800426c:	2201      	movs	r2, #1
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800427a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	43db      	mvns	r3, r3
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004286:	4013      	ands	r3, r2
 8004288:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	015a      	lsls	r2, r3, #5
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	4413      	add	r3, r2
 8004292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004296:	461a      	mov	r2, r3
 8004298:	2301      	movs	r3, #1
 800429a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	799b      	ldrb	r3, [r3, #6]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d132      	bne.n	800430a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042a8:	4613      	mov	r3, r2
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	440b      	add	r3, r1
 80042b2:	3320      	adds	r3, #32
 80042b4:	6819      	ldr	r1, [r3, #0]
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ba:	4613      	mov	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4403      	add	r3, r0
 80042c4:	331c      	adds	r3, #28
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4419      	add	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042ce:	4613      	mov	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4403      	add	r3, r0
 80042d8:	3320      	adds	r3, #32
 80042da:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d113      	bne.n	800430a <HAL_PCD_IRQHandler+0x3a2>
 80042e2:	6879      	ldr	r1, [r7, #4]
 80042e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	440b      	add	r3, r1
 80042f0:	3324      	adds	r3, #36	@ 0x24
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d108      	bne.n	800430a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004302:	461a      	mov	r2, r3
 8004304:	2101      	movs	r1, #1
 8004306:	f002 fe79 	bl	8006ffc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	b2db      	uxtb	r3, r3
 800430e:	4619      	mov	r1, r3
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f005 f932 	bl	800957a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f003 0308 	and.w	r3, r3, #8
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800432c:	461a      	mov	r2, r3
 800432e:	2308      	movs	r3, #8
 8004330:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f003 0310 	and.w	r3, r3, #16
 8004338:	2b00      	cmp	r3, #0
 800433a:	d008      	beq.n	800434e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004348:	461a      	mov	r2, r3
 800434a:	2310      	movs	r3, #16
 800434c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004364:	461a      	mov	r2, r3
 8004366:	2340      	movs	r3, #64	@ 0x40
 8004368:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d023      	beq.n	80043bc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004374:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004376:	6a38      	ldr	r0, [r7, #32]
 8004378:	f001 fe60 	bl	800603c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800437c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437e:	4613      	mov	r3, r2
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	4413      	add	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	3310      	adds	r3, #16
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	78db      	ldrb	r3, [r3, #3]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d108      	bne.n	80043aa <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2200      	movs	r2, #0
 800439c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800439e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4619      	mov	r1, r3
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f005 f97f 	bl	80096a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b6:	461a      	mov	r2, r3
 80043b8:	2302      	movs	r3, #2
 80043ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80043c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fcbd 	bl	8004d48 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	3301      	adds	r3, #1
 80043d2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80043d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80043da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f47f af2e 	bne.w	800423e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f002 fd44 	bl	8006e74 <USB_ReadInterrupts>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043f6:	d122      	bne.n	800443e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004412:	2b01      	cmp	r3, #1
 8004414:	d108      	bne.n	8004428 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fea3 	bl	800516c <HAL_PCDEx_LPM_Callback>
 8004426:	e002      	b.n	800442e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f005 f91d 	bl	8009668 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800443c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4618      	mov	r0, r3
 8004444:	f002 fd16 	bl	8006e74 <USB_ReadInterrupts>
 8004448:	4603      	mov	r3, r0
 800444a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800444e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004452:	d112      	bne.n	800447a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d102      	bne.n	800446a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f005 f8d9 	bl	800961c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695a      	ldr	r2, [r3, #20]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004478:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4618      	mov	r0, r3
 8004480:	f002 fcf8 	bl	8006e74 <USB_ReadInterrupts>
 8004484:	4603      	mov	r3, r0
 8004486:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800448e:	f040 80b7 	bne.w	8004600 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	69fa      	ldr	r2, [r7, #28]
 800449c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044a0:	f023 0301 	bic.w	r3, r3, #1
 80044a4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2110      	movs	r1, #16
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 fdc5 	bl	800603c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b2:	2300      	movs	r3, #0
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044b6:	e046      	b.n	8004546 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80044b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c4:	461a      	mov	r2, r3
 80044c6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044ca:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80044cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80044ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044f8:	461a      	mov	r2, r3
 80044fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80044fe:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004510:	0151      	lsls	r1, r2, #5
 8004512:	69fa      	ldr	r2, [r7, #28]
 8004514:	440a      	add	r2, r1
 8004516:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800451a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800451e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004530:	0151      	lsls	r1, r2, #5
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	440a      	add	r2, r1
 8004536:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800453a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800453e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004542:	3301      	adds	r3, #1
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	791b      	ldrb	r3, [r3, #4]
 800454a:	461a      	mov	r2, r3
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	4293      	cmp	r3, r2
 8004550:	d3b2      	bcc.n	80044b8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004558:	69db      	ldr	r3, [r3, #28]
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004560:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004564:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	7bdb      	ldrb	r3, [r3, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d016      	beq.n	800459c <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004578:	69fa      	ldr	r2, [r7, #28]
 800457a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800457e:	f043 030b 	orr.w	r3, r3, #11
 8004582:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004594:	f043 030b 	orr.w	r3, r3, #11
 8004598:	6453      	str	r3, [r2, #68]	@ 0x44
 800459a:	e015      	b.n	80045c8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80045ae:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80045b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	69fa      	ldr	r2, [r7, #28]
 80045be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045c2:	f043 030b 	orr.w	r3, r3, #11
 80045c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045d6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80045da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80045ea:	461a      	mov	r2, r3
 80045ec:	f002 fd06 	bl	8006ffc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80045fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4618      	mov	r0, r3
 8004606:	f002 fc35 	bl	8006e74 <USB_ReadInterrupts>
 800460a:	4603      	mov	r3, r0
 800460c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004610:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004614:	d123      	bne.n	800465e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f002 fccb 	bl	8006fb6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fd82 	bl	800612e <USB_GetDevSpeed>
 800462a:	4603      	mov	r3, r0
 800462c:	461a      	mov	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681c      	ldr	r4, [r3, #0]
 8004636:	f001 fa09 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 800463a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004640:	461a      	mov	r2, r3
 8004642:	4620      	mov	r0, r4
 8004644:	f001 fa86 	bl	8005b54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f004 ffbe 	bl	80095ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695a      	ldr	r2, [r3, #20]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800465c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f002 fc06 	bl	8006e74 <USB_ReadInterrupts>
 8004668:	4603      	mov	r3, r0
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b08      	cmp	r3, #8
 8004670:	d10a      	bne.n	8004688 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f004 ff9b 	bl	80095ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695a      	ldr	r2, [r3, #20]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f002 0208 	and.w	r2, r2, #8
 8004686:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4618      	mov	r0, r3
 800468e:	f002 fbf1 	bl	8006e74 <USB_ReadInterrupts>
 8004692:	4603      	mov	r3, r0
 8004694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004698:	2b80      	cmp	r3, #128	@ 0x80
 800469a:	d123      	bne.n	80046e4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80046a4:	6a3b      	ldr	r3, [r7, #32]
 80046a6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046a8:	2301      	movs	r3, #1
 80046aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ac:	e014      	b.n	80046d8 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b2:	4613      	mov	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	4413      	add	r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d105      	bne.n	80046d2 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80046c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fb0a 	bl	8004ce6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	3301      	adds	r3, #1
 80046d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	791b      	ldrb	r3, [r3, #4]
 80046dc:	461a      	mov	r2, r3
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d3e4      	bcc.n	80046ae <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f002 fbc3 	bl	8006e74 <USB_ReadInterrupts>
 80046ee:	4603      	mov	r3, r0
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046f8:	d13c      	bne.n	8004774 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046fa:	2301      	movs	r3, #1
 80046fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fe:	e02b      	b.n	8004758 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	3318      	adds	r3, #24
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d115      	bne.n	8004752 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004726:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004728:	2b00      	cmp	r3, #0
 800472a:	da12      	bge.n	8004752 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3317      	adds	r3, #23
 800473c:	2201      	movs	r2, #1
 800473e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004748:	b2db      	uxtb	r3, r3
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 faca 	bl	8004ce6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004754:	3301      	adds	r3, #1
 8004756:	627b      	str	r3, [r7, #36]	@ 0x24
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	461a      	mov	r2, r3
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	4293      	cmp	r3, r2
 8004762:	d3cd      	bcc.n	8004700 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695a      	ldr	r2, [r3, #20]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004772:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4618      	mov	r0, r3
 800477a:	f002 fb7b 	bl	8006e74 <USB_ReadInterrupts>
 800477e:	4603      	mov	r3, r0
 8004780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004788:	d156      	bne.n	8004838 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800478a:	2301      	movs	r3, #1
 800478c:	627b      	str	r3, [r7, #36]	@ 0x24
 800478e:	e045      	b.n	800481c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047a0:	6879      	ldr	r1, [r7, #4]
 80047a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a4:	4613      	mov	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	4413      	add	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d12e      	bne.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	da2b      	bge.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	0c1a      	lsrs	r2, r3, #16
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80047c8:	4053      	eors	r3, r2
 80047ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d121      	bne.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d6:	4613      	mov	r3, r2
 80047d8:	00db      	lsls	r3, r3, #3
 80047da:	4413      	add	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	440b      	add	r3, r1
 80047e0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80047e4:	2201      	movs	r2, #1
 80047e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	695b      	ldr	r3, [r3, #20]
 80047f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800480e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004812:	6053      	str	r3, [r2, #4]
            break;
 8004814:	e008      	b.n	8004828 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	3301      	adds	r3, #1
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	791b      	ldrb	r3, [r3, #4]
 8004820:	461a      	mov	r2, r3
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	4293      	cmp	r3, r2
 8004826:	d3b3      	bcc.n	8004790 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695a      	ldr	r2, [r3, #20]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004836:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4618      	mov	r0, r3
 800483e:	f002 fb19 	bl	8006e74 <USB_ReadInterrupts>
 8004842:	4603      	mov	r3, r0
 8004844:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800484c:	d10a      	bne.n	8004864 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f004 ff3c 	bl	80096cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004862:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f002 fb03 	bl	8006e74 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b04      	cmp	r3, #4
 8004876:	d115      	bne.n	80048a4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d002      	beq.n	8004890 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f004 ff2c 	bl	80096e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
 80048a0:	e000      	b.n	80048a4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80048a2:	bf00      	nop
    }
  }
}
 80048a4:	3734      	adds	r7, #52	@ 0x34
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd90      	pop	{r4, r7, pc}

080048aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b082      	sub	sp, #8
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
 80048b2:	460b      	mov	r3, r1
 80048b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d101      	bne.n	80048c4 <HAL_PCD_SetAddress+0x1a>
 80048c0:	2302      	movs	r3, #2
 80048c2:	e012      	b.n	80048ea <HAL_PCD_SetAddress+0x40>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	78fa      	ldrb	r2, [r7, #3]
 80048d0:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	78fa      	ldrb	r2, [r7, #3]
 80048d8:	4611      	mov	r1, r2
 80048da:	4618      	mov	r0, r3
 80048dc:	f002 fa62 	bl	8006da4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b084      	sub	sp, #16
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	4608      	mov	r0, r1
 80048fc:	4611      	mov	r1, r2
 80048fe:	461a      	mov	r2, r3
 8004900:	4603      	mov	r3, r0
 8004902:	70fb      	strb	r3, [r7, #3]
 8004904:	460b      	mov	r3, r1
 8004906:	803b      	strh	r3, [r7, #0]
 8004908:	4613      	mov	r3, r2
 800490a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004914:	2b00      	cmp	r3, #0
 8004916:	da0f      	bge.n	8004938 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004918:	78fb      	ldrb	r3, [r7, #3]
 800491a:	f003 020f 	and.w	r2, r3, #15
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	3310      	adds	r3, #16
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	4413      	add	r3, r2
 800492c:	3304      	adds	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	705a      	strb	r2, [r3, #1]
 8004936:	e00f      	b.n	8004958 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004938:	78fb      	ldrb	r3, [r7, #3]
 800493a:	f003 020f 	and.w	r2, r3, #15
 800493e:	4613      	mov	r3, r2
 8004940:	00db      	lsls	r3, r3, #3
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	3304      	adds	r3, #4
 8004950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	b2da      	uxtb	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004964:	883b      	ldrh	r3, [r7, #0]
 8004966:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	78ba      	ldrb	r2, [r7, #2]
 8004972:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004986:	78bb      	ldrb	r3, [r7, #2]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d102      	bne.n	8004992 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_PCD_EP_Open+0xae>
 800499c:	2302      	movs	r3, #2
 800499e:	e00e      	b.n	80049be <HAL_PCD_EP_Open+0xcc>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 fbe2 	bl	8006178 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80049bc:	7afb      	ldrb	r3, [r7, #11]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da0f      	bge.n	80049fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 020f 	and.w	r2, r3, #15
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	4413      	add	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	3310      	adds	r3, #16
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	705a      	strb	r2, [r3, #1]
 80049f8:	e00f      	b.n	8004a1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_EP_Close+0x6e>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e00e      	b.n	8004a52 <HAL_PCD_EP_Close+0x8c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fc20 	bl	8006288 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	460b      	mov	r3, r1
 8004a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	3304      	adds	r3, #4
 8004a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2200      	movs	r2, #0
 8004a94:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9c:	7afb      	ldrb	r3, [r7, #11]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	799b      	ldrb	r3, [r3, #6]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	799b      	ldrb	r3, [r3, #6]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6979      	ldr	r1, [r7, #20]
 8004ac2:	f001 fcbd 	bl	8006440 <USB_EPStartXfer>

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	f003 020f 	and.w	r2, r3, #15
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	4413      	add	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004af2:	681b      	ldr	r3, [r3, #0]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	f003 020f 	and.w	r2, r3, #15
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	3310      	adds	r3, #16
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	3304      	adds	r3, #4
 8004b26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	683a      	ldr	r2, [r7, #0]
 8004b32:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2200      	movs	r2, #0
 8004b38:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b40:	7afb      	ldrb	r3, [r7, #11]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	b2da      	uxtb	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	799b      	ldrb	r3, [r3, #6]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d102      	bne.n	8004b5a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6818      	ldr	r0, [r3, #0]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	799b      	ldrb	r3, [r3, #6]
 8004b62:	461a      	mov	r2, r3
 8004b64:	6979      	ldr	r1, [r7, #20]
 8004b66:	f001 fc6b 	bl	8006440 <USB_EPStartXfer>

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	f003 030f 	and.w	r3, r3, #15
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	7912      	ldrb	r2, [r2, #4]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d901      	bls.n	8004b92 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e04f      	b.n	8004c32 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da0f      	bge.n	8004bba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b9a:	78fb      	ldrb	r3, [r7, #3]
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	3310      	adds	r3, #16
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	4413      	add	r3, r2
 8004bae:	3304      	adds	r3, #4
 8004bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	705a      	strb	r2, [r3, #1]
 8004bb8:	e00d      	b.n	8004bd6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4413      	add	r3, r2
 8004bcc:	3304      	adds	r3, #4
 8004bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	f003 030f 	and.w	r3, r3, #15
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_PCD_EP_SetStall+0x82>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e01d      	b.n	8004c32 <HAL_PCD_EP_SetStall+0xbe>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f001 fff9 	bl	8006bfc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c0a:	78fb      	ldrb	r3, [r7, #3]
 8004c0c:	f003 030f 	and.w	r3, r3, #15
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d109      	bne.n	8004c28 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6818      	ldr	r0, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	7999      	ldrb	r1, [r3, #6]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c22:	461a      	mov	r2, r3
 8004c24:	f002 f9ea 	bl	8006ffc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3710      	adds	r7, #16
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b084      	sub	sp, #16
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	6078      	str	r0, [r7, #4]
 8004c42:	460b      	mov	r3, r1
 8004c44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c46:	78fb      	ldrb	r3, [r7, #3]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	7912      	ldrb	r2, [r2, #4]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e042      	b.n	8004cde <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	da0f      	bge.n	8004c80 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	f003 020f 	and.w	r2, r3, #15
 8004c66:	4613      	mov	r3, r2
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	3310      	adds	r3, #16
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4413      	add	r3, r2
 8004c74:	3304      	adds	r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	705a      	strb	r2, [r3, #1]
 8004c7e:	e00f      	b.n	8004ca0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	f003 020f 	and.w	r2, r3, #15
 8004c86:	4613      	mov	r3, r2
 8004c88:	00db      	lsls	r3, r3, #3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	4413      	add	r3, r2
 8004c96:	3304      	adds	r3, #4
 8004c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ca6:	78fb      	ldrb	r3, [r7, #3]
 8004ca8:	f003 030f 	and.w	r3, r3, #15
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_PCD_EP_ClrStall+0x86>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e00e      	b.n	8004cde <HAL_PCD_EP_ClrStall+0xa4>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68f9      	ldr	r1, [r7, #12]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f002 f802 	bl	8006cd8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b084      	sub	sp, #16
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004cf2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	da0c      	bge.n	8004d14 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	f003 020f 	and.w	r2, r3, #15
 8004d00:	4613      	mov	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4413      	add	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	3310      	adds	r3, #16
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	4413      	add	r3, r2
 8004d0e:	3304      	adds	r3, #4
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e00c      	b.n	8004d2e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	f003 020f 	and.w	r2, r3, #15
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	4413      	add	r3, r2
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68f9      	ldr	r1, [r7, #12]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fe21 	bl	800697c <USB_EPStopXfer>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004d3e:	7afb      	ldrb	r3, [r7, #11]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	@ 0x28
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3310      	adds	r3, #16
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	691b      	ldr	r3, [r3, #16]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d901      	bls.n	8004d80 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e06b      	b.n	8004e58 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	695b      	ldr	r3, [r3, #20]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	69fa      	ldr	r2, [r7, #28]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d902      	bls.n	8004d9c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	3303      	adds	r3, #3
 8004da0:	089b      	lsrs	r3, r3, #2
 8004da2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004da4:	e02a      	b.n	8004dfc <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	69fa      	ldr	r2, [r7, #28]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d902      	bls.n	8004dc2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	3303      	adds	r3, #3
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	68d9      	ldr	r1, [r3, #12]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	b2da      	uxtb	r2, r3
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	4603      	mov	r3, r0
 8004dde:	6978      	ldr	r0, [r7, #20]
 8004de0:	f001 fe76 	bl	8006ad0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	441a      	add	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	695a      	ldr	r2, [r3, #20]
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	441a      	add	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	015a      	lsls	r2, r3, #5
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	4413      	add	r3, r2
 8004e04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e0c:	69ba      	ldr	r2, [r7, #24]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d809      	bhi.n	8004e26 <PCD_WriteEmptyTxFifo+0xde>
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d203      	bcs.n	8004e26 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1bf      	bne.n	8004da6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	691a      	ldr	r2, [r3, #16]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d811      	bhi.n	8004e56 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	2201      	movs	r2, #1
 8004e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	6939      	ldr	r1, [r7, #16]
 8004e4e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e52:	4013      	ands	r3, r2
 8004e54:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3720      	adds	r7, #32
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	333c      	adds	r3, #60	@ 0x3c
 8004e78:	3304      	adds	r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	799b      	ldrb	r3, [r3, #6]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d17b      	bne.n	8004f8e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f003 0308 	and.w	r3, r3, #8
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4a61      	ldr	r2, [pc, #388]	@ (8005028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	f240 80b9 	bls.w	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 80b3 	beq.w	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec8:	6093      	str	r3, [r2, #8]
 8004eca:	e0a7      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d009      	beq.n	8004eea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	015a      	lsls	r2, r3, #5
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	4413      	add	r3, r2
 8004ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	2320      	movs	r3, #32
 8004ee6:	6093      	str	r3, [r2, #8]
 8004ee8:	e098      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 8093 	bne.w	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8005028 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d90f      	bls.n	8004f1e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f14:	461a      	mov	r2, r3
 8004f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f1a:	6093      	str	r3, [r2, #8]
 8004f1c:	e07e      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4413      	add	r3, r2
 8004f30:	3304      	adds	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6a1a      	ldr	r2, [r3, #32]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	0159      	lsls	r1, r3, #5
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	440b      	add	r3, r1
 8004f40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f4a:	1ad2      	subs	r2, r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d114      	bne.n	8004f80 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f68:	461a      	mov	r2, r3
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	f002 f846 	bl	8006ffc <USB_EP0_OutStart>
 8004f70:	e006      	b.n	8004f80 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	68da      	ldr	r2, [r3, #12]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	441a      	add	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	4619      	mov	r1, r3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f004 fadc 	bl	8009544 <HAL_PCD_DataOutStageCallback>
 8004f8c:	e046      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4a26      	ldr	r2, [pc, #152]	@ (800502c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d124      	bne.n	8004fe0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	015a      	lsls	r2, r3, #5
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fac:	461a      	mov	r2, r3
 8004fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fb2:	6093      	str	r3, [r2, #8]
 8004fb4:	e032      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2320      	movs	r3, #32
 8004fd0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f004 fab3 	bl	8009544 <HAL_PCD_DataOutStageCallback>
 8004fde:	e01d      	b.n	800501c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d114      	bne.n	8005010 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004fe6:	6879      	ldr	r1, [r7, #4]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	440b      	add	r3, r1
 8004ff4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6818      	ldr	r0, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005008:	461a      	mov	r2, r3
 800500a:	2100      	movs	r1, #0
 800500c:	f001 fff6 	bl	8006ffc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	4619      	mov	r1, r3
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f004 fa94 	bl	8009544 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3720      	adds	r7, #32
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	4f54300a 	.word	0x4f54300a
 800502c:	4f54310a 	.word	0x4f54310a

08005030 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
 8005038:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	333c      	adds	r3, #60	@ 0x3c
 8005048:	3304      	adds	r3, #4
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	4413      	add	r3, r2
 8005056:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a15      	ldr	r2, [pc, #84]	@ (80050b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d90e      	bls.n	8005084 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800506c:	2b00      	cmp	r3, #0
 800506e:	d009      	beq.n	8005084 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507c:	461a      	mov	r2, r3
 800507e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005082:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f004 fa4b 	bl	8009520 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a0a      	ldr	r2, [pc, #40]	@ (80050b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d90c      	bls.n	80050ac <PCD_EP_OutSetupPacket_int+0x7c>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	799b      	ldrb	r3, [r3, #6]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6818      	ldr	r0, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80050a4:	461a      	mov	r2, r3
 80050a6:	2101      	movs	r1, #1
 80050a8:	f001 ffa8 	bl	8006ffc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	4f54300a 	.word	0x4f54300a

080050bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80050bc:	b480      	push	{r7}
 80050be:	b085      	sub	sp, #20
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	460b      	mov	r3, r1
 80050c6:	70fb      	strb	r3, [r7, #3]
 80050c8:	4613      	mov	r3, r2
 80050ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d107      	bne.n	80050ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80050da:	883b      	ldrh	r3, [r7, #0]
 80050dc:	0419      	lsls	r1, r3, #16
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80050e8:	e028      	b.n	800513c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	0c1b      	lsrs	r3, r3, #16
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	4413      	add	r3, r2
 80050f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]
 80050fc:	e00d      	b.n	800511a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	3340      	adds	r3, #64	@ 0x40
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	4413      	add	r3, r2
 8005112:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	3301      	adds	r3, #1
 8005118:	73fb      	strb	r3, [r7, #15]
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	3b01      	subs	r3, #1
 8005120:	429a      	cmp	r2, r3
 8005122:	d3ec      	bcc.n	80050fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005124:	883b      	ldrh	r3, [r7, #0]
 8005126:	0418      	lsls	r0, r3, #16
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6819      	ldr	r1, [r3, #0]
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	3b01      	subs	r3, #1
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	4302      	orrs	r2, r0
 8005134:	3340      	adds	r3, #64	@ 0x40
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3714      	adds	r7, #20
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	460b      	mov	r3, r1
 8005154:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	460b      	mov	r3, r1
 8005176:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e267      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d075      	beq.n	800528e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051a2:	4b88      	ldr	r3, [pc, #544]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 030c 	and.w	r3, r3, #12
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d00c      	beq.n	80051c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ae:	4b85      	ldr	r3, [pc, #532]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051b0:	689b      	ldr	r3, [r3, #8]
 80051b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d112      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80051ba:	4b82      	ldr	r3, [pc, #520]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80051c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051c6:	d10b      	bne.n	80051e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c8:	4b7e      	ldr	r3, [pc, #504]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05b      	beq.n	800528c <HAL_RCC_OscConfig+0x108>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d157      	bne.n	800528c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e242      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051e8:	d106      	bne.n	80051f8 <HAL_RCC_OscConfig+0x74>
 80051ea:	4b76      	ldr	r3, [pc, #472]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a75      	ldr	r2, [pc, #468]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80051f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	e01d      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005200:	d10c      	bne.n	800521c <HAL_RCC_OscConfig+0x98>
 8005202:	4b70      	ldr	r3, [pc, #448]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a6f      	ldr	r2, [pc, #444]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005208:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	4b6d      	ldr	r3, [pc, #436]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a6c      	ldr	r2, [pc, #432]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	6013      	str	r3, [r2, #0]
 800521a:	e00b      	b.n	8005234 <HAL_RCC_OscConfig+0xb0>
 800521c:	4b69      	ldr	r3, [pc, #420]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a68      	ldr	r2, [pc, #416]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005222:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	4b66      	ldr	r3, [pc, #408]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a65      	ldr	r2, [pc, #404]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800522e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d013      	beq.n	8005264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fc fd54 	bl	8001ce8 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005244:	f7fc fd50 	bl	8001ce8 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b64      	cmp	r3, #100	@ 0x64
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e207      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005256:	4b5b      	ldr	r3, [pc, #364]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d0f0      	beq.n	8005244 <HAL_RCC_OscConfig+0xc0>
 8005262:	e014      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005264:	f7fc fd40 	bl	8001ce8 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800526a:	e008      	b.n	800527e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800526c:	f7fc fd3c 	bl	8001ce8 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b64      	cmp	r3, #100	@ 0x64
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e1f3      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800527e:	4b51      	ldr	r3, [pc, #324]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1f0      	bne.n	800526c <HAL_RCC_OscConfig+0xe8>
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800528c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d063      	beq.n	8005362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800529a:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00b      	beq.n	80052be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052a6:	4b47      	ldr	r3, [pc, #284]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d11c      	bne.n	80052ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052b2:	4b44      	ldr	r3, [pc, #272]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d116      	bne.n	80052ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052be:	4b41      	ldr	r3, [pc, #260]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d005      	beq.n	80052d6 <HAL_RCC_OscConfig+0x152>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d001      	beq.n	80052d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e1c7      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052d6:	4b3b      	ldr	r3, [pc, #236]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4937      	ldr	r1, [pc, #220]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ea:	e03a      	b.n	8005362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d020      	beq.n	8005336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052f4:	4b34      	ldr	r3, [pc, #208]	@ (80053c8 <HAL_RCC_OscConfig+0x244>)
 80052f6:	2201      	movs	r2, #1
 80052f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc fcf5 	bl	8001ce8 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005302:	f7fc fcf1 	bl	8001ce8 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e1a8      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005314:	4b2b      	ldr	r3, [pc, #172]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005320:	4b28      	ldr	r3, [pc, #160]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4925      	ldr	r1, [pc, #148]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
 8005334:	e015      	b.n	8005362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005336:	4b24      	ldr	r3, [pc, #144]	@ (80053c8 <HAL_RCC_OscConfig+0x244>)
 8005338:	2200      	movs	r2, #0
 800533a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800533c:	f7fc fcd4 	bl	8001ce8 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005344:	f7fc fcd0 	bl	8001ce8 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e187      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005356:	4b1b      	ldr	r3, [pc, #108]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1f0      	bne.n	8005344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d036      	beq.n	80053dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d016      	beq.n	80053a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <HAL_RCC_OscConfig+0x248>)
 8005378:	2201      	movs	r2, #1
 800537a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800537c:	f7fc fcb4 	bl	8001ce8 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005384:	f7fc fcb0 	bl	8001ce8 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b02      	cmp	r3, #2
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e167      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005396:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <HAL_RCC_OscConfig+0x240>)
 8005398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0x200>
 80053a2:	e01b      	b.n	80053dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053a4:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <HAL_RCC_OscConfig+0x248>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053aa:	f7fc fc9d 	bl	8001ce8 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053b0:	e00e      	b.n	80053d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053b2:	f7fc fc99 	bl	8001ce8 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d907      	bls.n	80053d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e150      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
 80053c4:	40023800 	.word	0x40023800
 80053c8:	42470000 	.word	0x42470000
 80053cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053d0:	4b88      	ldr	r3, [pc, #544]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80053d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1ea      	bne.n	80053b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8097 	beq.w	8005518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ea:	2300      	movs	r3, #0
 80053ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053ee:	4b81      	ldr	r3, [pc, #516]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80053f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10f      	bne.n	800541a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053fa:	2300      	movs	r3, #0
 80053fc:	60bb      	str	r3, [r7, #8]
 80053fe:	4b7d      	ldr	r3, [pc, #500]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005402:	4a7c      	ldr	r2, [pc, #496]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005408:	6413      	str	r3, [r2, #64]	@ 0x40
 800540a:	4b7a      	ldr	r3, [pc, #488]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005412:	60bb      	str	r3, [r7, #8]
 8005414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005416:	2301      	movs	r3, #1
 8005418:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541a:	4b77      	ldr	r3, [pc, #476]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d118      	bne.n	8005458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005426:	4b74      	ldr	r3, [pc, #464]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a73      	ldr	r2, [pc, #460]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005432:	f7fc fc59 	bl	8001ce8 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543a:	f7fc fc55 	bl	8001ce8 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e10c      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800544c:	4b6a      	ldr	r3, [pc, #424]	@ (80055f8 <HAL_RCC_OscConfig+0x474>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d106      	bne.n	800546e <HAL_RCC_OscConfig+0x2ea>
 8005460:	4b64      	ldr	r3, [pc, #400]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a63      	ldr	r2, [pc, #396]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005466:	f043 0301 	orr.w	r3, r3, #1
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	e01c      	b.n	80054a8 <HAL_RCC_OscConfig+0x324>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	2b05      	cmp	r3, #5
 8005474:	d10c      	bne.n	8005490 <HAL_RCC_OscConfig+0x30c>
 8005476:	4b5f      	ldr	r3, [pc, #380]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800547a:	4a5e      	ldr	r2, [pc, #376]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800547c:	f043 0304 	orr.w	r3, r3, #4
 8005480:	6713      	str	r3, [r2, #112]	@ 0x70
 8005482:	4b5c      	ldr	r3, [pc, #368]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005486:	4a5b      	ldr	r2, [pc, #364]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	6713      	str	r3, [r2, #112]	@ 0x70
 800548e:	e00b      	b.n	80054a8 <HAL_RCC_OscConfig+0x324>
 8005490:	4b58      	ldr	r3, [pc, #352]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005494:	4a57      	ldr	r2, [pc, #348]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005496:	f023 0301 	bic.w	r3, r3, #1
 800549a:	6713      	str	r3, [r2, #112]	@ 0x70
 800549c:	4b55      	ldr	r3, [pc, #340]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800549e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a0:	4a54      	ldr	r2, [pc, #336]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054a2:	f023 0304 	bic.w	r3, r3, #4
 80054a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d015      	beq.n	80054dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fc fc1a 	bl	8001ce8 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054b6:	e00a      	b.n	80054ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fc fc16 	bl	8001ce8 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e0cb      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ce:	4b49      	ldr	r3, [pc, #292]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0ee      	beq.n	80054b8 <HAL_RCC_OscConfig+0x334>
 80054da:	e014      	b.n	8005506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054dc:	f7fc fc04 	bl	8001ce8 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e4:	f7fc fc00 	bl	8001ce8 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e0b5      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054fa:	4b3e      	ldr	r3, [pc, #248]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1ee      	bne.n	80054e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005506:	7dfb      	ldrb	r3, [r7, #23]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d105      	bne.n	8005518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550c:	4b39      	ldr	r3, [pc, #228]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	4a38      	ldr	r2, [pc, #224]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80a1 	beq.w	8005664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005522:	4b34      	ldr	r3, [pc, #208]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b08      	cmp	r3, #8
 800552c:	d05c      	beq.n	80055e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	2b02      	cmp	r3, #2
 8005534:	d141      	bne.n	80055ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005536:	4b31      	ldr	r3, [pc, #196]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 8005538:	2200      	movs	r2, #0
 800553a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800553c:	f7fc fbd4 	bl	8001ce8 <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005544:	f7fc fbd0 	bl	8001ce8 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e087      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005556:	4b27      	ldr	r3, [pc, #156]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005570:	019b      	lsls	r3, r3, #6
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005578:	085b      	lsrs	r3, r3, #1
 800557a:	3b01      	subs	r3, #1
 800557c:	041b      	lsls	r3, r3, #16
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005584:	061b      	lsls	r3, r3, #24
 8005586:	491b      	ldr	r1, [pc, #108]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 8005588:	4313      	orrs	r3, r2
 800558a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800558c:	4b1b      	ldr	r3, [pc, #108]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005592:	f7fc fba9 	bl	8001ce8 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800559a:	f7fc fba5 	bl	8001ce8 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e05c      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ac:	4b11      	ldr	r3, [pc, #68]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x416>
 80055b8:	e054      	b.n	8005664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ba:	4b10      	ldr	r3, [pc, #64]	@ (80055fc <HAL_RCC_OscConfig+0x478>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055c0:	f7fc fb92 	bl	8001ce8 <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055c6:	e008      	b.n	80055da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055c8:	f7fc fb8e 	bl	8001ce8 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d901      	bls.n	80055da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e045      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055da:	4b06      	ldr	r3, [pc, #24]	@ (80055f4 <HAL_RCC_OscConfig+0x470>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d1f0      	bne.n	80055c8 <HAL_RCC_OscConfig+0x444>
 80055e6:	e03d      	b.n	8005664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d107      	bne.n	8005600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e038      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
 80055f4:	40023800 	.word	0x40023800
 80055f8:	40007000 	.word	0x40007000
 80055fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005600:	4b1b      	ldr	r3, [pc, #108]	@ (8005670 <HAL_RCC_OscConfig+0x4ec>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d028      	beq.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005618:	429a      	cmp	r2, r3
 800561a:	d121      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005626:	429a      	cmp	r2, r3
 8005628:	d11a      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005630:	4013      	ands	r3, r2
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005638:	4293      	cmp	r3, r2
 800563a:	d111      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	085b      	lsrs	r3, r3, #1
 8005648:	3b01      	subs	r3, #1
 800564a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d107      	bne.n	8005660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800565c:	429a      	cmp	r2, r3
 800565e:	d001      	beq.n	8005664 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e000      	b.n	8005666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3718      	adds	r7, #24
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	40023800 	.word	0x40023800

08005674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d101      	bne.n	8005688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e0cc      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005688:	4b68      	ldr	r3, [pc, #416]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d90c      	bls.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b65      	ldr	r3, [pc, #404]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b63      	ldr	r3, [pc, #396]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e0b8      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d020      	beq.n	80056fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0304 	and.w	r3, r3, #4
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056c8:	4b59      	ldr	r3, [pc, #356]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	4a58      	ldr	r2, [pc, #352]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056e0:	4b53      	ldr	r3, [pc, #332]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4a52      	ldr	r2, [pc, #328]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056ec:	4b50      	ldr	r3, [pc, #320]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	494d      	ldr	r1, [pc, #308]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	d044      	beq.n	8005794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005712:	4b47      	ldr	r3, [pc, #284]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800571a:	2b00      	cmp	r3, #0
 800571c:	d119      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e07f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b02      	cmp	r3, #2
 8005728:	d003      	beq.n	8005732 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800572e:	2b03      	cmp	r3, #3
 8005730:	d107      	bne.n	8005742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005732:	4b3f      	ldr	r3, [pc, #252]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e06f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005742:	4b3b      	ldr	r3, [pc, #236]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e067      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005752:	4b37      	ldr	r3, [pc, #220]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	4934      	ldr	r1, [pc, #208]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005760:	4313      	orrs	r3, r2
 8005762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005764:	f7fc fac0 	bl	8001ce8 <HAL_GetTick>
 8005768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576a:	e00a      	b.n	8005782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800576c:	f7fc fabc 	bl	8001ce8 <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e04f      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005782:	4b2b      	ldr	r3, [pc, #172]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	f003 020c 	and.w	r2, r3, #12
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	429a      	cmp	r2, r3
 8005792:	d1eb      	bne.n	800576c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005794:	4b25      	ldr	r3, [pc, #148]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d20c      	bcs.n	80057bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	b2d2      	uxtb	r2, r2
 80057a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057aa:	4b20      	ldr	r3, [pc, #128]	@ (800582c <HAL_RCC_ClockConfig+0x1b8>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0307 	and.w	r3, r3, #7
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d001      	beq.n	80057bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e032      	b.n	8005822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0304 	and.w	r3, r3, #4
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057c8:	4b19      	ldr	r3, [pc, #100]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	4916      	ldr	r1, [pc, #88]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 0308 	and.w	r3, r3, #8
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d009      	beq.n	80057fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057e6:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	490e      	ldr	r1, [pc, #56]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057fa:	f000 f821 	bl	8005840 <HAL_RCC_GetSysClockFreq>
 80057fe:	4602      	mov	r2, r0
 8005800:	4b0b      	ldr	r3, [pc, #44]	@ (8005830 <HAL_RCC_ClockConfig+0x1bc>)
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	091b      	lsrs	r3, r3, #4
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	490a      	ldr	r1, [pc, #40]	@ (8005834 <HAL_RCC_ClockConfig+0x1c0>)
 800580c:	5ccb      	ldrb	r3, [r1, r3]
 800580e:	fa22 f303 	lsr.w	r3, r2, r3
 8005812:	4a09      	ldr	r2, [pc, #36]	@ (8005838 <HAL_RCC_ClockConfig+0x1c4>)
 8005814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005816:	4b09      	ldr	r3, [pc, #36]	@ (800583c <HAL_RCC_ClockConfig+0x1c8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f7fc fa20 	bl	8001c60 <HAL_InitTick>

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40023c00 	.word	0x40023c00
 8005830:	40023800 	.word	0x40023800
 8005834:	0800c810 	.word	0x0800c810
 8005838:	20000000 	.word	0x20000000
 800583c:	20000004 	.word	0x20000004

08005840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005844:	b094      	sub	sp, #80	@ 0x50
 8005846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800584c:	2300      	movs	r3, #0
 800584e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005858:	4b79      	ldr	r3, [pc, #484]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 030c 	and.w	r3, r3, #12
 8005860:	2b08      	cmp	r3, #8
 8005862:	d00d      	beq.n	8005880 <HAL_RCC_GetSysClockFreq+0x40>
 8005864:	2b08      	cmp	r3, #8
 8005866:	f200 80e1 	bhi.w	8005a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800586a:	2b00      	cmp	r3, #0
 800586c:	d002      	beq.n	8005874 <HAL_RCC_GetSysClockFreq+0x34>
 800586e:	2b04      	cmp	r3, #4
 8005870:	d003      	beq.n	800587a <HAL_RCC_GetSysClockFreq+0x3a>
 8005872:	e0db      	b.n	8005a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005874:	4b73      	ldr	r3, [pc, #460]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005876:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005878:	e0db      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800587a:	4b73      	ldr	r3, [pc, #460]	@ (8005a48 <HAL_RCC_GetSysClockFreq+0x208>)
 800587c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800587e:	e0d8      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005880:	4b6f      	ldr	r3, [pc, #444]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005888:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800588a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d063      	beq.n	800595e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005896:	4b6a      	ldr	r3, [pc, #424]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	099b      	lsrs	r3, r3, #6
 800589c:	2200      	movs	r2, #0
 800589e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80058a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80058aa:	2300      	movs	r3, #0
 80058ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80058ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80058b2:	4622      	mov	r2, r4
 80058b4:	462b      	mov	r3, r5
 80058b6:	f04f 0000 	mov.w	r0, #0
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	0159      	lsls	r1, r3, #5
 80058c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058c4:	0150      	lsls	r0, r2, #5
 80058c6:	4602      	mov	r2, r0
 80058c8:	460b      	mov	r3, r1
 80058ca:	4621      	mov	r1, r4
 80058cc:	1a51      	subs	r1, r2, r1
 80058ce:	6139      	str	r1, [r7, #16]
 80058d0:	4629      	mov	r1, r5
 80058d2:	eb63 0301 	sbc.w	r3, r3, r1
 80058d6:	617b      	str	r3, [r7, #20]
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	f04f 0300 	mov.w	r3, #0
 80058e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058e4:	4659      	mov	r1, fp
 80058e6:	018b      	lsls	r3, r1, #6
 80058e8:	4651      	mov	r1, sl
 80058ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058ee:	4651      	mov	r1, sl
 80058f0:	018a      	lsls	r2, r1, #6
 80058f2:	4651      	mov	r1, sl
 80058f4:	ebb2 0801 	subs.w	r8, r2, r1
 80058f8:	4659      	mov	r1, fp
 80058fa:	eb63 0901 	sbc.w	r9, r3, r1
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800590a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800590e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005912:	4690      	mov	r8, r2
 8005914:	4699      	mov	r9, r3
 8005916:	4623      	mov	r3, r4
 8005918:	eb18 0303 	adds.w	r3, r8, r3
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	462b      	mov	r3, r5
 8005920:	eb49 0303 	adc.w	r3, r9, r3
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	f04f 0300 	mov.w	r3, #0
 800592e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005932:	4629      	mov	r1, r5
 8005934:	024b      	lsls	r3, r1, #9
 8005936:	4621      	mov	r1, r4
 8005938:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800593c:	4621      	mov	r1, r4
 800593e:	024a      	lsls	r2, r1, #9
 8005940:	4610      	mov	r0, r2
 8005942:	4619      	mov	r1, r3
 8005944:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005946:	2200      	movs	r2, #0
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
 800594a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800594c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005950:	f7fb f92a 	bl	8000ba8 <__aeabi_uldivmod>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4613      	mov	r3, r2
 800595a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800595c:	e058      	b.n	8005a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800595e:	4b38      	ldr	r3, [pc, #224]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	099b      	lsrs	r3, r3, #6
 8005964:	2200      	movs	r2, #0
 8005966:	4618      	mov	r0, r3
 8005968:	4611      	mov	r1, r2
 800596a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	2300      	movs	r3, #0
 8005972:	627b      	str	r3, [r7, #36]	@ 0x24
 8005974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005978:	4642      	mov	r2, r8
 800597a:	464b      	mov	r3, r9
 800597c:	f04f 0000 	mov.w	r0, #0
 8005980:	f04f 0100 	mov.w	r1, #0
 8005984:	0159      	lsls	r1, r3, #5
 8005986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800598a:	0150      	lsls	r0, r2, #5
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4641      	mov	r1, r8
 8005992:	ebb2 0a01 	subs.w	sl, r2, r1
 8005996:	4649      	mov	r1, r9
 8005998:	eb63 0b01 	sbc.w	fp, r3, r1
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80059a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80059ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80059b0:	ebb2 040a 	subs.w	r4, r2, sl
 80059b4:	eb63 050b 	sbc.w	r5, r3, fp
 80059b8:	f04f 0200 	mov.w	r2, #0
 80059bc:	f04f 0300 	mov.w	r3, #0
 80059c0:	00eb      	lsls	r3, r5, #3
 80059c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c6:	00e2      	lsls	r2, r4, #3
 80059c8:	4614      	mov	r4, r2
 80059ca:	461d      	mov	r5, r3
 80059cc:	4643      	mov	r3, r8
 80059ce:	18e3      	adds	r3, r4, r3
 80059d0:	603b      	str	r3, [r7, #0]
 80059d2:	464b      	mov	r3, r9
 80059d4:	eb45 0303 	adc.w	r3, r5, r3
 80059d8:	607b      	str	r3, [r7, #4]
 80059da:	f04f 0200 	mov.w	r2, #0
 80059de:	f04f 0300 	mov.w	r3, #0
 80059e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e6:	4629      	mov	r1, r5
 80059e8:	028b      	lsls	r3, r1, #10
 80059ea:	4621      	mov	r1, r4
 80059ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059f0:	4621      	mov	r1, r4
 80059f2:	028a      	lsls	r2, r1, #10
 80059f4:	4610      	mov	r0, r2
 80059f6:	4619      	mov	r1, r3
 80059f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059fa:	2200      	movs	r2, #0
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	61fa      	str	r2, [r7, #28]
 8005a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a04:	f7fb f8d0 	bl	8000ba8 <__aeabi_uldivmod>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	460b      	mov	r3, r1
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005a10:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	3301      	adds	r3, #1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a2a:	e002      	b.n	8005a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a2c:	4b05      	ldr	r3, [pc, #20]	@ (8005a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3750      	adds	r7, #80	@ 0x50
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3e:	bf00      	nop
 8005a40:	40023800 	.word	0x40023800
 8005a44:	00f42400 	.word	0x00f42400
 8005a48:	007a1200 	.word	0x007a1200

08005a4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a50:	4b03      	ldr	r3, [pc, #12]	@ (8005a60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a52:	681b      	ldr	r3, [r3, #0]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	20000000 	.word	0x20000000

08005a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a68:	f7ff fff0 	bl	8005a4c <HAL_RCC_GetHCLKFreq>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	4b05      	ldr	r3, [pc, #20]	@ (8005a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	0a9b      	lsrs	r3, r3, #10
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	4903      	ldr	r1, [pc, #12]	@ (8005a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a7a:	5ccb      	ldrb	r3, [r1, r3]
 8005a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40023800 	.word	0x40023800
 8005a88:	0800c820 	.word	0x0800c820

08005a8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a8c:	b084      	sub	sp, #16
 8005a8e:	b580      	push	{r7, lr}
 8005a90:	b084      	sub	sp, #16
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
 8005a96:	f107 001c 	add.w	r0, r7, #28
 8005a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d123      	bne.n	8005aee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f001 fae8 	bl	80070b8 <USB_CoreReset>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]
 8005aec:	e01b      	b.n	8005b26 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f001 fadc 	bl	80070b8 <USB_CoreReset>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b04:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b10:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b18:	e005      	b.n	8005b26 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b1e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b26:	7fbb      	ldrb	r3, [r7, #30]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d10b      	bne.n	8005b44 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f043 0206 	orr.w	r2, r3, #6
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f043 0220 	orr.w	r2, r3, #32
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b50:	b004      	add	sp, #16
 8005b52:	4770      	bx	lr

08005b54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d165      	bne.n	8005c34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	4a41      	ldr	r2, [pc, #260]	@ (8005c70 <USB_SetTurnaroundTime+0x11c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d906      	bls.n	8005b7e <USB_SetTurnaroundTime+0x2a>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	4a40      	ldr	r2, [pc, #256]	@ (8005c74 <USB_SetTurnaroundTime+0x120>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d202      	bcs.n	8005b7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005b78:	230f      	movs	r3, #15
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	e062      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4a3c      	ldr	r2, [pc, #240]	@ (8005c74 <USB_SetTurnaroundTime+0x120>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d306      	bcc.n	8005b94 <USB_SetTurnaroundTime+0x40>
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	4a3b      	ldr	r2, [pc, #236]	@ (8005c78 <USB_SetTurnaroundTime+0x124>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d202      	bcs.n	8005b94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005b8e:	230e      	movs	r3, #14
 8005b90:	617b      	str	r3, [r7, #20]
 8005b92:	e057      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	4a38      	ldr	r2, [pc, #224]	@ (8005c78 <USB_SetTurnaroundTime+0x124>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d306      	bcc.n	8005baa <USB_SetTurnaroundTime+0x56>
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	4a37      	ldr	r2, [pc, #220]	@ (8005c7c <USB_SetTurnaroundTime+0x128>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d202      	bcs.n	8005baa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005ba4:	230d      	movs	r3, #13
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e04c      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	4a33      	ldr	r2, [pc, #204]	@ (8005c7c <USB_SetTurnaroundTime+0x128>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d306      	bcc.n	8005bc0 <USB_SetTurnaroundTime+0x6c>
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4a32      	ldr	r2, [pc, #200]	@ (8005c80 <USB_SetTurnaroundTime+0x12c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d802      	bhi.n	8005bc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005bba:	230c      	movs	r3, #12
 8005bbc:	617b      	str	r3, [r7, #20]
 8005bbe:	e041      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	4a2f      	ldr	r2, [pc, #188]	@ (8005c80 <USB_SetTurnaroundTime+0x12c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d906      	bls.n	8005bd6 <USB_SetTurnaroundTime+0x82>
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4a2e      	ldr	r2, [pc, #184]	@ (8005c84 <USB_SetTurnaroundTime+0x130>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d802      	bhi.n	8005bd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005bd0:	230b      	movs	r3, #11
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e036      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	4a2a      	ldr	r2, [pc, #168]	@ (8005c84 <USB_SetTurnaroundTime+0x130>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d906      	bls.n	8005bec <USB_SetTurnaroundTime+0x98>
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4a29      	ldr	r2, [pc, #164]	@ (8005c88 <USB_SetTurnaroundTime+0x134>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d802      	bhi.n	8005bec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005be6:	230a      	movs	r3, #10
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	e02b      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4a26      	ldr	r2, [pc, #152]	@ (8005c88 <USB_SetTurnaroundTime+0x134>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d906      	bls.n	8005c02 <USB_SetTurnaroundTime+0xae>
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4a25      	ldr	r2, [pc, #148]	@ (8005c8c <USB_SetTurnaroundTime+0x138>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d202      	bcs.n	8005c02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005bfc:	2309      	movs	r3, #9
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	e020      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	4a21      	ldr	r2, [pc, #132]	@ (8005c8c <USB_SetTurnaroundTime+0x138>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d306      	bcc.n	8005c18 <USB_SetTurnaroundTime+0xc4>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	4a20      	ldr	r2, [pc, #128]	@ (8005c90 <USB_SetTurnaroundTime+0x13c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d802      	bhi.n	8005c18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c12:	2308      	movs	r3, #8
 8005c14:	617b      	str	r3, [r7, #20]
 8005c16:	e015      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	4a1d      	ldr	r2, [pc, #116]	@ (8005c90 <USB_SetTurnaroundTime+0x13c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d906      	bls.n	8005c2e <USB_SetTurnaroundTime+0xda>
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	4a1c      	ldr	r2, [pc, #112]	@ (8005c94 <USB_SetTurnaroundTime+0x140>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d202      	bcs.n	8005c2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005c28:	2307      	movs	r3, #7
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e00a      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005c2e:	2306      	movs	r3, #6
 8005c30:	617b      	str	r3, [r7, #20]
 8005c32:	e007      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005c34:	79fb      	ldrb	r3, [r7, #7]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005c3a:	2309      	movs	r3, #9
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e001      	b.n	8005c44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005c40:	2309      	movs	r3, #9
 8005c42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	68da      	ldr	r2, [r3, #12]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	029b      	lsls	r3, r3, #10
 8005c58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005c5c:	431a      	orrs	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	371c      	adds	r7, #28
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	00d8acbf 	.word	0x00d8acbf
 8005c74:	00e4e1c0 	.word	0x00e4e1c0
 8005c78:	00f42400 	.word	0x00f42400
 8005c7c:	01067380 	.word	0x01067380
 8005c80:	011a499f 	.word	0x011a499f
 8005c84:	01312cff 	.word	0x01312cff
 8005c88:	014ca43f 	.word	0x014ca43f
 8005c8c:	016e3600 	.word	0x016e3600
 8005c90:	01a6ab1f 	.word	0x01a6ab1f
 8005c94:	01e84800 	.word	0x01e84800

08005c98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	f043 0201 	orr.w	r2, r3, #1
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f023 0201 	bic.w	r2, r3, #1
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d115      	bne.n	8005d2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d0a:	200a      	movs	r0, #10
 8005d0c:	f7fb fff8 	bl	8001d00 <HAL_Delay>
      ms += 10U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	330a      	adds	r3, #10
 8005d14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f001 f93f 	bl	8006f9a <USB_GetMode>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d01e      	beq.n	8005d60 <USB_SetCurrentMode+0x84>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d26:	d9f0      	bls.n	8005d0a <USB_SetCurrentMode+0x2e>
 8005d28:	e01a      	b.n	8005d60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d115      	bne.n	8005d5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005d3c:	200a      	movs	r0, #10
 8005d3e:	f7fb ffdf 	bl	8001d00 <HAL_Delay>
      ms += 10U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	330a      	adds	r3, #10
 8005d46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f001 f926 	bl	8006f9a <USB_GetMode>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d005      	beq.n	8005d60 <USB_SetCurrentMode+0x84>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2bc7      	cmp	r3, #199	@ 0xc7
 8005d58:	d9f0      	bls.n	8005d3c <USB_SetCurrentMode+0x60>
 8005d5a:	e001      	b.n	8005d60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e005      	b.n	8005d6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2bc8      	cmp	r3, #200	@ 0xc8
 8005d64:	d101      	bne.n	8005d6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e000      	b.n	8005d6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d74:	b084      	sub	sp, #16
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b086      	sub	sp, #24
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	e009      	b.n	8005da8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	3340      	adds	r3, #64	@ 0x40
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	3301      	adds	r3, #1
 8005da6:	613b      	str	r3, [r7, #16]
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	2b0e      	cmp	r3, #14
 8005dac:	d9f2      	bls.n	8005d94 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005dae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d11c      	bne.n	8005df0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005dc4:	f043 0302 	orr.w	r3, r3, #2
 8005dc8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dce:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dee:	e00b      	b.n	8005e08 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005df4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e0e:	461a      	mov	r2, r3
 8005e10:	2300      	movs	r3, #0
 8005e12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d10d      	bne.n	8005e38 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005e1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005e24:	2100      	movs	r1, #0
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 f968 	bl	80060fc <USB_SetDevSpeed>
 8005e2c:	e008      	b.n	8005e40 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005e2e:	2101      	movs	r1, #1
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f963 	bl	80060fc <USB_SetDevSpeed>
 8005e36:	e003      	b.n	8005e40 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005e38:	2103      	movs	r1, #3
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f95e 	bl	80060fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e40:	2110      	movs	r1, #16
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f8fa 	bl	800603c <USB_FlushTxFifo>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d001      	beq.n	8005e52 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f924 	bl	80060a0 <USB_FlushRxFifo>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e68:	461a      	mov	r2, r3
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e80:	461a      	mov	r2, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e86:	2300      	movs	r3, #0
 8005e88:	613b      	str	r3, [r7, #16]
 8005e8a:	e043      	b.n	8005f14 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ea2:	d118      	bne.n	8005ed6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d10a      	bne.n	8005ec0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005ebc:	6013      	str	r3, [r2, #0]
 8005ebe:	e013      	b.n	8005ee8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005ed2:	6013      	str	r3, [r2, #0]
 8005ed4:	e008      	b.n	8005ee8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f06:	461a      	mov	r2, r3
 8005f08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	3301      	adds	r3, #1
 8005f12:	613b      	str	r3, [r7, #16]
 8005f14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005f18:	461a      	mov	r2, r3
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d3b5      	bcc.n	8005e8c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	e043      	b.n	8005fae <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f3c:	d118      	bne.n	8005f70 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f50:	461a      	mov	r2, r3
 8005f52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005f56:	6013      	str	r3, [r2, #0]
 8005f58:	e013      	b.n	8005f82 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f66:	461a      	mov	r2, r3
 8005f68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005f6c:	6013      	str	r3, [r2, #0]
 8005f6e:	e008      	b.n	8005f82 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	015a      	lsls	r2, r3, #5
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	4413      	add	r3, r2
 8005f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f8e:	461a      	mov	r2, r3
 8005f90:	2300      	movs	r3, #0
 8005f92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005fa6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	3301      	adds	r3, #1
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d3b5      	bcc.n	8005f26 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fcc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005fda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d105      	bne.n	8005ff0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f043 0210 	orr.w	r2, r3, #16
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699a      	ldr	r2, [r3, #24]
 8005ff4:	4b10      	ldr	r3, [pc, #64]	@ (8006038 <USB_DevInit+0x2c4>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ffc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f043 0208 	orr.w	r2, r3, #8
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006010:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006014:	2b01      	cmp	r3, #1
 8006016:	d107      	bne.n	8006028 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006020:	f043 0304 	orr.w	r3, r3, #4
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006028:	7dfb      	ldrb	r3, [r7, #23]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006034:	b004      	add	sp, #16
 8006036:	4770      	bx	lr
 8006038:	803c3800 	.word	0x803c3800

0800603c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800603c:	b480      	push	{r7}
 800603e:	b085      	sub	sp, #20
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006046:	2300      	movs	r3, #0
 8006048:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	3301      	adds	r3, #1
 800604e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006056:	d901      	bls.n	800605c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e01b      	b.n	8006094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b00      	cmp	r3, #0
 8006062:	daf2      	bge.n	800604a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	019b      	lsls	r3, r3, #6
 800606c:	f043 0220 	orr.w	r2, r3, #32
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3301      	adds	r3, #1
 8006078:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006080:	d901      	bls.n	8006086 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e006      	b.n	8006094 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b20      	cmp	r3, #32
 8006090:	d0f0      	beq.n	8006074 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b085      	sub	sp, #20
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	3301      	adds	r3, #1
 80060b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060b8:	d901      	bls.n	80060be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e018      	b.n	80060f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	daf2      	bge.n	80060ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2210      	movs	r2, #16
 80060ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80060dc:	d901      	bls.n	80060e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e006      	b.n	80060f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0310 	and.w	r3, r3, #16
 80060ea:	2b10      	cmp	r3, #16
 80060ec:	d0f0      	beq.n	80060d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	460b      	mov	r3, r1
 8006106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800611c:	4313      	orrs	r3, r2
 800611e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800612e:	b480      	push	{r7}
 8006130:	b087      	sub	sp, #28
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d102      	bne.n	8006154 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
 8006152:	e00a      	b.n	800616a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b02      	cmp	r3, #2
 8006158:	d002      	beq.n	8006160 <USB_GetDevSpeed+0x32>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b06      	cmp	r3, #6
 800615e:	d102      	bne.n	8006166 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006160:	2302      	movs	r3, #2
 8006162:	75fb      	strb	r3, [r7, #23]
 8006164:	e001      	b.n	800616a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006166:	230f      	movs	r3, #15
 8006168:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
}
 800616c:	4618      	mov	r0, r3
 800616e:	371c      	adds	r7, #28
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d13a      	bne.n	800620a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	2101      	movs	r1, #1
 80061a6:	fa01 f303 	lsl.w	r3, r1, r3
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	68f9      	ldr	r1, [r7, #12]
 80061ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80061b2:	4313      	orrs	r3, r2
 80061b4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d155      	bne.n	8006278 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	015a      	lsls	r2, r3, #5
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4413      	add	r3, r2
 80061d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	791b      	ldrb	r3, [r3, #4]
 80061e6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061e8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	059b      	lsls	r3, r3, #22
 80061ee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80061f0:	4313      	orrs	r3, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80061fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	e036      	b.n	8006278 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006210:	69da      	ldr	r2, [r3, #28]
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	2101      	movs	r1, #1
 800621c:	fa01 f303 	lsl.w	r3, r1, r3
 8006220:	041b      	lsls	r3, r3, #16
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006228:	4313      	orrs	r3, r2
 800622a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d11a      	bne.n	8006278 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	791b      	ldrb	r3, [r3, #4]
 800625c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800625e:	430b      	orrs	r3, r1
 8006260:	4313      	orrs	r3, r2
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	0151      	lsls	r1, r2, #5
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	440a      	add	r2, r1
 800626a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800626e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006272:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006276:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006278:	2300      	movs	r3, #0
}
 800627a:	4618      	mov	r0, r3
 800627c:	3714      	adds	r7, #20
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d161      	bne.n	8006368 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062ba:	d11f      	bne.n	80062fc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	0151      	lsls	r1, r2, #5
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	440a      	add	r2, r1
 80062d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80062da:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062fa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006302:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f003 030f 	and.w	r3, r3, #15
 800630c:	2101      	movs	r1, #1
 800630e:	fa01 f303 	lsl.w	r3, r1, r3
 8006312:	b29b      	uxth	r3, r3
 8006314:	43db      	mvns	r3, r3
 8006316:	68f9      	ldr	r1, [r7, #12]
 8006318:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800631c:	4013      	ands	r3, r2
 800631e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006326:	69da      	ldr	r2, [r3, #28]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	f003 030f 	and.w	r3, r3, #15
 8006330:	2101      	movs	r1, #1
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	b29b      	uxth	r3, r3
 8006338:	43db      	mvns	r3, r3
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006340:	4013      	ands	r3, r2
 8006342:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	0159      	lsls	r1, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	440b      	add	r3, r1
 800635a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800635e:	4619      	mov	r1, r3
 8006360:	4b35      	ldr	r3, [pc, #212]	@ (8006438 <USB_DeactivateEndpoint+0x1b0>)
 8006362:	4013      	ands	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
 8006366:	e060      	b.n	800642a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	015a      	lsls	r2, r3, #5
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800637e:	d11f      	bne.n	80063c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	0151      	lsls	r1, r2, #5
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	440a      	add	r2, r1
 8006396:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800639a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800639e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80063be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	f003 030f 	and.w	r3, r3, #15
 80063d0:	2101      	movs	r1, #1
 80063d2:	fa01 f303 	lsl.w	r3, r1, r3
 80063d6:	041b      	lsls	r3, r3, #16
 80063d8:	43db      	mvns	r3, r3
 80063da:	68f9      	ldr	r1, [r7, #12]
 80063dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063e0:	4013      	ands	r3, r2
 80063e2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ea:	69da      	ldr	r2, [r3, #28]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f003 030f 	and.w	r3, r3, #15
 80063f4:	2101      	movs	r1, #1
 80063f6:	fa01 f303 	lsl.w	r3, r1, r3
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	43db      	mvns	r3, r3
 80063fe:	68f9      	ldr	r1, [r7, #12]
 8006400:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006404:	4013      	ands	r3, r2
 8006406:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	0159      	lsls	r1, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	440b      	add	r3, r1
 800641e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006422:	4619      	mov	r1, r3
 8006424:	4b05      	ldr	r3, [pc, #20]	@ (800643c <USB_DeactivateEndpoint+0x1b4>)
 8006426:	4013      	ands	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	ec337800 	.word	0xec337800
 800643c:	eff37800 	.word	0xeff37800

08006440 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b08a      	sub	sp, #40	@ 0x28
 8006444:	af02      	add	r7, sp, #8
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	4613      	mov	r3, r2
 800644c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	2b01      	cmp	r3, #1
 800645e:	f040 817f 	bne.w	8006760 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d132      	bne.n	80064d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	015a      	lsls	r2, r3, #5
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	4413      	add	r3, r2
 8006472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	0151      	lsls	r1, r2, #5
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	440a      	add	r2, r1
 8006480:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006484:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006488:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800648c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	015a      	lsls	r2, r3, #5
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	4413      	add	r3, r2
 8006496:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	69ba      	ldr	r2, [r7, #24]
 800649e:	0151      	lsls	r1, r2, #5
 80064a0:	69fa      	ldr	r2, [r7, #28]
 80064a2:	440a      	add	r2, r1
 80064a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80064ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064c8:	0cdb      	lsrs	r3, r3, #19
 80064ca:	04db      	lsls	r3, r3, #19
 80064cc:	6113      	str	r3, [r2, #16]
 80064ce:	e097      	b.n	8006600 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	015a      	lsls	r2, r3, #5
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	4413      	add	r3, r2
 80064d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	69ba      	ldr	r2, [r7, #24]
 80064e0:	0151      	lsls	r1, r2, #5
 80064e2:	69fa      	ldr	r2, [r7, #28]
 80064e4:	440a      	add	r2, r1
 80064e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ea:	0cdb      	lsrs	r3, r3, #19
 80064ec:	04db      	lsls	r3, r3, #19
 80064ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	015a      	lsls	r2, r3, #5
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	4413      	add	r3, r2
 80064f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	69ba      	ldr	r2, [r7, #24]
 8006500:	0151      	lsls	r1, r2, #5
 8006502:	69fa      	ldr	r2, [r7, #28]
 8006504:	440a      	add	r2, r1
 8006506:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800650a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800650e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006512:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d11a      	bne.n	8006550 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	691a      	ldr	r2, [r3, #16]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	429a      	cmp	r2, r3
 8006524:	d903      	bls.n	800652e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	689a      	ldr	r2, [r3, #8]
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	015a      	lsls	r2, r3, #5
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	4413      	add	r3, r2
 8006536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	69ba      	ldr	r2, [r7, #24]
 800653e:	0151      	lsls	r1, r2, #5
 8006540:	69fa      	ldr	r2, [r7, #28]
 8006542:	440a      	add	r2, r1
 8006544:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006548:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800654c:	6113      	str	r3, [r2, #16]
 800654e:	e044      	b.n	80065da <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	691a      	ldr	r2, [r3, #16]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4413      	add	r3, r2
 800655a:	1e5a      	subs	r2, r3, #1
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	fbb2 f3f3 	udiv	r3, r2, r3
 8006564:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	8afb      	ldrh	r3, [r7, #22]
 8006576:	04d9      	lsls	r1, r3, #19
 8006578:	4ba4      	ldr	r3, [pc, #656]	@ (800680c <USB_EPStartXfer+0x3cc>)
 800657a:	400b      	ands	r3, r1
 800657c:	69b9      	ldr	r1, [r7, #24]
 800657e:	0148      	lsls	r0, r1, #5
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	4401      	add	r1, r0
 8006584:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006588:	4313      	orrs	r3, r2
 800658a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	791b      	ldrb	r3, [r3, #4]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d122      	bne.n	80065da <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	69fa      	ldr	r2, [r7, #28]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065ae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80065b2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	8afb      	ldrh	r3, [r7, #22]
 80065c4:	075b      	lsls	r3, r3, #29
 80065c6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80065ca:	69b9      	ldr	r1, [r7, #24]
 80065cc:	0148      	lsls	r0, r1, #5
 80065ce:	69f9      	ldr	r1, [r7, #28]
 80065d0:	4401      	add	r1, r0
 80065d2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80065d6:	4313      	orrs	r3, r2
 80065d8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e6:	691a      	ldr	r2, [r3, #16]
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065f0:	69b9      	ldr	r1, [r7, #24]
 80065f2:	0148      	lsls	r0, r1, #5
 80065f4:	69f9      	ldr	r1, [r7, #28]
 80065f6:	4401      	add	r1, r0
 80065f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80065fc:	4313      	orrs	r3, r2
 80065fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006600:	79fb      	ldrb	r3, [r7, #7]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d14b      	bne.n	800669e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d009      	beq.n	8006622 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661a:	461a      	mov	r2, r3
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	791b      	ldrb	r3, [r3, #4]
 8006626:	2b01      	cmp	r3, #1
 8006628:	d128      	bne.n	800667c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006636:	2b00      	cmp	r3, #0
 8006638:	d110      	bne.n	800665c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	015a      	lsls	r2, r3, #5
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	4413      	add	r3, r2
 8006642:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	0151      	lsls	r1, r2, #5
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	440a      	add	r2, r1
 8006650:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006654:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006658:	6013      	str	r3, [r2, #0]
 800665a:	e00f      	b.n	800667c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800667a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006696:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e166      	b.n	800696c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066b8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80066bc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	791b      	ldrb	r3, [r3, #4]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d015      	beq.n	80066f2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 814e 	beq.w	800696c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	2101      	movs	r1, #1
 80066e2:	fa01 f303 	lsl.w	r3, r1, r3
 80066e6:	69f9      	ldr	r1, [r7, #28]
 80066e8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066ec:	4313      	orrs	r3, r2
 80066ee:	634b      	str	r3, [r1, #52]	@ 0x34
 80066f0:	e13c      	b.n	800696c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d110      	bne.n	8006724 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800671c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	e00f      	b.n	8006744 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800673e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006742:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	68d9      	ldr	r1, [r3, #12]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	781a      	ldrb	r2, [r3, #0]
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	b298      	uxth	r0, r3
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4603      	mov	r3, r0
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f9b9 	bl	8006ad0 <USB_WritePacket>
 800675e:	e105      	b.n	800696c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	69ba      	ldr	r2, [r7, #24]
 8006770:	0151      	lsls	r1, r2, #5
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	440a      	add	r2, r1
 8006776:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800677a:	0cdb      	lsrs	r3, r3, #19
 800677c:	04db      	lsls	r3, r3, #19
 800677e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	015a      	lsls	r2, r3, #5
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	69ba      	ldr	r2, [r7, #24]
 8006790:	0151      	lsls	r1, r2, #5
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	440a      	add	r2, r1
 8006796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800679a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800679e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067a2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d132      	bne.n	8006810 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d003      	beq.n	80067ba <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	689a      	ldr	r2, [r3, #8]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067ce:	691a      	ldr	r2, [r3, #16]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067d8:	69b9      	ldr	r1, [r7, #24]
 80067da:	0148      	lsls	r0, r1, #5
 80067dc:	69f9      	ldr	r1, [r7, #28]
 80067de:	4401      	add	r1, r0
 80067e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80067e4:	4313      	orrs	r3, r2
 80067e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	69ba      	ldr	r2, [r7, #24]
 80067f8:	0151      	lsls	r1, r2, #5
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	440a      	add	r2, r1
 80067fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006802:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006806:	6113      	str	r3, [r2, #16]
 8006808:	e062      	b.n	80068d0 <USB_EPStartXfer+0x490>
 800680a:	bf00      	nop
 800680c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d123      	bne.n	8006860 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006824:	691a      	ldr	r2, [r3, #16]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682e:	69b9      	ldr	r1, [r7, #24]
 8006830:	0148      	lsls	r0, r1, #5
 8006832:	69f9      	ldr	r1, [r7, #28]
 8006834:	4401      	add	r1, r0
 8006836:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800683a:	4313      	orrs	r3, r2
 800683c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	69ba      	ldr	r2, [r7, #24]
 800684e:	0151      	lsls	r1, r2, #5
 8006850:	69fa      	ldr	r2, [r7, #28]
 8006852:	440a      	add	r2, r1
 8006854:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006858:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800685c:	6113      	str	r3, [r2, #16]
 800685e:	e037      	b.n	80068d0 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	691a      	ldr	r2, [r3, #16]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	4413      	add	r3, r2
 800686a:	1e5a      	subs	r2, r3, #1
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	fbb2 f3f3 	udiv	r3, r2, r3
 8006874:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	8afa      	ldrh	r2, [r7, #22]
 800687c:	fb03 f202 	mul.w	r2, r3, r2
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	015a      	lsls	r2, r3, #5
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	4413      	add	r3, r2
 800688c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006890:	691a      	ldr	r2, [r3, #16]
 8006892:	8afb      	ldrh	r3, [r7, #22]
 8006894:	04d9      	lsls	r1, r3, #19
 8006896:	4b38      	ldr	r3, [pc, #224]	@ (8006978 <USB_EPStartXfer+0x538>)
 8006898:	400b      	ands	r3, r1
 800689a:	69b9      	ldr	r1, [r7, #24]
 800689c:	0148      	lsls	r0, r1, #5
 800689e:	69f9      	ldr	r1, [r7, #28]
 80068a0:	4401      	add	r1, r0
 80068a2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068a6:	4313      	orrs	r3, r2
 80068a8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6a1b      	ldr	r3, [r3, #32]
 80068bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c0:	69b9      	ldr	r1, [r7, #24]
 80068c2:	0148      	lsls	r0, r1, #5
 80068c4:	69f9      	ldr	r1, [r7, #28]
 80068c6:	4401      	add	r1, r0
 80068c8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80068cc:	4313      	orrs	r3, r2
 80068ce:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80068d0:	79fb      	ldrb	r3, [r7, #7]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d10d      	bne.n	80068f2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d009      	beq.n	80068f2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	68d9      	ldr	r1, [r3, #12]
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	460a      	mov	r2, r1
 80068f0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	791b      	ldrb	r3, [r3, #4]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d128      	bne.n	800694c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006906:	2b00      	cmp	r3, #0
 8006908:	d110      	bne.n	800692c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	69fa      	ldr	r2, [r7, #28]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006924:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e00f      	b.n	800694c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800694a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800694c:	69bb      	ldr	r3, [r7, #24]
 800694e:	015a      	lsls	r2, r3, #5
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	4413      	add	r3, r2
 8006954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69ba      	ldr	r2, [r7, #24]
 800695c:	0151      	lsls	r1, r2, #5
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	440a      	add	r2, r1
 8006962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006966:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800696a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3720      	adds	r7, #32
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	1ff80000 	.word	0x1ff80000

0800697c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d14a      	bne.n	8006a30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069b2:	f040 8086 	bne.w	8006ac2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	683a      	ldr	r2, [r7, #0]
 80069c8:	7812      	ldrb	r2, [r2, #0]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069d8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	683a      	ldr	r2, [r7, #0]
 80069ec:	7812      	ldrb	r2, [r2, #0]
 80069ee:	0151      	lsls	r1, r2, #5
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	440a      	add	r2, r1
 80069f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80069fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3301      	adds	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d902      	bls.n	8006a14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
          break;
 8006a12:	e056      	b.n	8006ac2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	015a      	lsls	r2, r3, #5
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a2c:	d0e7      	beq.n	80069fe <USB_EPStopXfer+0x82>
 8006a2e:	e048      	b.n	8006ac2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a48:	d13b      	bne.n	8006ac2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	683a      	ldr	r2, [r7, #0]
 8006a5c:	7812      	ldrb	r2, [r2, #0]
 8006a5e:	0151      	lsls	r1, r2, #5
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	440a      	add	r2, r1
 8006a64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a68:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	0151      	lsls	r1, r2, #5
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	440a      	add	r2, r1
 8006a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	3301      	adds	r3, #1
 8006a96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d902      	bls.n	8006aa8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
          break;
 8006aa6:	e00c      	b.n	8006ac2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006abc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ac0:	d0e7      	beq.n	8006a92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b089      	sub	sp, #36	@ 0x24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4611      	mov	r1, r2
 8006adc:	461a      	mov	r2, r3
 8006ade:	460b      	mov	r3, r1
 8006ae0:	71fb      	strb	r3, [r7, #7]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006aee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d123      	bne.n	8006b3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006af6:	88bb      	ldrh	r3, [r7, #4]
 8006af8:	3303      	adds	r3, #3
 8006afa:	089b      	lsrs	r3, r3, #2
 8006afc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006afe:	2300      	movs	r3, #0
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e018      	b.n	8006b36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	031a      	lsls	r2, r3, #12
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b10:	461a      	mov	r2, r3
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	3301      	adds	r3, #1
 8006b22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	3301      	adds	r3, #1
 8006b28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	3301      	adds	r3, #1
 8006b34:	61bb      	str	r3, [r7, #24]
 8006b36:	69ba      	ldr	r2, [r7, #24]
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d3e2      	bcc.n	8006b04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3724      	adds	r7, #36	@ 0x24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b08b      	sub	sp, #44	@ 0x2c
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	60f8      	str	r0, [r7, #12]
 8006b54:	60b9      	str	r1, [r7, #8]
 8006b56:	4613      	mov	r3, r2
 8006b58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	089b      	lsrs	r3, r3, #2
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006b6a:	88fb      	ldrh	r3, [r7, #6]
 8006b6c:	f003 0303 	and.w	r3, r3, #3
 8006b70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006b72:	2300      	movs	r3, #0
 8006b74:	623b      	str	r3, [r7, #32]
 8006b76:	e014      	b.n	8006ba2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	601a      	str	r2, [r3, #0]
    pDest++;
 8006b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b86:	3301      	adds	r3, #1
 8006b88:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b92:	3301      	adds	r3, #1
 8006b94:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b98:	3301      	adds	r3, #1
 8006b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	623b      	str	r3, [r7, #32]
 8006ba2:	6a3a      	ldr	r2, [r7, #32]
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d3e6      	bcc.n	8006b78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006baa:	8bfb      	ldrh	r3, [r7, #30]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01e      	beq.n	8006bee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006bb4:	69bb      	ldr	r3, [r7, #24]
 8006bb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006bba:	461a      	mov	r2, r3
 8006bbc:	f107 0310 	add.w	r3, r7, #16
 8006bc0:	6812      	ldr	r2, [r2, #0]
 8006bc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	00db      	lsls	r3, r3, #3
 8006bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bd4:	701a      	strb	r2, [r3, #0]
      i++;
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	623b      	str	r3, [r7, #32]
      pDest++;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bde:	3301      	adds	r3, #1
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006be2:	8bfb      	ldrh	r3, [r7, #30]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006be8:	8bfb      	ldrh	r3, [r7, #30]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1ea      	bne.n	8006bc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	372c      	adds	r7, #44	@ 0x2c
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b085      	sub	sp, #20
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d12c      	bne.n	8006c72 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	db12      	blt.n	8006c50 <USB_EPSetStall+0x54>
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00f      	beq.n	8006c50 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68ba      	ldr	r2, [r7, #8]
 8006c40:	0151      	lsls	r1, r2, #5
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	440a      	add	r2, r1
 8006c46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006c4e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	015a      	lsls	r2, r3, #5
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	0151      	lsls	r1, r2, #5
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	440a      	add	r2, r1
 8006c66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c6e:	6013      	str	r3, [r2, #0]
 8006c70:	e02b      	b.n	8006cca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	db12      	blt.n	8006caa <USB_EPSetStall+0xae>
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00f      	beq.n	8006caa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	015a      	lsls	r2, r3, #5
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4413      	add	r3, r2
 8006c92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	0151      	lsls	r1, r2, #5
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	440a      	add	r2, r1
 8006ca0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ca4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006ca8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	0151      	lsls	r1, r2, #5
 8006cbc:	68fa      	ldr	r2, [r7, #12]
 8006cbe:	440a      	add	r2, r1
 8006cc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006cc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cc8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	785b      	ldrb	r3, [r3, #1]
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d128      	bne.n	8006d46 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	0151      	lsls	r1, r2, #5
 8006d06:	68fa      	ldr	r2, [r7, #12]
 8006d08:	440a      	add	r2, r1
 8006d0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d12:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	791b      	ldrb	r3, [r3, #4]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d003      	beq.n	8006d24 <USB_EPClearStall+0x4c>
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	791b      	ldrb	r3, [r3, #4]
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d138      	bne.n	8006d96 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	0151      	lsls	r1, r2, #5
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	440a      	add	r2, r1
 8006d3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d42:	6013      	str	r3, [r2, #0]
 8006d44:	e027      	b.n	8006d96 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	015a      	lsls	r2, r3, #5
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	0151      	lsls	r1, r2, #5
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	440a      	add	r2, r1
 8006d5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d64:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	791b      	ldrb	r3, [r3, #4]
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d003      	beq.n	8006d76 <USB_EPClearStall+0x9e>
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	791b      	ldrb	r3, [r3, #4]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d10f      	bne.n	8006d96 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	015a      	lsls	r2, r3, #5
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	0151      	lsls	r1, r2, #5
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	440a      	add	r2, r1
 8006d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d94:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3714      	adds	r7, #20
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr

08006da4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	460b      	mov	r3, r1
 8006dae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dc2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006dc6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	78fb      	ldrb	r3, [r7, #3]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006dd8:	68f9      	ldr	r1, [r7, #12]
 8006dda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006dde:	4313      	orrs	r3, r2
 8006de0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b085      	sub	sp, #20
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e1e:	f023 0302 	bic.w	r3, r3, #2
 8006e22:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e24:	2300      	movs	r3, #0
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b085      	sub	sp, #20
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	68fa      	ldr	r2, [r7, #12]
 8006e48:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006e4c:	f023 0303 	bic.w	r3, r3, #3
 8006e50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	68fa      	ldr	r2, [r7, #12]
 8006e5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e60:	f043 0302 	orr.w	r3, r3, #2
 8006e64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr

08006e74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3714      	adds	r7, #20
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b085      	sub	sp, #20
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	0c1b      	lsrs	r3, r3, #16
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3714      	adds	r7, #20
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr

08006ece <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b085      	sub	sp, #20
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006eea:	69db      	ldr	r3, [r3, #28]
 8006eec:	68ba      	ldr	r2, [r7, #8]
 8006eee:	4013      	ands	r3, r2
 8006ef0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	b29b      	uxth	r3, r3
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b085      	sub	sp, #20
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	6078      	str	r0, [r7, #4]
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006f12:	78fb      	ldrb	r3, [r7, #3]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f28:	695b      	ldr	r3, [r3, #20]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f30:	68bb      	ldr	r3, [r7, #8]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr

08006f3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b087      	sub	sp, #28
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	460b      	mov	r3, r1
 8006f48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f54:	691b      	ldr	r3, [r3, #16]
 8006f56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006f62:	78fb      	ldrb	r3, [r7, #3]
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f6e:	01db      	lsls	r3, r3, #7
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	693a      	ldr	r2, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006f78:	78fb      	ldrb	r3, [r7, #3]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	371c      	adds	r7, #28
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f9a:	b480      	push	{r7}
 8006f9c:	b083      	sub	sp, #12
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	695b      	ldr	r3, [r3, #20]
 8006fa6:	f003 0301 	and.w	r3, r3, #1
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	370c      	adds	r7, #12
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fb6:	b480      	push	{r7}
 8006fb8:	b085      	sub	sp, #20
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fd0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006fd4:	f023 0307 	bic.w	r3, r3, #7
 8006fd8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3714      	adds	r7, #20
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffa:	4770      	bx	lr

08006ffc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	460b      	mov	r3, r1
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	333c      	adds	r3, #60	@ 0x3c
 8007012:	3304      	adds	r3, #4
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	4a26      	ldr	r2, [pc, #152]	@ (80070b4 <USB_EP0_OutStart+0xb8>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d90a      	bls.n	8007036 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800702c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007030:	d101      	bne.n	8007036 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e037      	b.n	80070a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703c:	461a      	mov	r2, r3
 800703e:	2300      	movs	r3, #0
 8007040:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007050:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007054:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	697a      	ldr	r2, [r7, #20]
 8007060:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007064:	f043 0318 	orr.w	r3, r3, #24
 8007068:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	697a      	ldr	r2, [r7, #20]
 8007074:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007078:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800707c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800707e:	7afb      	ldrb	r3, [r7, #11]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d10f      	bne.n	80070a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800708a:	461a      	mov	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800709e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80070a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	371c      	adds	r7, #28
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	4f54300a 	.word	0x4f54300a

080070b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070c0:	2300      	movs	r3, #0
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d0:	d901      	bls.n	80070d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e022      	b.n	800711c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	daf2      	bge.n	80070c4 <USB_CoreReset+0xc>

  count = 10U;
 80070de:	230a      	movs	r3, #10
 80070e0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80070e2:	e002      	b.n	80070ea <USB_CoreReset+0x32>
  {
    count--;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1f9      	bne.n	80070e4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	f043 0201 	orr.w	r2, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	3301      	adds	r3, #1
 8007100:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007108:	d901      	bls.n	800710e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e006      	b.n	800711c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	2b01      	cmp	r3, #1
 8007118:	d0f0      	beq.n	80070fc <USB_CoreReset+0x44>

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3714      	adds	r7, #20
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	460b      	mov	r3, r1
 8007132:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007134:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007138:	f002 fc6e 	bl	8009a18 <USBD_static_malloc>
 800713c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d109      	bne.n	8007158 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	32b0      	adds	r2, #176	@ 0xb0
 800714e:	2100      	movs	r1, #0
 8007150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007154:	2302      	movs	r3, #2
 8007156:	e0d4      	b.n	8007302 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007158:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800715c:	2100      	movs	r1, #0
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f003 fa49 	bl	800a5f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	32b0      	adds	r2, #176	@ 0xb0
 800716e:	68f9      	ldr	r1, [r7, #12]
 8007170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	32b0      	adds	r2, #176	@ 0xb0
 800717e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7c1b      	ldrb	r3, [r3, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d138      	bne.n	8007202 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007190:	4b5e      	ldr	r3, [pc, #376]	@ (800730c <USBD_CDC_Init+0x1e4>)
 8007192:	7819      	ldrb	r1, [r3, #0]
 8007194:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007198:	2202      	movs	r2, #2
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f002 fb19 	bl	80097d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80071a0:	4b5a      	ldr	r3, [pc, #360]	@ (800730c <USBD_CDC_Init+0x1e4>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f003 020f 	and.w	r2, r3, #15
 80071a8:	6879      	ldr	r1, [r7, #4]
 80071aa:	4613      	mov	r3, r2
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	4413      	add	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	440b      	add	r3, r1
 80071b4:	3323      	adds	r3, #35	@ 0x23
 80071b6:	2201      	movs	r2, #1
 80071b8:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80071ba:	4b55      	ldr	r3, [pc, #340]	@ (8007310 <USBD_CDC_Init+0x1e8>)
 80071bc:	7819      	ldrb	r1, [r3, #0]
 80071be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80071c2:	2202      	movs	r2, #2
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f002 fb04 	bl	80097d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80071ca:	4b51      	ldr	r3, [pc, #324]	@ (8007310 <USBD_CDC_Init+0x1e8>)
 80071cc:	781b      	ldrb	r3, [r3, #0]
 80071ce:	f003 020f 	and.w	r2, r3, #15
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80071e2:	2201      	movs	r2, #1
 80071e4:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80071e6:	4b4b      	ldr	r3, [pc, #300]	@ (8007314 <USBD_CDC_Init+0x1ec>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	f003 020f 	and.w	r2, r3, #15
 80071ee:	6879      	ldr	r1, [r7, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	440b      	add	r3, r1
 80071fa:	331c      	adds	r3, #28
 80071fc:	2210      	movs	r2, #16
 80071fe:	601a      	str	r2, [r3, #0]
 8007200:	e035      	b.n	800726e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007202:	4b42      	ldr	r3, [pc, #264]	@ (800730c <USBD_CDC_Init+0x1e4>)
 8007204:	7819      	ldrb	r1, [r3, #0]
 8007206:	2340      	movs	r3, #64	@ 0x40
 8007208:	2202      	movs	r2, #2
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f002 fae1 	bl	80097d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007210:	4b3e      	ldr	r3, [pc, #248]	@ (800730c <USBD_CDC_Init+0x1e4>)
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	f003 020f 	and.w	r2, r3, #15
 8007218:	6879      	ldr	r1, [r7, #4]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	3323      	adds	r3, #35	@ 0x23
 8007226:	2201      	movs	r2, #1
 8007228:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800722a:	4b39      	ldr	r3, [pc, #228]	@ (8007310 <USBD_CDC_Init+0x1e8>)
 800722c:	7819      	ldrb	r1, [r3, #0]
 800722e:	2340      	movs	r3, #64	@ 0x40
 8007230:	2202      	movs	r2, #2
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f002 facd 	bl	80097d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007238:	4b35      	ldr	r3, [pc, #212]	@ (8007310 <USBD_CDC_Init+0x1e8>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	f003 020f 	and.w	r2, r3, #15
 8007240:	6879      	ldr	r1, [r7, #4]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007250:	2201      	movs	r2, #1
 8007252:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007254:	4b2f      	ldr	r3, [pc, #188]	@ (8007314 <USBD_CDC_Init+0x1ec>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	f003 020f 	and.w	r2, r3, #15
 800725c:	6879      	ldr	r1, [r7, #4]
 800725e:	4613      	mov	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	440b      	add	r3, r1
 8007268:	331c      	adds	r3, #28
 800726a:	2210      	movs	r2, #16
 800726c:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800726e:	4b29      	ldr	r3, [pc, #164]	@ (8007314 <USBD_CDC_Init+0x1ec>)
 8007270:	7819      	ldrb	r1, [r3, #0]
 8007272:	2308      	movs	r3, #8
 8007274:	2203      	movs	r2, #3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f002 faab 	bl	80097d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800727c:	4b25      	ldr	r3, [pc, #148]	@ (8007314 <USBD_CDC_Init+0x1ec>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f003 020f 	and.w	r2, r3, #15
 8007284:	6879      	ldr	r1, [r7, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	440b      	add	r3, r1
 8007290:	3323      	adds	r3, #35	@ 0x23
 8007292:	2201      	movs	r2, #1
 8007294:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2200      	movs	r2, #0
 800729a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	33b0      	adds	r3, #176	@ 0xb0
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4413      	add	r3, r2
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80072cc:	2302      	movs	r3, #2
 80072ce:	e018      	b.n	8007302 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7c1b      	ldrb	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072d8:	4b0d      	ldr	r3, [pc, #52]	@ (8007310 <USBD_CDC_Init+0x1e8>)
 80072da:	7819      	ldrb	r1, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f002 fb62 	bl	80099b0 <USBD_LL_PrepareReceive>
 80072ec:	e008      	b.n	8007300 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80072ee:	4b08      	ldr	r3, [pc, #32]	@ (8007310 <USBD_CDC_Init+0x1e8>)
 80072f0:	7819      	ldrb	r1, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80072f8:	2340      	movs	r3, #64	@ 0x40
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f002 fb58 	bl	80099b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007300:	2300      	movs	r3, #0
}
 8007302:	4618      	mov	r0, r3
 8007304:	3710      	adds	r7, #16
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000093 	.word	0x20000093
 8007310:	20000094 	.word	0x20000094
 8007314:	20000095 	.word	0x20000095

08007318 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007324:	4b3a      	ldr	r3, [pc, #232]	@ (8007410 <USBD_CDC_DeInit+0xf8>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	4619      	mov	r1, r3
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f002 fa77 	bl	800981e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007330:	4b37      	ldr	r3, [pc, #220]	@ (8007410 <USBD_CDC_DeInit+0xf8>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	f003 020f 	and.w	r2, r3, #15
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	440b      	add	r3, r1
 8007344:	3323      	adds	r3, #35	@ 0x23
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800734a:	4b32      	ldr	r3, [pc, #200]	@ (8007414 <USBD_CDC_DeInit+0xfc>)
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	4619      	mov	r1, r3
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f002 fa64 	bl	800981e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007356:	4b2f      	ldr	r3, [pc, #188]	@ (8007414 <USBD_CDC_DeInit+0xfc>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 020f 	and.w	r2, r3, #15
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	440b      	add	r3, r1
 800736a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007372:	4b29      	ldr	r3, [pc, #164]	@ (8007418 <USBD_CDC_DeInit+0x100>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f002 fa50 	bl	800981e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800737e:	4b26      	ldr	r3, [pc, #152]	@ (8007418 <USBD_CDC_DeInit+0x100>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	f003 020f 	and.w	r2, r3, #15
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4613      	mov	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	4413      	add	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	440b      	add	r3, r1
 8007392:	3323      	adds	r3, #35	@ 0x23
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007398:	4b1f      	ldr	r3, [pc, #124]	@ (8007418 <USBD_CDC_DeInit+0x100>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	f003 020f 	and.w	r2, r3, #15
 80073a0:	6879      	ldr	r1, [r7, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	440b      	add	r3, r1
 80073ac:	331c      	adds	r3, #28
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	32b0      	adds	r2, #176	@ 0xb0
 80073bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d01f      	beq.n	8007404 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	33b0      	adds	r3, #176	@ 0xb0
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	32b0      	adds	r2, #176	@ 0xb0
 80073e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073e6:	4618      	mov	r0, r3
 80073e8:	f002 fb24 	bl	8009a34 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	32b0      	adds	r2, #176	@ 0xb0
 80073f6:	2100      	movs	r1, #0
 80073f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20000093 	.word	0x20000093
 8007414:	20000094 	.word	0x20000094
 8007418:	20000095 	.word	0x20000095

0800741c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	32b0      	adds	r2, #176	@ 0xb0
 8007430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007434:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007436:	2300      	movs	r3, #0
 8007438:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800743e:	2300      	movs	r3, #0
 8007440:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d101      	bne.n	800744c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	e0bf      	b.n	80075cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007454:	2b00      	cmp	r3, #0
 8007456:	d050      	beq.n	80074fa <USBD_CDC_Setup+0xde>
 8007458:	2b20      	cmp	r3, #32
 800745a:	f040 80af 	bne.w	80075bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	88db      	ldrh	r3, [r3, #6]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d03a      	beq.n	80074dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	b25b      	sxtb	r3, r3
 800746c:	2b00      	cmp	r3, #0
 800746e:	da1b      	bge.n	80074a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	33b0      	adds	r3, #176	@ 0xb0
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	4413      	add	r3, r2
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007486:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	88d2      	ldrh	r2, [r2, #6]
 800748c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	88db      	ldrh	r3, [r3, #6]
 8007492:	2b07      	cmp	r3, #7
 8007494:	bf28      	it	cs
 8007496:	2307      	movcs	r3, #7
 8007498:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	89fa      	ldrh	r2, [r7, #14]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 fd69 	bl	8008f78 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80074a6:	e090      	b.n	80075ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	785a      	ldrb	r2, [r3, #1]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	88db      	ldrh	r3, [r3, #6]
 80074b6:	2b3f      	cmp	r3, #63	@ 0x3f
 80074b8:	d803      	bhi.n	80074c2 <USBD_CDC_Setup+0xa6>
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	88db      	ldrh	r3, [r3, #6]
 80074be:	b2da      	uxtb	r2, r3
 80074c0:	e000      	b.n	80074c4 <USBD_CDC_Setup+0xa8>
 80074c2:	2240      	movs	r2, #64	@ 0x40
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80074ca:	6939      	ldr	r1, [r7, #16]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80074d2:	461a      	mov	r2, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f001 fd7e 	bl	8008fd6 <USBD_CtlPrepareRx>
      break;
 80074da:	e076      	b.n	80075ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	33b0      	adds	r3, #176	@ 0xb0
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	4413      	add	r3, r2
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	7850      	ldrb	r0, [r2, #1]
 80074f2:	2200      	movs	r2, #0
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	4798      	blx	r3
      break;
 80074f8:	e067      	b.n	80075ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	785b      	ldrb	r3, [r3, #1]
 80074fe:	2b0b      	cmp	r3, #11
 8007500:	d851      	bhi.n	80075a6 <USBD_CDC_Setup+0x18a>
 8007502:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <USBD_CDC_Setup+0xec>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	08007539 	.word	0x08007539
 800750c:	080075b5 	.word	0x080075b5
 8007510:	080075a7 	.word	0x080075a7
 8007514:	080075a7 	.word	0x080075a7
 8007518:	080075a7 	.word	0x080075a7
 800751c:	080075a7 	.word	0x080075a7
 8007520:	080075a7 	.word	0x080075a7
 8007524:	080075a7 	.word	0x080075a7
 8007528:	080075a7 	.word	0x080075a7
 800752c:	080075a7 	.word	0x080075a7
 8007530:	08007563 	.word	0x08007563
 8007534:	0800758d 	.word	0x0800758d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800753e:	b2db      	uxtb	r3, r3
 8007540:	2b03      	cmp	r3, #3
 8007542:	d107      	bne.n	8007554 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007544:	f107 030a 	add.w	r3, r7, #10
 8007548:	2202      	movs	r2, #2
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f001 fd13 	bl	8008f78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007552:	e032      	b.n	80075ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f001 fc91 	bl	8008e7e <USBD_CtlError>
            ret = USBD_FAIL;
 800755c:	2303      	movs	r3, #3
 800755e:	75fb      	strb	r3, [r7, #23]
          break;
 8007560:	e02b      	b.n	80075ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b03      	cmp	r3, #3
 800756c:	d107      	bne.n	800757e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800756e:	f107 030d 	add.w	r3, r7, #13
 8007572:	2201      	movs	r2, #1
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 fcfe 	bl	8008f78 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800757c:	e01d      	b.n	80075ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 fc7c 	bl	8008e7e <USBD_CtlError>
            ret = USBD_FAIL;
 8007586:	2303      	movs	r3, #3
 8007588:	75fb      	strb	r3, [r7, #23]
          break;
 800758a:	e016      	b.n	80075ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b03      	cmp	r3, #3
 8007596:	d00f      	beq.n	80075b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f001 fc6f 	bl	8008e7e <USBD_CtlError>
            ret = USBD_FAIL;
 80075a0:	2303      	movs	r3, #3
 80075a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80075a4:	e008      	b.n	80075b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fc68 	bl	8008e7e <USBD_CtlError>
          ret = USBD_FAIL;
 80075ae:	2303      	movs	r3, #3
 80075b0:	75fb      	strb	r3, [r7, #23]
          break;
 80075b2:	e002      	b.n	80075ba <USBD_CDC_Setup+0x19e>
          break;
 80075b4:	bf00      	nop
 80075b6:	e008      	b.n	80075ca <USBD_CDC_Setup+0x1ae>
          break;
 80075b8:	bf00      	nop
      }
      break;
 80075ba:	e006      	b.n	80075ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 fc5d 	bl	8008e7e <USBD_CtlError>
      ret = USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	75fb      	strb	r3, [r7, #23]
      break;
 80075c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	32b0      	adds	r2, #176	@ 0xb0
 80075f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d101      	bne.n	80075fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e065      	b.n	80076ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	32b0      	adds	r2, #176	@ 0xb0
 8007608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800760c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800760e:	78fb      	ldrb	r3, [r7, #3]
 8007610:	f003 020f 	and.w	r2, r3, #15
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	4613      	mov	r3, r2
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	440b      	add	r3, r1
 8007620:	3314      	adds	r3, #20
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d02f      	beq.n	8007688 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	f003 020f 	and.w	r2, r3, #15
 800762e:	6879      	ldr	r1, [r7, #4]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	3314      	adds	r3, #20
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	78fb      	ldrb	r3, [r7, #3]
 8007640:	f003 010f 	and.w	r1, r3, #15
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	460b      	mov	r3, r1
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	440b      	add	r3, r1
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4403      	add	r3, r0
 8007650:	331c      	adds	r3, #28
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	fbb2 f1f3 	udiv	r1, r2, r3
 8007658:	fb01 f303 	mul.w	r3, r1, r3
 800765c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800765e:	2b00      	cmp	r3, #0
 8007660:	d112      	bne.n	8007688 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	f003 020f 	and.w	r2, r3, #15
 8007668:	6879      	ldr	r1, [r7, #4]
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	440b      	add	r3, r1
 8007674:	3314      	adds	r3, #20
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800767a:	78f9      	ldrb	r1, [r7, #3]
 800767c:	2300      	movs	r3, #0
 800767e:	2200      	movs	r2, #0
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f002 f974 	bl	800996e <USBD_LL_Transmit>
 8007686:	e01f      	b.n	80076c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	33b0      	adds	r3, #176	@ 0xb0
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4413      	add	r3, r2
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d010      	beq.n	80076c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	33b0      	adds	r3, #176	@ 0xb0
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80076be:	68ba      	ldr	r2, [r7, #8]
 80076c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3710      	adds	r7, #16
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	32b0      	adds	r2, #176	@ 0xb0
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	32b0      	adds	r2, #176	@ 0xb0
 80076f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007700:	2303      	movs	r3, #3
 8007702:	e01a      	b.n	800773a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007704:	78fb      	ldrb	r3, [r7, #3]
 8007706:	4619      	mov	r1, r3
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f002 f972 	bl	80099f2 <USBD_LL_GetRxDataSize>
 800770e:	4602      	mov	r2, r0
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800771c:	687a      	ldr	r2, [r7, #4]
 800771e:	33b0      	adds	r3, #176	@ 0xb0
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007734:	4611      	mov	r1, r2
 8007736:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	32b0      	adds	r2, #176	@ 0xb0
 8007754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007758:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	e024      	b.n	80077ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	33b0      	adds	r3, #176	@ 0xb0
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d019      	beq.n	80077ac <USBD_CDC_EP0_RxReady+0x6a>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800777e:	2bff      	cmp	r3, #255	@ 0xff
 8007780:	d014      	beq.n	80077ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007788:	687a      	ldr	r2, [r7, #4]
 800778a:	33b0      	adds	r3, #176	@ 0xb0
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4413      	add	r3, r2
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800779a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80077a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	22ff      	movs	r2, #255	@ 0xff
 80077a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077c0:	2182      	movs	r1, #130	@ 0x82
 80077c2:	4818      	ldr	r0, [pc, #96]	@ (8007824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077c4:	f000 fd22 	bl	800820c <USBD_GetEpDesc>
 80077c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077ca:	2101      	movs	r1, #1
 80077cc:	4815      	ldr	r0, [pc, #84]	@ (8007824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077ce:	f000 fd1d 	bl	800820c <USBD_GetEpDesc>
 80077d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077d4:	2181      	movs	r1, #129	@ 0x81
 80077d6:	4813      	ldr	r0, [pc, #76]	@ (8007824 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80077d8:	f000 fd18 	bl	800820c <USBD_GetEpDesc>
 80077dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d002      	beq.n	80077ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2210      	movs	r2, #16
 80077e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077f8:	711a      	strb	r2, [r3, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800780c:	711a      	strb	r2, [r3, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2243      	movs	r2, #67	@ 0x43
 8007816:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007818:	4b02      	ldr	r3, [pc, #8]	@ (8007824 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	20000050 	.word	0x20000050

08007828 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007830:	2182      	movs	r1, #130	@ 0x82
 8007832:	4818      	ldr	r0, [pc, #96]	@ (8007894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007834:	f000 fcea 	bl	800820c <USBD_GetEpDesc>
 8007838:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800783a:	2101      	movs	r1, #1
 800783c:	4815      	ldr	r0, [pc, #84]	@ (8007894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800783e:	f000 fce5 	bl	800820c <USBD_GetEpDesc>
 8007842:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007844:	2181      	movs	r1, #129	@ 0x81
 8007846:	4813      	ldr	r0, [pc, #76]	@ (8007894 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007848:	f000 fce0 	bl	800820c <USBD_GetEpDesc>
 800784c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d002      	beq.n	800785a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	2210      	movs	r2, #16
 8007858:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	2200      	movs	r2, #0
 8007864:	711a      	strb	r2, [r3, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f042 0202 	orr.w	r2, r2, #2
 800786c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d006      	beq.n	8007882 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	711a      	strb	r2, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f042 0202 	orr.w	r2, r2, #2
 8007880:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2243      	movs	r2, #67	@ 0x43
 8007886:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007888:	4b02      	ldr	r3, [pc, #8]	@ (8007894 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800788a:	4618      	mov	r0, r3
 800788c:	3718      	adds	r7, #24
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000050 	.word	0x20000050

08007898 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078a0:	2182      	movs	r1, #130	@ 0x82
 80078a2:	4818      	ldr	r0, [pc, #96]	@ (8007904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078a4:	f000 fcb2 	bl	800820c <USBD_GetEpDesc>
 80078a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078aa:	2101      	movs	r1, #1
 80078ac:	4815      	ldr	r0, [pc, #84]	@ (8007904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078ae:	f000 fcad 	bl	800820c <USBD_GetEpDesc>
 80078b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078b4:	2181      	movs	r1, #129	@ 0x81
 80078b6:	4813      	ldr	r0, [pc, #76]	@ (8007904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80078b8:	f000 fca8 	bl	800820c <USBD_GetEpDesc>
 80078bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2210      	movs	r2, #16
 80078c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d006      	beq.n	80078de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078d8:	711a      	strb	r2, [r3, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d006      	beq.n	80078f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80078ec:	711a      	strb	r2, [r3, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2243      	movs	r2, #67	@ 0x43
 80078f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078f8:	4b02      	ldr	r3, [pc, #8]	@ (8007904 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3718      	adds	r7, #24
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	20000050 	.word	0x20000050

08007908 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	220a      	movs	r2, #10
 8007914:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007916:	4b03      	ldr	r3, [pc, #12]	@ (8007924 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007918:	4618      	mov	r0, r3
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr
 8007924:	2000000c 	.word	0x2000000c

08007928 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d101      	bne.n	800793c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007938:	2303      	movs	r3, #3
 800793a:	e009      	b.n	8007950 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	33b0      	adds	r3, #176	@ 0xb0
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800794e:	2300      	movs	r3, #0
}
 8007950:	4618      	mov	r0, r3
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	32b0      	adds	r2, #176	@ 0xb0
 8007972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007976:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d101      	bne.n	8007982 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	e008      	b.n	8007994 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	371c      	adds	r7, #28
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	32b0      	adds	r2, #176	@ 0xb0
 80079b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e004      	b.n	80079ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3714      	adds	r7, #20
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	32b0      	adds	r2, #176	@ 0xb0
 80079ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	32b0      	adds	r2, #176	@ 0xb0
 80079fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e018      	b.n	8007a3c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	7c1b      	ldrb	r3, [r3, #16]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a12:	4b0c      	ldr	r3, [pc, #48]	@ (8007a44 <USBD_CDC_ReceivePacket+0x68>)
 8007a14:	7819      	ldrb	r1, [r3, #0]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f001 ffc5 	bl	80099b0 <USBD_LL_PrepareReceive>
 8007a26:	e008      	b.n	8007a3a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007a28:	4b06      	ldr	r3, [pc, #24]	@ (8007a44 <USBD_CDC_ReceivePacket+0x68>)
 8007a2a:	7819      	ldrb	r1, [r3, #0]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007a32:	2340      	movs	r3, #64	@ 0x40
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 ffbb 	bl	80099b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	20000094 	.word	0x20000094

08007a48 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	60f8      	str	r0, [r7, #12]
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	4613      	mov	r3, r2
 8007a54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d101      	bne.n	8007a60 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e01f      	b.n	8007aa0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	68ba      	ldr	r2, [r7, #8]
 8007a82:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	79fa      	ldrb	r2, [r7, #7]
 8007a92:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f001 fe35 	bl	8009704 <USBD_LL_Init>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e025      	b.n	8007b0c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	32ae      	adds	r2, #174	@ 0xae
 8007ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00f      	beq.n	8007afc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	32ae      	adds	r2, #174	@ 0xae
 8007ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aec:	f107 020e 	add.w	r2, r7, #14
 8007af0:	4610      	mov	r0, r2
 8007af2:	4798      	blx	r3
 8007af4:	4602      	mov	r2, r0
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007b02:	1c5a      	adds	r2, r3, #1
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f001 fe3d 	bl	800979c <USBD_LL_Start>
 8007b22:	4603      	mov	r3, r0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b34:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	370c      	adds	r7, #12
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b084      	sub	sp, #16
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d009      	beq.n	8007b70 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	78fa      	ldrb	r2, [r7, #3]
 8007b66:	4611      	mov	r1, r2
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b084      	sub	sp, #16
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
 8007b82:	460b      	mov	r3, r1
 8007b84:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b86:	2300      	movs	r3, #0
 8007b88:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	78fa      	ldrb	r2, [r7, #3]
 8007b94:	4611      	mov	r1, r2
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	4798      	blx	r3
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}

08007bae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b084      	sub	sp, #16
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
 8007bb6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bbe:	6839      	ldr	r1, [r7, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f001 f922 	bl	8008e0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007be2:	f003 031f 	and.w	r3, r3, #31
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d01a      	beq.n	8007c20 <USBD_LL_SetupStage+0x72>
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d822      	bhi.n	8007c34 <USBD_LL_SetupStage+0x86>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <USBD_LL_SetupStage+0x4a>
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d00a      	beq.n	8007c0c <USBD_LL_SetupStage+0x5e>
 8007bf6:	e01d      	b.n	8007c34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007bfe:	4619      	mov	r1, r3
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fb77 	bl	80082f4 <USBD_StdDevReq>
 8007c06:	4603      	mov	r3, r0
 8007c08:	73fb      	strb	r3, [r7, #15]
      break;
 8007c0a:	e020      	b.n	8007c4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fbdf 	bl	80083d8 <USBD_StdItfReq>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1e:	e016      	b.n	8007c4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 fc41 	bl	80084b0 <USBD_StdEPReq>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	73fb      	strb	r3, [r7, #15]
      break;
 8007c32:	e00c      	b.n	8007c4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007c3a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	4619      	mov	r1, r3
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f001 fe0a 	bl	800985c <USBD_LL_StallEP>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4c:	bf00      	nop
  }

  return ret;
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	460b      	mov	r3, r1
 8007c62:	607a      	str	r2, [r7, #4]
 8007c64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007c6a:	7afb      	ldrb	r3, [r7, #11]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d177      	bne.n	8007d60 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007c76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	f040 80a1 	bne.w	8007dc6 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	693a      	ldr	r2, [r7, #16]
 8007c8a:	8992      	ldrh	r2, [r2, #12]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d91c      	bls.n	8007cca <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	8992      	ldrh	r2, [r2, #12]
 8007c98:	1a9a      	subs	r2, r3, r2
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	8992      	ldrh	r2, [r2, #12]
 8007ca6:	441a      	add	r2, r3
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6919      	ldr	r1, [r3, #16]
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	899b      	ldrh	r3, [r3, #12]
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	bf38      	it	cc
 8007cbe:	4613      	movcc	r3, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f001 f9a8 	bl	8009018 <USBD_CtlContinueRx>
 8007cc8:	e07d      	b.n	8007dc6 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d014      	beq.n	8007d02 <USBD_LL_DataOutStage+0xaa>
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d81d      	bhi.n	8007d18 <USBD_LL_DataOutStage+0xc0>
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d002      	beq.n	8007ce6 <USBD_LL_DataOutStage+0x8e>
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d003      	beq.n	8007cec <USBD_LL_DataOutStage+0x94>
 8007ce4:	e018      	b.n	8007d18 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	75bb      	strb	r3, [r7, #22]
            break;
 8007cea:	e018      	b.n	8007d1e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fa6e 	bl	80081d8 <USBD_CoreFindIF>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75bb      	strb	r3, [r7, #22]
            break;
 8007d00:	e00d      	b.n	8007d1e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 fa70 	bl	80081f2 <USBD_CoreFindEP>
 8007d12:	4603      	mov	r3, r0
 8007d14:	75bb      	strb	r3, [r7, #22]
            break;
 8007d16:	e002      	b.n	8007d1e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75bb      	strb	r3, [r7, #22]
            break;
 8007d1c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007d1e:	7dbb      	ldrb	r3, [r7, #22]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d119      	bne.n	8007d58 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d113      	bne.n	8007d58 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007d30:	7dba      	ldrb	r2, [r7, #22]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	32ae      	adds	r2, #174	@ 0xae
 8007d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8007d40:	7dba      	ldrb	r2, [r7, #22]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007d48:	7dba      	ldrb	r2, [r7, #22]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	32ae      	adds	r2, #174	@ 0xae
 8007d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d52:	691b      	ldr	r3, [r3, #16]
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f001 f96e 	bl	800903a <USBD_CtlSendStatus>
 8007d5e:	e032      	b.n	8007dc6 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	68f8      	ldr	r0, [r7, #12]
 8007d6c:	f000 fa41 	bl	80081f2 <USBD_CoreFindEP>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d74:	7dbb      	ldrb	r3, [r7, #22]
 8007d76:	2bff      	cmp	r3, #255	@ 0xff
 8007d78:	d025      	beq.n	8007dc6 <USBD_LL_DataOutStage+0x16e>
 8007d7a:	7dbb      	ldrb	r3, [r7, #22]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d122      	bne.n	8007dc6 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b03      	cmp	r3, #3
 8007d8a:	d117      	bne.n	8007dbc <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d8c:	7dba      	ldrb	r2, [r7, #22]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	32ae      	adds	r2, #174	@ 0xae
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00f      	beq.n	8007dbc <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007d9c:	7dba      	ldrb	r2, [r7, #22]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007da4:	7dba      	ldrb	r2, [r7, #22]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	32ae      	adds	r2, #174	@ 0xae
 8007daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	7afa      	ldrb	r2, [r7, #11]
 8007db2:	4611      	mov	r1, r2
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	4798      	blx	r3
 8007db8:	4603      	mov	r3, r0
 8007dba:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8007dc2:	7dfb      	ldrb	r3, [r7, #23]
 8007dc4:	e000      	b.n	8007dc8 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007dde:	7afb      	ldrb	r3, [r7, #11]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d178      	bne.n	8007ed6 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3314      	adds	r3, #20
 8007de8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d163      	bne.n	8007ebc <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	8992      	ldrh	r2, [r2, #12]
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d91c      	bls.n	8007e3a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	8992      	ldrh	r2, [r2, #12]
 8007e08:	1a9a      	subs	r2, r3, r2
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	8992      	ldrh	r2, [r2, #12]
 8007e16:	441a      	add	r2, r3
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	6919      	ldr	r1, [r3, #16]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	461a      	mov	r2, r3
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f001 f8c4 	bl	8008fb4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	2200      	movs	r2, #0
 8007e30:	2100      	movs	r1, #0
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f001 fdbc 	bl	80099b0 <USBD_LL_PrepareReceive>
 8007e38:	e040      	b.n	8007ebc <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	899b      	ldrh	r3, [r3, #12]
 8007e3e:	461a      	mov	r2, r3
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d11c      	bne.n	8007e82 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	693a      	ldr	r2, [r7, #16]
 8007e4e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d316      	bcc.n	8007e82 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d20f      	bcs.n	8007e82 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007e62:	2200      	movs	r2, #0
 8007e64:	2100      	movs	r1, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f001 f8a4 	bl	8008fb4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e74:	2300      	movs	r3, #0
 8007e76:	2200      	movs	r2, #0
 8007e78:	2100      	movs	r1, #0
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f001 fd98 	bl	80099b0 <USBD_LL_PrepareReceive>
 8007e80:	e01c      	b.n	8007ebc <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d10f      	bne.n	8007eae <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007eae:	2180      	movs	r1, #128	@ 0x80
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f001 fcd3 	bl	800985c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f001 f8d2 	bl	8009060 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d03a      	beq.n	8007f3c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff fe30 	bl	8007b2c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007ed4:	e032      	b.n	8007f3c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	4619      	mov	r1, r3
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f986 	bl	80081f2 <USBD_CoreFindEP>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007eea:	7dfb      	ldrb	r3, [r7, #23]
 8007eec:	2bff      	cmp	r3, #255	@ 0xff
 8007eee:	d025      	beq.n	8007f3c <USBD_LL_DataInStage+0x16c>
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d122      	bne.n	8007f3c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b03      	cmp	r3, #3
 8007f00:	d11c      	bne.n	8007f3c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f02:	7dfa      	ldrb	r2, [r7, #23]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	32ae      	adds	r2, #174	@ 0xae
 8007f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0c:	695b      	ldr	r3, [r3, #20]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d014      	beq.n	8007f3c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007f12:	7dfa      	ldrb	r2, [r7, #23]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f1a:	7dfa      	ldrb	r2, [r7, #23]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	32ae      	adds	r2, #174	@ 0xae
 8007f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	7afa      	ldrb	r2, [r7, #11]
 8007f28:	4611      	mov	r1, r2
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	4798      	blx	r3
 8007f2e:	4603      	mov	r3, r0
 8007f30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007f32:	7dbb      	ldrb	r3, [r7, #22]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007f38:	7dbb      	ldrb	r3, [r7, #22]
 8007f3a:	e000      	b.n	8007f3e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3718      	adds	r7, #24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2201      	movs	r2, #1
 8007f56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d014      	beq.n	8007fac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00e      	beq.n	8007fac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6852      	ldr	r2, [r2, #4]
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	4611      	mov	r1, r2
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	4798      	blx	r3
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007fa8:	2303      	movs	r3, #3
 8007faa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fac:	2340      	movs	r3, #64	@ 0x40
 8007fae:	2200      	movs	r2, #0
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fc0d 	bl	80097d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2240      	movs	r2, #64	@ 0x40
 8007fc4:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007fc8:	2340      	movs	r3, #64	@ 0x40
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2180      	movs	r1, #128	@ 0x80
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f001 fbff 	bl	80097d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2240      	movs	r2, #64	@ 0x40
 8007fe0:	841a      	strh	r2, [r3, #32]

  return ret;
 8007fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	460b      	mov	r3, r1
 8007ff6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	78fa      	ldrb	r2, [r7, #3]
 8007ffc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b04      	cmp	r3, #4
 800801e:	d006      	beq.n	800802e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008026:	b2da      	uxtb	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2204      	movs	r2, #4
 8008032:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008052:	b2db      	uxtb	r3, r3
 8008054:	2b04      	cmp	r3, #4
 8008056:	d106      	bne.n	8008066 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800805e:	b2da      	uxtb	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b03      	cmp	r3, #3
 8008086:	d110      	bne.n	80080aa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00b      	beq.n	80080aa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008098:	69db      	ldr	r3, [r3, #28]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d005      	beq.n	80080aa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	32ae      	adds	r2, #174	@ 0xae
 80080ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80080d2:	2303      	movs	r3, #3
 80080d4:	e01c      	b.n	8008110 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d115      	bne.n	800810e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	32ae      	adds	r2, #174	@ 0xae
 80080ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d00b      	beq.n	800810e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	32ae      	adds	r2, #174	@ 0xae
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	78fa      	ldrb	r2, [r7, #3]
 8008108:	4611      	mov	r1, r2
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3708      	adds	r7, #8
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	460b      	mov	r3, r1
 8008122:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	32ae      	adds	r2, #174	@ 0xae
 800812e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008136:	2303      	movs	r3, #3
 8008138:	e01c      	b.n	8008174 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b03      	cmp	r3, #3
 8008144:	d115      	bne.n	8008172 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	32ae      	adds	r2, #174	@ 0xae
 8008150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	32ae      	adds	r2, #174	@ 0xae
 8008164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800816a:	78fa      	ldrb	r2, [r7, #3]
 800816c:	4611      	mov	r1, r2
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008172:	2300      	movs	r3, #0
}
 8008174:	4618      	mov	r0, r3
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	370c      	adds	r7, #12
 800818a:	46bd      	mov	sp, r7
 800818c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008190:	4770      	bx	lr

08008192 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008192:	b580      	push	{r7, lr}
 8008194:	b084      	sub	sp, #16
 8008196:	af00      	add	r7, sp, #0
 8008198:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800819a:	2300      	movs	r3, #0
 800819c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2201      	movs	r2, #1
 80081a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d00e      	beq.n	80081ce <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	6852      	ldr	r2, [r2, #4]
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	4611      	mov	r1, r2
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	4798      	blx	r3
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80081ca:	2303      	movs	r3, #3
 80081cc:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3710      	adds	r7, #16
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	460b      	mov	r3, r1
 80081e2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081e4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b083      	sub	sp, #12
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	460b      	mov	r3, r1
 80081fc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80081fe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008200:	4618      	mov	r0, r3
 8008202:	370c      	adds	r7, #12
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	460b      	mov	r3, r1
 8008216:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008220:	2300      	movs	r3, #0
 8008222:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	885b      	ldrh	r3, [r3, #2]
 8008228:	b29b      	uxth	r3, r3
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	7812      	ldrb	r2, [r2, #0]
 800822e:	4293      	cmp	r3, r2
 8008230:	d91f      	bls.n	8008272 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008238:	e013      	b.n	8008262 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800823a:	f107 030a 	add.w	r3, r7, #10
 800823e:	4619      	mov	r1, r3
 8008240:	6978      	ldr	r0, [r7, #20]
 8008242:	f000 f81b 	bl	800827c <USBD_GetNextDesc>
 8008246:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	785b      	ldrb	r3, [r3, #1]
 800824c:	2b05      	cmp	r3, #5
 800824e:	d108      	bne.n	8008262 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	789b      	ldrb	r3, [r3, #2]
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	429a      	cmp	r2, r3
 800825c:	d008      	beq.n	8008270 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800825e:	2300      	movs	r3, #0
 8008260:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	885b      	ldrh	r3, [r3, #2]
 8008266:	b29a      	uxth	r2, r3
 8008268:	897b      	ldrh	r3, [r7, #10]
 800826a:	429a      	cmp	r2, r3
 800826c:	d8e5      	bhi.n	800823a <USBD_GetEpDesc+0x2e>
 800826e:	e000      	b.n	8008272 <USBD_GetEpDesc+0x66>
          break;
 8008270:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008272:	693b      	ldr	r3, [r7, #16]
}
 8008274:	4618      	mov	r0, r3
 8008276:	3718      	adds	r7, #24
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800827c:	b480      	push	{r7}
 800827e:	b085      	sub	sp, #20
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	7812      	ldrb	r2, [r2, #0]
 8008292:	4413      	add	r3, r2
 8008294:	b29a      	uxth	r2, r3
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	461a      	mov	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4413      	add	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80082a6:	68fb      	ldr	r3, [r7, #12]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3714      	adds	r7, #20
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	3301      	adds	r3, #1
 80082ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80082d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	b21a      	sxth	r2, r3
 80082da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082de:	4313      	orrs	r3, r2
 80082e0:	b21b      	sxth	r3, r3
 80082e2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80082e4:	89fb      	ldrh	r3, [r7, #14]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
	...

080082f4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80082fe:	2300      	movs	r3, #0
 8008300:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800830a:	2b40      	cmp	r3, #64	@ 0x40
 800830c:	d005      	beq.n	800831a <USBD_StdDevReq+0x26>
 800830e:	2b40      	cmp	r3, #64	@ 0x40
 8008310:	d857      	bhi.n	80083c2 <USBD_StdDevReq+0xce>
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <USBD_StdDevReq+0x42>
 8008316:	2b20      	cmp	r3, #32
 8008318:	d153      	bne.n	80083c2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	32ae      	adds	r2, #174	@ 0xae
 8008324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
 8008330:	4603      	mov	r3, r0
 8008332:	73fb      	strb	r3, [r7, #15]
      break;
 8008334:	e04a      	b.n	80083cc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	785b      	ldrb	r3, [r3, #1]
 800833a:	2b09      	cmp	r3, #9
 800833c:	d83b      	bhi.n	80083b6 <USBD_StdDevReq+0xc2>
 800833e:	a201      	add	r2, pc, #4	@ (adr r2, 8008344 <USBD_StdDevReq+0x50>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	08008399 	.word	0x08008399
 8008348:	080083ad 	.word	0x080083ad
 800834c:	080083b7 	.word	0x080083b7
 8008350:	080083a3 	.word	0x080083a3
 8008354:	080083b7 	.word	0x080083b7
 8008358:	08008377 	.word	0x08008377
 800835c:	0800836d 	.word	0x0800836d
 8008360:	080083b7 	.word	0x080083b7
 8008364:	0800838f 	.word	0x0800838f
 8008368:	08008381 	.word	0x08008381
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 fa3e 	bl	80087f0 <USBD_GetDescriptor>
          break;
 8008374:	e024      	b.n	80083c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 fba3 	bl	8008ac4 <USBD_SetAddress>
          break;
 800837e:	e01f      	b.n	80083c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008380:	6839      	ldr	r1, [r7, #0]
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fbe2 	bl	8008b4c <USBD_SetConfig>
 8008388:	4603      	mov	r3, r0
 800838a:	73fb      	strb	r3, [r7, #15]
          break;
 800838c:	e018      	b.n	80083c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fc85 	bl	8008ca0 <USBD_GetConfig>
          break;
 8008396:	e013      	b.n	80083c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fcb6 	bl	8008d0c <USBD_GetStatus>
          break;
 80083a0:	e00e      	b.n	80083c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80083a2:	6839      	ldr	r1, [r7, #0]
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fce5 	bl	8008d74 <USBD_SetFeature>
          break;
 80083aa:	e009      	b.n	80083c0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fd09 	bl	8008dc6 <USBD_ClrFeature>
          break;
 80083b4:	e004      	b.n	80083c0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80083b6:	6839      	ldr	r1, [r7, #0]
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fd60 	bl	8008e7e <USBD_CtlError>
          break;
 80083be:	bf00      	nop
      }
      break;
 80083c0:	e004      	b.n	80083cc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80083c2:	6839      	ldr	r1, [r7, #0]
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f000 fd5a 	bl	8008e7e <USBD_CtlError>
      break;
 80083ca:	bf00      	nop
  }

  return ret;
 80083cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3710      	adds	r7, #16
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop

080083d8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
 80083e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80083e2:	2300      	movs	r3, #0
 80083e4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80083ee:	2b40      	cmp	r3, #64	@ 0x40
 80083f0:	d005      	beq.n	80083fe <USBD_StdItfReq+0x26>
 80083f2:	2b40      	cmp	r3, #64	@ 0x40
 80083f4:	d852      	bhi.n	800849c <USBD_StdItfReq+0xc4>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <USBD_StdItfReq+0x26>
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d14e      	bne.n	800849c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008404:	b2db      	uxtb	r3, r3
 8008406:	3b01      	subs	r3, #1
 8008408:	2b02      	cmp	r3, #2
 800840a:	d840      	bhi.n	800848e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	889b      	ldrh	r3, [r3, #4]
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b01      	cmp	r3, #1
 8008414:	d836      	bhi.n	8008484 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	889b      	ldrh	r3, [r3, #4]
 800841a:	b2db      	uxtb	r3, r3
 800841c:	4619      	mov	r1, r3
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f7ff feda 	bl	80081d8 <USBD_CoreFindIF>
 8008424:	4603      	mov	r3, r0
 8008426:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	2bff      	cmp	r3, #255	@ 0xff
 800842c:	d01d      	beq.n	800846a <USBD_StdItfReq+0x92>
 800842e:	7bbb      	ldrb	r3, [r7, #14]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d11a      	bne.n	800846a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008434:	7bba      	ldrb	r2, [r7, #14]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	32ae      	adds	r2, #174	@ 0xae
 800843a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00f      	beq.n	8008464 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008444:	7bba      	ldrb	r2, [r7, #14]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800844c:	7bba      	ldrb	r2, [r7, #14]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	32ae      	adds	r2, #174	@ 0xae
 8008452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	4798      	blx	r3
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008462:	e004      	b.n	800846e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008464:	2303      	movs	r3, #3
 8008466:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008468:	e001      	b.n	800846e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800846a:	2303      	movs	r3, #3
 800846c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	88db      	ldrh	r3, [r3, #6]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d110      	bne.n	8008498 <USBD_StdItfReq+0xc0>
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d10d      	bne.n	8008498 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fddc 	bl	800903a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008482:	e009      	b.n	8008498 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008484:	6839      	ldr	r1, [r7, #0]
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fcf9 	bl	8008e7e <USBD_CtlError>
          break;
 800848c:	e004      	b.n	8008498 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 fcf4 	bl	8008e7e <USBD_CtlError>
          break;
 8008496:	e000      	b.n	800849a <USBD_StdItfReq+0xc2>
          break;
 8008498:	bf00      	nop
      }
      break;
 800849a:	e004      	b.n	80084a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800849c:	6839      	ldr	r1, [r7, #0]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fced 	bl	8008e7e <USBD_CtlError>
      break;
 80084a4:	bf00      	nop
  }

  return ret;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80084ba:	2300      	movs	r3, #0
 80084bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	889b      	ldrh	r3, [r3, #4]
 80084c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80084cc:	2b40      	cmp	r3, #64	@ 0x40
 80084ce:	d007      	beq.n	80084e0 <USBD_StdEPReq+0x30>
 80084d0:	2b40      	cmp	r3, #64	@ 0x40
 80084d2:	f200 8181 	bhi.w	80087d8 <USBD_StdEPReq+0x328>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d02a      	beq.n	8008530 <USBD_StdEPReq+0x80>
 80084da:	2b20      	cmp	r3, #32
 80084dc:	f040 817c 	bne.w	80087d8 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80084e0:	7bbb      	ldrb	r3, [r7, #14]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff fe84 	bl	80081f2 <USBD_CoreFindEP>
 80084ea:	4603      	mov	r3, r0
 80084ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80084ee:	7b7b      	ldrb	r3, [r7, #13]
 80084f0:	2bff      	cmp	r3, #255	@ 0xff
 80084f2:	f000 8176 	beq.w	80087e2 <USBD_StdEPReq+0x332>
 80084f6:	7b7b      	ldrb	r3, [r7, #13]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f040 8172 	bne.w	80087e2 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80084fe:	7b7a      	ldrb	r2, [r7, #13]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008506:	7b7a      	ldrb	r2, [r7, #13]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	32ae      	adds	r2, #174	@ 0xae
 800850c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 8165 	beq.w	80087e2 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008518:	7b7a      	ldrb	r2, [r7, #13]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	32ae      	adds	r2, #174	@ 0xae
 800851e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	4798      	blx	r3
 800852a:	4603      	mov	r3, r0
 800852c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800852e:	e158      	b.n	80087e2 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	785b      	ldrb	r3, [r3, #1]
 8008534:	2b03      	cmp	r3, #3
 8008536:	d008      	beq.n	800854a <USBD_StdEPReq+0x9a>
 8008538:	2b03      	cmp	r3, #3
 800853a:	f300 8147 	bgt.w	80087cc <USBD_StdEPReq+0x31c>
 800853e:	2b00      	cmp	r3, #0
 8008540:	f000 809b 	beq.w	800867a <USBD_StdEPReq+0x1ca>
 8008544:	2b01      	cmp	r3, #1
 8008546:	d03c      	beq.n	80085c2 <USBD_StdEPReq+0x112>
 8008548:	e140      	b.n	80087cc <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d002      	beq.n	800855c <USBD_StdEPReq+0xac>
 8008556:	2b03      	cmp	r3, #3
 8008558:	d016      	beq.n	8008588 <USBD_StdEPReq+0xd8>
 800855a:	e02c      	b.n	80085b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800855c:	7bbb      	ldrb	r3, [r7, #14]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00d      	beq.n	800857e <USBD_StdEPReq+0xce>
 8008562:	7bbb      	ldrb	r3, [r7, #14]
 8008564:	2b80      	cmp	r3, #128	@ 0x80
 8008566:	d00a      	beq.n	800857e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 f975 	bl	800985c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008572:	2180      	movs	r1, #128	@ 0x80
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 f971 	bl	800985c <USBD_LL_StallEP>
 800857a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800857c:	e020      	b.n	80085c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800857e:	6839      	ldr	r1, [r7, #0]
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 fc7c 	bl	8008e7e <USBD_CtlError>
              break;
 8008586:	e01b      	b.n	80085c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	885b      	ldrh	r3, [r3, #2]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d10e      	bne.n	80085ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008590:	7bbb      	ldrb	r3, [r7, #14]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00b      	beq.n	80085ae <USBD_StdEPReq+0xfe>
 8008596:	7bbb      	ldrb	r3, [r7, #14]
 8008598:	2b80      	cmp	r3, #128	@ 0x80
 800859a:	d008      	beq.n	80085ae <USBD_StdEPReq+0xfe>
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	88db      	ldrh	r3, [r3, #6]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d104      	bne.n	80085ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80085a4:	7bbb      	ldrb	r3, [r7, #14]
 80085a6:	4619      	mov	r1, r3
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f957 	bl	800985c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fd43 	bl	800903a <USBD_CtlSendStatus>

              break;
 80085b4:	e004      	b.n	80085c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80085b6:	6839      	ldr	r1, [r7, #0]
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fc60 	bl	8008e7e <USBD_CtlError>
              break;
 80085be:	bf00      	nop
          }
          break;
 80085c0:	e109      	b.n	80087d6 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085c8:	b2db      	uxtb	r3, r3
 80085ca:	2b02      	cmp	r3, #2
 80085cc:	d002      	beq.n	80085d4 <USBD_StdEPReq+0x124>
 80085ce:	2b03      	cmp	r3, #3
 80085d0:	d016      	beq.n	8008600 <USBD_StdEPReq+0x150>
 80085d2:	e04b      	b.n	800866c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085d4:	7bbb      	ldrb	r3, [r7, #14]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d00d      	beq.n	80085f6 <USBD_StdEPReq+0x146>
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b80      	cmp	r3, #128	@ 0x80
 80085de:	d00a      	beq.n	80085f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085e0:	7bbb      	ldrb	r3, [r7, #14]
 80085e2:	4619      	mov	r1, r3
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f939 	bl	800985c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085ea:	2180      	movs	r1, #128	@ 0x80
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 f935 	bl	800985c <USBD_LL_StallEP>
 80085f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085f4:	e040      	b.n	8008678 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80085f6:	6839      	ldr	r1, [r7, #0]
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 fc40 	bl	8008e7e <USBD_CtlError>
              break;
 80085fe:	e03b      	b.n	8008678 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	885b      	ldrh	r3, [r3, #2]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d136      	bne.n	8008676 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008608:	7bbb      	ldrb	r3, [r7, #14]
 800860a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800860e:	2b00      	cmp	r3, #0
 8008610:	d004      	beq.n	800861c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008612:	7bbb      	ldrb	r3, [r7, #14]
 8008614:	4619      	mov	r1, r3
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f93f 	bl	800989a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fd0c 	bl	800903a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008622:	7bbb      	ldrb	r3, [r7, #14]
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff fde3 	bl	80081f2 <USBD_CoreFindEP>
 800862c:	4603      	mov	r3, r0
 800862e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008630:	7b7b      	ldrb	r3, [r7, #13]
 8008632:	2bff      	cmp	r3, #255	@ 0xff
 8008634:	d01f      	beq.n	8008676 <USBD_StdEPReq+0x1c6>
 8008636:	7b7b      	ldrb	r3, [r7, #13]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d11c      	bne.n	8008676 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800863c:	7b7a      	ldrb	r2, [r7, #13]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008644:	7b7a      	ldrb	r2, [r7, #13]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	32ae      	adds	r2, #174	@ 0xae
 800864a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d010      	beq.n	8008676 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008654:	7b7a      	ldrb	r2, [r7, #13]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	32ae      	adds	r2, #174	@ 0xae
 800865a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800865e:	689b      	ldr	r3, [r3, #8]
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
 8008666:	4603      	mov	r3, r0
 8008668:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800866a:	e004      	b.n	8008676 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800866c:	6839      	ldr	r1, [r7, #0]
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 fc05 	bl	8008e7e <USBD_CtlError>
              break;
 8008674:	e000      	b.n	8008678 <USBD_StdEPReq+0x1c8>
              break;
 8008676:	bf00      	nop
          }
          break;
 8008678:	e0ad      	b.n	80087d6 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008680:	b2db      	uxtb	r3, r3
 8008682:	2b02      	cmp	r3, #2
 8008684:	d002      	beq.n	800868c <USBD_StdEPReq+0x1dc>
 8008686:	2b03      	cmp	r3, #3
 8008688:	d033      	beq.n	80086f2 <USBD_StdEPReq+0x242>
 800868a:	e099      	b.n	80087c0 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d007      	beq.n	80086a2 <USBD_StdEPReq+0x1f2>
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	2b80      	cmp	r3, #128	@ 0x80
 8008696:	d004      	beq.n	80086a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008698:	6839      	ldr	r1, [r7, #0]
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fbef 	bl	8008e7e <USBD_CtlError>
                break;
 80086a0:	e093      	b.n	80087ca <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da0b      	bge.n	80086c2 <USBD_StdEPReq+0x212>
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	3310      	adds	r3, #16
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	4413      	add	r3, r2
 80086be:	3304      	adds	r3, #4
 80086c0:	e00b      	b.n	80086da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086c2:	7bbb      	ldrb	r3, [r7, #14]
 80086c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086c8:	4613      	mov	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	4413      	add	r3, r2
 80086d8:	3304      	adds	r3, #4
 80086da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2200      	movs	r2, #0
 80086e0:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	330e      	adds	r3, #14
 80086e6:	2202      	movs	r2, #2
 80086e8:	4619      	mov	r1, r3
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc44 	bl	8008f78 <USBD_CtlSendData>
              break;
 80086f0:	e06b      	b.n	80087ca <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80086f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da11      	bge.n	800871e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086fa:	7bbb      	ldrb	r3, [r7, #14]
 80086fc:	f003 020f 	and.w	r2, r3, #15
 8008700:	6879      	ldr	r1, [r7, #4]
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	440b      	add	r3, r1
 800870c:	3323      	adds	r3, #35	@ 0x23
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d117      	bne.n	8008744 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fbb1 	bl	8008e7e <USBD_CtlError>
                  break;
 800871c:	e055      	b.n	80087ca <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800871e:	7bbb      	ldrb	r3, [r7, #14]
 8008720:	f003 020f 	and.w	r2, r3, #15
 8008724:	6879      	ldr	r1, [r7, #4]
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	440b      	add	r3, r1
 8008730:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d104      	bne.n	8008744 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800873a:	6839      	ldr	r1, [r7, #0]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fb9e 	bl	8008e7e <USBD_CtlError>
                  break;
 8008742:	e042      	b.n	80087ca <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008744:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008748:	2b00      	cmp	r3, #0
 800874a:	da0b      	bge.n	8008764 <USBD_StdEPReq+0x2b4>
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	3310      	adds	r3, #16
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	4413      	add	r3, r2
 8008760:	3304      	adds	r3, #4
 8008762:	e00b      	b.n	800877c <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008764:	7bbb      	ldrb	r3, [r7, #14]
 8008766:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	4413      	add	r3, r2
 800877a:	3304      	adds	r3, #4
 800877c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800877e:	7bbb      	ldrb	r3, [r7, #14]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <USBD_StdEPReq+0x2da>
 8008784:	7bbb      	ldrb	r3, [r7, #14]
 8008786:	2b80      	cmp	r3, #128	@ 0x80
 8008788:	d103      	bne.n	8008792 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2200      	movs	r2, #0
 800878e:	739a      	strb	r2, [r3, #14]
 8008790:	e00e      	b.n	80087b0 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 f89e 	bl	80098d8 <USBD_LL_IsStallEP>
 800879c:	4603      	mov	r3, r0
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d003      	beq.n	80087aa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	2201      	movs	r2, #1
 80087a6:	739a      	strb	r2, [r3, #14]
 80087a8:	e002      	b.n	80087b0 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	2200      	movs	r2, #0
 80087ae:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	330e      	adds	r3, #14
 80087b4:	2202      	movs	r2, #2
 80087b6:	4619      	mov	r1, r3
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fbdd 	bl	8008f78 <USBD_CtlSendData>
              break;
 80087be:	e004      	b.n	80087ca <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80087c0:	6839      	ldr	r1, [r7, #0]
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	f000 fb5b 	bl	8008e7e <USBD_CtlError>
              break;
 80087c8:	bf00      	nop
          }
          break;
 80087ca:	e004      	b.n	80087d6 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f000 fb55 	bl	8008e7e <USBD_CtlError>
          break;
 80087d4:	bf00      	nop
      }
      break;
 80087d6:	e005      	b.n	80087e4 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fb4f 	bl	8008e7e <USBD_CtlError>
      break;
 80087e0:	e000      	b.n	80087e4 <USBD_StdEPReq+0x334>
      break;
 80087e2:	bf00      	nop
  }

  return ret;
 80087e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3710      	adds	r7, #16
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
	...

080087f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b084      	sub	sp, #16
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80087fa:	2300      	movs	r3, #0
 80087fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80087fe:	2300      	movs	r3, #0
 8008800:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	885b      	ldrh	r3, [r3, #2]
 800880a:	0a1b      	lsrs	r3, r3, #8
 800880c:	b29b      	uxth	r3, r3
 800880e:	3b01      	subs	r3, #1
 8008810:	2b06      	cmp	r3, #6
 8008812:	f200 8128 	bhi.w	8008a66 <USBD_GetDescriptor+0x276>
 8008816:	a201      	add	r2, pc, #4	@ (adr r2, 800881c <USBD_GetDescriptor+0x2c>)
 8008818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800881c:	08008839 	.word	0x08008839
 8008820:	08008851 	.word	0x08008851
 8008824:	08008891 	.word	0x08008891
 8008828:	08008a67 	.word	0x08008a67
 800882c:	08008a67 	.word	0x08008a67
 8008830:	08008a07 	.word	0x08008a07
 8008834:	08008a33 	.word	0x08008a33
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	687a      	ldr	r2, [r7, #4]
 8008842:	7c12      	ldrb	r2, [r2, #16]
 8008844:	f107 0108 	add.w	r1, r7, #8
 8008848:	4610      	mov	r0, r2
 800884a:	4798      	blx	r3
 800884c:	60f8      	str	r0, [r7, #12]
      break;
 800884e:	e112      	b.n	8008a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	7c1b      	ldrb	r3, [r3, #16]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10d      	bne.n	8008874 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800885e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008860:	f107 0208 	add.w	r2, r7, #8
 8008864:	4610      	mov	r0, r2
 8008866:	4798      	blx	r3
 8008868:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3301      	adds	r3, #1
 800886e:	2202      	movs	r2, #2
 8008870:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008872:	e100      	b.n	8008a76 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800887a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887c:	f107 0208 	add.w	r2, r7, #8
 8008880:	4610      	mov	r0, r2
 8008882:	4798      	blx	r3
 8008884:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	2202      	movs	r2, #2
 800888c:	701a      	strb	r2, [r3, #0]
      break;
 800888e:	e0f2      	b.n	8008a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	885b      	ldrh	r3, [r3, #2]
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b05      	cmp	r3, #5
 8008898:	f200 80ac 	bhi.w	80089f4 <USBD_GetDescriptor+0x204>
 800889c:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <USBD_GetDescriptor+0xb4>)
 800889e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a2:	bf00      	nop
 80088a4:	080088bd 	.word	0x080088bd
 80088a8:	080088f1 	.word	0x080088f1
 80088ac:	08008925 	.word	0x08008925
 80088b0:	08008959 	.word	0x08008959
 80088b4:	0800898d 	.word	0x0800898d
 80088b8:	080089c1 	.word	0x080089c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c2:	685b      	ldr	r3, [r3, #4]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00b      	beq.n	80088e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	7c12      	ldrb	r2, [r2, #16]
 80088d4:	f107 0108 	add.w	r1, r7, #8
 80088d8:	4610      	mov	r0, r2
 80088da:	4798      	blx	r3
 80088dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088de:	e091      	b.n	8008a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 facb 	bl	8008e7e <USBD_CtlError>
            err++;
 80088e8:	7afb      	ldrb	r3, [r7, #11]
 80088ea:	3301      	adds	r3, #1
 80088ec:	72fb      	strb	r3, [r7, #11]
          break;
 80088ee:	e089      	b.n	8008a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088f6:	689b      	ldr	r3, [r3, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00b      	beq.n	8008914 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	7c12      	ldrb	r2, [r2, #16]
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
 8008910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008912:	e077      	b.n	8008a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fab1 	bl	8008e7e <USBD_CtlError>
            err++;
 800891c:	7afb      	ldrb	r3, [r7, #11]
 800891e:	3301      	adds	r3, #1
 8008920:	72fb      	strb	r3, [r7, #11]
          break;
 8008922:	e06f      	b.n	8008a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00b      	beq.n	8008948 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	7c12      	ldrb	r2, [r2, #16]
 800893c:	f107 0108 	add.w	r1, r7, #8
 8008940:	4610      	mov	r0, r2
 8008942:	4798      	blx	r3
 8008944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008946:	e05d      	b.n	8008a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008948:	6839      	ldr	r1, [r7, #0]
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa97 	bl	8008e7e <USBD_CtlError>
            err++;
 8008950:	7afb      	ldrb	r3, [r7, #11]
 8008952:	3301      	adds	r3, #1
 8008954:	72fb      	strb	r3, [r7, #11]
          break;
 8008956:	e055      	b.n	8008a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800895e:	691b      	ldr	r3, [r3, #16]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	7c12      	ldrb	r2, [r2, #16]
 8008970:	f107 0108 	add.w	r1, r7, #8
 8008974:	4610      	mov	r0, r2
 8008976:	4798      	blx	r3
 8008978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897a:	e043      	b.n	8008a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa7d 	bl	8008e7e <USBD_CtlError>
            err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
          break;
 800898a:	e03b      	b.n	8008a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008992:	695b      	ldr	r3, [r3, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899e:	695b      	ldr	r3, [r3, #20]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	7c12      	ldrb	r2, [r2, #16]
 80089a4:	f107 0108 	add.w	r1, r7, #8
 80089a8:	4610      	mov	r0, r2
 80089aa:	4798      	blx	r3
 80089ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089ae:	e029      	b.n	8008a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b0:	6839      	ldr	r1, [r7, #0]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fa63 	bl	8008e7e <USBD_CtlError>
            err++;
 80089b8:	7afb      	ldrb	r3, [r7, #11]
 80089ba:	3301      	adds	r3, #1
 80089bc:	72fb      	strb	r3, [r7, #11]
          break;
 80089be:	e021      	b.n	8008a04 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089c6:	699b      	ldr	r3, [r3, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00b      	beq.n	80089e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089d2:	699b      	ldr	r3, [r3, #24]
 80089d4:	687a      	ldr	r2, [r7, #4]
 80089d6:	7c12      	ldrb	r2, [r2, #16]
 80089d8:	f107 0108 	add.w	r1, r7, #8
 80089dc:	4610      	mov	r0, r2
 80089de:	4798      	blx	r3
 80089e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e2:	e00f      	b.n	8008a04 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e4:	6839      	ldr	r1, [r7, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa49 	bl	8008e7e <USBD_CtlError>
            err++;
 80089ec:	7afb      	ldrb	r3, [r7, #11]
 80089ee:	3301      	adds	r3, #1
 80089f0:	72fb      	strb	r3, [r7, #11]
          break;
 80089f2:	e007      	b.n	8008a04 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80089f4:	6839      	ldr	r1, [r7, #0]
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fa41 	bl	8008e7e <USBD_CtlError>
          err++;
 80089fc:	7afb      	ldrb	r3, [r7, #11]
 80089fe:	3301      	adds	r3, #1
 8008a00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a02:	bf00      	nop
      }
      break;
 8008a04:	e037      	b.n	8008a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	7c1b      	ldrb	r3, [r3, #16]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d109      	bne.n	8008a22 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a16:	f107 0208 	add.w	r2, r7, #8
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	4798      	blx	r3
 8008a1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a20:	e029      	b.n	8008a76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fa2a 	bl	8008e7e <USBD_CtlError>
        err++;
 8008a2a:	7afb      	ldrb	r3, [r7, #11]
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	72fb      	strb	r3, [r7, #11]
      break;
 8008a30:	e021      	b.n	8008a76 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	7c1b      	ldrb	r3, [r3, #16]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10d      	bne.n	8008a56 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a42:	f107 0208 	add.w	r2, r7, #8
 8008a46:	4610      	mov	r0, r2
 8008a48:	4798      	blx	r3
 8008a4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	2207      	movs	r2, #7
 8008a52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a54:	e00f      	b.n	8008a76 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fa10 	bl	8008e7e <USBD_CtlError>
        err++;
 8008a5e:	7afb      	ldrb	r3, [r7, #11]
 8008a60:	3301      	adds	r3, #1
 8008a62:	72fb      	strb	r3, [r7, #11]
      break;
 8008a64:	e007      	b.n	8008a76 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fa08 	bl	8008e7e <USBD_CtlError>
      err++;
 8008a6e:	7afb      	ldrb	r3, [r7, #11]
 8008a70:	3301      	adds	r3, #1
 8008a72:	72fb      	strb	r3, [r7, #11]
      break;
 8008a74:	bf00      	nop
  }

  if (err != 0U)
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d11e      	bne.n	8008aba <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	88db      	ldrh	r3, [r3, #6]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d016      	beq.n	8008ab2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a84:	893b      	ldrh	r3, [r7, #8]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d00e      	beq.n	8008aa8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	88da      	ldrh	r2, [r3, #6]
 8008a8e:	893b      	ldrh	r3, [r7, #8]
 8008a90:	4293      	cmp	r3, r2
 8008a92:	bf28      	it	cs
 8008a94:	4613      	movcs	r3, r2
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a9a:	893b      	ldrh	r3, [r7, #8]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	68f9      	ldr	r1, [r7, #12]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fa69 	bl	8008f78 <USBD_CtlSendData>
 8008aa6:	e009      	b.n	8008abc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 f9e7 	bl	8008e7e <USBD_CtlError>
 8008ab0:	e004      	b.n	8008abc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f000 fac1 	bl	800903a <USBD_CtlSendStatus>
 8008ab8:	e000      	b.n	8008abc <USBD_GetDescriptor+0x2cc>
    return;
 8008aba:	bf00      	nop
  }
}
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop

08008ac4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b084      	sub	sp, #16
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	889b      	ldrh	r3, [r3, #4]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d131      	bne.n	8008b3a <USBD_SetAddress+0x76>
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	88db      	ldrh	r3, [r3, #6]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d12d      	bne.n	8008b3a <USBD_SetAddress+0x76>
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	885b      	ldrh	r3, [r3, #2]
 8008ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ae4:	d829      	bhi.n	8008b3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	885b      	ldrh	r3, [r3, #2]
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008af0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d104      	bne.n	8008b08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f9bc 	bl	8008e7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b06:	e01d      	b.n	8008b44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	7bfa      	ldrb	r2, [r7, #15]
 8008b0c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b10:	7bfb      	ldrb	r3, [r7, #15]
 8008b12:	4619      	mov	r1, r3
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 ff0b 	bl	8009930 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fa8d 	bl	800903a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b20:	7bfb      	ldrb	r3, [r7, #15]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d004      	beq.n	8008b30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2202      	movs	r2, #2
 8008b2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b2e:	e009      	b.n	8008b44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b38:	e004      	b.n	8008b44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f99e 	bl	8008e7e <USBD_CtlError>
  }
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b56:	2300      	movs	r3, #0
 8008b58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	885b      	ldrh	r3, [r3, #2]
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	4b4e      	ldr	r3, [pc, #312]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008b62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b64:	4b4d      	ldr	r3, [pc, #308]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d905      	bls.n	8008b78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008b6c:	6839      	ldr	r1, [r7, #0]
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 f985 	bl	8008e7e <USBD_CtlError>
    return USBD_FAIL;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e08c      	b.n	8008c92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b02      	cmp	r3, #2
 8008b82:	d002      	beq.n	8008b8a <USBD_SetConfig+0x3e>
 8008b84:	2b03      	cmp	r3, #3
 8008b86:	d029      	beq.n	8008bdc <USBD_SetConfig+0x90>
 8008b88:	e075      	b.n	8008c76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b8a:	4b44      	ldr	r3, [pc, #272]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d020      	beq.n	8008bd4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b92:	4b42      	ldr	r3, [pc, #264]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b9c:	4b3f      	ldr	r3, [pc, #252]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7fe ffcd 	bl	8007b42 <USBD_SetClassConfig>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d008      	beq.n	8008bc4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 f962 	bl	8008e7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2202      	movs	r2, #2
 8008bbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008bc2:	e065      	b.n	8008c90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fa38 	bl	800903a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008bd2:	e05d      	b.n	8008c90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fa30 	bl	800903a <USBD_CtlSendStatus>
      break;
 8008bda:	e059      	b.n	8008c90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d112      	bne.n	8008c0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008bec:	4b2b      	ldr	r3, [pc, #172]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008bf6:	4b29      	ldr	r3, [pc, #164]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f7fe ffbc 	bl	8007b7a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa19 	bl	800903a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c08:	e042      	b.n	8008c90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c0a:	4b24      	ldr	r3, [pc, #144]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d02a      	beq.n	8008c6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7fe ffaa 	bl	8007b7a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c26:	4b1d      	ldr	r3, [pc, #116]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c30:	4b1a      	ldr	r3, [pc, #104]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7fe ff83 	bl	8007b42 <USBD_SetClassConfig>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00f      	beq.n	8008c66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008c46:	6839      	ldr	r1, [r7, #0]
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 f918 	bl	8008e7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7fe ff8f 	bl	8007b7a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008c64:	e014      	b.n	8008c90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 f9e7 	bl	800903a <USBD_CtlSendStatus>
      break;
 8008c6c:	e010      	b.n	8008c90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 f9e3 	bl	800903a <USBD_CtlSendStatus>
      break;
 8008c74:	e00c      	b.n	8008c90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008c76:	6839      	ldr	r1, [r7, #0]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f900 	bl	8008e7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c7e:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <USBD_SetConfig+0x150>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7fe ff78 	bl	8007b7a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c8e:	bf00      	nop
  }

  return ret;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200007a0 	.word	0x200007a0

08008ca0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	88db      	ldrh	r3, [r3, #6]
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d004      	beq.n	8008cbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f8e2 	bl	8008e7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cba:	e023      	b.n	8008d04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	2b02      	cmp	r3, #2
 8008cc6:	dc02      	bgt.n	8008cce <USBD_GetConfig+0x2e>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	dc03      	bgt.n	8008cd4 <USBD_GetConfig+0x34>
 8008ccc:	e015      	b.n	8008cfa <USBD_GetConfig+0x5a>
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	d00b      	beq.n	8008cea <USBD_GetConfig+0x4a>
 8008cd2:	e012      	b.n	8008cfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	3308      	adds	r3, #8
 8008cde:	2201      	movs	r2, #1
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f948 	bl	8008f78 <USBD_CtlSendData>
        break;
 8008ce8:	e00c      	b.n	8008d04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	3304      	adds	r3, #4
 8008cee:	2201      	movs	r2, #1
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f940 	bl	8008f78 <USBD_CtlSendData>
        break;
 8008cf8:	e004      	b.n	8008d04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 f8be 	bl	8008e7e <USBD_CtlError>
        break;
 8008d02:	bf00      	nop
}
 8008d04:	bf00      	nop
 8008d06:	3708      	adds	r7, #8
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d81e      	bhi.n	8008d62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	88db      	ldrh	r3, [r3, #6]
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d004      	beq.n	8008d36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f8a5 	bl	8008e7e <USBD_CtlError>
        break;
 8008d34:	e01a      	b.n	8008d6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d005      	beq.n	8008d52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f043 0202 	orr.w	r2, r3, #2
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	330c      	adds	r3, #12
 8008d56:	2202      	movs	r2, #2
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f90c 	bl	8008f78 <USBD_CtlSendData>
      break;
 8008d60:	e004      	b.n	8008d6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008d62:	6839      	ldr	r1, [r7, #0]
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 f88a 	bl	8008e7e <USBD_CtlError>
      break;
 8008d6a:	bf00      	nop
  }
}
 8008d6c:	bf00      	nop
 8008d6e:	3708      	adds	r7, #8
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}

08008d74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	885b      	ldrh	r3, [r3, #2]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d107      	bne.n	8008d96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2201      	movs	r2, #1
 8008d8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f953 	bl	800903a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d94:	e013      	b.n	8008dbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	885b      	ldrh	r3, [r3, #2]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d10b      	bne.n	8008db6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	889b      	ldrh	r3, [r3, #4]
 8008da2:	0a1b      	lsrs	r3, r3, #8
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	b2da      	uxtb	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f943 	bl	800903a <USBD_CtlSendStatus>
}
 8008db4:	e003      	b.n	8008dbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f860 	bl	8008e7e <USBD_CtlError>
}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
 8008dce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	2b02      	cmp	r3, #2
 8008ddc:	d80b      	bhi.n	8008df6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	885b      	ldrh	r3, [r3, #2]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d10c      	bne.n	8008e00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f923 	bl	800903a <USBD_CtlSendStatus>
      }
      break;
 8008df4:	e004      	b.n	8008e00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008df6:	6839      	ldr	r1, [r7, #0]
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 f840 	bl	8008e7e <USBD_CtlError>
      break;
 8008dfe:	e000      	b.n	8008e02 <USBD_ClrFeature+0x3c>
      break;
 8008e00:	bf00      	nop
  }
}
 8008e02:	bf00      	nop
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}

08008e0a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e0a:	b580      	push	{r7, lr}
 8008e0c:	b084      	sub	sp, #16
 8008e0e:	af00      	add	r7, sp, #0
 8008e10:	6078      	str	r0, [r7, #4]
 8008e12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	781a      	ldrb	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3301      	adds	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	3301      	adds	r3, #1
 8008e32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff fa3d 	bl	80082b4 <SWAPBYTE>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	3301      	adds	r3, #1
 8008e46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7ff fa30 	bl	80082b4 <SWAPBYTE>
 8008e54:	4603      	mov	r3, r0
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff fa23 	bl	80082b4 <SWAPBYTE>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	461a      	mov	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	80da      	strh	r2, [r3, #6]
}
 8008e76:	bf00      	nop
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
 8008e86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e88:	2180      	movs	r1, #128	@ 0x80
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fce6 	bl	800985c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 fce2 	bl	800985c <USBD_LL_StallEP>
}
 8008e98:	bf00      	nop
 8008e9a:	3708      	adds	r7, #8
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}

08008ea0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b086      	sub	sp, #24
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d042      	beq.n	8008f3c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008eba:	6938      	ldr	r0, [r7, #16]
 8008ebc:	f000 f842 	bl	8008f44 <USBD_GetLen>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008eca:	d808      	bhi.n	8008ede <USBD_GetString+0x3e>
 8008ecc:	6938      	ldr	r0, [r7, #16]
 8008ece:	f000 f839 	bl	8008f44 <USBD_GetLen>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	b29b      	uxth	r3, r3
 8008ed8:	005b      	lsls	r3, r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	e001      	b.n	8008ee2 <USBD_GetString+0x42>
 8008ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4413      	add	r3, r2
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7812      	ldrb	r2, [r2, #0]
 8008ef0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ef2:	7dfb      	ldrb	r3, [r7, #23]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	4413      	add	r3, r2
 8008efe:	2203      	movs	r2, #3
 8008f00:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f02:	7dfb      	ldrb	r3, [r7, #23]
 8008f04:	3301      	adds	r3, #1
 8008f06:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f08:	e013      	b.n	8008f32 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	4413      	add	r3, r2
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	7812      	ldrb	r2, [r2, #0]
 8008f14:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	613b      	str	r3, [r7, #16]
    idx++;
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f22:	7dfb      	ldrb	r3, [r7, #23]
 8008f24:	68ba      	ldr	r2, [r7, #8]
 8008f26:	4413      	add	r3, r2
 8008f28:	2200      	movs	r2, #0
 8008f2a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e7      	bne.n	8008f0a <USBD_GetString+0x6a>
 8008f3a:	e000      	b.n	8008f3e <USBD_GetString+0x9e>
    return;
 8008f3c:	bf00      	nop
  }
}
 8008f3e:	3718      	adds	r7, #24
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f54:	e005      	b.n	8008f62 <USBD_GetLen+0x1e>
  {
    len++;
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f5      	bne.n	8008f56 <USBD_GetLen+0x12>
  }

  return len;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3714      	adds	r7, #20
 8008f70:	46bd      	mov	sp, r7
 8008f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f76:	4770      	bx	lr

08008f78 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2202      	movs	r2, #2
 8008f88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	68f8      	ldr	r0, [r7, #12]
 8008fa6:	f000 fce2 	bl	800996e <USBD_LL_Transmit>

  return USBD_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3710      	adds	r7, #16
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}

08008fb4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	60f8      	str	r0, [r7, #12]
 8008fbc:	60b9      	str	r1, [r7, #8]
 8008fbe:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 fcd1 	bl	800996e <USBD_LL_Transmit>

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b084      	sub	sp, #16
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	60f8      	str	r0, [r7, #12]
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2203      	movs	r2, #3
 8008fe6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	2100      	movs	r1, #0
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 fcd1 	bl	80099b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68ba      	ldr	r2, [r7, #8]
 8009028:	2100      	movs	r1, #0
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fcc0 	bl	80099b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	4618      	mov	r0, r3
 8009034:	3710      	adds	r7, #16
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}

0800903a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800903a:	b580      	push	{r7, lr}
 800903c:	b082      	sub	sp, #8
 800903e:	af00      	add	r7, sp, #0
 8009040:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2204      	movs	r2, #4
 8009046:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800904a:	2300      	movs	r3, #0
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 fc8c 	bl	800996e <USBD_LL_Transmit>

  return USBD_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2205      	movs	r2, #5
 800906c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009070:	2300      	movs	r3, #0
 8009072:	2200      	movs	r2, #0
 8009074:	2100      	movs	r1, #0
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fc9a 	bl	80099b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3708      	adds	r7, #8
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
	...

08009088 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800908c:	2200      	movs	r2, #0
 800908e:	4912      	ldr	r1, [pc, #72]	@ (80090d8 <MX_USB_DEVICE_Init+0x50>)
 8009090:	4812      	ldr	r0, [pc, #72]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 8009092:	f7fe fcd9 	bl	8007a48 <USBD_Init>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d001      	beq.n	80090a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800909c:	f7f8 fa0c 	bl	80014b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80090a0:	490f      	ldr	r1, [pc, #60]	@ (80090e0 <MX_USB_DEVICE_Init+0x58>)
 80090a2:	480e      	ldr	r0, [pc, #56]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090a4:	f7fe fd00 	bl	8007aa8 <USBD_RegisterClass>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090ae:	f7f8 fa03 	bl	80014b8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80090b2:	490c      	ldr	r1, [pc, #48]	@ (80090e4 <MX_USB_DEVICE_Init+0x5c>)
 80090b4:	4809      	ldr	r0, [pc, #36]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090b6:	f7fe fc37 	bl	8007928 <USBD_CDC_RegisterInterface>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d001      	beq.n	80090c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090c0:	f7f8 f9fa 	bl	80014b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090c4:	4805      	ldr	r0, [pc, #20]	@ (80090dc <MX_USB_DEVICE_Init+0x54>)
 80090c6:	f7fe fd25 	bl	8007b14 <USBD_Start>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090d0:	f7f8 f9f2 	bl	80014b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090d4:	bf00      	nop
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	200000ac 	.word	0x200000ac
 80090dc:	200007a4 	.word	0x200007a4
 80090e0:	20000018 	.word	0x20000018
 80090e4:	20000098 	.word	0x20000098

080090e8 <CDC_Init_FS>:
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80090ec:	2200      	movs	r2, #0
 80090ee:	4905      	ldr	r1, [pc, #20]	@ (8009104 <CDC_Init_FS+0x1c>)
 80090f0:	4805      	ldr	r0, [pc, #20]	@ (8009108 <CDC_Init_FS+0x20>)
 80090f2:	f7fe fc33 	bl	800795c <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80090f6:	4905      	ldr	r1, [pc, #20]	@ (800910c <CDC_Init_FS+0x24>)
 80090f8:	4803      	ldr	r0, [pc, #12]	@ (8009108 <CDC_Init_FS+0x20>)
 80090fa:	f7fe fc51 	bl	80079a0 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80090fe:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8009100:	4618      	mov	r0, r3
 8009102:	bd80      	pop	{r7, pc}
 8009104:	200012c8 	.word	0x200012c8
 8009108:	200007a4 	.word	0x200007a4
 800910c:	20000ac8 	.word	0x20000ac8

08009110 <CDC_DeInit_FS>:
/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void)
{
 8009110:	b480      	push	{r7}
 8009112:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8009114:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8009116:	4618      	mov	r0, r3
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <CDC_Control_FS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
 800912c:	4613      	mov	r3, r2
 800912e:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch(cmd)
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	2b23      	cmp	r3, #35	@ 0x23
 8009134:	d84a      	bhi.n	80091cc <CDC_Control_FS+0xac>
 8009136:	a201      	add	r2, pc, #4	@ (adr r2, 800913c <CDC_Control_FS+0x1c>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	080091cd 	.word	0x080091cd
 8009140:	080091cd 	.word	0x080091cd
 8009144:	080091cd 	.word	0x080091cd
 8009148:	080091cd 	.word	0x080091cd
 800914c:	080091cd 	.word	0x080091cd
 8009150:	080091cd 	.word	0x080091cd
 8009154:	080091cd 	.word	0x080091cd
 8009158:	080091cd 	.word	0x080091cd
 800915c:	080091cd 	.word	0x080091cd
 8009160:	080091cd 	.word	0x080091cd
 8009164:	080091cd 	.word	0x080091cd
 8009168:	080091cd 	.word	0x080091cd
 800916c:	080091cd 	.word	0x080091cd
 8009170:	080091cd 	.word	0x080091cd
 8009174:	080091cd 	.word	0x080091cd
 8009178:	080091cd 	.word	0x080091cd
 800917c:	080091cd 	.word	0x080091cd
 8009180:	080091cd 	.word	0x080091cd
 8009184:	080091cd 	.word	0x080091cd
 8009188:	080091cd 	.word	0x080091cd
 800918c:	080091cd 	.word	0x080091cd
 8009190:	080091cd 	.word	0x080091cd
 8009194:	080091cd 	.word	0x080091cd
 8009198:	080091cd 	.word	0x080091cd
 800919c:	080091cd 	.word	0x080091cd
 80091a0:	080091cd 	.word	0x080091cd
 80091a4:	080091cd 	.word	0x080091cd
 80091a8:	080091cd 	.word	0x080091cd
 80091ac:	080091cd 	.word	0x080091cd
 80091b0:	080091cd 	.word	0x080091cd
 80091b4:	080091cd 	.word	0x080091cd
 80091b8:	080091cd 	.word	0x080091cd
 80091bc:	080091cd 	.word	0x080091cd
 80091c0:	080091cd 	.word	0x080091cd
 80091c4:	080091cd 	.word	0x080091cd
 80091c8:	080091cd 	.word	0x080091cd
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80091cc:	bf00      	nop
	}

	return (USBD_OK);
 80091ce:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	370c      	adds	r7, #12
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr

080091dc <CDC_Receive_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b082      	sub	sp, #8
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */


	usb_rx_length = *Len;
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a0e      	ldr	r2, [pc, #56]	@ (8009224 <CDC_Receive_FS+0x48>)
 80091ec:	6013      	str	r3, [r2, #0]
	if (usb_rx_length <= USB_RX_BUFFER_SIZE) {
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <CDC_Receive_FS+0x48>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b40      	cmp	r3, #64	@ 0x40
 80091f4:	d809      	bhi.n	800920a <CDC_Receive_FS+0x2e>
		memcpy(usb_rx_buffer, Buf, usb_rx_length);
 80091f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009224 <CDC_Receive_FS+0x48>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	461a      	mov	r2, r3
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	480a      	ldr	r0, [pc, #40]	@ (8009228 <CDC_Receive_FS+0x4c>)
 8009200:	f001 fa79 	bl	800a6f6 <memcpy>
		usb_data_received = 1;
 8009204:	4b09      	ldr	r3, [pc, #36]	@ (800922c <CDC_Receive_FS+0x50>)
 8009206:	2201      	movs	r2, #1
 8009208:	701a      	strb	r2, [r3, #0]
	}


	// Copy to your own buffer (make sure it fits)

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800920a:	6879      	ldr	r1, [r7, #4]
 800920c:	4808      	ldr	r0, [pc, #32]	@ (8009230 <CDC_Receive_FS+0x54>)
 800920e:	f7fe fbc7 	bl	80079a0 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009212:	4807      	ldr	r0, [pc, #28]	@ (8009230 <CDC_Receive_FS+0x54>)
 8009214:	f7fe fbe2 	bl	80079dc <USBD_CDC_ReceivePacket>

	//	memcpy(usb_rx_buffer, Buf, *Len);
	//	usb_rx_buffer[*Len] = '\0';  // Null-terminate
	//	usb_data_ready = 1;

	return (USBD_OK);
 8009218:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000ac0 	.word	0x20000ac0
 8009228:	20000a80 	.word	0x20000a80
 800922c:	20000ac4 	.word	0x20000ac4
 8009230:	200007a4 	.word	0x200007a4

08009234 <CDC_TransmitCplt_FS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009234:	b480      	push	{r7}
 8009236:	b087      	sub	sp, #28
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4613      	mov	r3, r2
 8009240:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8009242:	2300      	movs	r3, #0
 8009244:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8009246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
	...

08009258 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2212      	movs	r2, #18
 8009268:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800926a:	4b03      	ldr	r3, [pc, #12]	@ (8009278 <USBD_FS_DeviceDescriptor+0x20>)
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr
 8009278:	200000c8 	.word	0x200000c8

0800927c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2204      	movs	r2, #4
 800928c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800928e:	4b03      	ldr	r3, [pc, #12]	@ (800929c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009290:	4618      	mov	r0, r3
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr
 800929c:	200000dc 	.word	0x200000dc

080092a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	6039      	str	r1, [r7, #0]
 80092aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d105      	bne.n	80092be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092b2:	683a      	ldr	r2, [r7, #0]
 80092b4:	4907      	ldr	r1, [pc, #28]	@ (80092d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80092b6:	4808      	ldr	r0, [pc, #32]	@ (80092d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80092b8:	f7ff fdf2 	bl	8008ea0 <USBD_GetString>
 80092bc:	e004      	b.n	80092c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4904      	ldr	r1, [pc, #16]	@ (80092d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80092c2:	4805      	ldr	r0, [pc, #20]	@ (80092d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80092c4:	f7ff fdec 	bl	8008ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092c8:	4b02      	ldr	r3, [pc, #8]	@ (80092d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	20001ac8 	.word	0x20001ac8
 80092d8:	0800c7c8 	.word	0x0800c7c8

080092dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	4904      	ldr	r1, [pc, #16]	@ (80092fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092ec:	4804      	ldr	r0, [pc, #16]	@ (8009300 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092ee:	f7ff fdd7 	bl	8008ea0 <USBD_GetString>
  return USBD_StrDesc;
 80092f2:	4b02      	ldr	r3, [pc, #8]	@ (80092fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20001ac8 	.word	0x20001ac8
 8009300:	0800c7e0 	.word	0x0800c7e0

08009304 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	6039      	str	r1, [r7, #0]
 800930e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	221a      	movs	r2, #26
 8009314:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009316:	f000 f843 	bl	80093a0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800931a:	4b02      	ldr	r3, [pc, #8]	@ (8009324 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800931c:	4618      	mov	r0, r3
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	200000e0 	.word	0x200000e0

08009328 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	4603      	mov	r3, r0
 8009330:	6039      	str	r1, [r7, #0]
 8009332:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d105      	bne.n	8009346 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	4907      	ldr	r1, [pc, #28]	@ (800935c <USBD_FS_ConfigStrDescriptor+0x34>)
 800933e:	4808      	ldr	r0, [pc, #32]	@ (8009360 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009340:	f7ff fdae 	bl	8008ea0 <USBD_GetString>
 8009344:	e004      	b.n	8009350 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	4904      	ldr	r1, [pc, #16]	@ (800935c <USBD_FS_ConfigStrDescriptor+0x34>)
 800934a:	4805      	ldr	r0, [pc, #20]	@ (8009360 <USBD_FS_ConfigStrDescriptor+0x38>)
 800934c:	f7ff fda8 	bl	8008ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009350:	4b02      	ldr	r3, [pc, #8]	@ (800935c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009352:	4618      	mov	r0, r3
 8009354:	3708      	adds	r7, #8
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}
 800935a:	bf00      	nop
 800935c:	20001ac8 	.word	0x20001ac8
 8009360:	0800c7f4 	.word	0x0800c7f4

08009364 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d105      	bne.n	8009382 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	4907      	ldr	r1, [pc, #28]	@ (8009398 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800937a:	4808      	ldr	r0, [pc, #32]	@ (800939c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800937c:	f7ff fd90 	bl	8008ea0 <USBD_GetString>
 8009380:	e004      	b.n	800938c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009382:	683a      	ldr	r2, [r7, #0]
 8009384:	4904      	ldr	r1, [pc, #16]	@ (8009398 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009386:	4805      	ldr	r0, [pc, #20]	@ (800939c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009388:	f7ff fd8a 	bl	8008ea0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800938c:	4b02      	ldr	r3, [pc, #8]	@ (8009398 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800938e:	4618      	mov	r0, r3
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	20001ac8 	.word	0x20001ac8
 800939c:	0800c800 	.word	0x0800c800

080093a0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093a6:	4b0f      	ldr	r3, [pc, #60]	@ (80093e4 <Get_SerialNum+0x44>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093ac:	4b0e      	ldr	r3, [pc, #56]	@ (80093e8 <Get_SerialNum+0x48>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093b2:	4b0e      	ldr	r3, [pc, #56]	@ (80093ec <Get_SerialNum+0x4c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4413      	add	r3, r2
 80093be:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d009      	beq.n	80093da <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093c6:	2208      	movs	r2, #8
 80093c8:	4909      	ldr	r1, [pc, #36]	@ (80093f0 <Get_SerialNum+0x50>)
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	f000 f814 	bl	80093f8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093d0:	2204      	movs	r2, #4
 80093d2:	4908      	ldr	r1, [pc, #32]	@ (80093f4 <Get_SerialNum+0x54>)
 80093d4:	68b8      	ldr	r0, [r7, #8]
 80093d6:	f000 f80f 	bl	80093f8 <IntToUnicode>
  }
}
 80093da:	bf00      	nop
 80093dc:	3710      	adds	r7, #16
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	1fff7a10 	.word	0x1fff7a10
 80093e8:	1fff7a14 	.word	0x1fff7a14
 80093ec:	1fff7a18 	.word	0x1fff7a18
 80093f0:	200000e2 	.word	0x200000e2
 80093f4:	200000f2 	.word	0x200000f2

080093f8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b087      	sub	sp, #28
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	4613      	mov	r3, r2
 8009404:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009406:	2300      	movs	r3, #0
 8009408:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800940a:	2300      	movs	r3, #0
 800940c:	75fb      	strb	r3, [r7, #23]
 800940e:	e027      	b.n	8009460 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	0f1b      	lsrs	r3, r3, #28
 8009414:	2b09      	cmp	r3, #9
 8009416:	d80b      	bhi.n	8009430 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	0f1b      	lsrs	r3, r3, #28
 800941c:	b2da      	uxtb	r2, r3
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	4619      	mov	r1, r3
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	440b      	add	r3, r1
 8009428:	3230      	adds	r2, #48	@ 0x30
 800942a:	b2d2      	uxtb	r2, r2
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	e00a      	b.n	8009446 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	0f1b      	lsrs	r3, r3, #28
 8009434:	b2da      	uxtb	r2, r3
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	005b      	lsls	r3, r3, #1
 800943a:	4619      	mov	r1, r3
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	440b      	add	r3, r1
 8009440:	3237      	adds	r2, #55	@ 0x37
 8009442:	b2d2      	uxtb	r2, r2
 8009444:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	011b      	lsls	r3, r3, #4
 800944a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800944c:	7dfb      	ldrb	r3, [r7, #23]
 800944e:	005b      	lsls	r3, r3, #1
 8009450:	3301      	adds	r3, #1
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	4413      	add	r3, r2
 8009456:	2200      	movs	r2, #0
 8009458:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800945a:	7dfb      	ldrb	r3, [r7, #23]
 800945c:	3301      	adds	r3, #1
 800945e:	75fb      	strb	r3, [r7, #23]
 8009460:	7dfa      	ldrb	r2, [r7, #23]
 8009462:	79fb      	ldrb	r3, [r7, #7]
 8009464:	429a      	cmp	r2, r3
 8009466:	d3d3      	bcc.n	8009410 <IntToUnicode+0x18>
  }
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	371c      	adds	r7, #28
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
	...

08009478 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	@ 0x28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009480:	f107 0314 	add.w	r3, r7, #20
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	605a      	str	r2, [r3, #4]
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	60da      	str	r2, [r3, #12]
 800948e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009498:	d13a      	bne.n	8009510 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	4b1e      	ldr	r3, [pc, #120]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a2:	4a1d      	ldr	r2, [pc, #116]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094a4:	f043 0301 	orr.w	r3, r3, #1
 80094a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80094aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094b6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80094ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094bc:	2302      	movs	r3, #2
 80094be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094c4:	2303      	movs	r3, #3
 80094c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094c8:	230a      	movs	r3, #10
 80094ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4619      	mov	r1, r3
 80094d2:	4812      	ldr	r0, [pc, #72]	@ (800951c <HAL_PCD_MspInit+0xa4>)
 80094d4:	f7f9 f916 	bl	8002704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094dc:	4a0e      	ldr	r2, [pc, #56]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094e2:	6353      	str	r3, [r2, #52]	@ 0x34
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]
 80094e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ec:	4a0a      	ldr	r2, [pc, #40]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80094f4:	4b08      	ldr	r3, [pc, #32]	@ (8009518 <HAL_PCD_MspInit+0xa0>)
 80094f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009500:	2200      	movs	r2, #0
 8009502:	2100      	movs	r1, #0
 8009504:	2043      	movs	r0, #67	@ 0x43
 8009506:	f7f9 f8c6 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800950a:	2043      	movs	r0, #67	@ 0x43
 800950c:	f7f9 f8df 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009510:	bf00      	nop
 8009512:	3728      	adds	r7, #40	@ 0x28
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	40023800 	.word	0x40023800
 800951c:	40020000 	.word	0x40020000

08009520 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f7fe fb39 	bl	8007bae <USBD_LL_SetupStage>
}
 800953c:	bf00      	nop
 800953e:	3708      	adds	r7, #8
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	460b      	mov	r3, r1
 800954e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009556:	78fa      	ldrb	r2, [r7, #3]
 8009558:	6879      	ldr	r1, [r7, #4]
 800955a:	4613      	mov	r3, r2
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	4413      	add	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	440b      	add	r3, r1
 8009564:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	78fb      	ldrb	r3, [r7, #3]
 800956c:	4619      	mov	r1, r3
 800956e:	f7fe fb73 	bl	8007c58 <USBD_LL_DataOutStage>
}
 8009572:	bf00      	nop
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}

0800957a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800957a:	b580      	push	{r7, lr}
 800957c:	b082      	sub	sp, #8
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800958c:	78fa      	ldrb	r2, [r7, #3]
 800958e:	6879      	ldr	r1, [r7, #4]
 8009590:	4613      	mov	r3, r2
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	3320      	adds	r3, #32
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	78fb      	ldrb	r3, [r7, #3]
 80095a0:	4619      	mov	r1, r3
 80095a2:	f7fe fc15 	bl	8007dd0 <USBD_LL_DataInStage>
}
 80095a6:	bf00      	nop
 80095a8:	3708      	adds	r7, #8
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b082      	sub	sp, #8
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095bc:	4618      	mov	r0, r3
 80095be:	f7fe fd59 	bl	8008074 <USBD_LL_SOF>
}
 80095c2:	bf00      	nop
 80095c4:	3708      	adds	r7, #8
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095d2:	2301      	movs	r3, #1
 80095d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	79db      	ldrb	r3, [r3, #7]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d102      	bne.n	80095e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095de:	2300      	movs	r3, #0
 80095e0:	73fb      	strb	r3, [r7, #15]
 80095e2:	e008      	b.n	80095f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	79db      	ldrb	r3, [r3, #7]
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	d102      	bne.n	80095f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80095ec:	2301      	movs	r3, #1
 80095ee:	73fb      	strb	r3, [r7, #15]
 80095f0:	e001      	b.n	80095f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80095f2:	f7f7 ff61 	bl	80014b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80095fc:	7bfa      	ldrb	r2, [r7, #15]
 80095fe:	4611      	mov	r1, r2
 8009600:	4618      	mov	r0, r3
 8009602:	f7fe fcf3 	bl	8007fec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fc9a 	bl	8007f46 <USBD_LL_Reset>
}
 8009612:	bf00      	nop
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
	...

0800961c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b082      	sub	sp, #8
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800962a:	4618      	mov	r0, r3
 800962c:	f7fe fcee 	bl	800800c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	687a      	ldr	r2, [r7, #4]
 800963c:	6812      	ldr	r2, [r2, #0]
 800963e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009642:	f043 0301 	orr.w	r3, r3, #1
 8009646:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	7adb      	ldrb	r3, [r3, #11]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d005      	beq.n	800965c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009650:	4b04      	ldr	r3, [pc, #16]	@ (8009664 <HAL_PCD_SuspendCallback+0x48>)
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	4a03      	ldr	r2, [pc, #12]	@ (8009664 <HAL_PCD_SuspendCallback+0x48>)
 8009656:	f043 0306 	orr.w	r3, r3, #6
 800965a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800965c:	bf00      	nop
 800965e:	3708      	adds	r7, #8
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	e000ed00 	.word	0xe000ed00

08009668 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fce4 	bl	8008044 <USBD_LL_Resume>
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
 800968c:	460b      	mov	r3, r1
 800968e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009696:	78fa      	ldrb	r2, [r7, #3]
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7fe fd3c 	bl	8008118 <USBD_LL_IsoOUTIncomplete>
}
 80096a0:	bf00      	nop
 80096a2:	3708      	adds	r7, #8
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}

080096a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096ba:	78fa      	ldrb	r2, [r7, #3]
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f7fe fcf8 	bl	80080b4 <USBD_LL_IsoINIncomplete>
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fe fd4e 	bl	800817c <USBD_LL_DevConnected>
}
 80096e0:	bf00      	nop
 80096e2:	3708      	adds	r7, #8
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe fd4b 	bl	8008192 <USBD_LL_DevDisconnected>
}
 80096fc:	bf00      	nop
 80096fe:	3708      	adds	r7, #8
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b082      	sub	sp, #8
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d13c      	bne.n	800978e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009714:	4a20      	ldr	r2, [pc, #128]	@ (8009798 <USBD_LL_Init+0x94>)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a1e      	ldr	r2, [pc, #120]	@ (8009798 <USBD_LL_Init+0x94>)
 8009720:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009724:	4b1c      	ldr	r3, [pc, #112]	@ (8009798 <USBD_LL_Init+0x94>)
 8009726:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800972a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800972c:	4b1a      	ldr	r3, [pc, #104]	@ (8009798 <USBD_LL_Init+0x94>)
 800972e:	2204      	movs	r2, #4
 8009730:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009732:	4b19      	ldr	r3, [pc, #100]	@ (8009798 <USBD_LL_Init+0x94>)
 8009734:	2202      	movs	r2, #2
 8009736:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009738:	4b17      	ldr	r3, [pc, #92]	@ (8009798 <USBD_LL_Init+0x94>)
 800973a:	2200      	movs	r2, #0
 800973c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800973e:	4b16      	ldr	r3, [pc, #88]	@ (8009798 <USBD_LL_Init+0x94>)
 8009740:	2202      	movs	r2, #2
 8009742:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009744:	4b14      	ldr	r3, [pc, #80]	@ (8009798 <USBD_LL_Init+0x94>)
 8009746:	2200      	movs	r2, #0
 8009748:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800974a:	4b13      	ldr	r3, [pc, #76]	@ (8009798 <USBD_LL_Init+0x94>)
 800974c:	2200      	movs	r2, #0
 800974e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009750:	4b11      	ldr	r3, [pc, #68]	@ (8009798 <USBD_LL_Init+0x94>)
 8009752:	2200      	movs	r2, #0
 8009754:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009756:	4b10      	ldr	r3, [pc, #64]	@ (8009798 <USBD_LL_Init+0x94>)
 8009758:	2200      	movs	r2, #0
 800975a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800975c:	4b0e      	ldr	r3, [pc, #56]	@ (8009798 <USBD_LL_Init+0x94>)
 800975e:	2200      	movs	r2, #0
 8009760:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009762:	480d      	ldr	r0, [pc, #52]	@ (8009798 <USBD_LL_Init+0x94>)
 8009764:	f7fa fabc 	bl	8003ce0 <HAL_PCD_Init>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800976e:	f7f7 fea3 	bl	80014b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009772:	2180      	movs	r1, #128	@ 0x80
 8009774:	4808      	ldr	r0, [pc, #32]	@ (8009798 <USBD_LL_Init+0x94>)
 8009776:	f7fb fce8 	bl	800514a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800977a:	2240      	movs	r2, #64	@ 0x40
 800977c:	2100      	movs	r1, #0
 800977e:	4806      	ldr	r0, [pc, #24]	@ (8009798 <USBD_LL_Init+0x94>)
 8009780:	f7fb fc9c 	bl	80050bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009784:	2280      	movs	r2, #128	@ 0x80
 8009786:	2101      	movs	r1, #1
 8009788:	4803      	ldr	r0, [pc, #12]	@ (8009798 <USBD_LL_Init+0x94>)
 800978a:	f7fb fc97 	bl	80050bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800978e:	2300      	movs	r3, #0
}
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20001cc8 	.word	0x20001cc8

0800979c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fa fba3 	bl	8003efe <HAL_PCD_Start>
 80097b8:	4603      	mov	r3, r0
 80097ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 f942 	bl	8009a48 <USBD_Get_USB_Status>
 80097c4:	4603      	mov	r3, r0
 80097c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097d2:	b580      	push	{r7, lr}
 80097d4:	b084      	sub	sp, #16
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
 80097da:	4608      	mov	r0, r1
 80097dc:	4611      	mov	r1, r2
 80097de:	461a      	mov	r2, r3
 80097e0:	4603      	mov	r3, r0
 80097e2:	70fb      	strb	r3, [r7, #3]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70bb      	strb	r3, [r7, #2]
 80097e8:	4613      	mov	r3, r2
 80097ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80097fa:	78bb      	ldrb	r3, [r7, #2]
 80097fc:	883a      	ldrh	r2, [r7, #0]
 80097fe:	78f9      	ldrb	r1, [r7, #3]
 8009800:	f7fb f877 	bl	80048f2 <HAL_PCD_EP_Open>
 8009804:	4603      	mov	r3, r0
 8009806:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009808:	7bfb      	ldrb	r3, [r7, #15]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f91c 	bl	8009a48 <USBD_Get_USB_Status>
 8009810:	4603      	mov	r3, r0
 8009812:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009814:	7bbb      	ldrb	r3, [r7, #14]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
 8009826:	460b      	mov	r3, r1
 8009828:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009838:	78fa      	ldrb	r2, [r7, #3]
 800983a:	4611      	mov	r1, r2
 800983c:	4618      	mov	r0, r3
 800983e:	f7fb f8c2 	bl	80049c6 <HAL_PCD_EP_Close>
 8009842:	4603      	mov	r3, r0
 8009844:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009846:	7bfb      	ldrb	r3, [r7, #15]
 8009848:	4618      	mov	r0, r3
 800984a:	f000 f8fd 	bl	8009a48 <USBD_Get_USB_Status>
 800984e:	4603      	mov	r3, r0
 8009850:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009852:	7bbb      	ldrb	r3, [r7, #14]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	460b      	mov	r3, r1
 8009866:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009876:	78fa      	ldrb	r2, [r7, #3]
 8009878:	4611      	mov	r1, r2
 800987a:	4618      	mov	r0, r3
 800987c:	f7fb f97a 	bl	8004b74 <HAL_PCD_EP_SetStall>
 8009880:	4603      	mov	r3, r0
 8009882:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009884:	7bfb      	ldrb	r3, [r7, #15]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 f8de 	bl	8009a48 <USBD_Get_USB_Status>
 800988c:	4603      	mov	r3, r0
 800988e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009890:	7bbb      	ldrb	r3, [r7, #14]
}
 8009892:	4618      	mov	r0, r3
 8009894:	3710      	adds	r7, #16
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	460b      	mov	r3, r1
 80098a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098b4:	78fa      	ldrb	r2, [r7, #3]
 80098b6:	4611      	mov	r1, r2
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fb f9be 	bl	8004c3a <HAL_PCD_EP_ClrStall>
 80098be:	4603      	mov	r3, r0
 80098c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f000 f8bf 	bl	8009a48 <USBD_Get_USB_Status>
 80098ca:	4603      	mov	r3, r0
 80098cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80098ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	da0b      	bge.n	800990c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80098fa:	68f9      	ldr	r1, [r7, #12]
 80098fc:	4613      	mov	r3, r2
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	4413      	add	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	440b      	add	r3, r1
 8009906:	3316      	adds	r3, #22
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	e00b      	b.n	8009924 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	4613      	mov	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009922:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800993c:	2300      	movs	r3, #0
 800993e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009940:	2300      	movs	r3, #0
 8009942:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800994a:	78fa      	ldrb	r2, [r7, #3]
 800994c:	4611      	mov	r1, r2
 800994e:	4618      	mov	r0, r3
 8009950:	f7fa ffab 	bl	80048aa <HAL_PCD_SetAddress>
 8009954:	4603      	mov	r3, r0
 8009956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009958:	7bfb      	ldrb	r3, [r7, #15]
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f874 	bl	8009a48 <USBD_Get_USB_Status>
 8009960:	4603      	mov	r3, r0
 8009962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009964:	7bbb      	ldrb	r3, [r7, #14]
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b086      	sub	sp, #24
 8009972:	af00      	add	r7, sp, #0
 8009974:	60f8      	str	r0, [r7, #12]
 8009976:	607a      	str	r2, [r7, #4]
 8009978:	603b      	str	r3, [r7, #0]
 800997a:	460b      	mov	r3, r1
 800997c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800998c:	7af9      	ldrb	r1, [r7, #11]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	f7fb f8b5 	bl	8004b00 <HAL_PCD_EP_Transmit>
 8009996:	4603      	mov	r3, r0
 8009998:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800999a:	7dfb      	ldrb	r3, [r7, #23]
 800999c:	4618      	mov	r0, r3
 800999e:	f000 f853 	bl	8009a48 <USBD_Get_USB_Status>
 80099a2:	4603      	mov	r3, r0
 80099a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099a6:	7dbb      	ldrb	r3, [r7, #22]
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3718      	adds	r7, #24
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	607a      	str	r2, [r7, #4]
 80099ba:	603b      	str	r3, [r7, #0]
 80099bc:	460b      	mov	r3, r1
 80099be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80099ce:	7af9      	ldrb	r1, [r7, #11]
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	f7fb f841 	bl	8004a5a <HAL_PCD_EP_Receive>
 80099d8:	4603      	mov	r3, r0
 80099da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099dc:	7dfb      	ldrb	r3, [r7, #23]
 80099de:	4618      	mov	r0, r3
 80099e0:	f000 f832 	bl	8009a48 <USBD_Get_USB_Status>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099e8:	7dbb      	ldrb	r3, [r7, #22]
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	460b      	mov	r3, r1
 80099fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a04:	78fa      	ldrb	r2, [r7, #3]
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fb f861 	bl	8004ad0 <HAL_PCD_EP_GetRxCount>
 8009a0e:	4603      	mov	r3, r0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a20:	4b03      	ldr	r3, [pc, #12]	@ (8009a30 <USBD_static_malloc+0x18>)
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
 8009a2e:	bf00      	nop
 8009a30:	200021ac 	.word	0x200021ac

08009a34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]

}
 8009a3c:	bf00      	nop
 8009a3e:	370c      	adds	r7, #12
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a56:	79fb      	ldrb	r3, [r7, #7]
 8009a58:	2b03      	cmp	r3, #3
 8009a5a:	d817      	bhi.n	8009a8c <USBD_Get_USB_Status+0x44>
 8009a5c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a64 <USBD_Get_USB_Status+0x1c>)
 8009a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a62:	bf00      	nop
 8009a64:	08009a75 	.word	0x08009a75
 8009a68:	08009a7b 	.word	0x08009a7b
 8009a6c:	08009a81 	.word	0x08009a81
 8009a70:	08009a87 	.word	0x08009a87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
    break;
 8009a78:	e00b      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a7a:	2303      	movs	r3, #3
 8009a7c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a7e:	e008      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a80:	2301      	movs	r3, #1
 8009a82:	73fb      	strb	r3, [r7, #15]
    break;
 8009a84:	e005      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a86:	2303      	movs	r3, #3
 8009a88:	73fb      	strb	r3, [r7, #15]
    break;
 8009a8a:	e002      	b.n	8009a92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a90:	bf00      	nop
  }
  return usb_status;
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <__cvt>:
 8009aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009aa4:	ec57 6b10 	vmov	r6, r7, d0
 8009aa8:	2f00      	cmp	r7, #0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	4619      	mov	r1, r3
 8009aae:	463b      	mov	r3, r7
 8009ab0:	bfbb      	ittet	lt
 8009ab2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009ab6:	461f      	movlt	r7, r3
 8009ab8:	2300      	movge	r3, #0
 8009aba:	232d      	movlt	r3, #45	@ 0x2d
 8009abc:	700b      	strb	r3, [r1, #0]
 8009abe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009ac0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009ac4:	4691      	mov	r9, r2
 8009ac6:	f023 0820 	bic.w	r8, r3, #32
 8009aca:	bfbc      	itt	lt
 8009acc:	4632      	movlt	r2, r6
 8009ace:	4616      	movlt	r6, r2
 8009ad0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009ad4:	d005      	beq.n	8009ae2 <__cvt+0x42>
 8009ad6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009ada:	d100      	bne.n	8009ade <__cvt+0x3e>
 8009adc:	3401      	adds	r4, #1
 8009ade:	2102      	movs	r1, #2
 8009ae0:	e000      	b.n	8009ae4 <__cvt+0x44>
 8009ae2:	2103      	movs	r1, #3
 8009ae4:	ab03      	add	r3, sp, #12
 8009ae6:	9301      	str	r3, [sp, #4]
 8009ae8:	ab02      	add	r3, sp, #8
 8009aea:	9300      	str	r3, [sp, #0]
 8009aec:	ec47 6b10 	vmov	d0, r6, r7
 8009af0:	4653      	mov	r3, sl
 8009af2:	4622      	mov	r2, r4
 8009af4:	f000 fe98 	bl	800a828 <_dtoa_r>
 8009af8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009afc:	4605      	mov	r5, r0
 8009afe:	d119      	bne.n	8009b34 <__cvt+0x94>
 8009b00:	f019 0f01 	tst.w	r9, #1
 8009b04:	d00e      	beq.n	8009b24 <__cvt+0x84>
 8009b06:	eb00 0904 	add.w	r9, r0, r4
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4630      	mov	r0, r6
 8009b10:	4639      	mov	r1, r7
 8009b12:	f7f6 ffd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b16:	b108      	cbz	r0, 8009b1c <__cvt+0x7c>
 8009b18:	f8cd 900c 	str.w	r9, [sp, #12]
 8009b1c:	2230      	movs	r2, #48	@ 0x30
 8009b1e:	9b03      	ldr	r3, [sp, #12]
 8009b20:	454b      	cmp	r3, r9
 8009b22:	d31e      	bcc.n	8009b62 <__cvt+0xc2>
 8009b24:	9b03      	ldr	r3, [sp, #12]
 8009b26:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b28:	1b5b      	subs	r3, r3, r5
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	b004      	add	sp, #16
 8009b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b34:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009b38:	eb00 0904 	add.w	r9, r0, r4
 8009b3c:	d1e5      	bne.n	8009b0a <__cvt+0x6a>
 8009b3e:	7803      	ldrb	r3, [r0, #0]
 8009b40:	2b30      	cmp	r3, #48	@ 0x30
 8009b42:	d10a      	bne.n	8009b5a <__cvt+0xba>
 8009b44:	2200      	movs	r2, #0
 8009b46:	2300      	movs	r3, #0
 8009b48:	4630      	mov	r0, r6
 8009b4a:	4639      	mov	r1, r7
 8009b4c:	f7f6 ffbc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b50:	b918      	cbnz	r0, 8009b5a <__cvt+0xba>
 8009b52:	f1c4 0401 	rsb	r4, r4, #1
 8009b56:	f8ca 4000 	str.w	r4, [sl]
 8009b5a:	f8da 3000 	ldr.w	r3, [sl]
 8009b5e:	4499      	add	r9, r3
 8009b60:	e7d3      	b.n	8009b0a <__cvt+0x6a>
 8009b62:	1c59      	adds	r1, r3, #1
 8009b64:	9103      	str	r1, [sp, #12]
 8009b66:	701a      	strb	r2, [r3, #0]
 8009b68:	e7d9      	b.n	8009b1e <__cvt+0x7e>

08009b6a <__exponent>:
 8009b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	bfba      	itte	lt
 8009b70:	4249      	neglt	r1, r1
 8009b72:	232d      	movlt	r3, #45	@ 0x2d
 8009b74:	232b      	movge	r3, #43	@ 0x2b
 8009b76:	2909      	cmp	r1, #9
 8009b78:	7002      	strb	r2, [r0, #0]
 8009b7a:	7043      	strb	r3, [r0, #1]
 8009b7c:	dd29      	ble.n	8009bd2 <__exponent+0x68>
 8009b7e:	f10d 0307 	add.w	r3, sp, #7
 8009b82:	461d      	mov	r5, r3
 8009b84:	270a      	movs	r7, #10
 8009b86:	461a      	mov	r2, r3
 8009b88:	fbb1 f6f7 	udiv	r6, r1, r7
 8009b8c:	fb07 1416 	mls	r4, r7, r6, r1
 8009b90:	3430      	adds	r4, #48	@ 0x30
 8009b92:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009b96:	460c      	mov	r4, r1
 8009b98:	2c63      	cmp	r4, #99	@ 0x63
 8009b9a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8009b9e:	4631      	mov	r1, r6
 8009ba0:	dcf1      	bgt.n	8009b86 <__exponent+0x1c>
 8009ba2:	3130      	adds	r1, #48	@ 0x30
 8009ba4:	1e94      	subs	r4, r2, #2
 8009ba6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009baa:	1c41      	adds	r1, r0, #1
 8009bac:	4623      	mov	r3, r4
 8009bae:	42ab      	cmp	r3, r5
 8009bb0:	d30a      	bcc.n	8009bc8 <__exponent+0x5e>
 8009bb2:	f10d 0309 	add.w	r3, sp, #9
 8009bb6:	1a9b      	subs	r3, r3, r2
 8009bb8:	42ac      	cmp	r4, r5
 8009bba:	bf88      	it	hi
 8009bbc:	2300      	movhi	r3, #0
 8009bbe:	3302      	adds	r3, #2
 8009bc0:	4403      	add	r3, r0
 8009bc2:	1a18      	subs	r0, r3, r0
 8009bc4:	b003      	add	sp, #12
 8009bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bc8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009bcc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009bd0:	e7ed      	b.n	8009bae <__exponent+0x44>
 8009bd2:	2330      	movs	r3, #48	@ 0x30
 8009bd4:	3130      	adds	r1, #48	@ 0x30
 8009bd6:	7083      	strb	r3, [r0, #2]
 8009bd8:	70c1      	strb	r1, [r0, #3]
 8009bda:	1d03      	adds	r3, r0, #4
 8009bdc:	e7f1      	b.n	8009bc2 <__exponent+0x58>
	...

08009be0 <_printf_float>:
 8009be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	b08d      	sub	sp, #52	@ 0x34
 8009be6:	460c      	mov	r4, r1
 8009be8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009bec:	4616      	mov	r6, r2
 8009bee:	461f      	mov	r7, r3
 8009bf0:	4605      	mov	r5, r0
 8009bf2:	f000 fd09 	bl	800a608 <_localeconv_r>
 8009bf6:	6803      	ldr	r3, [r0, #0]
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f7f6 fb38 	bl	8000270 <strlen>
 8009c00:	2300      	movs	r3, #0
 8009c02:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c04:	f8d8 3000 	ldr.w	r3, [r8]
 8009c08:	9005      	str	r0, [sp, #20]
 8009c0a:	3307      	adds	r3, #7
 8009c0c:	f023 0307 	bic.w	r3, r3, #7
 8009c10:	f103 0208 	add.w	r2, r3, #8
 8009c14:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009c18:	f8d4 b000 	ldr.w	fp, [r4]
 8009c1c:	f8c8 2000 	str.w	r2, [r8]
 8009c20:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c24:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009c28:	9307      	str	r3, [sp, #28]
 8009c2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8009c2e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009c32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c36:	4b9c      	ldr	r3, [pc, #624]	@ (8009ea8 <_printf_float+0x2c8>)
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c3c:	f7f6 ff76 	bl	8000b2c <__aeabi_dcmpun>
 8009c40:	bb70      	cbnz	r0, 8009ca0 <_printf_float+0xc0>
 8009c42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c46:	4b98      	ldr	r3, [pc, #608]	@ (8009ea8 <_printf_float+0x2c8>)
 8009c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009c4c:	f7f6 ff50 	bl	8000af0 <__aeabi_dcmple>
 8009c50:	bb30      	cbnz	r0, 8009ca0 <_printf_float+0xc0>
 8009c52:	2200      	movs	r2, #0
 8009c54:	2300      	movs	r3, #0
 8009c56:	4640      	mov	r0, r8
 8009c58:	4649      	mov	r1, r9
 8009c5a:	f7f6 ff3f 	bl	8000adc <__aeabi_dcmplt>
 8009c5e:	b110      	cbz	r0, 8009c66 <_printf_float+0x86>
 8009c60:	232d      	movs	r3, #45	@ 0x2d
 8009c62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c66:	4a91      	ldr	r2, [pc, #580]	@ (8009eac <_printf_float+0x2cc>)
 8009c68:	4b91      	ldr	r3, [pc, #580]	@ (8009eb0 <_printf_float+0x2d0>)
 8009c6a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009c6e:	bf8c      	ite	hi
 8009c70:	4690      	movhi	r8, r2
 8009c72:	4698      	movls	r8, r3
 8009c74:	2303      	movs	r3, #3
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	f02b 0304 	bic.w	r3, fp, #4
 8009c7c:	6023      	str	r3, [r4, #0]
 8009c7e:	f04f 0900 	mov.w	r9, #0
 8009c82:	9700      	str	r7, [sp, #0]
 8009c84:	4633      	mov	r3, r6
 8009c86:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009c88:	4621      	mov	r1, r4
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	f000 f9d2 	bl	800a034 <_printf_common>
 8009c90:	3001      	adds	r0, #1
 8009c92:	f040 808d 	bne.w	8009db0 <_printf_float+0x1d0>
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c9a:	b00d      	add	sp, #52	@ 0x34
 8009c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ca0:	4642      	mov	r2, r8
 8009ca2:	464b      	mov	r3, r9
 8009ca4:	4640      	mov	r0, r8
 8009ca6:	4649      	mov	r1, r9
 8009ca8:	f7f6 ff40 	bl	8000b2c <__aeabi_dcmpun>
 8009cac:	b140      	cbz	r0, 8009cc0 <_printf_float+0xe0>
 8009cae:	464b      	mov	r3, r9
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	bfbc      	itt	lt
 8009cb4:	232d      	movlt	r3, #45	@ 0x2d
 8009cb6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009cba:	4a7e      	ldr	r2, [pc, #504]	@ (8009eb4 <_printf_float+0x2d4>)
 8009cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8009eb8 <_printf_float+0x2d8>)
 8009cbe:	e7d4      	b.n	8009c6a <_printf_float+0x8a>
 8009cc0:	6863      	ldr	r3, [r4, #4]
 8009cc2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009cc6:	9206      	str	r2, [sp, #24]
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	d13b      	bne.n	8009d44 <_printf_float+0x164>
 8009ccc:	2306      	movs	r3, #6
 8009cce:	6063      	str	r3, [r4, #4]
 8009cd0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	6022      	str	r2, [r4, #0]
 8009cd8:	9303      	str	r3, [sp, #12]
 8009cda:	ab0a      	add	r3, sp, #40	@ 0x28
 8009cdc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009ce0:	ab09      	add	r3, sp, #36	@ 0x24
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	6861      	ldr	r1, [r4, #4]
 8009ce6:	ec49 8b10 	vmov	d0, r8, r9
 8009cea:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009cee:	4628      	mov	r0, r5
 8009cf0:	f7ff fed6 	bl	8009aa0 <__cvt>
 8009cf4:	9b06      	ldr	r3, [sp, #24]
 8009cf6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cf8:	2b47      	cmp	r3, #71	@ 0x47
 8009cfa:	4680      	mov	r8, r0
 8009cfc:	d129      	bne.n	8009d52 <_printf_float+0x172>
 8009cfe:	1cc8      	adds	r0, r1, #3
 8009d00:	db02      	blt.n	8009d08 <_printf_float+0x128>
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	4299      	cmp	r1, r3
 8009d06:	dd41      	ble.n	8009d8c <_printf_float+0x1ac>
 8009d08:	f1aa 0a02 	sub.w	sl, sl, #2
 8009d0c:	fa5f fa8a 	uxtb.w	sl, sl
 8009d10:	3901      	subs	r1, #1
 8009d12:	4652      	mov	r2, sl
 8009d14:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009d18:	9109      	str	r1, [sp, #36]	@ 0x24
 8009d1a:	f7ff ff26 	bl	8009b6a <__exponent>
 8009d1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d20:	1813      	adds	r3, r2, r0
 8009d22:	2a01      	cmp	r2, #1
 8009d24:	4681      	mov	r9, r0
 8009d26:	6123      	str	r3, [r4, #16]
 8009d28:	dc02      	bgt.n	8009d30 <_printf_float+0x150>
 8009d2a:	6822      	ldr	r2, [r4, #0]
 8009d2c:	07d2      	lsls	r2, r2, #31
 8009d2e:	d501      	bpl.n	8009d34 <_printf_float+0x154>
 8009d30:	3301      	adds	r3, #1
 8009d32:	6123      	str	r3, [r4, #16]
 8009d34:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d0a2      	beq.n	8009c82 <_printf_float+0xa2>
 8009d3c:	232d      	movs	r3, #45	@ 0x2d
 8009d3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d42:	e79e      	b.n	8009c82 <_printf_float+0xa2>
 8009d44:	9a06      	ldr	r2, [sp, #24]
 8009d46:	2a47      	cmp	r2, #71	@ 0x47
 8009d48:	d1c2      	bne.n	8009cd0 <_printf_float+0xf0>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1c0      	bne.n	8009cd0 <_printf_float+0xf0>
 8009d4e:	2301      	movs	r3, #1
 8009d50:	e7bd      	b.n	8009cce <_printf_float+0xee>
 8009d52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009d56:	d9db      	bls.n	8009d10 <_printf_float+0x130>
 8009d58:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009d5c:	d118      	bne.n	8009d90 <_printf_float+0x1b0>
 8009d5e:	2900      	cmp	r1, #0
 8009d60:	6863      	ldr	r3, [r4, #4]
 8009d62:	dd0b      	ble.n	8009d7c <_printf_float+0x19c>
 8009d64:	6121      	str	r1, [r4, #16]
 8009d66:	b913      	cbnz	r3, 8009d6e <_printf_float+0x18e>
 8009d68:	6822      	ldr	r2, [r4, #0]
 8009d6a:	07d0      	lsls	r0, r2, #31
 8009d6c:	d502      	bpl.n	8009d74 <_printf_float+0x194>
 8009d6e:	3301      	adds	r3, #1
 8009d70:	440b      	add	r3, r1
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009d76:	f04f 0900 	mov.w	r9, #0
 8009d7a:	e7db      	b.n	8009d34 <_printf_float+0x154>
 8009d7c:	b913      	cbnz	r3, 8009d84 <_printf_float+0x1a4>
 8009d7e:	6822      	ldr	r2, [r4, #0]
 8009d80:	07d2      	lsls	r2, r2, #31
 8009d82:	d501      	bpl.n	8009d88 <_printf_float+0x1a8>
 8009d84:	3302      	adds	r3, #2
 8009d86:	e7f4      	b.n	8009d72 <_printf_float+0x192>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e7f2      	b.n	8009d72 <_printf_float+0x192>
 8009d8c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d92:	4299      	cmp	r1, r3
 8009d94:	db05      	blt.n	8009da2 <_printf_float+0x1c2>
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	6121      	str	r1, [r4, #16]
 8009d9a:	07d8      	lsls	r0, r3, #31
 8009d9c:	d5ea      	bpl.n	8009d74 <_printf_float+0x194>
 8009d9e:	1c4b      	adds	r3, r1, #1
 8009da0:	e7e7      	b.n	8009d72 <_printf_float+0x192>
 8009da2:	2900      	cmp	r1, #0
 8009da4:	bfd4      	ite	le
 8009da6:	f1c1 0202 	rsble	r2, r1, #2
 8009daa:	2201      	movgt	r2, #1
 8009dac:	4413      	add	r3, r2
 8009dae:	e7e0      	b.n	8009d72 <_printf_float+0x192>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	055a      	lsls	r2, r3, #21
 8009db4:	d407      	bmi.n	8009dc6 <_printf_float+0x1e6>
 8009db6:	6923      	ldr	r3, [r4, #16]
 8009db8:	4642      	mov	r2, r8
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	d12b      	bne.n	8009e1c <_printf_float+0x23c>
 8009dc4:	e767      	b.n	8009c96 <_printf_float+0xb6>
 8009dc6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009dca:	f240 80dd 	bls.w	8009f88 <_printf_float+0x3a8>
 8009dce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	f7f6 fe77 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dda:	2800      	cmp	r0, #0
 8009ddc:	d033      	beq.n	8009e46 <_printf_float+0x266>
 8009dde:	4a37      	ldr	r2, [pc, #220]	@ (8009ebc <_printf_float+0x2dc>)
 8009de0:	2301      	movs	r3, #1
 8009de2:	4631      	mov	r1, r6
 8009de4:	4628      	mov	r0, r5
 8009de6:	47b8      	blx	r7
 8009de8:	3001      	adds	r0, #1
 8009dea:	f43f af54 	beq.w	8009c96 <_printf_float+0xb6>
 8009dee:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009df2:	4543      	cmp	r3, r8
 8009df4:	db02      	blt.n	8009dfc <_printf_float+0x21c>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	07d8      	lsls	r0, r3, #31
 8009dfa:	d50f      	bpl.n	8009e1c <_printf_float+0x23c>
 8009dfc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e00:	4631      	mov	r1, r6
 8009e02:	4628      	mov	r0, r5
 8009e04:	47b8      	blx	r7
 8009e06:	3001      	adds	r0, #1
 8009e08:	f43f af45 	beq.w	8009c96 <_printf_float+0xb6>
 8009e0c:	f04f 0900 	mov.w	r9, #0
 8009e10:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8009e14:	f104 0a1a 	add.w	sl, r4, #26
 8009e18:	45c8      	cmp	r8, r9
 8009e1a:	dc09      	bgt.n	8009e30 <_printf_float+0x250>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	079b      	lsls	r3, r3, #30
 8009e20:	f100 8103 	bmi.w	800a02a <_printf_float+0x44a>
 8009e24:	68e0      	ldr	r0, [r4, #12]
 8009e26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e28:	4298      	cmp	r0, r3
 8009e2a:	bfb8      	it	lt
 8009e2c:	4618      	movlt	r0, r3
 8009e2e:	e734      	b.n	8009c9a <_printf_float+0xba>
 8009e30:	2301      	movs	r3, #1
 8009e32:	4652      	mov	r2, sl
 8009e34:	4631      	mov	r1, r6
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b8      	blx	r7
 8009e3a:	3001      	adds	r0, #1
 8009e3c:	f43f af2b 	beq.w	8009c96 <_printf_float+0xb6>
 8009e40:	f109 0901 	add.w	r9, r9, #1
 8009e44:	e7e8      	b.n	8009e18 <_printf_float+0x238>
 8009e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dc39      	bgt.n	8009ec0 <_printf_float+0x2e0>
 8009e4c:	4a1b      	ldr	r2, [pc, #108]	@ (8009ebc <_printf_float+0x2dc>)
 8009e4e:	2301      	movs	r3, #1
 8009e50:	4631      	mov	r1, r6
 8009e52:	4628      	mov	r0, r5
 8009e54:	47b8      	blx	r7
 8009e56:	3001      	adds	r0, #1
 8009e58:	f43f af1d 	beq.w	8009c96 <_printf_float+0xb6>
 8009e5c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009e60:	ea59 0303 	orrs.w	r3, r9, r3
 8009e64:	d102      	bne.n	8009e6c <_printf_float+0x28c>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	07d9      	lsls	r1, r3, #31
 8009e6a:	d5d7      	bpl.n	8009e1c <_printf_float+0x23c>
 8009e6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e70:	4631      	mov	r1, r6
 8009e72:	4628      	mov	r0, r5
 8009e74:	47b8      	blx	r7
 8009e76:	3001      	adds	r0, #1
 8009e78:	f43f af0d 	beq.w	8009c96 <_printf_float+0xb6>
 8009e7c:	f04f 0a00 	mov.w	sl, #0
 8009e80:	f104 0b1a 	add.w	fp, r4, #26
 8009e84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e86:	425b      	negs	r3, r3
 8009e88:	4553      	cmp	r3, sl
 8009e8a:	dc01      	bgt.n	8009e90 <_printf_float+0x2b0>
 8009e8c:	464b      	mov	r3, r9
 8009e8e:	e793      	b.n	8009db8 <_printf_float+0x1d8>
 8009e90:	2301      	movs	r3, #1
 8009e92:	465a      	mov	r2, fp
 8009e94:	4631      	mov	r1, r6
 8009e96:	4628      	mov	r0, r5
 8009e98:	47b8      	blx	r7
 8009e9a:	3001      	adds	r0, #1
 8009e9c:	f43f aefb 	beq.w	8009c96 <_printf_float+0xb6>
 8009ea0:	f10a 0a01 	add.w	sl, sl, #1
 8009ea4:	e7ee      	b.n	8009e84 <_printf_float+0x2a4>
 8009ea6:	bf00      	nop
 8009ea8:	7fefffff 	.word	0x7fefffff
 8009eac:	0800cfa4 	.word	0x0800cfa4
 8009eb0:	0800cfa0 	.word	0x0800cfa0
 8009eb4:	0800cfac 	.word	0x0800cfac
 8009eb8:	0800cfa8 	.word	0x0800cfa8
 8009ebc:	0800cfb0 	.word	0x0800cfb0
 8009ec0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ec2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009ec6:	4553      	cmp	r3, sl
 8009ec8:	bfa8      	it	ge
 8009eca:	4653      	movge	r3, sl
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	4699      	mov	r9, r3
 8009ed0:	dc36      	bgt.n	8009f40 <_printf_float+0x360>
 8009ed2:	f04f 0b00 	mov.w	fp, #0
 8009ed6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009eda:	f104 021a 	add.w	r2, r4, #26
 8009ede:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009ee0:	9306      	str	r3, [sp, #24]
 8009ee2:	eba3 0309 	sub.w	r3, r3, r9
 8009ee6:	455b      	cmp	r3, fp
 8009ee8:	dc31      	bgt.n	8009f4e <_printf_float+0x36e>
 8009eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eec:	459a      	cmp	sl, r3
 8009eee:	dc3a      	bgt.n	8009f66 <_printf_float+0x386>
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	07da      	lsls	r2, r3, #31
 8009ef4:	d437      	bmi.n	8009f66 <_printf_float+0x386>
 8009ef6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef8:	ebaa 0903 	sub.w	r9, sl, r3
 8009efc:	9b06      	ldr	r3, [sp, #24]
 8009efe:	ebaa 0303 	sub.w	r3, sl, r3
 8009f02:	4599      	cmp	r9, r3
 8009f04:	bfa8      	it	ge
 8009f06:	4699      	movge	r9, r3
 8009f08:	f1b9 0f00 	cmp.w	r9, #0
 8009f0c:	dc33      	bgt.n	8009f76 <_printf_float+0x396>
 8009f0e:	f04f 0800 	mov.w	r8, #0
 8009f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f16:	f104 0b1a 	add.w	fp, r4, #26
 8009f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f1c:	ebaa 0303 	sub.w	r3, sl, r3
 8009f20:	eba3 0309 	sub.w	r3, r3, r9
 8009f24:	4543      	cmp	r3, r8
 8009f26:	f77f af79 	ble.w	8009e1c <_printf_float+0x23c>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	465a      	mov	r2, fp
 8009f2e:	4631      	mov	r1, r6
 8009f30:	4628      	mov	r0, r5
 8009f32:	47b8      	blx	r7
 8009f34:	3001      	adds	r0, #1
 8009f36:	f43f aeae 	beq.w	8009c96 <_printf_float+0xb6>
 8009f3a:	f108 0801 	add.w	r8, r8, #1
 8009f3e:	e7ec      	b.n	8009f1a <_printf_float+0x33a>
 8009f40:	4642      	mov	r2, r8
 8009f42:	4631      	mov	r1, r6
 8009f44:	4628      	mov	r0, r5
 8009f46:	47b8      	blx	r7
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d1c2      	bne.n	8009ed2 <_printf_float+0x2f2>
 8009f4c:	e6a3      	b.n	8009c96 <_printf_float+0xb6>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4631      	mov	r1, r6
 8009f52:	4628      	mov	r0, r5
 8009f54:	9206      	str	r2, [sp, #24]
 8009f56:	47b8      	blx	r7
 8009f58:	3001      	adds	r0, #1
 8009f5a:	f43f ae9c 	beq.w	8009c96 <_printf_float+0xb6>
 8009f5e:	9a06      	ldr	r2, [sp, #24]
 8009f60:	f10b 0b01 	add.w	fp, fp, #1
 8009f64:	e7bb      	b.n	8009ede <_printf_float+0x2fe>
 8009f66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b8      	blx	r7
 8009f70:	3001      	adds	r0, #1
 8009f72:	d1c0      	bne.n	8009ef6 <_printf_float+0x316>
 8009f74:	e68f      	b.n	8009c96 <_printf_float+0xb6>
 8009f76:	9a06      	ldr	r2, [sp, #24]
 8009f78:	464b      	mov	r3, r9
 8009f7a:	4442      	add	r2, r8
 8009f7c:	4631      	mov	r1, r6
 8009f7e:	4628      	mov	r0, r5
 8009f80:	47b8      	blx	r7
 8009f82:	3001      	adds	r0, #1
 8009f84:	d1c3      	bne.n	8009f0e <_printf_float+0x32e>
 8009f86:	e686      	b.n	8009c96 <_printf_float+0xb6>
 8009f88:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009f8c:	f1ba 0f01 	cmp.w	sl, #1
 8009f90:	dc01      	bgt.n	8009f96 <_printf_float+0x3b6>
 8009f92:	07db      	lsls	r3, r3, #31
 8009f94:	d536      	bpl.n	800a004 <_printf_float+0x424>
 8009f96:	2301      	movs	r3, #1
 8009f98:	4642      	mov	r2, r8
 8009f9a:	4631      	mov	r1, r6
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	47b8      	blx	r7
 8009fa0:	3001      	adds	r0, #1
 8009fa2:	f43f ae78 	beq.w	8009c96 <_printf_float+0xb6>
 8009fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009faa:	4631      	mov	r1, r6
 8009fac:	4628      	mov	r0, r5
 8009fae:	47b8      	blx	r7
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	f43f ae70 	beq.w	8009c96 <_printf_float+0xb6>
 8009fb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009fba:	2200      	movs	r2, #0
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8009fc2:	f7f6 fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8009fc6:	b9c0      	cbnz	r0, 8009ffa <_printf_float+0x41a>
 8009fc8:	4653      	mov	r3, sl
 8009fca:	f108 0201 	add.w	r2, r8, #1
 8009fce:	4631      	mov	r1, r6
 8009fd0:	4628      	mov	r0, r5
 8009fd2:	47b8      	blx	r7
 8009fd4:	3001      	adds	r0, #1
 8009fd6:	d10c      	bne.n	8009ff2 <_printf_float+0x412>
 8009fd8:	e65d      	b.n	8009c96 <_printf_float+0xb6>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	465a      	mov	r2, fp
 8009fde:	4631      	mov	r1, r6
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	47b8      	blx	r7
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	f43f ae56 	beq.w	8009c96 <_printf_float+0xb6>
 8009fea:	f108 0801 	add.w	r8, r8, #1
 8009fee:	45d0      	cmp	r8, sl
 8009ff0:	dbf3      	blt.n	8009fda <_printf_float+0x3fa>
 8009ff2:	464b      	mov	r3, r9
 8009ff4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ff8:	e6df      	b.n	8009dba <_printf_float+0x1da>
 8009ffa:	f04f 0800 	mov.w	r8, #0
 8009ffe:	f104 0b1a 	add.w	fp, r4, #26
 800a002:	e7f4      	b.n	8009fee <_printf_float+0x40e>
 800a004:	2301      	movs	r3, #1
 800a006:	4642      	mov	r2, r8
 800a008:	e7e1      	b.n	8009fce <_printf_float+0x3ee>
 800a00a:	2301      	movs	r3, #1
 800a00c:	464a      	mov	r2, r9
 800a00e:	4631      	mov	r1, r6
 800a010:	4628      	mov	r0, r5
 800a012:	47b8      	blx	r7
 800a014:	3001      	adds	r0, #1
 800a016:	f43f ae3e 	beq.w	8009c96 <_printf_float+0xb6>
 800a01a:	f108 0801 	add.w	r8, r8, #1
 800a01e:	68e3      	ldr	r3, [r4, #12]
 800a020:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a022:	1a5b      	subs	r3, r3, r1
 800a024:	4543      	cmp	r3, r8
 800a026:	dcf0      	bgt.n	800a00a <_printf_float+0x42a>
 800a028:	e6fc      	b.n	8009e24 <_printf_float+0x244>
 800a02a:	f04f 0800 	mov.w	r8, #0
 800a02e:	f104 0919 	add.w	r9, r4, #25
 800a032:	e7f4      	b.n	800a01e <_printf_float+0x43e>

0800a034 <_printf_common>:
 800a034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a038:	4616      	mov	r6, r2
 800a03a:	4698      	mov	r8, r3
 800a03c:	688a      	ldr	r2, [r1, #8]
 800a03e:	690b      	ldr	r3, [r1, #16]
 800a040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a044:	4293      	cmp	r3, r2
 800a046:	bfb8      	it	lt
 800a048:	4613      	movlt	r3, r2
 800a04a:	6033      	str	r3, [r6, #0]
 800a04c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a050:	4607      	mov	r7, r0
 800a052:	460c      	mov	r4, r1
 800a054:	b10a      	cbz	r2, 800a05a <_printf_common+0x26>
 800a056:	3301      	adds	r3, #1
 800a058:	6033      	str	r3, [r6, #0]
 800a05a:	6823      	ldr	r3, [r4, #0]
 800a05c:	0699      	lsls	r1, r3, #26
 800a05e:	bf42      	ittt	mi
 800a060:	6833      	ldrmi	r3, [r6, #0]
 800a062:	3302      	addmi	r3, #2
 800a064:	6033      	strmi	r3, [r6, #0]
 800a066:	6825      	ldr	r5, [r4, #0]
 800a068:	f015 0506 	ands.w	r5, r5, #6
 800a06c:	d106      	bne.n	800a07c <_printf_common+0x48>
 800a06e:	f104 0a19 	add.w	sl, r4, #25
 800a072:	68e3      	ldr	r3, [r4, #12]
 800a074:	6832      	ldr	r2, [r6, #0]
 800a076:	1a9b      	subs	r3, r3, r2
 800a078:	42ab      	cmp	r3, r5
 800a07a:	dc26      	bgt.n	800a0ca <_printf_common+0x96>
 800a07c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a080:	6822      	ldr	r2, [r4, #0]
 800a082:	3b00      	subs	r3, #0
 800a084:	bf18      	it	ne
 800a086:	2301      	movne	r3, #1
 800a088:	0692      	lsls	r2, r2, #26
 800a08a:	d42b      	bmi.n	800a0e4 <_printf_common+0xb0>
 800a08c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a090:	4641      	mov	r1, r8
 800a092:	4638      	mov	r0, r7
 800a094:	47c8      	blx	r9
 800a096:	3001      	adds	r0, #1
 800a098:	d01e      	beq.n	800a0d8 <_printf_common+0xa4>
 800a09a:	6823      	ldr	r3, [r4, #0]
 800a09c:	6922      	ldr	r2, [r4, #16]
 800a09e:	f003 0306 	and.w	r3, r3, #6
 800a0a2:	2b04      	cmp	r3, #4
 800a0a4:	bf02      	ittt	eq
 800a0a6:	68e5      	ldreq	r5, [r4, #12]
 800a0a8:	6833      	ldreq	r3, [r6, #0]
 800a0aa:	1aed      	subeq	r5, r5, r3
 800a0ac:	68a3      	ldr	r3, [r4, #8]
 800a0ae:	bf0c      	ite	eq
 800a0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0b4:	2500      	movne	r5, #0
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	bfc4      	itt	gt
 800a0ba:	1a9b      	subgt	r3, r3, r2
 800a0bc:	18ed      	addgt	r5, r5, r3
 800a0be:	2600      	movs	r6, #0
 800a0c0:	341a      	adds	r4, #26
 800a0c2:	42b5      	cmp	r5, r6
 800a0c4:	d11a      	bne.n	800a0fc <_printf_common+0xc8>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e008      	b.n	800a0dc <_printf_common+0xa8>
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	4652      	mov	r2, sl
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	4638      	mov	r0, r7
 800a0d2:	47c8      	blx	r9
 800a0d4:	3001      	adds	r0, #1
 800a0d6:	d103      	bne.n	800a0e0 <_printf_common+0xac>
 800a0d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	e7c6      	b.n	800a072 <_printf_common+0x3e>
 800a0e4:	18e1      	adds	r1, r4, r3
 800a0e6:	1c5a      	adds	r2, r3, #1
 800a0e8:	2030      	movs	r0, #48	@ 0x30
 800a0ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a0ee:	4422      	add	r2, r4
 800a0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a0f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	e7c7      	b.n	800a08c <_printf_common+0x58>
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	4622      	mov	r2, r4
 800a100:	4641      	mov	r1, r8
 800a102:	4638      	mov	r0, r7
 800a104:	47c8      	blx	r9
 800a106:	3001      	adds	r0, #1
 800a108:	d0e6      	beq.n	800a0d8 <_printf_common+0xa4>
 800a10a:	3601      	adds	r6, #1
 800a10c:	e7d9      	b.n	800a0c2 <_printf_common+0x8e>
	...

0800a110 <_printf_i>:
 800a110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a114:	7e0f      	ldrb	r7, [r1, #24]
 800a116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a118:	2f78      	cmp	r7, #120	@ 0x78
 800a11a:	4691      	mov	r9, r2
 800a11c:	4680      	mov	r8, r0
 800a11e:	460c      	mov	r4, r1
 800a120:	469a      	mov	sl, r3
 800a122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a126:	d807      	bhi.n	800a138 <_printf_i+0x28>
 800a128:	2f62      	cmp	r7, #98	@ 0x62
 800a12a:	d80a      	bhi.n	800a142 <_printf_i+0x32>
 800a12c:	2f00      	cmp	r7, #0
 800a12e:	f000 80d1 	beq.w	800a2d4 <_printf_i+0x1c4>
 800a132:	2f58      	cmp	r7, #88	@ 0x58
 800a134:	f000 80b8 	beq.w	800a2a8 <_printf_i+0x198>
 800a138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a13c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a140:	e03a      	b.n	800a1b8 <_printf_i+0xa8>
 800a142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a146:	2b15      	cmp	r3, #21
 800a148:	d8f6      	bhi.n	800a138 <_printf_i+0x28>
 800a14a:	a101      	add	r1, pc, #4	@ (adr r1, 800a150 <_printf_i+0x40>)
 800a14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a150:	0800a1a9 	.word	0x0800a1a9
 800a154:	0800a1bd 	.word	0x0800a1bd
 800a158:	0800a139 	.word	0x0800a139
 800a15c:	0800a139 	.word	0x0800a139
 800a160:	0800a139 	.word	0x0800a139
 800a164:	0800a139 	.word	0x0800a139
 800a168:	0800a1bd 	.word	0x0800a1bd
 800a16c:	0800a139 	.word	0x0800a139
 800a170:	0800a139 	.word	0x0800a139
 800a174:	0800a139 	.word	0x0800a139
 800a178:	0800a139 	.word	0x0800a139
 800a17c:	0800a2bb 	.word	0x0800a2bb
 800a180:	0800a1e7 	.word	0x0800a1e7
 800a184:	0800a275 	.word	0x0800a275
 800a188:	0800a139 	.word	0x0800a139
 800a18c:	0800a139 	.word	0x0800a139
 800a190:	0800a2dd 	.word	0x0800a2dd
 800a194:	0800a139 	.word	0x0800a139
 800a198:	0800a1e7 	.word	0x0800a1e7
 800a19c:	0800a139 	.word	0x0800a139
 800a1a0:	0800a139 	.word	0x0800a139
 800a1a4:	0800a27d 	.word	0x0800a27d
 800a1a8:	6833      	ldr	r3, [r6, #0]
 800a1aa:	1d1a      	adds	r2, r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	6032      	str	r2, [r6, #0]
 800a1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e09c      	b.n	800a2f6 <_printf_i+0x1e6>
 800a1bc:	6833      	ldr	r3, [r6, #0]
 800a1be:	6820      	ldr	r0, [r4, #0]
 800a1c0:	1d19      	adds	r1, r3, #4
 800a1c2:	6031      	str	r1, [r6, #0]
 800a1c4:	0606      	lsls	r6, r0, #24
 800a1c6:	d501      	bpl.n	800a1cc <_printf_i+0xbc>
 800a1c8:	681d      	ldr	r5, [r3, #0]
 800a1ca:	e003      	b.n	800a1d4 <_printf_i+0xc4>
 800a1cc:	0645      	lsls	r5, r0, #25
 800a1ce:	d5fb      	bpl.n	800a1c8 <_printf_i+0xb8>
 800a1d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1d4:	2d00      	cmp	r5, #0
 800a1d6:	da03      	bge.n	800a1e0 <_printf_i+0xd0>
 800a1d8:	232d      	movs	r3, #45	@ 0x2d
 800a1da:	426d      	negs	r5, r5
 800a1dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1e0:	4858      	ldr	r0, [pc, #352]	@ (800a344 <_printf_i+0x234>)
 800a1e2:	230a      	movs	r3, #10
 800a1e4:	e011      	b.n	800a20a <_printf_i+0xfa>
 800a1e6:	6821      	ldr	r1, [r4, #0]
 800a1e8:	6833      	ldr	r3, [r6, #0]
 800a1ea:	0608      	lsls	r0, r1, #24
 800a1ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800a1f0:	d402      	bmi.n	800a1f8 <_printf_i+0xe8>
 800a1f2:	0649      	lsls	r1, r1, #25
 800a1f4:	bf48      	it	mi
 800a1f6:	b2ad      	uxthmi	r5, r5
 800a1f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a1fa:	4852      	ldr	r0, [pc, #328]	@ (800a344 <_printf_i+0x234>)
 800a1fc:	6033      	str	r3, [r6, #0]
 800a1fe:	bf14      	ite	ne
 800a200:	230a      	movne	r3, #10
 800a202:	2308      	moveq	r3, #8
 800a204:	2100      	movs	r1, #0
 800a206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a20a:	6866      	ldr	r6, [r4, #4]
 800a20c:	60a6      	str	r6, [r4, #8]
 800a20e:	2e00      	cmp	r6, #0
 800a210:	db05      	blt.n	800a21e <_printf_i+0x10e>
 800a212:	6821      	ldr	r1, [r4, #0]
 800a214:	432e      	orrs	r6, r5
 800a216:	f021 0104 	bic.w	r1, r1, #4
 800a21a:	6021      	str	r1, [r4, #0]
 800a21c:	d04b      	beq.n	800a2b6 <_printf_i+0x1a6>
 800a21e:	4616      	mov	r6, r2
 800a220:	fbb5 f1f3 	udiv	r1, r5, r3
 800a224:	fb03 5711 	mls	r7, r3, r1, r5
 800a228:	5dc7      	ldrb	r7, [r0, r7]
 800a22a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a22e:	462f      	mov	r7, r5
 800a230:	42bb      	cmp	r3, r7
 800a232:	460d      	mov	r5, r1
 800a234:	d9f4      	bls.n	800a220 <_printf_i+0x110>
 800a236:	2b08      	cmp	r3, #8
 800a238:	d10b      	bne.n	800a252 <_printf_i+0x142>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	07df      	lsls	r7, r3, #31
 800a23e:	d508      	bpl.n	800a252 <_printf_i+0x142>
 800a240:	6923      	ldr	r3, [r4, #16]
 800a242:	6861      	ldr	r1, [r4, #4]
 800a244:	4299      	cmp	r1, r3
 800a246:	bfde      	ittt	le
 800a248:	2330      	movle	r3, #48	@ 0x30
 800a24a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a24e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a252:	1b92      	subs	r2, r2, r6
 800a254:	6122      	str	r2, [r4, #16]
 800a256:	f8cd a000 	str.w	sl, [sp]
 800a25a:	464b      	mov	r3, r9
 800a25c:	aa03      	add	r2, sp, #12
 800a25e:	4621      	mov	r1, r4
 800a260:	4640      	mov	r0, r8
 800a262:	f7ff fee7 	bl	800a034 <_printf_common>
 800a266:	3001      	adds	r0, #1
 800a268:	d14a      	bne.n	800a300 <_printf_i+0x1f0>
 800a26a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a26e:	b004      	add	sp, #16
 800a270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	f043 0320 	orr.w	r3, r3, #32
 800a27a:	6023      	str	r3, [r4, #0]
 800a27c:	4832      	ldr	r0, [pc, #200]	@ (800a348 <_printf_i+0x238>)
 800a27e:	2778      	movs	r7, #120	@ 0x78
 800a280:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a284:	6823      	ldr	r3, [r4, #0]
 800a286:	6831      	ldr	r1, [r6, #0]
 800a288:	061f      	lsls	r7, r3, #24
 800a28a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a28e:	d402      	bmi.n	800a296 <_printf_i+0x186>
 800a290:	065f      	lsls	r7, r3, #25
 800a292:	bf48      	it	mi
 800a294:	b2ad      	uxthmi	r5, r5
 800a296:	6031      	str	r1, [r6, #0]
 800a298:	07d9      	lsls	r1, r3, #31
 800a29a:	bf44      	itt	mi
 800a29c:	f043 0320 	orrmi.w	r3, r3, #32
 800a2a0:	6023      	strmi	r3, [r4, #0]
 800a2a2:	b11d      	cbz	r5, 800a2ac <_printf_i+0x19c>
 800a2a4:	2310      	movs	r3, #16
 800a2a6:	e7ad      	b.n	800a204 <_printf_i+0xf4>
 800a2a8:	4826      	ldr	r0, [pc, #152]	@ (800a344 <_printf_i+0x234>)
 800a2aa:	e7e9      	b.n	800a280 <_printf_i+0x170>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	f023 0320 	bic.w	r3, r3, #32
 800a2b2:	6023      	str	r3, [r4, #0]
 800a2b4:	e7f6      	b.n	800a2a4 <_printf_i+0x194>
 800a2b6:	4616      	mov	r6, r2
 800a2b8:	e7bd      	b.n	800a236 <_printf_i+0x126>
 800a2ba:	6833      	ldr	r3, [r6, #0]
 800a2bc:	6825      	ldr	r5, [r4, #0]
 800a2be:	6961      	ldr	r1, [r4, #20]
 800a2c0:	1d18      	adds	r0, r3, #4
 800a2c2:	6030      	str	r0, [r6, #0]
 800a2c4:	062e      	lsls	r6, r5, #24
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	d501      	bpl.n	800a2ce <_printf_i+0x1be>
 800a2ca:	6019      	str	r1, [r3, #0]
 800a2cc:	e002      	b.n	800a2d4 <_printf_i+0x1c4>
 800a2ce:	0668      	lsls	r0, r5, #25
 800a2d0:	d5fb      	bpl.n	800a2ca <_printf_i+0x1ba>
 800a2d2:	8019      	strh	r1, [r3, #0]
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	6123      	str	r3, [r4, #16]
 800a2d8:	4616      	mov	r6, r2
 800a2da:	e7bc      	b.n	800a256 <_printf_i+0x146>
 800a2dc:	6833      	ldr	r3, [r6, #0]
 800a2de:	1d1a      	adds	r2, r3, #4
 800a2e0:	6032      	str	r2, [r6, #0]
 800a2e2:	681e      	ldr	r6, [r3, #0]
 800a2e4:	6862      	ldr	r2, [r4, #4]
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f7f5 ff71 	bl	80001d0 <memchr>
 800a2ee:	b108      	cbz	r0, 800a2f4 <_printf_i+0x1e4>
 800a2f0:	1b80      	subs	r0, r0, r6
 800a2f2:	6060      	str	r0, [r4, #4]
 800a2f4:	6863      	ldr	r3, [r4, #4]
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2fe:	e7aa      	b.n	800a256 <_printf_i+0x146>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	4632      	mov	r2, r6
 800a304:	4649      	mov	r1, r9
 800a306:	4640      	mov	r0, r8
 800a308:	47d0      	blx	sl
 800a30a:	3001      	adds	r0, #1
 800a30c:	d0ad      	beq.n	800a26a <_printf_i+0x15a>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	079b      	lsls	r3, r3, #30
 800a312:	d413      	bmi.n	800a33c <_printf_i+0x22c>
 800a314:	68e0      	ldr	r0, [r4, #12]
 800a316:	9b03      	ldr	r3, [sp, #12]
 800a318:	4298      	cmp	r0, r3
 800a31a:	bfb8      	it	lt
 800a31c:	4618      	movlt	r0, r3
 800a31e:	e7a6      	b.n	800a26e <_printf_i+0x15e>
 800a320:	2301      	movs	r3, #1
 800a322:	4632      	mov	r2, r6
 800a324:	4649      	mov	r1, r9
 800a326:	4640      	mov	r0, r8
 800a328:	47d0      	blx	sl
 800a32a:	3001      	adds	r0, #1
 800a32c:	d09d      	beq.n	800a26a <_printf_i+0x15a>
 800a32e:	3501      	adds	r5, #1
 800a330:	68e3      	ldr	r3, [r4, #12]
 800a332:	9903      	ldr	r1, [sp, #12]
 800a334:	1a5b      	subs	r3, r3, r1
 800a336:	42ab      	cmp	r3, r5
 800a338:	dcf2      	bgt.n	800a320 <_printf_i+0x210>
 800a33a:	e7eb      	b.n	800a314 <_printf_i+0x204>
 800a33c:	2500      	movs	r5, #0
 800a33e:	f104 0619 	add.w	r6, r4, #25
 800a342:	e7f5      	b.n	800a330 <_printf_i+0x220>
 800a344:	0800cfb2 	.word	0x0800cfb2
 800a348:	0800cfc3 	.word	0x0800cfc3

0800a34c <std>:
 800a34c:	2300      	movs	r3, #0
 800a34e:	b510      	push	{r4, lr}
 800a350:	4604      	mov	r4, r0
 800a352:	e9c0 3300 	strd	r3, r3, [r0]
 800a356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a35a:	6083      	str	r3, [r0, #8]
 800a35c:	8181      	strh	r1, [r0, #12]
 800a35e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a360:	81c2      	strh	r2, [r0, #14]
 800a362:	6183      	str	r3, [r0, #24]
 800a364:	4619      	mov	r1, r3
 800a366:	2208      	movs	r2, #8
 800a368:	305c      	adds	r0, #92	@ 0x5c
 800a36a:	f000 f944 	bl	800a5f6 <memset>
 800a36e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a4 <std+0x58>)
 800a370:	6263      	str	r3, [r4, #36]	@ 0x24
 800a372:	4b0d      	ldr	r3, [pc, #52]	@ (800a3a8 <std+0x5c>)
 800a374:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a376:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ac <std+0x60>)
 800a378:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a37a:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b0 <std+0x64>)
 800a37c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a37e:	4b0d      	ldr	r3, [pc, #52]	@ (800a3b4 <std+0x68>)
 800a380:	6224      	str	r4, [r4, #32]
 800a382:	429c      	cmp	r4, r3
 800a384:	d006      	beq.n	800a394 <std+0x48>
 800a386:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a38a:	4294      	cmp	r4, r2
 800a38c:	d002      	beq.n	800a394 <std+0x48>
 800a38e:	33d0      	adds	r3, #208	@ 0xd0
 800a390:	429c      	cmp	r4, r3
 800a392:	d105      	bne.n	800a3a0 <std+0x54>
 800a394:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a39c:	f000 b9a8 	b.w	800a6f0 <__retarget_lock_init_recursive>
 800a3a0:	bd10      	pop	{r4, pc}
 800a3a2:	bf00      	nop
 800a3a4:	0800a53d 	.word	0x0800a53d
 800a3a8:	0800a55f 	.word	0x0800a55f
 800a3ac:	0800a597 	.word	0x0800a597
 800a3b0:	0800a5bb 	.word	0x0800a5bb
 800a3b4:	200023cc 	.word	0x200023cc

0800a3b8 <stdio_exit_handler>:
 800a3b8:	4a02      	ldr	r2, [pc, #8]	@ (800a3c4 <stdio_exit_handler+0xc>)
 800a3ba:	4903      	ldr	r1, [pc, #12]	@ (800a3c8 <stdio_exit_handler+0x10>)
 800a3bc:	4803      	ldr	r0, [pc, #12]	@ (800a3cc <stdio_exit_handler+0x14>)
 800a3be:	f000 b869 	b.w	800a494 <_fwalk_sglue>
 800a3c2:	bf00      	nop
 800a3c4:	200000fc 	.word	0x200000fc
 800a3c8:	0800c075 	.word	0x0800c075
 800a3cc:	2000010c 	.word	0x2000010c

0800a3d0 <cleanup_stdio>:
 800a3d0:	6841      	ldr	r1, [r0, #4]
 800a3d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a404 <cleanup_stdio+0x34>)
 800a3d4:	4299      	cmp	r1, r3
 800a3d6:	b510      	push	{r4, lr}
 800a3d8:	4604      	mov	r4, r0
 800a3da:	d001      	beq.n	800a3e0 <cleanup_stdio+0x10>
 800a3dc:	f001 fe4a 	bl	800c074 <_fflush_r>
 800a3e0:	68a1      	ldr	r1, [r4, #8]
 800a3e2:	4b09      	ldr	r3, [pc, #36]	@ (800a408 <cleanup_stdio+0x38>)
 800a3e4:	4299      	cmp	r1, r3
 800a3e6:	d002      	beq.n	800a3ee <cleanup_stdio+0x1e>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f001 fe43 	bl	800c074 <_fflush_r>
 800a3ee:	68e1      	ldr	r1, [r4, #12]
 800a3f0:	4b06      	ldr	r3, [pc, #24]	@ (800a40c <cleanup_stdio+0x3c>)
 800a3f2:	4299      	cmp	r1, r3
 800a3f4:	d004      	beq.n	800a400 <cleanup_stdio+0x30>
 800a3f6:	4620      	mov	r0, r4
 800a3f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3fc:	f001 be3a 	b.w	800c074 <_fflush_r>
 800a400:	bd10      	pop	{r4, pc}
 800a402:	bf00      	nop
 800a404:	200023cc 	.word	0x200023cc
 800a408:	20002434 	.word	0x20002434
 800a40c:	2000249c 	.word	0x2000249c

0800a410 <global_stdio_init.part.0>:
 800a410:	b510      	push	{r4, lr}
 800a412:	4b0b      	ldr	r3, [pc, #44]	@ (800a440 <global_stdio_init.part.0+0x30>)
 800a414:	4c0b      	ldr	r4, [pc, #44]	@ (800a444 <global_stdio_init.part.0+0x34>)
 800a416:	4a0c      	ldr	r2, [pc, #48]	@ (800a448 <global_stdio_init.part.0+0x38>)
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	4620      	mov	r0, r4
 800a41c:	2200      	movs	r2, #0
 800a41e:	2104      	movs	r1, #4
 800a420:	f7ff ff94 	bl	800a34c <std>
 800a424:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a428:	2201      	movs	r2, #1
 800a42a:	2109      	movs	r1, #9
 800a42c:	f7ff ff8e 	bl	800a34c <std>
 800a430:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a434:	2202      	movs	r2, #2
 800a436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a43a:	2112      	movs	r1, #18
 800a43c:	f7ff bf86 	b.w	800a34c <std>
 800a440:	20002504 	.word	0x20002504
 800a444:	200023cc 	.word	0x200023cc
 800a448:	0800a3b9 	.word	0x0800a3b9

0800a44c <__sfp_lock_acquire>:
 800a44c:	4801      	ldr	r0, [pc, #4]	@ (800a454 <__sfp_lock_acquire+0x8>)
 800a44e:	f000 b950 	b.w	800a6f2 <__retarget_lock_acquire_recursive>
 800a452:	bf00      	nop
 800a454:	2000250d 	.word	0x2000250d

0800a458 <__sfp_lock_release>:
 800a458:	4801      	ldr	r0, [pc, #4]	@ (800a460 <__sfp_lock_release+0x8>)
 800a45a:	f000 b94b 	b.w	800a6f4 <__retarget_lock_release_recursive>
 800a45e:	bf00      	nop
 800a460:	2000250d 	.word	0x2000250d

0800a464 <__sinit>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4604      	mov	r4, r0
 800a468:	f7ff fff0 	bl	800a44c <__sfp_lock_acquire>
 800a46c:	6a23      	ldr	r3, [r4, #32]
 800a46e:	b11b      	cbz	r3, 800a478 <__sinit+0x14>
 800a470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a474:	f7ff bff0 	b.w	800a458 <__sfp_lock_release>
 800a478:	4b04      	ldr	r3, [pc, #16]	@ (800a48c <__sinit+0x28>)
 800a47a:	6223      	str	r3, [r4, #32]
 800a47c:	4b04      	ldr	r3, [pc, #16]	@ (800a490 <__sinit+0x2c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1f5      	bne.n	800a470 <__sinit+0xc>
 800a484:	f7ff ffc4 	bl	800a410 <global_stdio_init.part.0>
 800a488:	e7f2      	b.n	800a470 <__sinit+0xc>
 800a48a:	bf00      	nop
 800a48c:	0800a3d1 	.word	0x0800a3d1
 800a490:	20002504 	.word	0x20002504

0800a494 <_fwalk_sglue>:
 800a494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a498:	4607      	mov	r7, r0
 800a49a:	4688      	mov	r8, r1
 800a49c:	4614      	mov	r4, r2
 800a49e:	2600      	movs	r6, #0
 800a4a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4a4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4a8:	d505      	bpl.n	800a4b6 <_fwalk_sglue+0x22>
 800a4aa:	6824      	ldr	r4, [r4, #0]
 800a4ac:	2c00      	cmp	r4, #0
 800a4ae:	d1f7      	bne.n	800a4a0 <_fwalk_sglue+0xc>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4b6:	89ab      	ldrh	r3, [r5, #12]
 800a4b8:	2b01      	cmp	r3, #1
 800a4ba:	d907      	bls.n	800a4cc <_fwalk_sglue+0x38>
 800a4bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	d003      	beq.n	800a4cc <_fwalk_sglue+0x38>
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4638      	mov	r0, r7
 800a4c8:	47c0      	blx	r8
 800a4ca:	4306      	orrs	r6, r0
 800a4cc:	3568      	adds	r5, #104	@ 0x68
 800a4ce:	e7e9      	b.n	800a4a4 <_fwalk_sglue+0x10>

0800a4d0 <sniprintf>:
 800a4d0:	b40c      	push	{r2, r3}
 800a4d2:	b530      	push	{r4, r5, lr}
 800a4d4:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <sniprintf+0x68>)
 800a4d6:	1e0c      	subs	r4, r1, #0
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	b09d      	sub	sp, #116	@ 0x74
 800a4dc:	da08      	bge.n	800a4f0 <sniprintf+0x20>
 800a4de:	238b      	movs	r3, #139	@ 0x8b
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4e6:	b01d      	add	sp, #116	@ 0x74
 800a4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ec:	b002      	add	sp, #8
 800a4ee:	4770      	bx	lr
 800a4f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a4f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a4fe:	bf14      	ite	ne
 800a500:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800a504:	4623      	moveq	r3, r4
 800a506:	9304      	str	r3, [sp, #16]
 800a508:	9307      	str	r3, [sp, #28]
 800a50a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a50e:	9002      	str	r0, [sp, #8]
 800a510:	9006      	str	r0, [sp, #24]
 800a512:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a516:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a518:	ab21      	add	r3, sp, #132	@ 0x84
 800a51a:	a902      	add	r1, sp, #8
 800a51c:	4628      	mov	r0, r5
 800a51e:	9301      	str	r3, [sp, #4]
 800a520:	f001 fc28 	bl	800bd74 <_svfiprintf_r>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	bfbc      	itt	lt
 800a528:	238b      	movlt	r3, #139	@ 0x8b
 800a52a:	602b      	strlt	r3, [r5, #0]
 800a52c:	2c00      	cmp	r4, #0
 800a52e:	d0da      	beq.n	800a4e6 <sniprintf+0x16>
 800a530:	9b02      	ldr	r3, [sp, #8]
 800a532:	2200      	movs	r2, #0
 800a534:	701a      	strb	r2, [r3, #0]
 800a536:	e7d6      	b.n	800a4e6 <sniprintf+0x16>
 800a538:	20000108 	.word	0x20000108

0800a53c <__sread>:
 800a53c:	b510      	push	{r4, lr}
 800a53e:	460c      	mov	r4, r1
 800a540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a544:	f000 f886 	bl	800a654 <_read_r>
 800a548:	2800      	cmp	r0, #0
 800a54a:	bfab      	itete	ge
 800a54c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a54e:	89a3      	ldrhlt	r3, [r4, #12]
 800a550:	181b      	addge	r3, r3, r0
 800a552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a556:	bfac      	ite	ge
 800a558:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a55a:	81a3      	strhlt	r3, [r4, #12]
 800a55c:	bd10      	pop	{r4, pc}

0800a55e <__swrite>:
 800a55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	461f      	mov	r7, r3
 800a564:	898b      	ldrh	r3, [r1, #12]
 800a566:	05db      	lsls	r3, r3, #23
 800a568:	4605      	mov	r5, r0
 800a56a:	460c      	mov	r4, r1
 800a56c:	4616      	mov	r6, r2
 800a56e:	d505      	bpl.n	800a57c <__swrite+0x1e>
 800a570:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a574:	2302      	movs	r3, #2
 800a576:	2200      	movs	r2, #0
 800a578:	f000 f85a 	bl	800a630 <_lseek_r>
 800a57c:	89a3      	ldrh	r3, [r4, #12]
 800a57e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a582:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a586:	81a3      	strh	r3, [r4, #12]
 800a588:	4632      	mov	r2, r6
 800a58a:	463b      	mov	r3, r7
 800a58c:	4628      	mov	r0, r5
 800a58e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a592:	f000 b871 	b.w	800a678 <_write_r>

0800a596 <__sseek>:
 800a596:	b510      	push	{r4, lr}
 800a598:	460c      	mov	r4, r1
 800a59a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59e:	f000 f847 	bl	800a630 <_lseek_r>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	bf15      	itete	ne
 800a5a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a5aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a5ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a5b2:	81a3      	strheq	r3, [r4, #12]
 800a5b4:	bf18      	it	ne
 800a5b6:	81a3      	strhne	r3, [r4, #12]
 800a5b8:	bd10      	pop	{r4, pc}

0800a5ba <__sclose>:
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f000 b827 	b.w	800a610 <_close_r>

0800a5c2 <memmove>:
 800a5c2:	4288      	cmp	r0, r1
 800a5c4:	b510      	push	{r4, lr}
 800a5c6:	eb01 0402 	add.w	r4, r1, r2
 800a5ca:	d902      	bls.n	800a5d2 <memmove+0x10>
 800a5cc:	4284      	cmp	r4, r0
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	d807      	bhi.n	800a5e2 <memmove+0x20>
 800a5d2:	1e43      	subs	r3, r0, #1
 800a5d4:	42a1      	cmp	r1, r4
 800a5d6:	d008      	beq.n	800a5ea <memmove+0x28>
 800a5d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5e0:	e7f8      	b.n	800a5d4 <memmove+0x12>
 800a5e2:	4402      	add	r2, r0
 800a5e4:	4601      	mov	r1, r0
 800a5e6:	428a      	cmp	r2, r1
 800a5e8:	d100      	bne.n	800a5ec <memmove+0x2a>
 800a5ea:	bd10      	pop	{r4, pc}
 800a5ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5f4:	e7f7      	b.n	800a5e6 <memmove+0x24>

0800a5f6 <memset>:
 800a5f6:	4402      	add	r2, r0
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d100      	bne.n	800a600 <memset+0xa>
 800a5fe:	4770      	bx	lr
 800a600:	f803 1b01 	strb.w	r1, [r3], #1
 800a604:	e7f9      	b.n	800a5fa <memset+0x4>
	...

0800a608 <_localeconv_r>:
 800a608:	4800      	ldr	r0, [pc, #0]	@ (800a60c <_localeconv_r+0x4>)
 800a60a:	4770      	bx	lr
 800a60c:	20000248 	.word	0x20000248

0800a610 <_close_r>:
 800a610:	b538      	push	{r3, r4, r5, lr}
 800a612:	4d06      	ldr	r5, [pc, #24]	@ (800a62c <_close_r+0x1c>)
 800a614:	2300      	movs	r3, #0
 800a616:	4604      	mov	r4, r0
 800a618:	4608      	mov	r0, r1
 800a61a:	602b      	str	r3, [r5, #0]
 800a61c:	f7f7 f810 	bl	8001640 <_close>
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d102      	bne.n	800a62a <_close_r+0x1a>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	b103      	cbz	r3, 800a62a <_close_r+0x1a>
 800a628:	6023      	str	r3, [r4, #0]
 800a62a:	bd38      	pop	{r3, r4, r5, pc}
 800a62c:	20002508 	.word	0x20002508

0800a630 <_lseek_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4d07      	ldr	r5, [pc, #28]	@ (800a650 <_lseek_r+0x20>)
 800a634:	4604      	mov	r4, r0
 800a636:	4608      	mov	r0, r1
 800a638:	4611      	mov	r1, r2
 800a63a:	2200      	movs	r2, #0
 800a63c:	602a      	str	r2, [r5, #0]
 800a63e:	461a      	mov	r2, r3
 800a640:	f7f7 f825 	bl	800168e <_lseek>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d102      	bne.n	800a64e <_lseek_r+0x1e>
 800a648:	682b      	ldr	r3, [r5, #0]
 800a64a:	b103      	cbz	r3, 800a64e <_lseek_r+0x1e>
 800a64c:	6023      	str	r3, [r4, #0]
 800a64e:	bd38      	pop	{r3, r4, r5, pc}
 800a650:	20002508 	.word	0x20002508

0800a654 <_read_r>:
 800a654:	b538      	push	{r3, r4, r5, lr}
 800a656:	4d07      	ldr	r5, [pc, #28]	@ (800a674 <_read_r+0x20>)
 800a658:	4604      	mov	r4, r0
 800a65a:	4608      	mov	r0, r1
 800a65c:	4611      	mov	r1, r2
 800a65e:	2200      	movs	r2, #0
 800a660:	602a      	str	r2, [r5, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	f7f6 ffb3 	bl	80015ce <_read>
 800a668:	1c43      	adds	r3, r0, #1
 800a66a:	d102      	bne.n	800a672 <_read_r+0x1e>
 800a66c:	682b      	ldr	r3, [r5, #0]
 800a66e:	b103      	cbz	r3, 800a672 <_read_r+0x1e>
 800a670:	6023      	str	r3, [r4, #0]
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	20002508 	.word	0x20002508

0800a678 <_write_r>:
 800a678:	b538      	push	{r3, r4, r5, lr}
 800a67a:	4d07      	ldr	r5, [pc, #28]	@ (800a698 <_write_r+0x20>)
 800a67c:	4604      	mov	r4, r0
 800a67e:	4608      	mov	r0, r1
 800a680:	4611      	mov	r1, r2
 800a682:	2200      	movs	r2, #0
 800a684:	602a      	str	r2, [r5, #0]
 800a686:	461a      	mov	r2, r3
 800a688:	f7f6 ffbe 	bl	8001608 <_write>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d102      	bne.n	800a696 <_write_r+0x1e>
 800a690:	682b      	ldr	r3, [r5, #0]
 800a692:	b103      	cbz	r3, 800a696 <_write_r+0x1e>
 800a694:	6023      	str	r3, [r4, #0]
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	20002508 	.word	0x20002508

0800a69c <__errno>:
 800a69c:	4b01      	ldr	r3, [pc, #4]	@ (800a6a4 <__errno+0x8>)
 800a69e:	6818      	ldr	r0, [r3, #0]
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	20000108 	.word	0x20000108

0800a6a8 <__libc_init_array>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4d0d      	ldr	r5, [pc, #52]	@ (800a6e0 <__libc_init_array+0x38>)
 800a6ac:	4c0d      	ldr	r4, [pc, #52]	@ (800a6e4 <__libc_init_array+0x3c>)
 800a6ae:	1b64      	subs	r4, r4, r5
 800a6b0:	10a4      	asrs	r4, r4, #2
 800a6b2:	2600      	movs	r6, #0
 800a6b4:	42a6      	cmp	r6, r4
 800a6b6:	d109      	bne.n	800a6cc <__libc_init_array+0x24>
 800a6b8:	4d0b      	ldr	r5, [pc, #44]	@ (800a6e8 <__libc_init_array+0x40>)
 800a6ba:	4c0c      	ldr	r4, [pc, #48]	@ (800a6ec <__libc_init_array+0x44>)
 800a6bc:	f002 f850 	bl	800c760 <_init>
 800a6c0:	1b64      	subs	r4, r4, r5
 800a6c2:	10a4      	asrs	r4, r4, #2
 800a6c4:	2600      	movs	r6, #0
 800a6c6:	42a6      	cmp	r6, r4
 800a6c8:	d105      	bne.n	800a6d6 <__libc_init_array+0x2e>
 800a6ca:	bd70      	pop	{r4, r5, r6, pc}
 800a6cc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6d0:	4798      	blx	r3
 800a6d2:	3601      	adds	r6, #1
 800a6d4:	e7ee      	b.n	800a6b4 <__libc_init_array+0xc>
 800a6d6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6da:	4798      	blx	r3
 800a6dc:	3601      	adds	r6, #1
 800a6de:	e7f2      	b.n	800a6c6 <__libc_init_array+0x1e>
 800a6e0:	0800d31c 	.word	0x0800d31c
 800a6e4:	0800d31c 	.word	0x0800d31c
 800a6e8:	0800d31c 	.word	0x0800d31c
 800a6ec:	0800d320 	.word	0x0800d320

0800a6f0 <__retarget_lock_init_recursive>:
 800a6f0:	4770      	bx	lr

0800a6f2 <__retarget_lock_acquire_recursive>:
 800a6f2:	4770      	bx	lr

0800a6f4 <__retarget_lock_release_recursive>:
 800a6f4:	4770      	bx	lr

0800a6f6 <memcpy>:
 800a6f6:	440a      	add	r2, r1
 800a6f8:	4291      	cmp	r1, r2
 800a6fa:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a6fe:	d100      	bne.n	800a702 <memcpy+0xc>
 800a700:	4770      	bx	lr
 800a702:	b510      	push	{r4, lr}
 800a704:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a70c:	4291      	cmp	r1, r2
 800a70e:	d1f9      	bne.n	800a704 <memcpy+0xe>
 800a710:	bd10      	pop	{r4, pc}

0800a712 <quorem>:
 800a712:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a716:	6903      	ldr	r3, [r0, #16]
 800a718:	690c      	ldr	r4, [r1, #16]
 800a71a:	42a3      	cmp	r3, r4
 800a71c:	4607      	mov	r7, r0
 800a71e:	db7e      	blt.n	800a81e <quorem+0x10c>
 800a720:	3c01      	subs	r4, #1
 800a722:	f101 0814 	add.w	r8, r1, #20
 800a726:	00a3      	lsls	r3, r4, #2
 800a728:	f100 0514 	add.w	r5, r0, #20
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a732:	9301      	str	r3, [sp, #4]
 800a734:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a738:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a73c:	3301      	adds	r3, #1
 800a73e:	429a      	cmp	r2, r3
 800a740:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a744:	fbb2 f6f3 	udiv	r6, r2, r3
 800a748:	d32e      	bcc.n	800a7a8 <quorem+0x96>
 800a74a:	f04f 0a00 	mov.w	sl, #0
 800a74e:	46c4      	mov	ip, r8
 800a750:	46ae      	mov	lr, r5
 800a752:	46d3      	mov	fp, sl
 800a754:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a758:	b298      	uxth	r0, r3
 800a75a:	fb06 a000 	mla	r0, r6, r0, sl
 800a75e:	0c02      	lsrs	r2, r0, #16
 800a760:	0c1b      	lsrs	r3, r3, #16
 800a762:	fb06 2303 	mla	r3, r6, r3, r2
 800a766:	f8de 2000 	ldr.w	r2, [lr]
 800a76a:	b280      	uxth	r0, r0
 800a76c:	b292      	uxth	r2, r2
 800a76e:	1a12      	subs	r2, r2, r0
 800a770:	445a      	add	r2, fp
 800a772:	f8de 0000 	ldr.w	r0, [lr]
 800a776:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a780:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a784:	b292      	uxth	r2, r2
 800a786:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a78a:	45e1      	cmp	r9, ip
 800a78c:	f84e 2b04 	str.w	r2, [lr], #4
 800a790:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a794:	d2de      	bcs.n	800a754 <quorem+0x42>
 800a796:	9b00      	ldr	r3, [sp, #0]
 800a798:	58eb      	ldr	r3, [r5, r3]
 800a79a:	b92b      	cbnz	r3, 800a7a8 <quorem+0x96>
 800a79c:	9b01      	ldr	r3, [sp, #4]
 800a79e:	3b04      	subs	r3, #4
 800a7a0:	429d      	cmp	r5, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	d32f      	bcc.n	800a806 <quorem+0xf4>
 800a7a6:	613c      	str	r4, [r7, #16]
 800a7a8:	4638      	mov	r0, r7
 800a7aa:	f001 f97f 	bl	800baac <__mcmp>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	db25      	blt.n	800a7fe <quorem+0xec>
 800a7b2:	4629      	mov	r1, r5
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7ba:	f8d1 c000 	ldr.w	ip, [r1]
 800a7be:	fa1f fe82 	uxth.w	lr, r2
 800a7c2:	fa1f f38c 	uxth.w	r3, ip
 800a7c6:	eba3 030e 	sub.w	r3, r3, lr
 800a7ca:	4403      	add	r3, r0
 800a7cc:	0c12      	lsrs	r2, r2, #16
 800a7ce:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a7d2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7dc:	45c1      	cmp	r9, r8
 800a7de:	f841 3b04 	str.w	r3, [r1], #4
 800a7e2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7e6:	d2e6      	bcs.n	800a7b6 <quorem+0xa4>
 800a7e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7f0:	b922      	cbnz	r2, 800a7fc <quorem+0xea>
 800a7f2:	3b04      	subs	r3, #4
 800a7f4:	429d      	cmp	r5, r3
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	d30b      	bcc.n	800a812 <quorem+0x100>
 800a7fa:	613c      	str	r4, [r7, #16]
 800a7fc:	3601      	adds	r6, #1
 800a7fe:	4630      	mov	r0, r6
 800a800:	b003      	add	sp, #12
 800a802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a806:	6812      	ldr	r2, [r2, #0]
 800a808:	3b04      	subs	r3, #4
 800a80a:	2a00      	cmp	r2, #0
 800a80c:	d1cb      	bne.n	800a7a6 <quorem+0x94>
 800a80e:	3c01      	subs	r4, #1
 800a810:	e7c6      	b.n	800a7a0 <quorem+0x8e>
 800a812:	6812      	ldr	r2, [r2, #0]
 800a814:	3b04      	subs	r3, #4
 800a816:	2a00      	cmp	r2, #0
 800a818:	d1ef      	bne.n	800a7fa <quorem+0xe8>
 800a81a:	3c01      	subs	r4, #1
 800a81c:	e7ea      	b.n	800a7f4 <quorem+0xe2>
 800a81e:	2000      	movs	r0, #0
 800a820:	e7ee      	b.n	800a800 <quorem+0xee>
 800a822:	0000      	movs	r0, r0
 800a824:	0000      	movs	r0, r0
	...

0800a828 <_dtoa_r>:
 800a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a82c:	69c7      	ldr	r7, [r0, #28]
 800a82e:	b097      	sub	sp, #92	@ 0x5c
 800a830:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a834:	ec55 4b10 	vmov	r4, r5, d0
 800a838:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a83a:	9107      	str	r1, [sp, #28]
 800a83c:	4681      	mov	r9, r0
 800a83e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a840:	9311      	str	r3, [sp, #68]	@ 0x44
 800a842:	b97f      	cbnz	r7, 800a864 <_dtoa_r+0x3c>
 800a844:	2010      	movs	r0, #16
 800a846:	f000 fe09 	bl	800b45c <malloc>
 800a84a:	4602      	mov	r2, r0
 800a84c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a850:	b920      	cbnz	r0, 800a85c <_dtoa_r+0x34>
 800a852:	4ba9      	ldr	r3, [pc, #676]	@ (800aaf8 <_dtoa_r+0x2d0>)
 800a854:	21ef      	movs	r1, #239	@ 0xef
 800a856:	48a9      	ldr	r0, [pc, #676]	@ (800aafc <_dtoa_r+0x2d4>)
 800a858:	f001 fc44 	bl	800c0e4 <__assert_func>
 800a85c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a860:	6007      	str	r7, [r0, #0]
 800a862:	60c7      	str	r7, [r0, #12]
 800a864:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	b159      	cbz	r1, 800a884 <_dtoa_r+0x5c>
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	604a      	str	r2, [r1, #4]
 800a870:	2301      	movs	r3, #1
 800a872:	4093      	lsls	r3, r2
 800a874:	608b      	str	r3, [r1, #8]
 800a876:	4648      	mov	r0, r9
 800a878:	f000 fee6 	bl	800b648 <_Bfree>
 800a87c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a880:	2200      	movs	r2, #0
 800a882:	601a      	str	r2, [r3, #0]
 800a884:	1e2b      	subs	r3, r5, #0
 800a886:	bfb9      	ittee	lt
 800a888:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a88c:	9305      	strlt	r3, [sp, #20]
 800a88e:	2300      	movge	r3, #0
 800a890:	6033      	strge	r3, [r6, #0]
 800a892:	9f05      	ldr	r7, [sp, #20]
 800a894:	4b9a      	ldr	r3, [pc, #616]	@ (800ab00 <_dtoa_r+0x2d8>)
 800a896:	bfbc      	itt	lt
 800a898:	2201      	movlt	r2, #1
 800a89a:	6032      	strlt	r2, [r6, #0]
 800a89c:	43bb      	bics	r3, r7
 800a89e:	d112      	bne.n	800a8c6 <_dtoa_r+0x9e>
 800a8a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8ac:	4323      	orrs	r3, r4
 800a8ae:	f000 855a 	beq.w	800b366 <_dtoa_r+0xb3e>
 800a8b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ab14 <_dtoa_r+0x2ec>
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 855c 	beq.w	800b376 <_dtoa_r+0xb4e>
 800a8be:	f10a 0303 	add.w	r3, sl, #3
 800a8c2:	f000 bd56 	b.w	800b372 <_dtoa_r+0xb4a>
 800a8c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	ec51 0b17 	vmov	r0, r1, d7
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a8d6:	f7f6 f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8da:	4680      	mov	r8, r0
 800a8dc:	b158      	cbz	r0, 800a8f6 <_dtoa_r+0xce>
 800a8de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	6013      	str	r3, [r2, #0]
 800a8e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8e6:	b113      	cbz	r3, 800a8ee <_dtoa_r+0xc6>
 800a8e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a8ea:	4b86      	ldr	r3, [pc, #536]	@ (800ab04 <_dtoa_r+0x2dc>)
 800a8ec:	6013      	str	r3, [r2, #0]
 800a8ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ab18 <_dtoa_r+0x2f0>
 800a8f2:	f000 bd40 	b.w	800b376 <_dtoa_r+0xb4e>
 800a8f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a8fa:	aa14      	add	r2, sp, #80	@ 0x50
 800a8fc:	a915      	add	r1, sp, #84	@ 0x54
 800a8fe:	4648      	mov	r0, r9
 800a900:	f001 f984 	bl	800bc0c <__d2b>
 800a904:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a908:	9002      	str	r0, [sp, #8]
 800a90a:	2e00      	cmp	r6, #0
 800a90c:	d078      	beq.n	800aa00 <_dtoa_r+0x1d8>
 800a90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a910:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a91c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a920:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a924:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a928:	4619      	mov	r1, r3
 800a92a:	2200      	movs	r2, #0
 800a92c:	4b76      	ldr	r3, [pc, #472]	@ (800ab08 <_dtoa_r+0x2e0>)
 800a92e:	f7f5 fcab 	bl	8000288 <__aeabi_dsub>
 800a932:	a36b      	add	r3, pc, #428	@ (adr r3, 800aae0 <_dtoa_r+0x2b8>)
 800a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a938:	f7f5 fe5e 	bl	80005f8 <__aeabi_dmul>
 800a93c:	a36a      	add	r3, pc, #424	@ (adr r3, 800aae8 <_dtoa_r+0x2c0>)
 800a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a942:	f7f5 fca3 	bl	800028c <__adddf3>
 800a946:	4604      	mov	r4, r0
 800a948:	4630      	mov	r0, r6
 800a94a:	460d      	mov	r5, r1
 800a94c:	f7f5 fdea 	bl	8000524 <__aeabi_i2d>
 800a950:	a367      	add	r3, pc, #412	@ (adr r3, 800aaf0 <_dtoa_r+0x2c8>)
 800a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a956:	f7f5 fe4f 	bl	80005f8 <__aeabi_dmul>
 800a95a:	4602      	mov	r2, r0
 800a95c:	460b      	mov	r3, r1
 800a95e:	4620      	mov	r0, r4
 800a960:	4629      	mov	r1, r5
 800a962:	f7f5 fc93 	bl	800028c <__adddf3>
 800a966:	4604      	mov	r4, r0
 800a968:	460d      	mov	r5, r1
 800a96a:	f7f6 f8f5 	bl	8000b58 <__aeabi_d2iz>
 800a96e:	2200      	movs	r2, #0
 800a970:	4607      	mov	r7, r0
 800a972:	2300      	movs	r3, #0
 800a974:	4620      	mov	r0, r4
 800a976:	4629      	mov	r1, r5
 800a978:	f7f6 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800a97c:	b140      	cbz	r0, 800a990 <_dtoa_r+0x168>
 800a97e:	4638      	mov	r0, r7
 800a980:	f7f5 fdd0 	bl	8000524 <__aeabi_i2d>
 800a984:	4622      	mov	r2, r4
 800a986:	462b      	mov	r3, r5
 800a988:	f7f6 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a98c:	b900      	cbnz	r0, 800a990 <_dtoa_r+0x168>
 800a98e:	3f01      	subs	r7, #1
 800a990:	2f16      	cmp	r7, #22
 800a992:	d852      	bhi.n	800aa3a <_dtoa_r+0x212>
 800a994:	4b5d      	ldr	r3, [pc, #372]	@ (800ab0c <_dtoa_r+0x2e4>)
 800a996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a9a2:	f7f6 f89b 	bl	8000adc <__aeabi_dcmplt>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d049      	beq.n	800aa3e <_dtoa_r+0x216>
 800a9aa:	3f01      	subs	r7, #1
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	9310      	str	r3, [sp, #64]	@ 0x40
 800a9b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a9b2:	1b9b      	subs	r3, r3, r6
 800a9b4:	1e5a      	subs	r2, r3, #1
 800a9b6:	bf45      	ittet	mi
 800a9b8:	f1c3 0301 	rsbmi	r3, r3, #1
 800a9bc:	9300      	strmi	r3, [sp, #0]
 800a9be:	2300      	movpl	r3, #0
 800a9c0:	2300      	movmi	r3, #0
 800a9c2:	9206      	str	r2, [sp, #24]
 800a9c4:	bf54      	ite	pl
 800a9c6:	9300      	strpl	r3, [sp, #0]
 800a9c8:	9306      	strmi	r3, [sp, #24]
 800a9ca:	2f00      	cmp	r7, #0
 800a9cc:	db39      	blt.n	800aa42 <_dtoa_r+0x21a>
 800a9ce:	9b06      	ldr	r3, [sp, #24]
 800a9d0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a9d2:	443b      	add	r3, r7
 800a9d4:	9306      	str	r3, [sp, #24]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	9308      	str	r3, [sp, #32]
 800a9da:	9b07      	ldr	r3, [sp, #28]
 800a9dc:	2b09      	cmp	r3, #9
 800a9de:	d863      	bhi.n	800aaa8 <_dtoa_r+0x280>
 800a9e0:	2b05      	cmp	r3, #5
 800a9e2:	bfc4      	itt	gt
 800a9e4:	3b04      	subgt	r3, #4
 800a9e6:	9307      	strgt	r3, [sp, #28]
 800a9e8:	9b07      	ldr	r3, [sp, #28]
 800a9ea:	f1a3 0302 	sub.w	r3, r3, #2
 800a9ee:	bfcc      	ite	gt
 800a9f0:	2400      	movgt	r4, #0
 800a9f2:	2401      	movle	r4, #1
 800a9f4:	2b03      	cmp	r3, #3
 800a9f6:	d863      	bhi.n	800aac0 <_dtoa_r+0x298>
 800a9f8:	e8df f003 	tbb	[pc, r3]
 800a9fc:	2b375452 	.word	0x2b375452
 800aa00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800aa04:	441e      	add	r6, r3
 800aa06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800aa0a:	2b20      	cmp	r3, #32
 800aa0c:	bfc1      	itttt	gt
 800aa0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800aa12:	409f      	lslgt	r7, r3
 800aa14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800aa18:	fa24 f303 	lsrgt.w	r3, r4, r3
 800aa1c:	bfd6      	itet	le
 800aa1e:	f1c3 0320 	rsble	r3, r3, #32
 800aa22:	ea47 0003 	orrgt.w	r0, r7, r3
 800aa26:	fa04 f003 	lslle.w	r0, r4, r3
 800aa2a:	f7f5 fd6b 	bl	8000504 <__aeabi_ui2d>
 800aa2e:	2201      	movs	r2, #1
 800aa30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800aa34:	3e01      	subs	r6, #1
 800aa36:	9212      	str	r2, [sp, #72]	@ 0x48
 800aa38:	e776      	b.n	800a928 <_dtoa_r+0x100>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e7b7      	b.n	800a9ae <_dtoa_r+0x186>
 800aa3e:	9010      	str	r0, [sp, #64]	@ 0x40
 800aa40:	e7b6      	b.n	800a9b0 <_dtoa_r+0x188>
 800aa42:	9b00      	ldr	r3, [sp, #0]
 800aa44:	1bdb      	subs	r3, r3, r7
 800aa46:	9300      	str	r3, [sp, #0]
 800aa48:	427b      	negs	r3, r7
 800aa4a:	9308      	str	r3, [sp, #32]
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	930d      	str	r3, [sp, #52]	@ 0x34
 800aa50:	e7c3      	b.n	800a9da <_dtoa_r+0x1b2>
 800aa52:	2301      	movs	r3, #1
 800aa54:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa58:	eb07 0b03 	add.w	fp, r7, r3
 800aa5c:	f10b 0301 	add.w	r3, fp, #1
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	9303      	str	r3, [sp, #12]
 800aa64:	bfb8      	it	lt
 800aa66:	2301      	movlt	r3, #1
 800aa68:	e006      	b.n	800aa78 <_dtoa_r+0x250>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dd28      	ble.n	800aac6 <_dtoa_r+0x29e>
 800aa74:	469b      	mov	fp, r3
 800aa76:	9303      	str	r3, [sp, #12]
 800aa78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	2204      	movs	r2, #4
 800aa80:	f102 0514 	add.w	r5, r2, #20
 800aa84:	429d      	cmp	r5, r3
 800aa86:	d926      	bls.n	800aad6 <_dtoa_r+0x2ae>
 800aa88:	6041      	str	r1, [r0, #4]
 800aa8a:	4648      	mov	r0, r9
 800aa8c:	f000 fd9c 	bl	800b5c8 <_Balloc>
 800aa90:	4682      	mov	sl, r0
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d142      	bne.n	800ab1c <_dtoa_r+0x2f4>
 800aa96:	4b1e      	ldr	r3, [pc, #120]	@ (800ab10 <_dtoa_r+0x2e8>)
 800aa98:	4602      	mov	r2, r0
 800aa9a:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa9e:	e6da      	b.n	800a856 <_dtoa_r+0x2e>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	e7e3      	b.n	800aa6c <_dtoa_r+0x244>
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	e7d5      	b.n	800aa54 <_dtoa_r+0x22c>
 800aaa8:	2401      	movs	r4, #1
 800aaaa:	2300      	movs	r3, #0
 800aaac:	9307      	str	r3, [sp, #28]
 800aaae:	9409      	str	r4, [sp, #36]	@ 0x24
 800aab0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800aab4:	2200      	movs	r2, #0
 800aab6:	f8cd b00c 	str.w	fp, [sp, #12]
 800aaba:	2312      	movs	r3, #18
 800aabc:	920c      	str	r2, [sp, #48]	@ 0x30
 800aabe:	e7db      	b.n	800aa78 <_dtoa_r+0x250>
 800aac0:	2301      	movs	r3, #1
 800aac2:	9309      	str	r3, [sp, #36]	@ 0x24
 800aac4:	e7f4      	b.n	800aab0 <_dtoa_r+0x288>
 800aac6:	f04f 0b01 	mov.w	fp, #1
 800aaca:	f8cd b00c 	str.w	fp, [sp, #12]
 800aace:	465b      	mov	r3, fp
 800aad0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800aad4:	e7d0      	b.n	800aa78 <_dtoa_r+0x250>
 800aad6:	3101      	adds	r1, #1
 800aad8:	0052      	lsls	r2, r2, #1
 800aada:	e7d1      	b.n	800aa80 <_dtoa_r+0x258>
 800aadc:	f3af 8000 	nop.w
 800aae0:	636f4361 	.word	0x636f4361
 800aae4:	3fd287a7 	.word	0x3fd287a7
 800aae8:	8b60c8b3 	.word	0x8b60c8b3
 800aaec:	3fc68a28 	.word	0x3fc68a28
 800aaf0:	509f79fb 	.word	0x509f79fb
 800aaf4:	3fd34413 	.word	0x3fd34413
 800aaf8:	0800cfe1 	.word	0x0800cfe1
 800aafc:	0800cff8 	.word	0x0800cff8
 800ab00:	7ff00000 	.word	0x7ff00000
 800ab04:	0800cfb1 	.word	0x0800cfb1
 800ab08:	3ff80000 	.word	0x3ff80000
 800ab0c:	0800d148 	.word	0x0800d148
 800ab10:	0800d050 	.word	0x0800d050
 800ab14:	0800cfdd 	.word	0x0800cfdd
 800ab18:	0800cfb0 	.word	0x0800cfb0
 800ab1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ab20:	6018      	str	r0, [r3, #0]
 800ab22:	9b03      	ldr	r3, [sp, #12]
 800ab24:	2b0e      	cmp	r3, #14
 800ab26:	f200 80a1 	bhi.w	800ac6c <_dtoa_r+0x444>
 800ab2a:	2c00      	cmp	r4, #0
 800ab2c:	f000 809e 	beq.w	800ac6c <_dtoa_r+0x444>
 800ab30:	2f00      	cmp	r7, #0
 800ab32:	dd33      	ble.n	800ab9c <_dtoa_r+0x374>
 800ab34:	4b9c      	ldr	r3, [pc, #624]	@ (800ada8 <_dtoa_r+0x580>)
 800ab36:	f007 020f 	and.w	r2, r7, #15
 800ab3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab3e:	ed93 7b00 	vldr	d7, [r3]
 800ab42:	05f8      	lsls	r0, r7, #23
 800ab44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ab48:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ab4c:	d516      	bpl.n	800ab7c <_dtoa_r+0x354>
 800ab4e:	4b97      	ldr	r3, [pc, #604]	@ (800adac <_dtoa_r+0x584>)
 800ab50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ab58:	f7f5 fe78 	bl	800084c <__aeabi_ddiv>
 800ab5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab60:	f004 040f 	and.w	r4, r4, #15
 800ab64:	2603      	movs	r6, #3
 800ab66:	4d91      	ldr	r5, [pc, #580]	@ (800adac <_dtoa_r+0x584>)
 800ab68:	b954      	cbnz	r4, 800ab80 <_dtoa_r+0x358>
 800ab6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ab6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab72:	f7f5 fe6b 	bl	800084c <__aeabi_ddiv>
 800ab76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab7a:	e028      	b.n	800abce <_dtoa_r+0x3a6>
 800ab7c:	2602      	movs	r6, #2
 800ab7e:	e7f2      	b.n	800ab66 <_dtoa_r+0x33e>
 800ab80:	07e1      	lsls	r1, r4, #31
 800ab82:	d508      	bpl.n	800ab96 <_dtoa_r+0x36e>
 800ab84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ab88:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab8c:	f7f5 fd34 	bl	80005f8 <__aeabi_dmul>
 800ab90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ab94:	3601      	adds	r6, #1
 800ab96:	1064      	asrs	r4, r4, #1
 800ab98:	3508      	adds	r5, #8
 800ab9a:	e7e5      	b.n	800ab68 <_dtoa_r+0x340>
 800ab9c:	f000 80af 	beq.w	800acfe <_dtoa_r+0x4d6>
 800aba0:	427c      	negs	r4, r7
 800aba2:	4b81      	ldr	r3, [pc, #516]	@ (800ada8 <_dtoa_r+0x580>)
 800aba4:	4d81      	ldr	r5, [pc, #516]	@ (800adac <_dtoa_r+0x584>)
 800aba6:	f004 020f 	and.w	r2, r4, #15
 800abaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abb6:	f7f5 fd1f 	bl	80005f8 <__aeabi_dmul>
 800abba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800abbe:	1124      	asrs	r4, r4, #4
 800abc0:	2300      	movs	r3, #0
 800abc2:	2602      	movs	r6, #2
 800abc4:	2c00      	cmp	r4, #0
 800abc6:	f040 808f 	bne.w	800ace8 <_dtoa_r+0x4c0>
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1d3      	bne.n	800ab76 <_dtoa_r+0x34e>
 800abce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800abd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	f000 8094 	beq.w	800ad02 <_dtoa_r+0x4da>
 800abda:	4b75      	ldr	r3, [pc, #468]	@ (800adb0 <_dtoa_r+0x588>)
 800abdc:	2200      	movs	r2, #0
 800abde:	4620      	mov	r0, r4
 800abe0:	4629      	mov	r1, r5
 800abe2:	f7f5 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800abe6:	2800      	cmp	r0, #0
 800abe8:	f000 808b 	beq.w	800ad02 <_dtoa_r+0x4da>
 800abec:	9b03      	ldr	r3, [sp, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	f000 8087 	beq.w	800ad02 <_dtoa_r+0x4da>
 800abf4:	f1bb 0f00 	cmp.w	fp, #0
 800abf8:	dd34      	ble.n	800ac64 <_dtoa_r+0x43c>
 800abfa:	4620      	mov	r0, r4
 800abfc:	4b6d      	ldr	r3, [pc, #436]	@ (800adb4 <_dtoa_r+0x58c>)
 800abfe:	2200      	movs	r2, #0
 800ac00:	4629      	mov	r1, r5
 800ac02:	f7f5 fcf9 	bl	80005f8 <__aeabi_dmul>
 800ac06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ac0a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ac0e:	3601      	adds	r6, #1
 800ac10:	465c      	mov	r4, fp
 800ac12:	4630      	mov	r0, r6
 800ac14:	f7f5 fc86 	bl	8000524 <__aeabi_i2d>
 800ac18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac1c:	f7f5 fcec 	bl	80005f8 <__aeabi_dmul>
 800ac20:	4b65      	ldr	r3, [pc, #404]	@ (800adb8 <_dtoa_r+0x590>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	f7f5 fb32 	bl	800028c <__adddf3>
 800ac28:	4605      	mov	r5, r0
 800ac2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	d16a      	bne.n	800ad08 <_dtoa_r+0x4e0>
 800ac32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac36:	4b61      	ldr	r3, [pc, #388]	@ (800adbc <_dtoa_r+0x594>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f7f5 fb25 	bl	8000288 <__aeabi_dsub>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ac46:	462a      	mov	r2, r5
 800ac48:	4633      	mov	r3, r6
 800ac4a:	f7f5 ff65 	bl	8000b18 <__aeabi_dcmpgt>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	f040 8298 	bne.w	800b184 <_dtoa_r+0x95c>
 800ac54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ac58:	462a      	mov	r2, r5
 800ac5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ac5e:	f7f5 ff3d 	bl	8000adc <__aeabi_dcmplt>
 800ac62:	bb38      	cbnz	r0, 800acb4 <_dtoa_r+0x48c>
 800ac64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ac68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	f2c0 8157 	blt.w	800af22 <_dtoa_r+0x6fa>
 800ac74:	2f0e      	cmp	r7, #14
 800ac76:	f300 8154 	bgt.w	800af22 <_dtoa_r+0x6fa>
 800ac7a:	4b4b      	ldr	r3, [pc, #300]	@ (800ada8 <_dtoa_r+0x580>)
 800ac7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ac80:	ed93 7b00 	vldr	d7, [r3]
 800ac84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	ed8d 7b00 	vstr	d7, [sp]
 800ac8c:	f280 80e5 	bge.w	800ae5a <_dtoa_r+0x632>
 800ac90:	9b03      	ldr	r3, [sp, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f300 80e1 	bgt.w	800ae5a <_dtoa_r+0x632>
 800ac98:	d10c      	bne.n	800acb4 <_dtoa_r+0x48c>
 800ac9a:	4b48      	ldr	r3, [pc, #288]	@ (800adbc <_dtoa_r+0x594>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	ec51 0b17 	vmov	r0, r1, d7
 800aca2:	f7f5 fca9 	bl	80005f8 <__aeabi_dmul>
 800aca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800acaa:	f7f5 ff2b 	bl	8000b04 <__aeabi_dcmpge>
 800acae:	2800      	cmp	r0, #0
 800acb0:	f000 8266 	beq.w	800b180 <_dtoa_r+0x958>
 800acb4:	2400      	movs	r4, #0
 800acb6:	4625      	mov	r5, r4
 800acb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acba:	4656      	mov	r6, sl
 800acbc:	ea6f 0803 	mvn.w	r8, r3
 800acc0:	2700      	movs	r7, #0
 800acc2:	4621      	mov	r1, r4
 800acc4:	4648      	mov	r0, r9
 800acc6:	f000 fcbf 	bl	800b648 <_Bfree>
 800acca:	2d00      	cmp	r5, #0
 800accc:	f000 80bd 	beq.w	800ae4a <_dtoa_r+0x622>
 800acd0:	b12f      	cbz	r7, 800acde <_dtoa_r+0x4b6>
 800acd2:	42af      	cmp	r7, r5
 800acd4:	d003      	beq.n	800acde <_dtoa_r+0x4b6>
 800acd6:	4639      	mov	r1, r7
 800acd8:	4648      	mov	r0, r9
 800acda:	f000 fcb5 	bl	800b648 <_Bfree>
 800acde:	4629      	mov	r1, r5
 800ace0:	4648      	mov	r0, r9
 800ace2:	f000 fcb1 	bl	800b648 <_Bfree>
 800ace6:	e0b0      	b.n	800ae4a <_dtoa_r+0x622>
 800ace8:	07e2      	lsls	r2, r4, #31
 800acea:	d505      	bpl.n	800acf8 <_dtoa_r+0x4d0>
 800acec:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acf0:	f7f5 fc82 	bl	80005f8 <__aeabi_dmul>
 800acf4:	3601      	adds	r6, #1
 800acf6:	2301      	movs	r3, #1
 800acf8:	1064      	asrs	r4, r4, #1
 800acfa:	3508      	adds	r5, #8
 800acfc:	e762      	b.n	800abc4 <_dtoa_r+0x39c>
 800acfe:	2602      	movs	r6, #2
 800ad00:	e765      	b.n	800abce <_dtoa_r+0x3a6>
 800ad02:	9c03      	ldr	r4, [sp, #12]
 800ad04:	46b8      	mov	r8, r7
 800ad06:	e784      	b.n	800ac12 <_dtoa_r+0x3ea>
 800ad08:	4b27      	ldr	r3, [pc, #156]	@ (800ada8 <_dtoa_r+0x580>)
 800ad0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ad0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ad14:	4454      	add	r4, sl
 800ad16:	2900      	cmp	r1, #0
 800ad18:	d054      	beq.n	800adc4 <_dtoa_r+0x59c>
 800ad1a:	4929      	ldr	r1, [pc, #164]	@ (800adc0 <_dtoa_r+0x598>)
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	f7f5 fd95 	bl	800084c <__aeabi_ddiv>
 800ad22:	4633      	mov	r3, r6
 800ad24:	462a      	mov	r2, r5
 800ad26:	f7f5 faaf 	bl	8000288 <__aeabi_dsub>
 800ad2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad2e:	4656      	mov	r6, sl
 800ad30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad34:	f7f5 ff10 	bl	8000b58 <__aeabi_d2iz>
 800ad38:	4605      	mov	r5, r0
 800ad3a:	f7f5 fbf3 	bl	8000524 <__aeabi_i2d>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
 800ad42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad46:	f7f5 fa9f 	bl	8000288 <__aeabi_dsub>
 800ad4a:	3530      	adds	r5, #48	@ 0x30
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	460b      	mov	r3, r1
 800ad50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ad54:	f806 5b01 	strb.w	r5, [r6], #1
 800ad58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad5c:	f7f5 febe 	bl	8000adc <__aeabi_dcmplt>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	d172      	bne.n	800ae4a <_dtoa_r+0x622>
 800ad64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad68:	4911      	ldr	r1, [pc, #68]	@ (800adb0 <_dtoa_r+0x588>)
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	f7f5 fa8c 	bl	8000288 <__aeabi_dsub>
 800ad70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad74:	f7f5 feb2 	bl	8000adc <__aeabi_dcmplt>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	f040 80b4 	bne.w	800aee6 <_dtoa_r+0x6be>
 800ad7e:	42a6      	cmp	r6, r4
 800ad80:	f43f af70 	beq.w	800ac64 <_dtoa_r+0x43c>
 800ad84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad88:	4b0a      	ldr	r3, [pc, #40]	@ (800adb4 <_dtoa_r+0x58c>)
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	f7f5 fc34 	bl	80005f8 <__aeabi_dmul>
 800ad90:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <_dtoa_r+0x58c>)
 800ad92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad96:	2200      	movs	r2, #0
 800ad98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad9c:	f7f5 fc2c 	bl	80005f8 <__aeabi_dmul>
 800ada0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ada4:	e7c4      	b.n	800ad30 <_dtoa_r+0x508>
 800ada6:	bf00      	nop
 800ada8:	0800d148 	.word	0x0800d148
 800adac:	0800d120 	.word	0x0800d120
 800adb0:	3ff00000 	.word	0x3ff00000
 800adb4:	40240000 	.word	0x40240000
 800adb8:	401c0000 	.word	0x401c0000
 800adbc:	40140000 	.word	0x40140000
 800adc0:	3fe00000 	.word	0x3fe00000
 800adc4:	4631      	mov	r1, r6
 800adc6:	4628      	mov	r0, r5
 800adc8:	f7f5 fc16 	bl	80005f8 <__aeabi_dmul>
 800adcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800add0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800add2:	4656      	mov	r6, sl
 800add4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800add8:	f7f5 febe 	bl	8000b58 <__aeabi_d2iz>
 800addc:	4605      	mov	r5, r0
 800adde:	f7f5 fba1 	bl	8000524 <__aeabi_i2d>
 800ade2:	4602      	mov	r2, r0
 800ade4:	460b      	mov	r3, r1
 800ade6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adea:	f7f5 fa4d 	bl	8000288 <__aeabi_dsub>
 800adee:	3530      	adds	r5, #48	@ 0x30
 800adf0:	f806 5b01 	strb.w	r5, [r6], #1
 800adf4:	4602      	mov	r2, r0
 800adf6:	460b      	mov	r3, r1
 800adf8:	42a6      	cmp	r6, r4
 800adfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800adfe:	f04f 0200 	mov.w	r2, #0
 800ae02:	d124      	bne.n	800ae4e <_dtoa_r+0x626>
 800ae04:	4baf      	ldr	r3, [pc, #700]	@ (800b0c4 <_dtoa_r+0x89c>)
 800ae06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ae0a:	f7f5 fa3f 	bl	800028c <__adddf3>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	460b      	mov	r3, r1
 800ae12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae16:	f7f5 fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 800ae1a:	2800      	cmp	r0, #0
 800ae1c:	d163      	bne.n	800aee6 <_dtoa_r+0x6be>
 800ae1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ae22:	49a8      	ldr	r1, [pc, #672]	@ (800b0c4 <_dtoa_r+0x89c>)
 800ae24:	2000      	movs	r0, #0
 800ae26:	f7f5 fa2f 	bl	8000288 <__aeabi_dsub>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae32:	f7f5 fe53 	bl	8000adc <__aeabi_dcmplt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f43f af14 	beq.w	800ac64 <_dtoa_r+0x43c>
 800ae3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ae3e:	1e73      	subs	r3, r6, #1
 800ae40:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae46:	2b30      	cmp	r3, #48	@ 0x30
 800ae48:	d0f8      	beq.n	800ae3c <_dtoa_r+0x614>
 800ae4a:	4647      	mov	r7, r8
 800ae4c:	e03b      	b.n	800aec6 <_dtoa_r+0x69e>
 800ae4e:	4b9e      	ldr	r3, [pc, #632]	@ (800b0c8 <_dtoa_r+0x8a0>)
 800ae50:	f7f5 fbd2 	bl	80005f8 <__aeabi_dmul>
 800ae54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae58:	e7bc      	b.n	800add4 <_dtoa_r+0x5ac>
 800ae5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae5e:	4656      	mov	r6, sl
 800ae60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae64:	4620      	mov	r0, r4
 800ae66:	4629      	mov	r1, r5
 800ae68:	f7f5 fcf0 	bl	800084c <__aeabi_ddiv>
 800ae6c:	f7f5 fe74 	bl	8000b58 <__aeabi_d2iz>
 800ae70:	4680      	mov	r8, r0
 800ae72:	f7f5 fb57 	bl	8000524 <__aeabi_i2d>
 800ae76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ae7a:	f7f5 fbbd 	bl	80005f8 <__aeabi_dmul>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4620      	mov	r0, r4
 800ae84:	4629      	mov	r1, r5
 800ae86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ae8a:	f7f5 f9fd 	bl	8000288 <__aeabi_dsub>
 800ae8e:	f806 4b01 	strb.w	r4, [r6], #1
 800ae92:	9d03      	ldr	r5, [sp, #12]
 800ae94:	eba6 040a 	sub.w	r4, r6, sl
 800ae98:	42a5      	cmp	r5, r4
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	d133      	bne.n	800af08 <_dtoa_r+0x6e0>
 800aea0:	f7f5 f9f4 	bl	800028c <__adddf3>
 800aea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aea8:	4604      	mov	r4, r0
 800aeaa:	460d      	mov	r5, r1
 800aeac:	f7f5 fe34 	bl	8000b18 <__aeabi_dcmpgt>
 800aeb0:	b9c0      	cbnz	r0, 800aee4 <_dtoa_r+0x6bc>
 800aeb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 800aebe:	b110      	cbz	r0, 800aec6 <_dtoa_r+0x69e>
 800aec0:	f018 0f01 	tst.w	r8, #1
 800aec4:	d10e      	bne.n	800aee4 <_dtoa_r+0x6bc>
 800aec6:	9902      	ldr	r1, [sp, #8]
 800aec8:	4648      	mov	r0, r9
 800aeca:	f000 fbbd 	bl	800b648 <_Bfree>
 800aece:	2300      	movs	r3, #0
 800aed0:	7033      	strb	r3, [r6, #0]
 800aed2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aed4:	3701      	adds	r7, #1
 800aed6:	601f      	str	r7, [r3, #0]
 800aed8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	f000 824b 	beq.w	800b376 <_dtoa_r+0xb4e>
 800aee0:	601e      	str	r6, [r3, #0]
 800aee2:	e248      	b.n	800b376 <_dtoa_r+0xb4e>
 800aee4:	46b8      	mov	r8, r7
 800aee6:	4633      	mov	r3, r6
 800aee8:	461e      	mov	r6, r3
 800aeea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aeee:	2a39      	cmp	r2, #57	@ 0x39
 800aef0:	d106      	bne.n	800af00 <_dtoa_r+0x6d8>
 800aef2:	459a      	cmp	sl, r3
 800aef4:	d1f8      	bne.n	800aee8 <_dtoa_r+0x6c0>
 800aef6:	2230      	movs	r2, #48	@ 0x30
 800aef8:	f108 0801 	add.w	r8, r8, #1
 800aefc:	f88a 2000 	strb.w	r2, [sl]
 800af00:	781a      	ldrb	r2, [r3, #0]
 800af02:	3201      	adds	r2, #1
 800af04:	701a      	strb	r2, [r3, #0]
 800af06:	e7a0      	b.n	800ae4a <_dtoa_r+0x622>
 800af08:	4b6f      	ldr	r3, [pc, #444]	@ (800b0c8 <_dtoa_r+0x8a0>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	f7f5 fb74 	bl	80005f8 <__aeabi_dmul>
 800af10:	2200      	movs	r2, #0
 800af12:	2300      	movs	r3, #0
 800af14:	4604      	mov	r4, r0
 800af16:	460d      	mov	r5, r1
 800af18:	f7f5 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d09f      	beq.n	800ae60 <_dtoa_r+0x638>
 800af20:	e7d1      	b.n	800aec6 <_dtoa_r+0x69e>
 800af22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af24:	2a00      	cmp	r2, #0
 800af26:	f000 80ea 	beq.w	800b0fe <_dtoa_r+0x8d6>
 800af2a:	9a07      	ldr	r2, [sp, #28]
 800af2c:	2a01      	cmp	r2, #1
 800af2e:	f300 80cd 	bgt.w	800b0cc <_dtoa_r+0x8a4>
 800af32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800af34:	2a00      	cmp	r2, #0
 800af36:	f000 80c1 	beq.w	800b0bc <_dtoa_r+0x894>
 800af3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800af3e:	9c08      	ldr	r4, [sp, #32]
 800af40:	9e00      	ldr	r6, [sp, #0]
 800af42:	9a00      	ldr	r2, [sp, #0]
 800af44:	441a      	add	r2, r3
 800af46:	9200      	str	r2, [sp, #0]
 800af48:	9a06      	ldr	r2, [sp, #24]
 800af4a:	2101      	movs	r1, #1
 800af4c:	441a      	add	r2, r3
 800af4e:	4648      	mov	r0, r9
 800af50:	9206      	str	r2, [sp, #24]
 800af52:	f000 fc2d 	bl	800b7b0 <__i2b>
 800af56:	4605      	mov	r5, r0
 800af58:	b166      	cbz	r6, 800af74 <_dtoa_r+0x74c>
 800af5a:	9b06      	ldr	r3, [sp, #24]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	dd09      	ble.n	800af74 <_dtoa_r+0x74c>
 800af60:	42b3      	cmp	r3, r6
 800af62:	9a00      	ldr	r2, [sp, #0]
 800af64:	bfa8      	it	ge
 800af66:	4633      	movge	r3, r6
 800af68:	1ad2      	subs	r2, r2, r3
 800af6a:	9200      	str	r2, [sp, #0]
 800af6c:	9a06      	ldr	r2, [sp, #24]
 800af6e:	1af6      	subs	r6, r6, r3
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	9306      	str	r3, [sp, #24]
 800af74:	9b08      	ldr	r3, [sp, #32]
 800af76:	b30b      	cbz	r3, 800afbc <_dtoa_r+0x794>
 800af78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 80c6 	beq.w	800b10c <_dtoa_r+0x8e4>
 800af80:	2c00      	cmp	r4, #0
 800af82:	f000 80c0 	beq.w	800b106 <_dtoa_r+0x8de>
 800af86:	4629      	mov	r1, r5
 800af88:	4622      	mov	r2, r4
 800af8a:	4648      	mov	r0, r9
 800af8c:	f000 fcc8 	bl	800b920 <__pow5mult>
 800af90:	9a02      	ldr	r2, [sp, #8]
 800af92:	4601      	mov	r1, r0
 800af94:	4605      	mov	r5, r0
 800af96:	4648      	mov	r0, r9
 800af98:	f000 fc20 	bl	800b7dc <__multiply>
 800af9c:	9902      	ldr	r1, [sp, #8]
 800af9e:	4680      	mov	r8, r0
 800afa0:	4648      	mov	r0, r9
 800afa2:	f000 fb51 	bl	800b648 <_Bfree>
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	1b1b      	subs	r3, r3, r4
 800afaa:	9308      	str	r3, [sp, #32]
 800afac:	f000 80b1 	beq.w	800b112 <_dtoa_r+0x8ea>
 800afb0:	9a08      	ldr	r2, [sp, #32]
 800afb2:	4641      	mov	r1, r8
 800afb4:	4648      	mov	r0, r9
 800afb6:	f000 fcb3 	bl	800b920 <__pow5mult>
 800afba:	9002      	str	r0, [sp, #8]
 800afbc:	2101      	movs	r1, #1
 800afbe:	4648      	mov	r0, r9
 800afc0:	f000 fbf6 	bl	800b7b0 <__i2b>
 800afc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afc6:	4604      	mov	r4, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	f000 81d8 	beq.w	800b37e <_dtoa_r+0xb56>
 800afce:	461a      	mov	r2, r3
 800afd0:	4601      	mov	r1, r0
 800afd2:	4648      	mov	r0, r9
 800afd4:	f000 fca4 	bl	800b920 <__pow5mult>
 800afd8:	9b07      	ldr	r3, [sp, #28]
 800afda:	2b01      	cmp	r3, #1
 800afdc:	4604      	mov	r4, r0
 800afde:	f300 809f 	bgt.w	800b120 <_dtoa_r+0x8f8>
 800afe2:	9b04      	ldr	r3, [sp, #16]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f040 8097 	bne.w	800b118 <_dtoa_r+0x8f0>
 800afea:	9b05      	ldr	r3, [sp, #20]
 800afec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f040 8093 	bne.w	800b11c <_dtoa_r+0x8f4>
 800aff6:	9b05      	ldr	r3, [sp, #20]
 800aff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800affc:	0d1b      	lsrs	r3, r3, #20
 800affe:	051b      	lsls	r3, r3, #20
 800b000:	b133      	cbz	r3, 800b010 <_dtoa_r+0x7e8>
 800b002:	9b00      	ldr	r3, [sp, #0]
 800b004:	3301      	adds	r3, #1
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	9b06      	ldr	r3, [sp, #24]
 800b00a:	3301      	adds	r3, #1
 800b00c:	9306      	str	r3, [sp, #24]
 800b00e:	2301      	movs	r3, #1
 800b010:	9308      	str	r3, [sp, #32]
 800b012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 81b8 	beq.w	800b38a <_dtoa_r+0xb62>
 800b01a:	6923      	ldr	r3, [r4, #16]
 800b01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b020:	6918      	ldr	r0, [r3, #16]
 800b022:	f000 fb79 	bl	800b718 <__hi0bits>
 800b026:	f1c0 0020 	rsb	r0, r0, #32
 800b02a:	9b06      	ldr	r3, [sp, #24]
 800b02c:	4418      	add	r0, r3
 800b02e:	f010 001f 	ands.w	r0, r0, #31
 800b032:	f000 8082 	beq.w	800b13a <_dtoa_r+0x912>
 800b036:	f1c0 0320 	rsb	r3, r0, #32
 800b03a:	2b04      	cmp	r3, #4
 800b03c:	dd73      	ble.n	800b126 <_dtoa_r+0x8fe>
 800b03e:	9b00      	ldr	r3, [sp, #0]
 800b040:	f1c0 001c 	rsb	r0, r0, #28
 800b044:	4403      	add	r3, r0
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	9b06      	ldr	r3, [sp, #24]
 800b04a:	4403      	add	r3, r0
 800b04c:	4406      	add	r6, r0
 800b04e:	9306      	str	r3, [sp, #24]
 800b050:	9b00      	ldr	r3, [sp, #0]
 800b052:	2b00      	cmp	r3, #0
 800b054:	dd05      	ble.n	800b062 <_dtoa_r+0x83a>
 800b056:	9902      	ldr	r1, [sp, #8]
 800b058:	461a      	mov	r2, r3
 800b05a:	4648      	mov	r0, r9
 800b05c:	f000 fcba 	bl	800b9d4 <__lshift>
 800b060:	9002      	str	r0, [sp, #8]
 800b062:	9b06      	ldr	r3, [sp, #24]
 800b064:	2b00      	cmp	r3, #0
 800b066:	dd05      	ble.n	800b074 <_dtoa_r+0x84c>
 800b068:	4621      	mov	r1, r4
 800b06a:	461a      	mov	r2, r3
 800b06c:	4648      	mov	r0, r9
 800b06e:	f000 fcb1 	bl	800b9d4 <__lshift>
 800b072:	4604      	mov	r4, r0
 800b074:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b076:	2b00      	cmp	r3, #0
 800b078:	d061      	beq.n	800b13e <_dtoa_r+0x916>
 800b07a:	9802      	ldr	r0, [sp, #8]
 800b07c:	4621      	mov	r1, r4
 800b07e:	f000 fd15 	bl	800baac <__mcmp>
 800b082:	2800      	cmp	r0, #0
 800b084:	da5b      	bge.n	800b13e <_dtoa_r+0x916>
 800b086:	2300      	movs	r3, #0
 800b088:	9902      	ldr	r1, [sp, #8]
 800b08a:	220a      	movs	r2, #10
 800b08c:	4648      	mov	r0, r9
 800b08e:	f000 fafd 	bl	800b68c <__multadd>
 800b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b094:	9002      	str	r0, [sp, #8]
 800b096:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f000 8177 	beq.w	800b38e <_dtoa_r+0xb66>
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	220a      	movs	r2, #10
 800b0a6:	4648      	mov	r0, r9
 800b0a8:	f000 faf0 	bl	800b68c <__multadd>
 800b0ac:	f1bb 0f00 	cmp.w	fp, #0
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	dc6f      	bgt.n	800b194 <_dtoa_r+0x96c>
 800b0b4:	9b07      	ldr	r3, [sp, #28]
 800b0b6:	2b02      	cmp	r3, #2
 800b0b8:	dc49      	bgt.n	800b14e <_dtoa_r+0x926>
 800b0ba:	e06b      	b.n	800b194 <_dtoa_r+0x96c>
 800b0bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b0be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b0c2:	e73c      	b.n	800af3e <_dtoa_r+0x716>
 800b0c4:	3fe00000 	.word	0x3fe00000
 800b0c8:	40240000 	.word	0x40240000
 800b0cc:	9b03      	ldr	r3, [sp, #12]
 800b0ce:	1e5c      	subs	r4, r3, #1
 800b0d0:	9b08      	ldr	r3, [sp, #32]
 800b0d2:	42a3      	cmp	r3, r4
 800b0d4:	db09      	blt.n	800b0ea <_dtoa_r+0x8c2>
 800b0d6:	1b1c      	subs	r4, r3, r4
 800b0d8:	9b03      	ldr	r3, [sp, #12]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	f6bf af30 	bge.w	800af40 <_dtoa_r+0x718>
 800b0e0:	9b00      	ldr	r3, [sp, #0]
 800b0e2:	9a03      	ldr	r2, [sp, #12]
 800b0e4:	1a9e      	subs	r6, r3, r2
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	e72b      	b.n	800af42 <_dtoa_r+0x71a>
 800b0ea:	9b08      	ldr	r3, [sp, #32]
 800b0ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0ee:	9408      	str	r4, [sp, #32]
 800b0f0:	1ae3      	subs	r3, r4, r3
 800b0f2:	441a      	add	r2, r3
 800b0f4:	9e00      	ldr	r6, [sp, #0]
 800b0f6:	9b03      	ldr	r3, [sp, #12]
 800b0f8:	920d      	str	r2, [sp, #52]	@ 0x34
 800b0fa:	2400      	movs	r4, #0
 800b0fc:	e721      	b.n	800af42 <_dtoa_r+0x71a>
 800b0fe:	9c08      	ldr	r4, [sp, #32]
 800b100:	9e00      	ldr	r6, [sp, #0]
 800b102:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b104:	e728      	b.n	800af58 <_dtoa_r+0x730>
 800b106:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b10a:	e751      	b.n	800afb0 <_dtoa_r+0x788>
 800b10c:	9a08      	ldr	r2, [sp, #32]
 800b10e:	9902      	ldr	r1, [sp, #8]
 800b110:	e750      	b.n	800afb4 <_dtoa_r+0x78c>
 800b112:	f8cd 8008 	str.w	r8, [sp, #8]
 800b116:	e751      	b.n	800afbc <_dtoa_r+0x794>
 800b118:	2300      	movs	r3, #0
 800b11a:	e779      	b.n	800b010 <_dtoa_r+0x7e8>
 800b11c:	9b04      	ldr	r3, [sp, #16]
 800b11e:	e777      	b.n	800b010 <_dtoa_r+0x7e8>
 800b120:	2300      	movs	r3, #0
 800b122:	9308      	str	r3, [sp, #32]
 800b124:	e779      	b.n	800b01a <_dtoa_r+0x7f2>
 800b126:	d093      	beq.n	800b050 <_dtoa_r+0x828>
 800b128:	9a00      	ldr	r2, [sp, #0]
 800b12a:	331c      	adds	r3, #28
 800b12c:	441a      	add	r2, r3
 800b12e:	9200      	str	r2, [sp, #0]
 800b130:	9a06      	ldr	r2, [sp, #24]
 800b132:	441a      	add	r2, r3
 800b134:	441e      	add	r6, r3
 800b136:	9206      	str	r2, [sp, #24]
 800b138:	e78a      	b.n	800b050 <_dtoa_r+0x828>
 800b13a:	4603      	mov	r3, r0
 800b13c:	e7f4      	b.n	800b128 <_dtoa_r+0x900>
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	2b00      	cmp	r3, #0
 800b142:	46b8      	mov	r8, r7
 800b144:	dc20      	bgt.n	800b188 <_dtoa_r+0x960>
 800b146:	469b      	mov	fp, r3
 800b148:	9b07      	ldr	r3, [sp, #28]
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	dd1e      	ble.n	800b18c <_dtoa_r+0x964>
 800b14e:	f1bb 0f00 	cmp.w	fp, #0
 800b152:	f47f adb1 	bne.w	800acb8 <_dtoa_r+0x490>
 800b156:	4621      	mov	r1, r4
 800b158:	465b      	mov	r3, fp
 800b15a:	2205      	movs	r2, #5
 800b15c:	4648      	mov	r0, r9
 800b15e:	f000 fa95 	bl	800b68c <__multadd>
 800b162:	4601      	mov	r1, r0
 800b164:	4604      	mov	r4, r0
 800b166:	9802      	ldr	r0, [sp, #8]
 800b168:	f000 fca0 	bl	800baac <__mcmp>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	f77f ada3 	ble.w	800acb8 <_dtoa_r+0x490>
 800b172:	4656      	mov	r6, sl
 800b174:	2331      	movs	r3, #49	@ 0x31
 800b176:	f806 3b01 	strb.w	r3, [r6], #1
 800b17a:	f108 0801 	add.w	r8, r8, #1
 800b17e:	e59f      	b.n	800acc0 <_dtoa_r+0x498>
 800b180:	9c03      	ldr	r4, [sp, #12]
 800b182:	46b8      	mov	r8, r7
 800b184:	4625      	mov	r5, r4
 800b186:	e7f4      	b.n	800b172 <_dtoa_r+0x94a>
 800b188:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f000 8101 	beq.w	800b396 <_dtoa_r+0xb6e>
 800b194:	2e00      	cmp	r6, #0
 800b196:	dd05      	ble.n	800b1a4 <_dtoa_r+0x97c>
 800b198:	4629      	mov	r1, r5
 800b19a:	4632      	mov	r2, r6
 800b19c:	4648      	mov	r0, r9
 800b19e:	f000 fc19 	bl	800b9d4 <__lshift>
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	9b08      	ldr	r3, [sp, #32]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d05c      	beq.n	800b264 <_dtoa_r+0xa3c>
 800b1aa:	6869      	ldr	r1, [r5, #4]
 800b1ac:	4648      	mov	r0, r9
 800b1ae:	f000 fa0b 	bl	800b5c8 <_Balloc>
 800b1b2:	4606      	mov	r6, r0
 800b1b4:	b928      	cbnz	r0, 800b1c2 <_dtoa_r+0x99a>
 800b1b6:	4b82      	ldr	r3, [pc, #520]	@ (800b3c0 <_dtoa_r+0xb98>)
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b1be:	f7ff bb4a 	b.w	800a856 <_dtoa_r+0x2e>
 800b1c2:	692a      	ldr	r2, [r5, #16]
 800b1c4:	3202      	adds	r2, #2
 800b1c6:	0092      	lsls	r2, r2, #2
 800b1c8:	f105 010c 	add.w	r1, r5, #12
 800b1cc:	300c      	adds	r0, #12
 800b1ce:	f7ff fa92 	bl	800a6f6 <memcpy>
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	4631      	mov	r1, r6
 800b1d6:	4648      	mov	r0, r9
 800b1d8:	f000 fbfc 	bl	800b9d4 <__lshift>
 800b1dc:	f10a 0301 	add.w	r3, sl, #1
 800b1e0:	9300      	str	r3, [sp, #0]
 800b1e2:	eb0a 030b 	add.w	r3, sl, fp
 800b1e6:	9308      	str	r3, [sp, #32]
 800b1e8:	9b04      	ldr	r3, [sp, #16]
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	462f      	mov	r7, r5
 800b1f0:	9306      	str	r3, [sp, #24]
 800b1f2:	4605      	mov	r5, r0
 800b1f4:	9b00      	ldr	r3, [sp, #0]
 800b1f6:	9802      	ldr	r0, [sp, #8]
 800b1f8:	4621      	mov	r1, r4
 800b1fa:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b1fe:	f7ff fa88 	bl	800a712 <quorem>
 800b202:	4603      	mov	r3, r0
 800b204:	3330      	adds	r3, #48	@ 0x30
 800b206:	9003      	str	r0, [sp, #12]
 800b208:	4639      	mov	r1, r7
 800b20a:	9802      	ldr	r0, [sp, #8]
 800b20c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b20e:	f000 fc4d 	bl	800baac <__mcmp>
 800b212:	462a      	mov	r2, r5
 800b214:	9004      	str	r0, [sp, #16]
 800b216:	4621      	mov	r1, r4
 800b218:	4648      	mov	r0, r9
 800b21a:	f000 fc63 	bl	800bae4 <__mdiff>
 800b21e:	68c2      	ldr	r2, [r0, #12]
 800b220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b222:	4606      	mov	r6, r0
 800b224:	bb02      	cbnz	r2, 800b268 <_dtoa_r+0xa40>
 800b226:	4601      	mov	r1, r0
 800b228:	9802      	ldr	r0, [sp, #8]
 800b22a:	f000 fc3f 	bl	800baac <__mcmp>
 800b22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b230:	4602      	mov	r2, r0
 800b232:	4631      	mov	r1, r6
 800b234:	4648      	mov	r0, r9
 800b236:	920c      	str	r2, [sp, #48]	@ 0x30
 800b238:	9309      	str	r3, [sp, #36]	@ 0x24
 800b23a:	f000 fa05 	bl	800b648 <_Bfree>
 800b23e:	9b07      	ldr	r3, [sp, #28]
 800b240:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b242:	9e00      	ldr	r6, [sp, #0]
 800b244:	ea42 0103 	orr.w	r1, r2, r3
 800b248:	9b06      	ldr	r3, [sp, #24]
 800b24a:	4319      	orrs	r1, r3
 800b24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b24e:	d10d      	bne.n	800b26c <_dtoa_r+0xa44>
 800b250:	2b39      	cmp	r3, #57	@ 0x39
 800b252:	d027      	beq.n	800b2a4 <_dtoa_r+0xa7c>
 800b254:	9a04      	ldr	r2, [sp, #16]
 800b256:	2a00      	cmp	r2, #0
 800b258:	dd01      	ble.n	800b25e <_dtoa_r+0xa36>
 800b25a:	9b03      	ldr	r3, [sp, #12]
 800b25c:	3331      	adds	r3, #49	@ 0x31
 800b25e:	f88b 3000 	strb.w	r3, [fp]
 800b262:	e52e      	b.n	800acc2 <_dtoa_r+0x49a>
 800b264:	4628      	mov	r0, r5
 800b266:	e7b9      	b.n	800b1dc <_dtoa_r+0x9b4>
 800b268:	2201      	movs	r2, #1
 800b26a:	e7e2      	b.n	800b232 <_dtoa_r+0xa0a>
 800b26c:	9904      	ldr	r1, [sp, #16]
 800b26e:	2900      	cmp	r1, #0
 800b270:	db04      	blt.n	800b27c <_dtoa_r+0xa54>
 800b272:	9807      	ldr	r0, [sp, #28]
 800b274:	4301      	orrs	r1, r0
 800b276:	9806      	ldr	r0, [sp, #24]
 800b278:	4301      	orrs	r1, r0
 800b27a:	d120      	bne.n	800b2be <_dtoa_r+0xa96>
 800b27c:	2a00      	cmp	r2, #0
 800b27e:	ddee      	ble.n	800b25e <_dtoa_r+0xa36>
 800b280:	9902      	ldr	r1, [sp, #8]
 800b282:	9300      	str	r3, [sp, #0]
 800b284:	2201      	movs	r2, #1
 800b286:	4648      	mov	r0, r9
 800b288:	f000 fba4 	bl	800b9d4 <__lshift>
 800b28c:	4621      	mov	r1, r4
 800b28e:	9002      	str	r0, [sp, #8]
 800b290:	f000 fc0c 	bl	800baac <__mcmp>
 800b294:	2800      	cmp	r0, #0
 800b296:	9b00      	ldr	r3, [sp, #0]
 800b298:	dc02      	bgt.n	800b2a0 <_dtoa_r+0xa78>
 800b29a:	d1e0      	bne.n	800b25e <_dtoa_r+0xa36>
 800b29c:	07da      	lsls	r2, r3, #31
 800b29e:	d5de      	bpl.n	800b25e <_dtoa_r+0xa36>
 800b2a0:	2b39      	cmp	r3, #57	@ 0x39
 800b2a2:	d1da      	bne.n	800b25a <_dtoa_r+0xa32>
 800b2a4:	2339      	movs	r3, #57	@ 0x39
 800b2a6:	f88b 3000 	strb.w	r3, [fp]
 800b2aa:	4633      	mov	r3, r6
 800b2ac:	461e      	mov	r6, r3
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b2b4:	2a39      	cmp	r2, #57	@ 0x39
 800b2b6:	d04e      	beq.n	800b356 <_dtoa_r+0xb2e>
 800b2b8:	3201      	adds	r2, #1
 800b2ba:	701a      	strb	r2, [r3, #0]
 800b2bc:	e501      	b.n	800acc2 <_dtoa_r+0x49a>
 800b2be:	2a00      	cmp	r2, #0
 800b2c0:	dd03      	ble.n	800b2ca <_dtoa_r+0xaa2>
 800b2c2:	2b39      	cmp	r3, #57	@ 0x39
 800b2c4:	d0ee      	beq.n	800b2a4 <_dtoa_r+0xa7c>
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	e7c9      	b.n	800b25e <_dtoa_r+0xa36>
 800b2ca:	9a00      	ldr	r2, [sp, #0]
 800b2cc:	9908      	ldr	r1, [sp, #32]
 800b2ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b2d2:	428a      	cmp	r2, r1
 800b2d4:	d028      	beq.n	800b328 <_dtoa_r+0xb00>
 800b2d6:	9902      	ldr	r1, [sp, #8]
 800b2d8:	2300      	movs	r3, #0
 800b2da:	220a      	movs	r2, #10
 800b2dc:	4648      	mov	r0, r9
 800b2de:	f000 f9d5 	bl	800b68c <__multadd>
 800b2e2:	42af      	cmp	r7, r5
 800b2e4:	9002      	str	r0, [sp, #8]
 800b2e6:	f04f 0300 	mov.w	r3, #0
 800b2ea:	f04f 020a 	mov.w	r2, #10
 800b2ee:	4639      	mov	r1, r7
 800b2f0:	4648      	mov	r0, r9
 800b2f2:	d107      	bne.n	800b304 <_dtoa_r+0xadc>
 800b2f4:	f000 f9ca 	bl	800b68c <__multadd>
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	4605      	mov	r5, r0
 800b2fc:	9b00      	ldr	r3, [sp, #0]
 800b2fe:	3301      	adds	r3, #1
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	e777      	b.n	800b1f4 <_dtoa_r+0x9cc>
 800b304:	f000 f9c2 	bl	800b68c <__multadd>
 800b308:	4629      	mov	r1, r5
 800b30a:	4607      	mov	r7, r0
 800b30c:	2300      	movs	r3, #0
 800b30e:	220a      	movs	r2, #10
 800b310:	4648      	mov	r0, r9
 800b312:	f000 f9bb 	bl	800b68c <__multadd>
 800b316:	4605      	mov	r5, r0
 800b318:	e7f0      	b.n	800b2fc <_dtoa_r+0xad4>
 800b31a:	f1bb 0f00 	cmp.w	fp, #0
 800b31e:	bfcc      	ite	gt
 800b320:	465e      	movgt	r6, fp
 800b322:	2601      	movle	r6, #1
 800b324:	4456      	add	r6, sl
 800b326:	2700      	movs	r7, #0
 800b328:	9902      	ldr	r1, [sp, #8]
 800b32a:	9300      	str	r3, [sp, #0]
 800b32c:	2201      	movs	r2, #1
 800b32e:	4648      	mov	r0, r9
 800b330:	f000 fb50 	bl	800b9d4 <__lshift>
 800b334:	4621      	mov	r1, r4
 800b336:	9002      	str	r0, [sp, #8]
 800b338:	f000 fbb8 	bl	800baac <__mcmp>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dcb4      	bgt.n	800b2aa <_dtoa_r+0xa82>
 800b340:	d102      	bne.n	800b348 <_dtoa_r+0xb20>
 800b342:	9b00      	ldr	r3, [sp, #0]
 800b344:	07db      	lsls	r3, r3, #31
 800b346:	d4b0      	bmi.n	800b2aa <_dtoa_r+0xa82>
 800b348:	4633      	mov	r3, r6
 800b34a:	461e      	mov	r6, r3
 800b34c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b350:	2a30      	cmp	r2, #48	@ 0x30
 800b352:	d0fa      	beq.n	800b34a <_dtoa_r+0xb22>
 800b354:	e4b5      	b.n	800acc2 <_dtoa_r+0x49a>
 800b356:	459a      	cmp	sl, r3
 800b358:	d1a8      	bne.n	800b2ac <_dtoa_r+0xa84>
 800b35a:	2331      	movs	r3, #49	@ 0x31
 800b35c:	f108 0801 	add.w	r8, r8, #1
 800b360:	f88a 3000 	strb.w	r3, [sl]
 800b364:	e4ad      	b.n	800acc2 <_dtoa_r+0x49a>
 800b366:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b368:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b3c4 <_dtoa_r+0xb9c>
 800b36c:	b11b      	cbz	r3, 800b376 <_dtoa_r+0xb4e>
 800b36e:	f10a 0308 	add.w	r3, sl, #8
 800b372:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b374:	6013      	str	r3, [r2, #0]
 800b376:	4650      	mov	r0, sl
 800b378:	b017      	add	sp, #92	@ 0x5c
 800b37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37e:	9b07      	ldr	r3, [sp, #28]
 800b380:	2b01      	cmp	r3, #1
 800b382:	f77f ae2e 	ble.w	800afe2 <_dtoa_r+0x7ba>
 800b386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b388:	9308      	str	r3, [sp, #32]
 800b38a:	2001      	movs	r0, #1
 800b38c:	e64d      	b.n	800b02a <_dtoa_r+0x802>
 800b38e:	f1bb 0f00 	cmp.w	fp, #0
 800b392:	f77f aed9 	ble.w	800b148 <_dtoa_r+0x920>
 800b396:	4656      	mov	r6, sl
 800b398:	9802      	ldr	r0, [sp, #8]
 800b39a:	4621      	mov	r1, r4
 800b39c:	f7ff f9b9 	bl	800a712 <quorem>
 800b3a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b3a4:	f806 3b01 	strb.w	r3, [r6], #1
 800b3a8:	eba6 020a 	sub.w	r2, r6, sl
 800b3ac:	4593      	cmp	fp, r2
 800b3ae:	ddb4      	ble.n	800b31a <_dtoa_r+0xaf2>
 800b3b0:	9902      	ldr	r1, [sp, #8]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	220a      	movs	r2, #10
 800b3b6:	4648      	mov	r0, r9
 800b3b8:	f000 f968 	bl	800b68c <__multadd>
 800b3bc:	9002      	str	r0, [sp, #8]
 800b3be:	e7eb      	b.n	800b398 <_dtoa_r+0xb70>
 800b3c0:	0800d050 	.word	0x0800d050
 800b3c4:	0800cfd4 	.word	0x0800cfd4

0800b3c8 <_free_r>:
 800b3c8:	b538      	push	{r3, r4, r5, lr}
 800b3ca:	4605      	mov	r5, r0
 800b3cc:	2900      	cmp	r1, #0
 800b3ce:	d041      	beq.n	800b454 <_free_r+0x8c>
 800b3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3d4:	1f0c      	subs	r4, r1, #4
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	bfb8      	it	lt
 800b3da:	18e4      	addlt	r4, r4, r3
 800b3dc:	f000 f8e8 	bl	800b5b0 <__malloc_lock>
 800b3e0:	4a1d      	ldr	r2, [pc, #116]	@ (800b458 <_free_r+0x90>)
 800b3e2:	6813      	ldr	r3, [r2, #0]
 800b3e4:	b933      	cbnz	r3, 800b3f4 <_free_r+0x2c>
 800b3e6:	6063      	str	r3, [r4, #4]
 800b3e8:	6014      	str	r4, [r2, #0]
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3f0:	f000 b8e4 	b.w	800b5bc <__malloc_unlock>
 800b3f4:	42a3      	cmp	r3, r4
 800b3f6:	d908      	bls.n	800b40a <_free_r+0x42>
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	1821      	adds	r1, r4, r0
 800b3fc:	428b      	cmp	r3, r1
 800b3fe:	bf01      	itttt	eq
 800b400:	6819      	ldreq	r1, [r3, #0]
 800b402:	685b      	ldreq	r3, [r3, #4]
 800b404:	1809      	addeq	r1, r1, r0
 800b406:	6021      	streq	r1, [r4, #0]
 800b408:	e7ed      	b.n	800b3e6 <_free_r+0x1e>
 800b40a:	461a      	mov	r2, r3
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	b10b      	cbz	r3, 800b414 <_free_r+0x4c>
 800b410:	42a3      	cmp	r3, r4
 800b412:	d9fa      	bls.n	800b40a <_free_r+0x42>
 800b414:	6811      	ldr	r1, [r2, #0]
 800b416:	1850      	adds	r0, r2, r1
 800b418:	42a0      	cmp	r0, r4
 800b41a:	d10b      	bne.n	800b434 <_free_r+0x6c>
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	4401      	add	r1, r0
 800b420:	1850      	adds	r0, r2, r1
 800b422:	4283      	cmp	r3, r0
 800b424:	6011      	str	r1, [r2, #0]
 800b426:	d1e0      	bne.n	800b3ea <_free_r+0x22>
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	685b      	ldr	r3, [r3, #4]
 800b42c:	6053      	str	r3, [r2, #4]
 800b42e:	4408      	add	r0, r1
 800b430:	6010      	str	r0, [r2, #0]
 800b432:	e7da      	b.n	800b3ea <_free_r+0x22>
 800b434:	d902      	bls.n	800b43c <_free_r+0x74>
 800b436:	230c      	movs	r3, #12
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	e7d6      	b.n	800b3ea <_free_r+0x22>
 800b43c:	6820      	ldr	r0, [r4, #0]
 800b43e:	1821      	adds	r1, r4, r0
 800b440:	428b      	cmp	r3, r1
 800b442:	bf04      	itt	eq
 800b444:	6819      	ldreq	r1, [r3, #0]
 800b446:	685b      	ldreq	r3, [r3, #4]
 800b448:	6063      	str	r3, [r4, #4]
 800b44a:	bf04      	itt	eq
 800b44c:	1809      	addeq	r1, r1, r0
 800b44e:	6021      	streq	r1, [r4, #0]
 800b450:	6054      	str	r4, [r2, #4]
 800b452:	e7ca      	b.n	800b3ea <_free_r+0x22>
 800b454:	bd38      	pop	{r3, r4, r5, pc}
 800b456:	bf00      	nop
 800b458:	20002514 	.word	0x20002514

0800b45c <malloc>:
 800b45c:	4b02      	ldr	r3, [pc, #8]	@ (800b468 <malloc+0xc>)
 800b45e:	4601      	mov	r1, r0
 800b460:	6818      	ldr	r0, [r3, #0]
 800b462:	f000 b825 	b.w	800b4b0 <_malloc_r>
 800b466:	bf00      	nop
 800b468:	20000108 	.word	0x20000108

0800b46c <sbrk_aligned>:
 800b46c:	b570      	push	{r4, r5, r6, lr}
 800b46e:	4e0f      	ldr	r6, [pc, #60]	@ (800b4ac <sbrk_aligned+0x40>)
 800b470:	460c      	mov	r4, r1
 800b472:	6831      	ldr	r1, [r6, #0]
 800b474:	4605      	mov	r5, r0
 800b476:	b911      	cbnz	r1, 800b47e <sbrk_aligned+0x12>
 800b478:	f000 fe24 	bl	800c0c4 <_sbrk_r>
 800b47c:	6030      	str	r0, [r6, #0]
 800b47e:	4621      	mov	r1, r4
 800b480:	4628      	mov	r0, r5
 800b482:	f000 fe1f 	bl	800c0c4 <_sbrk_r>
 800b486:	1c43      	adds	r3, r0, #1
 800b488:	d103      	bne.n	800b492 <sbrk_aligned+0x26>
 800b48a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b48e:	4620      	mov	r0, r4
 800b490:	bd70      	pop	{r4, r5, r6, pc}
 800b492:	1cc4      	adds	r4, r0, #3
 800b494:	f024 0403 	bic.w	r4, r4, #3
 800b498:	42a0      	cmp	r0, r4
 800b49a:	d0f8      	beq.n	800b48e <sbrk_aligned+0x22>
 800b49c:	1a21      	subs	r1, r4, r0
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f000 fe10 	bl	800c0c4 <_sbrk_r>
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d1f2      	bne.n	800b48e <sbrk_aligned+0x22>
 800b4a8:	e7ef      	b.n	800b48a <sbrk_aligned+0x1e>
 800b4aa:	bf00      	nop
 800b4ac:	20002510 	.word	0x20002510

0800b4b0 <_malloc_r>:
 800b4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b4:	1ccd      	adds	r5, r1, #3
 800b4b6:	f025 0503 	bic.w	r5, r5, #3
 800b4ba:	3508      	adds	r5, #8
 800b4bc:	2d0c      	cmp	r5, #12
 800b4be:	bf38      	it	cc
 800b4c0:	250c      	movcc	r5, #12
 800b4c2:	2d00      	cmp	r5, #0
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	db01      	blt.n	800b4cc <_malloc_r+0x1c>
 800b4c8:	42a9      	cmp	r1, r5
 800b4ca:	d904      	bls.n	800b4d6 <_malloc_r+0x26>
 800b4cc:	230c      	movs	r3, #12
 800b4ce:	6033      	str	r3, [r6, #0]
 800b4d0:	2000      	movs	r0, #0
 800b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5ac <_malloc_r+0xfc>
 800b4da:	f000 f869 	bl	800b5b0 <__malloc_lock>
 800b4de:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e2:	461c      	mov	r4, r3
 800b4e4:	bb44      	cbnz	r4, 800b538 <_malloc_r+0x88>
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	4630      	mov	r0, r6
 800b4ea:	f7ff ffbf 	bl	800b46c <sbrk_aligned>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	d158      	bne.n	800b5a6 <_malloc_r+0xf6>
 800b4f4:	f8d8 4000 	ldr.w	r4, [r8]
 800b4f8:	4627      	mov	r7, r4
 800b4fa:	2f00      	cmp	r7, #0
 800b4fc:	d143      	bne.n	800b586 <_malloc_r+0xd6>
 800b4fe:	2c00      	cmp	r4, #0
 800b500:	d04b      	beq.n	800b59a <_malloc_r+0xea>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	4639      	mov	r1, r7
 800b506:	4630      	mov	r0, r6
 800b508:	eb04 0903 	add.w	r9, r4, r3
 800b50c:	f000 fdda 	bl	800c0c4 <_sbrk_r>
 800b510:	4581      	cmp	r9, r0
 800b512:	d142      	bne.n	800b59a <_malloc_r+0xea>
 800b514:	6821      	ldr	r1, [r4, #0]
 800b516:	1a6d      	subs	r5, r5, r1
 800b518:	4629      	mov	r1, r5
 800b51a:	4630      	mov	r0, r6
 800b51c:	f7ff ffa6 	bl	800b46c <sbrk_aligned>
 800b520:	3001      	adds	r0, #1
 800b522:	d03a      	beq.n	800b59a <_malloc_r+0xea>
 800b524:	6823      	ldr	r3, [r4, #0]
 800b526:	442b      	add	r3, r5
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	f8d8 3000 	ldr.w	r3, [r8]
 800b52e:	685a      	ldr	r2, [r3, #4]
 800b530:	bb62      	cbnz	r2, 800b58c <_malloc_r+0xdc>
 800b532:	f8c8 7000 	str.w	r7, [r8]
 800b536:	e00f      	b.n	800b558 <_malloc_r+0xa8>
 800b538:	6822      	ldr	r2, [r4, #0]
 800b53a:	1b52      	subs	r2, r2, r5
 800b53c:	d420      	bmi.n	800b580 <_malloc_r+0xd0>
 800b53e:	2a0b      	cmp	r2, #11
 800b540:	d917      	bls.n	800b572 <_malloc_r+0xc2>
 800b542:	1961      	adds	r1, r4, r5
 800b544:	42a3      	cmp	r3, r4
 800b546:	6025      	str	r5, [r4, #0]
 800b548:	bf18      	it	ne
 800b54a:	6059      	strne	r1, [r3, #4]
 800b54c:	6863      	ldr	r3, [r4, #4]
 800b54e:	bf08      	it	eq
 800b550:	f8c8 1000 	streq.w	r1, [r8]
 800b554:	5162      	str	r2, [r4, r5]
 800b556:	604b      	str	r3, [r1, #4]
 800b558:	4630      	mov	r0, r6
 800b55a:	f000 f82f 	bl	800b5bc <__malloc_unlock>
 800b55e:	f104 000b 	add.w	r0, r4, #11
 800b562:	1d23      	adds	r3, r4, #4
 800b564:	f020 0007 	bic.w	r0, r0, #7
 800b568:	1ac2      	subs	r2, r0, r3
 800b56a:	bf1c      	itt	ne
 800b56c:	1a1b      	subne	r3, r3, r0
 800b56e:	50a3      	strne	r3, [r4, r2]
 800b570:	e7af      	b.n	800b4d2 <_malloc_r+0x22>
 800b572:	6862      	ldr	r2, [r4, #4]
 800b574:	42a3      	cmp	r3, r4
 800b576:	bf0c      	ite	eq
 800b578:	f8c8 2000 	streq.w	r2, [r8]
 800b57c:	605a      	strne	r2, [r3, #4]
 800b57e:	e7eb      	b.n	800b558 <_malloc_r+0xa8>
 800b580:	4623      	mov	r3, r4
 800b582:	6864      	ldr	r4, [r4, #4]
 800b584:	e7ae      	b.n	800b4e4 <_malloc_r+0x34>
 800b586:	463c      	mov	r4, r7
 800b588:	687f      	ldr	r7, [r7, #4]
 800b58a:	e7b6      	b.n	800b4fa <_malloc_r+0x4a>
 800b58c:	461a      	mov	r2, r3
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	42a3      	cmp	r3, r4
 800b592:	d1fb      	bne.n	800b58c <_malloc_r+0xdc>
 800b594:	2300      	movs	r3, #0
 800b596:	6053      	str	r3, [r2, #4]
 800b598:	e7de      	b.n	800b558 <_malloc_r+0xa8>
 800b59a:	230c      	movs	r3, #12
 800b59c:	6033      	str	r3, [r6, #0]
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f000 f80c 	bl	800b5bc <__malloc_unlock>
 800b5a4:	e794      	b.n	800b4d0 <_malloc_r+0x20>
 800b5a6:	6005      	str	r5, [r0, #0]
 800b5a8:	e7d6      	b.n	800b558 <_malloc_r+0xa8>
 800b5aa:	bf00      	nop
 800b5ac:	20002514 	.word	0x20002514

0800b5b0 <__malloc_lock>:
 800b5b0:	4801      	ldr	r0, [pc, #4]	@ (800b5b8 <__malloc_lock+0x8>)
 800b5b2:	f7ff b89e 	b.w	800a6f2 <__retarget_lock_acquire_recursive>
 800b5b6:	bf00      	nop
 800b5b8:	2000250c 	.word	0x2000250c

0800b5bc <__malloc_unlock>:
 800b5bc:	4801      	ldr	r0, [pc, #4]	@ (800b5c4 <__malloc_unlock+0x8>)
 800b5be:	f7ff b899 	b.w	800a6f4 <__retarget_lock_release_recursive>
 800b5c2:	bf00      	nop
 800b5c4:	2000250c 	.word	0x2000250c

0800b5c8 <_Balloc>:
 800b5c8:	b570      	push	{r4, r5, r6, lr}
 800b5ca:	69c6      	ldr	r6, [r0, #28]
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	460d      	mov	r5, r1
 800b5d0:	b976      	cbnz	r6, 800b5f0 <_Balloc+0x28>
 800b5d2:	2010      	movs	r0, #16
 800b5d4:	f7ff ff42 	bl	800b45c <malloc>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	61e0      	str	r0, [r4, #28]
 800b5dc:	b920      	cbnz	r0, 800b5e8 <_Balloc+0x20>
 800b5de:	4b18      	ldr	r3, [pc, #96]	@ (800b640 <_Balloc+0x78>)
 800b5e0:	4818      	ldr	r0, [pc, #96]	@ (800b644 <_Balloc+0x7c>)
 800b5e2:	216b      	movs	r1, #107	@ 0x6b
 800b5e4:	f000 fd7e 	bl	800c0e4 <__assert_func>
 800b5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5ec:	6006      	str	r6, [r0, #0]
 800b5ee:	60c6      	str	r6, [r0, #12]
 800b5f0:	69e6      	ldr	r6, [r4, #28]
 800b5f2:	68f3      	ldr	r3, [r6, #12]
 800b5f4:	b183      	cbz	r3, 800b618 <_Balloc+0x50>
 800b5f6:	69e3      	ldr	r3, [r4, #28]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b5fe:	b9b8      	cbnz	r0, 800b630 <_Balloc+0x68>
 800b600:	2101      	movs	r1, #1
 800b602:	fa01 f605 	lsl.w	r6, r1, r5
 800b606:	1d72      	adds	r2, r6, #5
 800b608:	0092      	lsls	r2, r2, #2
 800b60a:	4620      	mov	r0, r4
 800b60c:	f000 fd88 	bl	800c120 <_calloc_r>
 800b610:	b160      	cbz	r0, 800b62c <_Balloc+0x64>
 800b612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b616:	e00e      	b.n	800b636 <_Balloc+0x6e>
 800b618:	2221      	movs	r2, #33	@ 0x21
 800b61a:	2104      	movs	r1, #4
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fd7f 	bl	800c120 <_calloc_r>
 800b622:	69e3      	ldr	r3, [r4, #28]
 800b624:	60f0      	str	r0, [r6, #12]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d1e4      	bne.n	800b5f6 <_Balloc+0x2e>
 800b62c:	2000      	movs	r0, #0
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
 800b630:	6802      	ldr	r2, [r0, #0]
 800b632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b636:	2300      	movs	r3, #0
 800b638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b63c:	e7f7      	b.n	800b62e <_Balloc+0x66>
 800b63e:	bf00      	nop
 800b640:	0800cfe1 	.word	0x0800cfe1
 800b644:	0800d061 	.word	0x0800d061

0800b648 <_Bfree>:
 800b648:	b570      	push	{r4, r5, r6, lr}
 800b64a:	69c6      	ldr	r6, [r0, #28]
 800b64c:	4605      	mov	r5, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	b976      	cbnz	r6, 800b670 <_Bfree+0x28>
 800b652:	2010      	movs	r0, #16
 800b654:	f7ff ff02 	bl	800b45c <malloc>
 800b658:	4602      	mov	r2, r0
 800b65a:	61e8      	str	r0, [r5, #28]
 800b65c:	b920      	cbnz	r0, 800b668 <_Bfree+0x20>
 800b65e:	4b09      	ldr	r3, [pc, #36]	@ (800b684 <_Bfree+0x3c>)
 800b660:	4809      	ldr	r0, [pc, #36]	@ (800b688 <_Bfree+0x40>)
 800b662:	218f      	movs	r1, #143	@ 0x8f
 800b664:	f000 fd3e 	bl	800c0e4 <__assert_func>
 800b668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b66c:	6006      	str	r6, [r0, #0]
 800b66e:	60c6      	str	r6, [r0, #12]
 800b670:	b13c      	cbz	r4, 800b682 <_Bfree+0x3a>
 800b672:	69eb      	ldr	r3, [r5, #28]
 800b674:	6862      	ldr	r2, [r4, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b67c:	6021      	str	r1, [r4, #0]
 800b67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	0800cfe1 	.word	0x0800cfe1
 800b688:	0800d061 	.word	0x0800d061

0800b68c <__multadd>:
 800b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	690d      	ldr	r5, [r1, #16]
 800b692:	4607      	mov	r7, r0
 800b694:	460c      	mov	r4, r1
 800b696:	461e      	mov	r6, r3
 800b698:	f101 0c14 	add.w	ip, r1, #20
 800b69c:	2000      	movs	r0, #0
 800b69e:	f8dc 3000 	ldr.w	r3, [ip]
 800b6a2:	b299      	uxth	r1, r3
 800b6a4:	fb02 6101 	mla	r1, r2, r1, r6
 800b6a8:	0c1e      	lsrs	r6, r3, #16
 800b6aa:	0c0b      	lsrs	r3, r1, #16
 800b6ac:	fb02 3306 	mla	r3, r2, r6, r3
 800b6b0:	b289      	uxth	r1, r1
 800b6b2:	3001      	adds	r0, #1
 800b6b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6b8:	4285      	cmp	r5, r0
 800b6ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b6be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6c2:	dcec      	bgt.n	800b69e <__multadd+0x12>
 800b6c4:	b30e      	cbz	r6, 800b70a <__multadd+0x7e>
 800b6c6:	68a3      	ldr	r3, [r4, #8]
 800b6c8:	42ab      	cmp	r3, r5
 800b6ca:	dc19      	bgt.n	800b700 <__multadd+0x74>
 800b6cc:	6861      	ldr	r1, [r4, #4]
 800b6ce:	4638      	mov	r0, r7
 800b6d0:	3101      	adds	r1, #1
 800b6d2:	f7ff ff79 	bl	800b5c8 <_Balloc>
 800b6d6:	4680      	mov	r8, r0
 800b6d8:	b928      	cbnz	r0, 800b6e6 <__multadd+0x5a>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b710 <__multadd+0x84>)
 800b6de:	480d      	ldr	r0, [pc, #52]	@ (800b714 <__multadd+0x88>)
 800b6e0:	21ba      	movs	r1, #186	@ 0xba
 800b6e2:	f000 fcff 	bl	800c0e4 <__assert_func>
 800b6e6:	6922      	ldr	r2, [r4, #16]
 800b6e8:	3202      	adds	r2, #2
 800b6ea:	f104 010c 	add.w	r1, r4, #12
 800b6ee:	0092      	lsls	r2, r2, #2
 800b6f0:	300c      	adds	r0, #12
 800b6f2:	f7ff f800 	bl	800a6f6 <memcpy>
 800b6f6:	4621      	mov	r1, r4
 800b6f8:	4638      	mov	r0, r7
 800b6fa:	f7ff ffa5 	bl	800b648 <_Bfree>
 800b6fe:	4644      	mov	r4, r8
 800b700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b704:	3501      	adds	r5, #1
 800b706:	615e      	str	r6, [r3, #20]
 800b708:	6125      	str	r5, [r4, #16]
 800b70a:	4620      	mov	r0, r4
 800b70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b710:	0800d050 	.word	0x0800d050
 800b714:	0800d061 	.word	0x0800d061

0800b718 <__hi0bits>:
 800b718:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b71c:	4603      	mov	r3, r0
 800b71e:	bf36      	itet	cc
 800b720:	0403      	lslcc	r3, r0, #16
 800b722:	2000      	movcs	r0, #0
 800b724:	2010      	movcc	r0, #16
 800b726:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b72a:	bf3c      	itt	cc
 800b72c:	021b      	lslcc	r3, r3, #8
 800b72e:	3008      	addcc	r0, #8
 800b730:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b734:	bf3c      	itt	cc
 800b736:	011b      	lslcc	r3, r3, #4
 800b738:	3004      	addcc	r0, #4
 800b73a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b73e:	bf3c      	itt	cc
 800b740:	009b      	lslcc	r3, r3, #2
 800b742:	3002      	addcc	r0, #2
 800b744:	2b00      	cmp	r3, #0
 800b746:	db05      	blt.n	800b754 <__hi0bits+0x3c>
 800b748:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b74c:	f100 0001 	add.w	r0, r0, #1
 800b750:	bf08      	it	eq
 800b752:	2020      	moveq	r0, #32
 800b754:	4770      	bx	lr

0800b756 <__lo0bits>:
 800b756:	6803      	ldr	r3, [r0, #0]
 800b758:	4602      	mov	r2, r0
 800b75a:	f013 0007 	ands.w	r0, r3, #7
 800b75e:	d00b      	beq.n	800b778 <__lo0bits+0x22>
 800b760:	07d9      	lsls	r1, r3, #31
 800b762:	d421      	bmi.n	800b7a8 <__lo0bits+0x52>
 800b764:	0798      	lsls	r0, r3, #30
 800b766:	bf49      	itett	mi
 800b768:	085b      	lsrmi	r3, r3, #1
 800b76a:	089b      	lsrpl	r3, r3, #2
 800b76c:	2001      	movmi	r0, #1
 800b76e:	6013      	strmi	r3, [r2, #0]
 800b770:	bf5c      	itt	pl
 800b772:	6013      	strpl	r3, [r2, #0]
 800b774:	2002      	movpl	r0, #2
 800b776:	4770      	bx	lr
 800b778:	b299      	uxth	r1, r3
 800b77a:	b909      	cbnz	r1, 800b780 <__lo0bits+0x2a>
 800b77c:	0c1b      	lsrs	r3, r3, #16
 800b77e:	2010      	movs	r0, #16
 800b780:	b2d9      	uxtb	r1, r3
 800b782:	b909      	cbnz	r1, 800b788 <__lo0bits+0x32>
 800b784:	3008      	adds	r0, #8
 800b786:	0a1b      	lsrs	r3, r3, #8
 800b788:	0719      	lsls	r1, r3, #28
 800b78a:	bf04      	itt	eq
 800b78c:	091b      	lsreq	r3, r3, #4
 800b78e:	3004      	addeq	r0, #4
 800b790:	0799      	lsls	r1, r3, #30
 800b792:	bf04      	itt	eq
 800b794:	089b      	lsreq	r3, r3, #2
 800b796:	3002      	addeq	r0, #2
 800b798:	07d9      	lsls	r1, r3, #31
 800b79a:	d403      	bmi.n	800b7a4 <__lo0bits+0x4e>
 800b79c:	085b      	lsrs	r3, r3, #1
 800b79e:	f100 0001 	add.w	r0, r0, #1
 800b7a2:	d003      	beq.n	800b7ac <__lo0bits+0x56>
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	4770      	bx	lr
 800b7a8:	2000      	movs	r0, #0
 800b7aa:	4770      	bx	lr
 800b7ac:	2020      	movs	r0, #32
 800b7ae:	4770      	bx	lr

0800b7b0 <__i2b>:
 800b7b0:	b510      	push	{r4, lr}
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	f7ff ff07 	bl	800b5c8 <_Balloc>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	b928      	cbnz	r0, 800b7ca <__i2b+0x1a>
 800b7be:	4b05      	ldr	r3, [pc, #20]	@ (800b7d4 <__i2b+0x24>)
 800b7c0:	4805      	ldr	r0, [pc, #20]	@ (800b7d8 <__i2b+0x28>)
 800b7c2:	f240 1145 	movw	r1, #325	@ 0x145
 800b7c6:	f000 fc8d 	bl	800c0e4 <__assert_func>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	6144      	str	r4, [r0, #20]
 800b7ce:	6103      	str	r3, [r0, #16]
 800b7d0:	bd10      	pop	{r4, pc}
 800b7d2:	bf00      	nop
 800b7d4:	0800d050 	.word	0x0800d050
 800b7d8:	0800d061 	.word	0x0800d061

0800b7dc <__multiply>:
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	4617      	mov	r7, r2
 800b7e2:	690a      	ldr	r2, [r1, #16]
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	bfa8      	it	ge
 800b7ea:	463b      	movge	r3, r7
 800b7ec:	4689      	mov	r9, r1
 800b7ee:	bfa4      	itt	ge
 800b7f0:	460f      	movge	r7, r1
 800b7f2:	4699      	movge	r9, r3
 800b7f4:	693d      	ldr	r5, [r7, #16]
 800b7f6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	eb05 060a 	add.w	r6, r5, sl
 800b802:	42b3      	cmp	r3, r6
 800b804:	b085      	sub	sp, #20
 800b806:	bfb8      	it	lt
 800b808:	3101      	addlt	r1, #1
 800b80a:	f7ff fedd 	bl	800b5c8 <_Balloc>
 800b80e:	b930      	cbnz	r0, 800b81e <__multiply+0x42>
 800b810:	4602      	mov	r2, r0
 800b812:	4b41      	ldr	r3, [pc, #260]	@ (800b918 <__multiply+0x13c>)
 800b814:	4841      	ldr	r0, [pc, #260]	@ (800b91c <__multiply+0x140>)
 800b816:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b81a:	f000 fc63 	bl	800c0e4 <__assert_func>
 800b81e:	f100 0414 	add.w	r4, r0, #20
 800b822:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b826:	4623      	mov	r3, r4
 800b828:	2200      	movs	r2, #0
 800b82a:	4573      	cmp	r3, lr
 800b82c:	d320      	bcc.n	800b870 <__multiply+0x94>
 800b82e:	f107 0814 	add.w	r8, r7, #20
 800b832:	f109 0114 	add.w	r1, r9, #20
 800b836:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b83a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b83e:	9302      	str	r3, [sp, #8]
 800b840:	1beb      	subs	r3, r5, r7
 800b842:	3b15      	subs	r3, #21
 800b844:	f023 0303 	bic.w	r3, r3, #3
 800b848:	3304      	adds	r3, #4
 800b84a:	3715      	adds	r7, #21
 800b84c:	42bd      	cmp	r5, r7
 800b84e:	bf38      	it	cc
 800b850:	2304      	movcc	r3, #4
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	9b02      	ldr	r3, [sp, #8]
 800b856:	9103      	str	r1, [sp, #12]
 800b858:	428b      	cmp	r3, r1
 800b85a:	d80c      	bhi.n	800b876 <__multiply+0x9a>
 800b85c:	2e00      	cmp	r6, #0
 800b85e:	dd03      	ble.n	800b868 <__multiply+0x8c>
 800b860:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b864:	2b00      	cmp	r3, #0
 800b866:	d055      	beq.n	800b914 <__multiply+0x138>
 800b868:	6106      	str	r6, [r0, #16]
 800b86a:	b005      	add	sp, #20
 800b86c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b870:	f843 2b04 	str.w	r2, [r3], #4
 800b874:	e7d9      	b.n	800b82a <__multiply+0x4e>
 800b876:	f8b1 a000 	ldrh.w	sl, [r1]
 800b87a:	f1ba 0f00 	cmp.w	sl, #0
 800b87e:	d01f      	beq.n	800b8c0 <__multiply+0xe4>
 800b880:	46c4      	mov	ip, r8
 800b882:	46a1      	mov	r9, r4
 800b884:	2700      	movs	r7, #0
 800b886:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b88a:	f8d9 3000 	ldr.w	r3, [r9]
 800b88e:	fa1f fb82 	uxth.w	fp, r2
 800b892:	b29b      	uxth	r3, r3
 800b894:	fb0a 330b 	mla	r3, sl, fp, r3
 800b898:	443b      	add	r3, r7
 800b89a:	f8d9 7000 	ldr.w	r7, [r9]
 800b89e:	0c12      	lsrs	r2, r2, #16
 800b8a0:	0c3f      	lsrs	r7, r7, #16
 800b8a2:	fb0a 7202 	mla	r2, sl, r2, r7
 800b8a6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8b0:	4565      	cmp	r5, ip
 800b8b2:	f849 3b04 	str.w	r3, [r9], #4
 800b8b6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b8ba:	d8e4      	bhi.n	800b886 <__multiply+0xaa>
 800b8bc:	9b01      	ldr	r3, [sp, #4]
 800b8be:	50e7      	str	r7, [r4, r3]
 800b8c0:	9b03      	ldr	r3, [sp, #12]
 800b8c2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b8c6:	3104      	adds	r1, #4
 800b8c8:	f1b9 0f00 	cmp.w	r9, #0
 800b8cc:	d020      	beq.n	800b910 <__multiply+0x134>
 800b8ce:	6823      	ldr	r3, [r4, #0]
 800b8d0:	4647      	mov	r7, r8
 800b8d2:	46a4      	mov	ip, r4
 800b8d4:	f04f 0a00 	mov.w	sl, #0
 800b8d8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b8dc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b8e0:	fb09 220b 	mla	r2, r9, fp, r2
 800b8e4:	4452      	add	r2, sl
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8ec:	f84c 3b04 	str.w	r3, [ip], #4
 800b8f0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b8f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b8f8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b8fc:	fb09 330a 	mla	r3, r9, sl, r3
 800b900:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b904:	42bd      	cmp	r5, r7
 800b906:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b90a:	d8e5      	bhi.n	800b8d8 <__multiply+0xfc>
 800b90c:	9a01      	ldr	r2, [sp, #4]
 800b90e:	50a3      	str	r3, [r4, r2]
 800b910:	3404      	adds	r4, #4
 800b912:	e79f      	b.n	800b854 <__multiply+0x78>
 800b914:	3e01      	subs	r6, #1
 800b916:	e7a1      	b.n	800b85c <__multiply+0x80>
 800b918:	0800d050 	.word	0x0800d050
 800b91c:	0800d061 	.word	0x0800d061

0800b920 <__pow5mult>:
 800b920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b924:	4615      	mov	r5, r2
 800b926:	f012 0203 	ands.w	r2, r2, #3
 800b92a:	4607      	mov	r7, r0
 800b92c:	460e      	mov	r6, r1
 800b92e:	d007      	beq.n	800b940 <__pow5mult+0x20>
 800b930:	4c25      	ldr	r4, [pc, #148]	@ (800b9c8 <__pow5mult+0xa8>)
 800b932:	3a01      	subs	r2, #1
 800b934:	2300      	movs	r3, #0
 800b936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b93a:	f7ff fea7 	bl	800b68c <__multadd>
 800b93e:	4606      	mov	r6, r0
 800b940:	10ad      	asrs	r5, r5, #2
 800b942:	d03d      	beq.n	800b9c0 <__pow5mult+0xa0>
 800b944:	69fc      	ldr	r4, [r7, #28]
 800b946:	b97c      	cbnz	r4, 800b968 <__pow5mult+0x48>
 800b948:	2010      	movs	r0, #16
 800b94a:	f7ff fd87 	bl	800b45c <malloc>
 800b94e:	4602      	mov	r2, r0
 800b950:	61f8      	str	r0, [r7, #28]
 800b952:	b928      	cbnz	r0, 800b960 <__pow5mult+0x40>
 800b954:	4b1d      	ldr	r3, [pc, #116]	@ (800b9cc <__pow5mult+0xac>)
 800b956:	481e      	ldr	r0, [pc, #120]	@ (800b9d0 <__pow5mult+0xb0>)
 800b958:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b95c:	f000 fbc2 	bl	800c0e4 <__assert_func>
 800b960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b964:	6004      	str	r4, [r0, #0]
 800b966:	60c4      	str	r4, [r0, #12]
 800b968:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b96c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b970:	b94c      	cbnz	r4, 800b986 <__pow5mult+0x66>
 800b972:	f240 2171 	movw	r1, #625	@ 0x271
 800b976:	4638      	mov	r0, r7
 800b978:	f7ff ff1a 	bl	800b7b0 <__i2b>
 800b97c:	2300      	movs	r3, #0
 800b97e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b982:	4604      	mov	r4, r0
 800b984:	6003      	str	r3, [r0, #0]
 800b986:	f04f 0900 	mov.w	r9, #0
 800b98a:	07eb      	lsls	r3, r5, #31
 800b98c:	d50a      	bpl.n	800b9a4 <__pow5mult+0x84>
 800b98e:	4631      	mov	r1, r6
 800b990:	4622      	mov	r2, r4
 800b992:	4638      	mov	r0, r7
 800b994:	f7ff ff22 	bl	800b7dc <__multiply>
 800b998:	4631      	mov	r1, r6
 800b99a:	4680      	mov	r8, r0
 800b99c:	4638      	mov	r0, r7
 800b99e:	f7ff fe53 	bl	800b648 <_Bfree>
 800b9a2:	4646      	mov	r6, r8
 800b9a4:	106d      	asrs	r5, r5, #1
 800b9a6:	d00b      	beq.n	800b9c0 <__pow5mult+0xa0>
 800b9a8:	6820      	ldr	r0, [r4, #0]
 800b9aa:	b938      	cbnz	r0, 800b9bc <__pow5mult+0x9c>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4621      	mov	r1, r4
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	f7ff ff13 	bl	800b7dc <__multiply>
 800b9b6:	6020      	str	r0, [r4, #0]
 800b9b8:	f8c0 9000 	str.w	r9, [r0]
 800b9bc:	4604      	mov	r4, r0
 800b9be:	e7e4      	b.n	800b98a <__pow5mult+0x6a>
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9c6:	bf00      	nop
 800b9c8:	0800d114 	.word	0x0800d114
 800b9cc:	0800cfe1 	.word	0x0800cfe1
 800b9d0:	0800d061 	.word	0x0800d061

0800b9d4 <__lshift>:
 800b9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d8:	460c      	mov	r4, r1
 800b9da:	6849      	ldr	r1, [r1, #4]
 800b9dc:	6923      	ldr	r3, [r4, #16]
 800b9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b9e2:	68a3      	ldr	r3, [r4, #8]
 800b9e4:	4607      	mov	r7, r0
 800b9e6:	4691      	mov	r9, r2
 800b9e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b9ec:	f108 0601 	add.w	r6, r8, #1
 800b9f0:	42b3      	cmp	r3, r6
 800b9f2:	db0b      	blt.n	800ba0c <__lshift+0x38>
 800b9f4:	4638      	mov	r0, r7
 800b9f6:	f7ff fde7 	bl	800b5c8 <_Balloc>
 800b9fa:	4605      	mov	r5, r0
 800b9fc:	b948      	cbnz	r0, 800ba12 <__lshift+0x3e>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	4b28      	ldr	r3, [pc, #160]	@ (800baa4 <__lshift+0xd0>)
 800ba02:	4829      	ldr	r0, [pc, #164]	@ (800baa8 <__lshift+0xd4>)
 800ba04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ba08:	f000 fb6c 	bl	800c0e4 <__assert_func>
 800ba0c:	3101      	adds	r1, #1
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	e7ee      	b.n	800b9f0 <__lshift+0x1c>
 800ba12:	2300      	movs	r3, #0
 800ba14:	f100 0114 	add.w	r1, r0, #20
 800ba18:	f100 0210 	add.w	r2, r0, #16
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	4553      	cmp	r3, sl
 800ba20:	db33      	blt.n	800ba8a <__lshift+0xb6>
 800ba22:	6920      	ldr	r0, [r4, #16]
 800ba24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ba28:	f104 0314 	add.w	r3, r4, #20
 800ba2c:	f019 091f 	ands.w	r9, r9, #31
 800ba30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ba34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ba38:	d02b      	beq.n	800ba92 <__lshift+0xbe>
 800ba3a:	f1c9 0e20 	rsb	lr, r9, #32
 800ba3e:	468a      	mov	sl, r1
 800ba40:	2200      	movs	r2, #0
 800ba42:	6818      	ldr	r0, [r3, #0]
 800ba44:	fa00 f009 	lsl.w	r0, r0, r9
 800ba48:	4310      	orrs	r0, r2
 800ba4a:	f84a 0b04 	str.w	r0, [sl], #4
 800ba4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba52:	459c      	cmp	ip, r3
 800ba54:	fa22 f20e 	lsr.w	r2, r2, lr
 800ba58:	d8f3      	bhi.n	800ba42 <__lshift+0x6e>
 800ba5a:	ebac 0304 	sub.w	r3, ip, r4
 800ba5e:	3b15      	subs	r3, #21
 800ba60:	f023 0303 	bic.w	r3, r3, #3
 800ba64:	3304      	adds	r3, #4
 800ba66:	f104 0015 	add.w	r0, r4, #21
 800ba6a:	4560      	cmp	r0, ip
 800ba6c:	bf88      	it	hi
 800ba6e:	2304      	movhi	r3, #4
 800ba70:	50ca      	str	r2, [r1, r3]
 800ba72:	b10a      	cbz	r2, 800ba78 <__lshift+0xa4>
 800ba74:	f108 0602 	add.w	r6, r8, #2
 800ba78:	3e01      	subs	r6, #1
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	612e      	str	r6, [r5, #16]
 800ba7e:	4621      	mov	r1, r4
 800ba80:	f7ff fde2 	bl	800b648 <_Bfree>
 800ba84:	4628      	mov	r0, r5
 800ba86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba8e:	3301      	adds	r3, #1
 800ba90:	e7c5      	b.n	800ba1e <__lshift+0x4a>
 800ba92:	3904      	subs	r1, #4
 800ba94:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba98:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba9c:	459c      	cmp	ip, r3
 800ba9e:	d8f9      	bhi.n	800ba94 <__lshift+0xc0>
 800baa0:	e7ea      	b.n	800ba78 <__lshift+0xa4>
 800baa2:	bf00      	nop
 800baa4:	0800d050 	.word	0x0800d050
 800baa8:	0800d061 	.word	0x0800d061

0800baac <__mcmp>:
 800baac:	690a      	ldr	r2, [r1, #16]
 800baae:	4603      	mov	r3, r0
 800bab0:	6900      	ldr	r0, [r0, #16]
 800bab2:	1a80      	subs	r0, r0, r2
 800bab4:	b530      	push	{r4, r5, lr}
 800bab6:	d10e      	bne.n	800bad6 <__mcmp+0x2a>
 800bab8:	3314      	adds	r3, #20
 800baba:	3114      	adds	r1, #20
 800babc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bac0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bac4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bac8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bacc:	4295      	cmp	r5, r2
 800bace:	d003      	beq.n	800bad8 <__mcmp+0x2c>
 800bad0:	d205      	bcs.n	800bade <__mcmp+0x32>
 800bad2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bad6:	bd30      	pop	{r4, r5, pc}
 800bad8:	42a3      	cmp	r3, r4
 800bada:	d3f3      	bcc.n	800bac4 <__mcmp+0x18>
 800badc:	e7fb      	b.n	800bad6 <__mcmp+0x2a>
 800bade:	2001      	movs	r0, #1
 800bae0:	e7f9      	b.n	800bad6 <__mcmp+0x2a>
	...

0800bae4 <__mdiff>:
 800bae4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae8:	4689      	mov	r9, r1
 800baea:	4606      	mov	r6, r0
 800baec:	4611      	mov	r1, r2
 800baee:	4648      	mov	r0, r9
 800baf0:	4614      	mov	r4, r2
 800baf2:	f7ff ffdb 	bl	800baac <__mcmp>
 800baf6:	1e05      	subs	r5, r0, #0
 800baf8:	d112      	bne.n	800bb20 <__mdiff+0x3c>
 800bafa:	4629      	mov	r1, r5
 800bafc:	4630      	mov	r0, r6
 800bafe:	f7ff fd63 	bl	800b5c8 <_Balloc>
 800bb02:	4602      	mov	r2, r0
 800bb04:	b928      	cbnz	r0, 800bb12 <__mdiff+0x2e>
 800bb06:	4b3f      	ldr	r3, [pc, #252]	@ (800bc04 <__mdiff+0x120>)
 800bb08:	f240 2137 	movw	r1, #567	@ 0x237
 800bb0c:	483e      	ldr	r0, [pc, #248]	@ (800bc08 <__mdiff+0x124>)
 800bb0e:	f000 fae9 	bl	800c0e4 <__assert_func>
 800bb12:	2301      	movs	r3, #1
 800bb14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bb18:	4610      	mov	r0, r2
 800bb1a:	b003      	add	sp, #12
 800bb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb20:	bfbc      	itt	lt
 800bb22:	464b      	movlt	r3, r9
 800bb24:	46a1      	movlt	r9, r4
 800bb26:	4630      	mov	r0, r6
 800bb28:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bb2c:	bfba      	itte	lt
 800bb2e:	461c      	movlt	r4, r3
 800bb30:	2501      	movlt	r5, #1
 800bb32:	2500      	movge	r5, #0
 800bb34:	f7ff fd48 	bl	800b5c8 <_Balloc>
 800bb38:	4602      	mov	r2, r0
 800bb3a:	b918      	cbnz	r0, 800bb44 <__mdiff+0x60>
 800bb3c:	4b31      	ldr	r3, [pc, #196]	@ (800bc04 <__mdiff+0x120>)
 800bb3e:	f240 2145 	movw	r1, #581	@ 0x245
 800bb42:	e7e3      	b.n	800bb0c <__mdiff+0x28>
 800bb44:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bb48:	6926      	ldr	r6, [r4, #16]
 800bb4a:	60c5      	str	r5, [r0, #12]
 800bb4c:	f109 0310 	add.w	r3, r9, #16
 800bb50:	f109 0514 	add.w	r5, r9, #20
 800bb54:	f104 0e14 	add.w	lr, r4, #20
 800bb58:	f100 0b14 	add.w	fp, r0, #20
 800bb5c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bb60:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bb64:	9301      	str	r3, [sp, #4]
 800bb66:	46d9      	mov	r9, fp
 800bb68:	f04f 0c00 	mov.w	ip, #0
 800bb6c:	9b01      	ldr	r3, [sp, #4]
 800bb6e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bb72:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bb76:	9301      	str	r3, [sp, #4]
 800bb78:	fa1f f38a 	uxth.w	r3, sl
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	b283      	uxth	r3, r0
 800bb80:	1acb      	subs	r3, r1, r3
 800bb82:	0c00      	lsrs	r0, r0, #16
 800bb84:	4463      	add	r3, ip
 800bb86:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb8a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb94:	4576      	cmp	r6, lr
 800bb96:	f849 3b04 	str.w	r3, [r9], #4
 800bb9a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb9e:	d8e5      	bhi.n	800bb6c <__mdiff+0x88>
 800bba0:	1b33      	subs	r3, r6, r4
 800bba2:	3b15      	subs	r3, #21
 800bba4:	f023 0303 	bic.w	r3, r3, #3
 800bba8:	3415      	adds	r4, #21
 800bbaa:	3304      	adds	r3, #4
 800bbac:	42a6      	cmp	r6, r4
 800bbae:	bf38      	it	cc
 800bbb0:	2304      	movcc	r3, #4
 800bbb2:	441d      	add	r5, r3
 800bbb4:	445b      	add	r3, fp
 800bbb6:	461e      	mov	r6, r3
 800bbb8:	462c      	mov	r4, r5
 800bbba:	4544      	cmp	r4, r8
 800bbbc:	d30e      	bcc.n	800bbdc <__mdiff+0xf8>
 800bbbe:	f108 0103 	add.w	r1, r8, #3
 800bbc2:	1b49      	subs	r1, r1, r5
 800bbc4:	f021 0103 	bic.w	r1, r1, #3
 800bbc8:	3d03      	subs	r5, #3
 800bbca:	45a8      	cmp	r8, r5
 800bbcc:	bf38      	it	cc
 800bbce:	2100      	movcc	r1, #0
 800bbd0:	440b      	add	r3, r1
 800bbd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bbd6:	b191      	cbz	r1, 800bbfe <__mdiff+0x11a>
 800bbd8:	6117      	str	r7, [r2, #16]
 800bbda:	e79d      	b.n	800bb18 <__mdiff+0x34>
 800bbdc:	f854 1b04 	ldr.w	r1, [r4], #4
 800bbe0:	46e6      	mov	lr, ip
 800bbe2:	0c08      	lsrs	r0, r1, #16
 800bbe4:	fa1c fc81 	uxtah	ip, ip, r1
 800bbe8:	4471      	add	r1, lr
 800bbea:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bbee:	b289      	uxth	r1, r1
 800bbf0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bbf4:	f846 1b04 	str.w	r1, [r6], #4
 800bbf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bbfc:	e7dd      	b.n	800bbba <__mdiff+0xd6>
 800bbfe:	3f01      	subs	r7, #1
 800bc00:	e7e7      	b.n	800bbd2 <__mdiff+0xee>
 800bc02:	bf00      	nop
 800bc04:	0800d050 	.word	0x0800d050
 800bc08:	0800d061 	.word	0x0800d061

0800bc0c <__d2b>:
 800bc0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bc10:	460f      	mov	r7, r1
 800bc12:	2101      	movs	r1, #1
 800bc14:	ec59 8b10 	vmov	r8, r9, d0
 800bc18:	4616      	mov	r6, r2
 800bc1a:	f7ff fcd5 	bl	800b5c8 <_Balloc>
 800bc1e:	4604      	mov	r4, r0
 800bc20:	b930      	cbnz	r0, 800bc30 <__d2b+0x24>
 800bc22:	4602      	mov	r2, r0
 800bc24:	4b23      	ldr	r3, [pc, #140]	@ (800bcb4 <__d2b+0xa8>)
 800bc26:	4824      	ldr	r0, [pc, #144]	@ (800bcb8 <__d2b+0xac>)
 800bc28:	f240 310f 	movw	r1, #783	@ 0x30f
 800bc2c:	f000 fa5a 	bl	800c0e4 <__assert_func>
 800bc30:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bc34:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc38:	b10d      	cbz	r5, 800bc3e <__d2b+0x32>
 800bc3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc3e:	9301      	str	r3, [sp, #4]
 800bc40:	f1b8 0300 	subs.w	r3, r8, #0
 800bc44:	d023      	beq.n	800bc8e <__d2b+0x82>
 800bc46:	4668      	mov	r0, sp
 800bc48:	9300      	str	r3, [sp, #0]
 800bc4a:	f7ff fd84 	bl	800b756 <__lo0bits>
 800bc4e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bc52:	b1d0      	cbz	r0, 800bc8a <__d2b+0x7e>
 800bc54:	f1c0 0320 	rsb	r3, r0, #32
 800bc58:	fa02 f303 	lsl.w	r3, r2, r3
 800bc5c:	430b      	orrs	r3, r1
 800bc5e:	40c2      	lsrs	r2, r0
 800bc60:	6163      	str	r3, [r4, #20]
 800bc62:	9201      	str	r2, [sp, #4]
 800bc64:	9b01      	ldr	r3, [sp, #4]
 800bc66:	61a3      	str	r3, [r4, #24]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	bf0c      	ite	eq
 800bc6c:	2201      	moveq	r2, #1
 800bc6e:	2202      	movne	r2, #2
 800bc70:	6122      	str	r2, [r4, #16]
 800bc72:	b1a5      	cbz	r5, 800bc9e <__d2b+0x92>
 800bc74:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bc78:	4405      	add	r5, r0
 800bc7a:	603d      	str	r5, [r7, #0]
 800bc7c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bc80:	6030      	str	r0, [r6, #0]
 800bc82:	4620      	mov	r0, r4
 800bc84:	b003      	add	sp, #12
 800bc86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc8a:	6161      	str	r1, [r4, #20]
 800bc8c:	e7ea      	b.n	800bc64 <__d2b+0x58>
 800bc8e:	a801      	add	r0, sp, #4
 800bc90:	f7ff fd61 	bl	800b756 <__lo0bits>
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	6163      	str	r3, [r4, #20]
 800bc98:	3020      	adds	r0, #32
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	e7e8      	b.n	800bc70 <__d2b+0x64>
 800bc9e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bca2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bca6:	6038      	str	r0, [r7, #0]
 800bca8:	6918      	ldr	r0, [r3, #16]
 800bcaa:	f7ff fd35 	bl	800b718 <__hi0bits>
 800bcae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bcb2:	e7e5      	b.n	800bc80 <__d2b+0x74>
 800bcb4:	0800d050 	.word	0x0800d050
 800bcb8:	0800d061 	.word	0x0800d061

0800bcbc <__ssputs_r>:
 800bcbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	688e      	ldr	r6, [r1, #8]
 800bcc2:	461f      	mov	r7, r3
 800bcc4:	42be      	cmp	r6, r7
 800bcc6:	680b      	ldr	r3, [r1, #0]
 800bcc8:	4682      	mov	sl, r0
 800bcca:	460c      	mov	r4, r1
 800bccc:	4690      	mov	r8, r2
 800bcce:	d82d      	bhi.n	800bd2c <__ssputs_r+0x70>
 800bcd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcd4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bcd8:	d026      	beq.n	800bd28 <__ssputs_r+0x6c>
 800bcda:	6965      	ldr	r5, [r4, #20]
 800bcdc:	6909      	ldr	r1, [r1, #16]
 800bcde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bce2:	eba3 0901 	sub.w	r9, r3, r1
 800bce6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bcea:	1c7b      	adds	r3, r7, #1
 800bcec:	444b      	add	r3, r9
 800bcee:	106d      	asrs	r5, r5, #1
 800bcf0:	429d      	cmp	r5, r3
 800bcf2:	bf38      	it	cc
 800bcf4:	461d      	movcc	r5, r3
 800bcf6:	0553      	lsls	r3, r2, #21
 800bcf8:	d527      	bpl.n	800bd4a <__ssputs_r+0x8e>
 800bcfa:	4629      	mov	r1, r5
 800bcfc:	f7ff fbd8 	bl	800b4b0 <_malloc_r>
 800bd00:	4606      	mov	r6, r0
 800bd02:	b360      	cbz	r0, 800bd5e <__ssputs_r+0xa2>
 800bd04:	6921      	ldr	r1, [r4, #16]
 800bd06:	464a      	mov	r2, r9
 800bd08:	f7fe fcf5 	bl	800a6f6 <memcpy>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bd12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd16:	81a3      	strh	r3, [r4, #12]
 800bd18:	6126      	str	r6, [r4, #16]
 800bd1a:	6165      	str	r5, [r4, #20]
 800bd1c:	444e      	add	r6, r9
 800bd1e:	eba5 0509 	sub.w	r5, r5, r9
 800bd22:	6026      	str	r6, [r4, #0]
 800bd24:	60a5      	str	r5, [r4, #8]
 800bd26:	463e      	mov	r6, r7
 800bd28:	42be      	cmp	r6, r7
 800bd2a:	d900      	bls.n	800bd2e <__ssputs_r+0x72>
 800bd2c:	463e      	mov	r6, r7
 800bd2e:	6820      	ldr	r0, [r4, #0]
 800bd30:	4632      	mov	r2, r6
 800bd32:	4641      	mov	r1, r8
 800bd34:	f7fe fc45 	bl	800a5c2 <memmove>
 800bd38:	68a3      	ldr	r3, [r4, #8]
 800bd3a:	1b9b      	subs	r3, r3, r6
 800bd3c:	60a3      	str	r3, [r4, #8]
 800bd3e:	6823      	ldr	r3, [r4, #0]
 800bd40:	4433      	add	r3, r6
 800bd42:	6023      	str	r3, [r4, #0]
 800bd44:	2000      	movs	r0, #0
 800bd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4a:	462a      	mov	r2, r5
 800bd4c:	f000 fa0e 	bl	800c16c <_realloc_r>
 800bd50:	4606      	mov	r6, r0
 800bd52:	2800      	cmp	r0, #0
 800bd54:	d1e0      	bne.n	800bd18 <__ssputs_r+0x5c>
 800bd56:	6921      	ldr	r1, [r4, #16]
 800bd58:	4650      	mov	r0, sl
 800bd5a:	f7ff fb35 	bl	800b3c8 <_free_r>
 800bd5e:	230c      	movs	r3, #12
 800bd60:	f8ca 3000 	str.w	r3, [sl]
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd6a:	81a3      	strh	r3, [r4, #12]
 800bd6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd70:	e7e9      	b.n	800bd46 <__ssputs_r+0x8a>
	...

0800bd74 <_svfiprintf_r>:
 800bd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd78:	4698      	mov	r8, r3
 800bd7a:	898b      	ldrh	r3, [r1, #12]
 800bd7c:	061b      	lsls	r3, r3, #24
 800bd7e:	b09d      	sub	sp, #116	@ 0x74
 800bd80:	4607      	mov	r7, r0
 800bd82:	460d      	mov	r5, r1
 800bd84:	4614      	mov	r4, r2
 800bd86:	d510      	bpl.n	800bdaa <_svfiprintf_r+0x36>
 800bd88:	690b      	ldr	r3, [r1, #16]
 800bd8a:	b973      	cbnz	r3, 800bdaa <_svfiprintf_r+0x36>
 800bd8c:	2140      	movs	r1, #64	@ 0x40
 800bd8e:	f7ff fb8f 	bl	800b4b0 <_malloc_r>
 800bd92:	6028      	str	r0, [r5, #0]
 800bd94:	6128      	str	r0, [r5, #16]
 800bd96:	b930      	cbnz	r0, 800bda6 <_svfiprintf_r+0x32>
 800bd98:	230c      	movs	r3, #12
 800bd9a:	603b      	str	r3, [r7, #0]
 800bd9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bda0:	b01d      	add	sp, #116	@ 0x74
 800bda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda6:	2340      	movs	r3, #64	@ 0x40
 800bda8:	616b      	str	r3, [r5, #20]
 800bdaa:	2300      	movs	r3, #0
 800bdac:	9309      	str	r3, [sp, #36]	@ 0x24
 800bdae:	2320      	movs	r3, #32
 800bdb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdb4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdb8:	2330      	movs	r3, #48	@ 0x30
 800bdba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bf58 <_svfiprintf_r+0x1e4>
 800bdbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdc2:	f04f 0901 	mov.w	r9, #1
 800bdc6:	4623      	mov	r3, r4
 800bdc8:	469a      	mov	sl, r3
 800bdca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdce:	b10a      	cbz	r2, 800bdd4 <_svfiprintf_r+0x60>
 800bdd0:	2a25      	cmp	r2, #37	@ 0x25
 800bdd2:	d1f9      	bne.n	800bdc8 <_svfiprintf_r+0x54>
 800bdd4:	ebba 0b04 	subs.w	fp, sl, r4
 800bdd8:	d00b      	beq.n	800bdf2 <_svfiprintf_r+0x7e>
 800bdda:	465b      	mov	r3, fp
 800bddc:	4622      	mov	r2, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	4638      	mov	r0, r7
 800bde2:	f7ff ff6b 	bl	800bcbc <__ssputs_r>
 800bde6:	3001      	adds	r0, #1
 800bde8:	f000 80a7 	beq.w	800bf3a <_svfiprintf_r+0x1c6>
 800bdec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdee:	445a      	add	r2, fp
 800bdf0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdf2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 809f 	beq.w	800bf3a <_svfiprintf_r+0x1c6>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be06:	f10a 0a01 	add.w	sl, sl, #1
 800be0a:	9304      	str	r3, [sp, #16]
 800be0c:	9307      	str	r3, [sp, #28]
 800be0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be12:	931a      	str	r3, [sp, #104]	@ 0x68
 800be14:	4654      	mov	r4, sl
 800be16:	2205      	movs	r2, #5
 800be18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be1c:	484e      	ldr	r0, [pc, #312]	@ (800bf58 <_svfiprintf_r+0x1e4>)
 800be1e:	f7f4 f9d7 	bl	80001d0 <memchr>
 800be22:	9a04      	ldr	r2, [sp, #16]
 800be24:	b9d8      	cbnz	r0, 800be5e <_svfiprintf_r+0xea>
 800be26:	06d0      	lsls	r0, r2, #27
 800be28:	bf44      	itt	mi
 800be2a:	2320      	movmi	r3, #32
 800be2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be30:	0711      	lsls	r1, r2, #28
 800be32:	bf44      	itt	mi
 800be34:	232b      	movmi	r3, #43	@ 0x2b
 800be36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be3a:	f89a 3000 	ldrb.w	r3, [sl]
 800be3e:	2b2a      	cmp	r3, #42	@ 0x2a
 800be40:	d015      	beq.n	800be6e <_svfiprintf_r+0xfa>
 800be42:	9a07      	ldr	r2, [sp, #28]
 800be44:	4654      	mov	r4, sl
 800be46:	2000      	movs	r0, #0
 800be48:	f04f 0c0a 	mov.w	ip, #10
 800be4c:	4621      	mov	r1, r4
 800be4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be52:	3b30      	subs	r3, #48	@ 0x30
 800be54:	2b09      	cmp	r3, #9
 800be56:	d94b      	bls.n	800bef0 <_svfiprintf_r+0x17c>
 800be58:	b1b0      	cbz	r0, 800be88 <_svfiprintf_r+0x114>
 800be5a:	9207      	str	r2, [sp, #28]
 800be5c:	e014      	b.n	800be88 <_svfiprintf_r+0x114>
 800be5e:	eba0 0308 	sub.w	r3, r0, r8
 800be62:	fa09 f303 	lsl.w	r3, r9, r3
 800be66:	4313      	orrs	r3, r2
 800be68:	9304      	str	r3, [sp, #16]
 800be6a:	46a2      	mov	sl, r4
 800be6c:	e7d2      	b.n	800be14 <_svfiprintf_r+0xa0>
 800be6e:	9b03      	ldr	r3, [sp, #12]
 800be70:	1d19      	adds	r1, r3, #4
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	9103      	str	r1, [sp, #12]
 800be76:	2b00      	cmp	r3, #0
 800be78:	bfbb      	ittet	lt
 800be7a:	425b      	neglt	r3, r3
 800be7c:	f042 0202 	orrlt.w	r2, r2, #2
 800be80:	9307      	strge	r3, [sp, #28]
 800be82:	9307      	strlt	r3, [sp, #28]
 800be84:	bfb8      	it	lt
 800be86:	9204      	strlt	r2, [sp, #16]
 800be88:	7823      	ldrb	r3, [r4, #0]
 800be8a:	2b2e      	cmp	r3, #46	@ 0x2e
 800be8c:	d10a      	bne.n	800bea4 <_svfiprintf_r+0x130>
 800be8e:	7863      	ldrb	r3, [r4, #1]
 800be90:	2b2a      	cmp	r3, #42	@ 0x2a
 800be92:	d132      	bne.n	800befa <_svfiprintf_r+0x186>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	1d1a      	adds	r2, r3, #4
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	9203      	str	r2, [sp, #12]
 800be9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bea0:	3402      	adds	r4, #2
 800bea2:	9305      	str	r3, [sp, #20]
 800bea4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bf68 <_svfiprintf_r+0x1f4>
 800bea8:	7821      	ldrb	r1, [r4, #0]
 800beaa:	2203      	movs	r2, #3
 800beac:	4650      	mov	r0, sl
 800beae:	f7f4 f98f 	bl	80001d0 <memchr>
 800beb2:	b138      	cbz	r0, 800bec4 <_svfiprintf_r+0x150>
 800beb4:	9b04      	ldr	r3, [sp, #16]
 800beb6:	eba0 000a 	sub.w	r0, r0, sl
 800beba:	2240      	movs	r2, #64	@ 0x40
 800bebc:	4082      	lsls	r2, r0
 800bebe:	4313      	orrs	r3, r2
 800bec0:	3401      	adds	r4, #1
 800bec2:	9304      	str	r3, [sp, #16]
 800bec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec8:	4824      	ldr	r0, [pc, #144]	@ (800bf5c <_svfiprintf_r+0x1e8>)
 800beca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bece:	2206      	movs	r2, #6
 800bed0:	f7f4 f97e 	bl	80001d0 <memchr>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d036      	beq.n	800bf46 <_svfiprintf_r+0x1d2>
 800bed8:	4b21      	ldr	r3, [pc, #132]	@ (800bf60 <_svfiprintf_r+0x1ec>)
 800beda:	bb1b      	cbnz	r3, 800bf24 <_svfiprintf_r+0x1b0>
 800bedc:	9b03      	ldr	r3, [sp, #12]
 800bede:	3307      	adds	r3, #7
 800bee0:	f023 0307 	bic.w	r3, r3, #7
 800bee4:	3308      	adds	r3, #8
 800bee6:	9303      	str	r3, [sp, #12]
 800bee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beea:	4433      	add	r3, r6
 800beec:	9309      	str	r3, [sp, #36]	@ 0x24
 800beee:	e76a      	b.n	800bdc6 <_svfiprintf_r+0x52>
 800bef0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bef4:	460c      	mov	r4, r1
 800bef6:	2001      	movs	r0, #1
 800bef8:	e7a8      	b.n	800be4c <_svfiprintf_r+0xd8>
 800befa:	2300      	movs	r3, #0
 800befc:	3401      	adds	r4, #1
 800befe:	9305      	str	r3, [sp, #20]
 800bf00:	4619      	mov	r1, r3
 800bf02:	f04f 0c0a 	mov.w	ip, #10
 800bf06:	4620      	mov	r0, r4
 800bf08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf0c:	3a30      	subs	r2, #48	@ 0x30
 800bf0e:	2a09      	cmp	r2, #9
 800bf10:	d903      	bls.n	800bf1a <_svfiprintf_r+0x1a6>
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d0c6      	beq.n	800bea4 <_svfiprintf_r+0x130>
 800bf16:	9105      	str	r1, [sp, #20]
 800bf18:	e7c4      	b.n	800bea4 <_svfiprintf_r+0x130>
 800bf1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf1e:	4604      	mov	r4, r0
 800bf20:	2301      	movs	r3, #1
 800bf22:	e7f0      	b.n	800bf06 <_svfiprintf_r+0x192>
 800bf24:	ab03      	add	r3, sp, #12
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	462a      	mov	r2, r5
 800bf2a:	4b0e      	ldr	r3, [pc, #56]	@ (800bf64 <_svfiprintf_r+0x1f0>)
 800bf2c:	a904      	add	r1, sp, #16
 800bf2e:	4638      	mov	r0, r7
 800bf30:	f7fd fe56 	bl	8009be0 <_printf_float>
 800bf34:	1c42      	adds	r2, r0, #1
 800bf36:	4606      	mov	r6, r0
 800bf38:	d1d6      	bne.n	800bee8 <_svfiprintf_r+0x174>
 800bf3a:	89ab      	ldrh	r3, [r5, #12]
 800bf3c:	065b      	lsls	r3, r3, #25
 800bf3e:	f53f af2d 	bmi.w	800bd9c <_svfiprintf_r+0x28>
 800bf42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf44:	e72c      	b.n	800bda0 <_svfiprintf_r+0x2c>
 800bf46:	ab03      	add	r3, sp, #12
 800bf48:	9300      	str	r3, [sp, #0]
 800bf4a:	462a      	mov	r2, r5
 800bf4c:	4b05      	ldr	r3, [pc, #20]	@ (800bf64 <_svfiprintf_r+0x1f0>)
 800bf4e:	a904      	add	r1, sp, #16
 800bf50:	4638      	mov	r0, r7
 800bf52:	f7fe f8dd 	bl	800a110 <_printf_i>
 800bf56:	e7ed      	b.n	800bf34 <_svfiprintf_r+0x1c0>
 800bf58:	0800d0ba 	.word	0x0800d0ba
 800bf5c:	0800d0c4 	.word	0x0800d0c4
 800bf60:	08009be1 	.word	0x08009be1
 800bf64:	0800bcbd 	.word	0x0800bcbd
 800bf68:	0800d0c0 	.word	0x0800d0c0

0800bf6c <__sflush_r>:
 800bf6c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf74:	0716      	lsls	r6, r2, #28
 800bf76:	4605      	mov	r5, r0
 800bf78:	460c      	mov	r4, r1
 800bf7a:	d454      	bmi.n	800c026 <__sflush_r+0xba>
 800bf7c:	684b      	ldr	r3, [r1, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	dc02      	bgt.n	800bf88 <__sflush_r+0x1c>
 800bf82:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	dd48      	ble.n	800c01a <__sflush_r+0xae>
 800bf88:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf8a:	2e00      	cmp	r6, #0
 800bf8c:	d045      	beq.n	800c01a <__sflush_r+0xae>
 800bf8e:	2300      	movs	r3, #0
 800bf90:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bf94:	682f      	ldr	r7, [r5, #0]
 800bf96:	6a21      	ldr	r1, [r4, #32]
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	d030      	beq.n	800bffe <__sflush_r+0x92>
 800bf9c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	0759      	lsls	r1, r3, #29
 800bfa2:	d505      	bpl.n	800bfb0 <__sflush_r+0x44>
 800bfa4:	6863      	ldr	r3, [r4, #4]
 800bfa6:	1ad2      	subs	r2, r2, r3
 800bfa8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfaa:	b10b      	cbz	r3, 800bfb0 <__sflush_r+0x44>
 800bfac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfb4:	6a21      	ldr	r1, [r4, #32]
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	47b0      	blx	r6
 800bfba:	1c43      	adds	r3, r0, #1
 800bfbc:	89a3      	ldrh	r3, [r4, #12]
 800bfbe:	d106      	bne.n	800bfce <__sflush_r+0x62>
 800bfc0:	6829      	ldr	r1, [r5, #0]
 800bfc2:	291d      	cmp	r1, #29
 800bfc4:	d82b      	bhi.n	800c01e <__sflush_r+0xb2>
 800bfc6:	4a2a      	ldr	r2, [pc, #168]	@ (800c070 <__sflush_r+0x104>)
 800bfc8:	40ca      	lsrs	r2, r1
 800bfca:	07d6      	lsls	r6, r2, #31
 800bfcc:	d527      	bpl.n	800c01e <__sflush_r+0xb2>
 800bfce:	2200      	movs	r2, #0
 800bfd0:	6062      	str	r2, [r4, #4]
 800bfd2:	04d9      	lsls	r1, r3, #19
 800bfd4:	6922      	ldr	r2, [r4, #16]
 800bfd6:	6022      	str	r2, [r4, #0]
 800bfd8:	d504      	bpl.n	800bfe4 <__sflush_r+0x78>
 800bfda:	1c42      	adds	r2, r0, #1
 800bfdc:	d101      	bne.n	800bfe2 <__sflush_r+0x76>
 800bfde:	682b      	ldr	r3, [r5, #0]
 800bfe0:	b903      	cbnz	r3, 800bfe4 <__sflush_r+0x78>
 800bfe2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bfe4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bfe6:	602f      	str	r7, [r5, #0]
 800bfe8:	b1b9      	cbz	r1, 800c01a <__sflush_r+0xae>
 800bfea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bfee:	4299      	cmp	r1, r3
 800bff0:	d002      	beq.n	800bff8 <__sflush_r+0x8c>
 800bff2:	4628      	mov	r0, r5
 800bff4:	f7ff f9e8 	bl	800b3c8 <_free_r>
 800bff8:	2300      	movs	r3, #0
 800bffa:	6363      	str	r3, [r4, #52]	@ 0x34
 800bffc:	e00d      	b.n	800c01a <__sflush_r+0xae>
 800bffe:	2301      	movs	r3, #1
 800c000:	4628      	mov	r0, r5
 800c002:	47b0      	blx	r6
 800c004:	4602      	mov	r2, r0
 800c006:	1c50      	adds	r0, r2, #1
 800c008:	d1c9      	bne.n	800bf9e <__sflush_r+0x32>
 800c00a:	682b      	ldr	r3, [r5, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d0c6      	beq.n	800bf9e <__sflush_r+0x32>
 800c010:	2b1d      	cmp	r3, #29
 800c012:	d001      	beq.n	800c018 <__sflush_r+0xac>
 800c014:	2b16      	cmp	r3, #22
 800c016:	d11e      	bne.n	800c056 <__sflush_r+0xea>
 800c018:	602f      	str	r7, [r5, #0]
 800c01a:	2000      	movs	r0, #0
 800c01c:	e022      	b.n	800c064 <__sflush_r+0xf8>
 800c01e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c022:	b21b      	sxth	r3, r3
 800c024:	e01b      	b.n	800c05e <__sflush_r+0xf2>
 800c026:	690f      	ldr	r7, [r1, #16]
 800c028:	2f00      	cmp	r7, #0
 800c02a:	d0f6      	beq.n	800c01a <__sflush_r+0xae>
 800c02c:	0793      	lsls	r3, r2, #30
 800c02e:	680e      	ldr	r6, [r1, #0]
 800c030:	bf08      	it	eq
 800c032:	694b      	ldreq	r3, [r1, #20]
 800c034:	600f      	str	r7, [r1, #0]
 800c036:	bf18      	it	ne
 800c038:	2300      	movne	r3, #0
 800c03a:	eba6 0807 	sub.w	r8, r6, r7
 800c03e:	608b      	str	r3, [r1, #8]
 800c040:	f1b8 0f00 	cmp.w	r8, #0
 800c044:	dde9      	ble.n	800c01a <__sflush_r+0xae>
 800c046:	6a21      	ldr	r1, [r4, #32]
 800c048:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c04a:	4643      	mov	r3, r8
 800c04c:	463a      	mov	r2, r7
 800c04e:	4628      	mov	r0, r5
 800c050:	47b0      	blx	r6
 800c052:	2800      	cmp	r0, #0
 800c054:	dc08      	bgt.n	800c068 <__sflush_r+0xfc>
 800c056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c05a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c05e:	81a3      	strh	r3, [r4, #12]
 800c060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c068:	4407      	add	r7, r0
 800c06a:	eba8 0800 	sub.w	r8, r8, r0
 800c06e:	e7e7      	b.n	800c040 <__sflush_r+0xd4>
 800c070:	20400001 	.word	0x20400001

0800c074 <_fflush_r>:
 800c074:	b538      	push	{r3, r4, r5, lr}
 800c076:	690b      	ldr	r3, [r1, #16]
 800c078:	4605      	mov	r5, r0
 800c07a:	460c      	mov	r4, r1
 800c07c:	b913      	cbnz	r3, 800c084 <_fflush_r+0x10>
 800c07e:	2500      	movs	r5, #0
 800c080:	4628      	mov	r0, r5
 800c082:	bd38      	pop	{r3, r4, r5, pc}
 800c084:	b118      	cbz	r0, 800c08e <_fflush_r+0x1a>
 800c086:	6a03      	ldr	r3, [r0, #32]
 800c088:	b90b      	cbnz	r3, 800c08e <_fflush_r+0x1a>
 800c08a:	f7fe f9eb 	bl	800a464 <__sinit>
 800c08e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0f3      	beq.n	800c07e <_fflush_r+0xa>
 800c096:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c098:	07d0      	lsls	r0, r2, #31
 800c09a:	d404      	bmi.n	800c0a6 <_fflush_r+0x32>
 800c09c:	0599      	lsls	r1, r3, #22
 800c09e:	d402      	bmi.n	800c0a6 <_fflush_r+0x32>
 800c0a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0a2:	f7fe fb26 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 800c0a6:	4628      	mov	r0, r5
 800c0a8:	4621      	mov	r1, r4
 800c0aa:	f7ff ff5f 	bl	800bf6c <__sflush_r>
 800c0ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0b0:	07da      	lsls	r2, r3, #31
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	d4e4      	bmi.n	800c080 <_fflush_r+0xc>
 800c0b6:	89a3      	ldrh	r3, [r4, #12]
 800c0b8:	059b      	lsls	r3, r3, #22
 800c0ba:	d4e1      	bmi.n	800c080 <_fflush_r+0xc>
 800c0bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0be:	f7fe fb19 	bl	800a6f4 <__retarget_lock_release_recursive>
 800c0c2:	e7dd      	b.n	800c080 <_fflush_r+0xc>

0800c0c4 <_sbrk_r>:
 800c0c4:	b538      	push	{r3, r4, r5, lr}
 800c0c6:	4d06      	ldr	r5, [pc, #24]	@ (800c0e0 <_sbrk_r+0x1c>)
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	4608      	mov	r0, r1
 800c0ce:	602b      	str	r3, [r5, #0]
 800c0d0:	f7f5 faea 	bl	80016a8 <_sbrk>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_sbrk_r+0x1a>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_sbrk_r+0x1a>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	20002508 	.word	0x20002508

0800c0e4 <__assert_func>:
 800c0e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0e6:	4614      	mov	r4, r2
 800c0e8:	461a      	mov	r2, r3
 800c0ea:	4b09      	ldr	r3, [pc, #36]	@ (800c110 <__assert_func+0x2c>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	4605      	mov	r5, r0
 800c0f0:	68d8      	ldr	r0, [r3, #12]
 800c0f2:	b14c      	cbz	r4, 800c108 <__assert_func+0x24>
 800c0f4:	4b07      	ldr	r3, [pc, #28]	@ (800c114 <__assert_func+0x30>)
 800c0f6:	9100      	str	r1, [sp, #0]
 800c0f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c0fc:	4906      	ldr	r1, [pc, #24]	@ (800c118 <__assert_func+0x34>)
 800c0fe:	462b      	mov	r3, r5
 800c100:	f000 f870 	bl	800c1e4 <fiprintf>
 800c104:	f000 f880 	bl	800c208 <abort>
 800c108:	4b04      	ldr	r3, [pc, #16]	@ (800c11c <__assert_func+0x38>)
 800c10a:	461c      	mov	r4, r3
 800c10c:	e7f3      	b.n	800c0f6 <__assert_func+0x12>
 800c10e:	bf00      	nop
 800c110:	20000108 	.word	0x20000108
 800c114:	0800d0d5 	.word	0x0800d0d5
 800c118:	0800d0e2 	.word	0x0800d0e2
 800c11c:	0800d110 	.word	0x0800d110

0800c120 <_calloc_r>:
 800c120:	b570      	push	{r4, r5, r6, lr}
 800c122:	fba1 5402 	umull	r5, r4, r1, r2
 800c126:	b934      	cbnz	r4, 800c136 <_calloc_r+0x16>
 800c128:	4629      	mov	r1, r5
 800c12a:	f7ff f9c1 	bl	800b4b0 <_malloc_r>
 800c12e:	4606      	mov	r6, r0
 800c130:	b928      	cbnz	r0, 800c13e <_calloc_r+0x1e>
 800c132:	4630      	mov	r0, r6
 800c134:	bd70      	pop	{r4, r5, r6, pc}
 800c136:	220c      	movs	r2, #12
 800c138:	6002      	str	r2, [r0, #0]
 800c13a:	2600      	movs	r6, #0
 800c13c:	e7f9      	b.n	800c132 <_calloc_r+0x12>
 800c13e:	462a      	mov	r2, r5
 800c140:	4621      	mov	r1, r4
 800c142:	f7fe fa58 	bl	800a5f6 <memset>
 800c146:	e7f4      	b.n	800c132 <_calloc_r+0x12>

0800c148 <__ascii_mbtowc>:
 800c148:	b082      	sub	sp, #8
 800c14a:	b901      	cbnz	r1, 800c14e <__ascii_mbtowc+0x6>
 800c14c:	a901      	add	r1, sp, #4
 800c14e:	b142      	cbz	r2, 800c162 <__ascii_mbtowc+0x1a>
 800c150:	b14b      	cbz	r3, 800c166 <__ascii_mbtowc+0x1e>
 800c152:	7813      	ldrb	r3, [r2, #0]
 800c154:	600b      	str	r3, [r1, #0]
 800c156:	7812      	ldrb	r2, [r2, #0]
 800c158:	1e10      	subs	r0, r2, #0
 800c15a:	bf18      	it	ne
 800c15c:	2001      	movne	r0, #1
 800c15e:	b002      	add	sp, #8
 800c160:	4770      	bx	lr
 800c162:	4610      	mov	r0, r2
 800c164:	e7fb      	b.n	800c15e <__ascii_mbtowc+0x16>
 800c166:	f06f 0001 	mvn.w	r0, #1
 800c16a:	e7f8      	b.n	800c15e <__ascii_mbtowc+0x16>

0800c16c <_realloc_r>:
 800c16c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c170:	4607      	mov	r7, r0
 800c172:	4614      	mov	r4, r2
 800c174:	460d      	mov	r5, r1
 800c176:	b921      	cbnz	r1, 800c182 <_realloc_r+0x16>
 800c178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c17c:	4611      	mov	r1, r2
 800c17e:	f7ff b997 	b.w	800b4b0 <_malloc_r>
 800c182:	b92a      	cbnz	r2, 800c190 <_realloc_r+0x24>
 800c184:	f7ff f920 	bl	800b3c8 <_free_r>
 800c188:	4625      	mov	r5, r4
 800c18a:	4628      	mov	r0, r5
 800c18c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c190:	f000 f841 	bl	800c216 <_malloc_usable_size_r>
 800c194:	4284      	cmp	r4, r0
 800c196:	4606      	mov	r6, r0
 800c198:	d802      	bhi.n	800c1a0 <_realloc_r+0x34>
 800c19a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c19e:	d8f4      	bhi.n	800c18a <_realloc_r+0x1e>
 800c1a0:	4621      	mov	r1, r4
 800c1a2:	4638      	mov	r0, r7
 800c1a4:	f7ff f984 	bl	800b4b0 <_malloc_r>
 800c1a8:	4680      	mov	r8, r0
 800c1aa:	b908      	cbnz	r0, 800c1b0 <_realloc_r+0x44>
 800c1ac:	4645      	mov	r5, r8
 800c1ae:	e7ec      	b.n	800c18a <_realloc_r+0x1e>
 800c1b0:	42b4      	cmp	r4, r6
 800c1b2:	4622      	mov	r2, r4
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	bf28      	it	cs
 800c1b8:	4632      	movcs	r2, r6
 800c1ba:	f7fe fa9c 	bl	800a6f6 <memcpy>
 800c1be:	4629      	mov	r1, r5
 800c1c0:	4638      	mov	r0, r7
 800c1c2:	f7ff f901 	bl	800b3c8 <_free_r>
 800c1c6:	e7f1      	b.n	800c1ac <_realloc_r+0x40>

0800c1c8 <__ascii_wctomb>:
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	4608      	mov	r0, r1
 800c1cc:	b141      	cbz	r1, 800c1e0 <__ascii_wctomb+0x18>
 800c1ce:	2aff      	cmp	r2, #255	@ 0xff
 800c1d0:	d904      	bls.n	800c1dc <__ascii_wctomb+0x14>
 800c1d2:	228a      	movs	r2, #138	@ 0x8a
 800c1d4:	601a      	str	r2, [r3, #0]
 800c1d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c1da:	4770      	bx	lr
 800c1dc:	700a      	strb	r2, [r1, #0]
 800c1de:	2001      	movs	r0, #1
 800c1e0:	4770      	bx	lr
	...

0800c1e4 <fiprintf>:
 800c1e4:	b40e      	push	{r1, r2, r3}
 800c1e6:	b503      	push	{r0, r1, lr}
 800c1e8:	4601      	mov	r1, r0
 800c1ea:	ab03      	add	r3, sp, #12
 800c1ec:	4805      	ldr	r0, [pc, #20]	@ (800c204 <fiprintf+0x20>)
 800c1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1f2:	6800      	ldr	r0, [r0, #0]
 800c1f4:	9301      	str	r3, [sp, #4]
 800c1f6:	f000 f83f 	bl	800c278 <_vfiprintf_r>
 800c1fa:	b002      	add	sp, #8
 800c1fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c200:	b003      	add	sp, #12
 800c202:	4770      	bx	lr
 800c204:	20000108 	.word	0x20000108

0800c208 <abort>:
 800c208:	b508      	push	{r3, lr}
 800c20a:	2006      	movs	r0, #6
 800c20c:	f000 fa08 	bl	800c620 <raise>
 800c210:	2001      	movs	r0, #1
 800c212:	f7f5 f9d1 	bl	80015b8 <_exit>

0800c216 <_malloc_usable_size_r>:
 800c216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c21a:	1f18      	subs	r0, r3, #4
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	bfbc      	itt	lt
 800c220:	580b      	ldrlt	r3, [r1, r0]
 800c222:	18c0      	addlt	r0, r0, r3
 800c224:	4770      	bx	lr

0800c226 <__sfputc_r>:
 800c226:	6893      	ldr	r3, [r2, #8]
 800c228:	3b01      	subs	r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	b410      	push	{r4}
 800c22e:	6093      	str	r3, [r2, #8]
 800c230:	da08      	bge.n	800c244 <__sfputc_r+0x1e>
 800c232:	6994      	ldr	r4, [r2, #24]
 800c234:	42a3      	cmp	r3, r4
 800c236:	db01      	blt.n	800c23c <__sfputc_r+0x16>
 800c238:	290a      	cmp	r1, #10
 800c23a:	d103      	bne.n	800c244 <__sfputc_r+0x1e>
 800c23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c240:	f000 b932 	b.w	800c4a8 <__swbuf_r>
 800c244:	6813      	ldr	r3, [r2, #0]
 800c246:	1c58      	adds	r0, r3, #1
 800c248:	6010      	str	r0, [r2, #0]
 800c24a:	7019      	strb	r1, [r3, #0]
 800c24c:	4608      	mov	r0, r1
 800c24e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <__sfputs_r>:
 800c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c256:	4606      	mov	r6, r0
 800c258:	460f      	mov	r7, r1
 800c25a:	4614      	mov	r4, r2
 800c25c:	18d5      	adds	r5, r2, r3
 800c25e:	42ac      	cmp	r4, r5
 800c260:	d101      	bne.n	800c266 <__sfputs_r+0x12>
 800c262:	2000      	movs	r0, #0
 800c264:	e007      	b.n	800c276 <__sfputs_r+0x22>
 800c266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c26a:	463a      	mov	r2, r7
 800c26c:	4630      	mov	r0, r6
 800c26e:	f7ff ffda 	bl	800c226 <__sfputc_r>
 800c272:	1c43      	adds	r3, r0, #1
 800c274:	d1f3      	bne.n	800c25e <__sfputs_r+0xa>
 800c276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c278 <_vfiprintf_r>:
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	460d      	mov	r5, r1
 800c27e:	b09d      	sub	sp, #116	@ 0x74
 800c280:	4614      	mov	r4, r2
 800c282:	4698      	mov	r8, r3
 800c284:	4606      	mov	r6, r0
 800c286:	b118      	cbz	r0, 800c290 <_vfiprintf_r+0x18>
 800c288:	6a03      	ldr	r3, [r0, #32]
 800c28a:	b90b      	cbnz	r3, 800c290 <_vfiprintf_r+0x18>
 800c28c:	f7fe f8ea 	bl	800a464 <__sinit>
 800c290:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c292:	07d9      	lsls	r1, r3, #31
 800c294:	d405      	bmi.n	800c2a2 <_vfiprintf_r+0x2a>
 800c296:	89ab      	ldrh	r3, [r5, #12]
 800c298:	059a      	lsls	r2, r3, #22
 800c29a:	d402      	bmi.n	800c2a2 <_vfiprintf_r+0x2a>
 800c29c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c29e:	f7fe fa28 	bl	800a6f2 <__retarget_lock_acquire_recursive>
 800c2a2:	89ab      	ldrh	r3, [r5, #12]
 800c2a4:	071b      	lsls	r3, r3, #28
 800c2a6:	d501      	bpl.n	800c2ac <_vfiprintf_r+0x34>
 800c2a8:	692b      	ldr	r3, [r5, #16]
 800c2aa:	b99b      	cbnz	r3, 800c2d4 <_vfiprintf_r+0x5c>
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f000 f938 	bl	800c524 <__swsetup_r>
 800c2b4:	b170      	cbz	r0, 800c2d4 <_vfiprintf_r+0x5c>
 800c2b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c2b8:	07dc      	lsls	r4, r3, #31
 800c2ba:	d504      	bpl.n	800c2c6 <_vfiprintf_r+0x4e>
 800c2bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2c0:	b01d      	add	sp, #116	@ 0x74
 800c2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c6:	89ab      	ldrh	r3, [r5, #12]
 800c2c8:	0598      	lsls	r0, r3, #22
 800c2ca:	d4f7      	bmi.n	800c2bc <_vfiprintf_r+0x44>
 800c2cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2ce:	f7fe fa11 	bl	800a6f4 <__retarget_lock_release_recursive>
 800c2d2:	e7f3      	b.n	800c2bc <_vfiprintf_r+0x44>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d8:	2320      	movs	r3, #32
 800c2da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c2de:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2e2:	2330      	movs	r3, #48	@ 0x30
 800c2e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c494 <_vfiprintf_r+0x21c>
 800c2e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2ec:	f04f 0901 	mov.w	r9, #1
 800c2f0:	4623      	mov	r3, r4
 800c2f2:	469a      	mov	sl, r3
 800c2f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2f8:	b10a      	cbz	r2, 800c2fe <_vfiprintf_r+0x86>
 800c2fa:	2a25      	cmp	r2, #37	@ 0x25
 800c2fc:	d1f9      	bne.n	800c2f2 <_vfiprintf_r+0x7a>
 800c2fe:	ebba 0b04 	subs.w	fp, sl, r4
 800c302:	d00b      	beq.n	800c31c <_vfiprintf_r+0xa4>
 800c304:	465b      	mov	r3, fp
 800c306:	4622      	mov	r2, r4
 800c308:	4629      	mov	r1, r5
 800c30a:	4630      	mov	r0, r6
 800c30c:	f7ff ffa2 	bl	800c254 <__sfputs_r>
 800c310:	3001      	adds	r0, #1
 800c312:	f000 80a7 	beq.w	800c464 <_vfiprintf_r+0x1ec>
 800c316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c318:	445a      	add	r2, fp
 800c31a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c31c:	f89a 3000 	ldrb.w	r3, [sl]
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 809f 	beq.w	800c464 <_vfiprintf_r+0x1ec>
 800c326:	2300      	movs	r3, #0
 800c328:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c32c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c330:	f10a 0a01 	add.w	sl, sl, #1
 800c334:	9304      	str	r3, [sp, #16]
 800c336:	9307      	str	r3, [sp, #28]
 800c338:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c33c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c33e:	4654      	mov	r4, sl
 800c340:	2205      	movs	r2, #5
 800c342:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c346:	4853      	ldr	r0, [pc, #332]	@ (800c494 <_vfiprintf_r+0x21c>)
 800c348:	f7f3 ff42 	bl	80001d0 <memchr>
 800c34c:	9a04      	ldr	r2, [sp, #16]
 800c34e:	b9d8      	cbnz	r0, 800c388 <_vfiprintf_r+0x110>
 800c350:	06d1      	lsls	r1, r2, #27
 800c352:	bf44      	itt	mi
 800c354:	2320      	movmi	r3, #32
 800c356:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c35a:	0713      	lsls	r3, r2, #28
 800c35c:	bf44      	itt	mi
 800c35e:	232b      	movmi	r3, #43	@ 0x2b
 800c360:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c364:	f89a 3000 	ldrb.w	r3, [sl]
 800c368:	2b2a      	cmp	r3, #42	@ 0x2a
 800c36a:	d015      	beq.n	800c398 <_vfiprintf_r+0x120>
 800c36c:	9a07      	ldr	r2, [sp, #28]
 800c36e:	4654      	mov	r4, sl
 800c370:	2000      	movs	r0, #0
 800c372:	f04f 0c0a 	mov.w	ip, #10
 800c376:	4621      	mov	r1, r4
 800c378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c37c:	3b30      	subs	r3, #48	@ 0x30
 800c37e:	2b09      	cmp	r3, #9
 800c380:	d94b      	bls.n	800c41a <_vfiprintf_r+0x1a2>
 800c382:	b1b0      	cbz	r0, 800c3b2 <_vfiprintf_r+0x13a>
 800c384:	9207      	str	r2, [sp, #28]
 800c386:	e014      	b.n	800c3b2 <_vfiprintf_r+0x13a>
 800c388:	eba0 0308 	sub.w	r3, r0, r8
 800c38c:	fa09 f303 	lsl.w	r3, r9, r3
 800c390:	4313      	orrs	r3, r2
 800c392:	9304      	str	r3, [sp, #16]
 800c394:	46a2      	mov	sl, r4
 800c396:	e7d2      	b.n	800c33e <_vfiprintf_r+0xc6>
 800c398:	9b03      	ldr	r3, [sp, #12]
 800c39a:	1d19      	adds	r1, r3, #4
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	9103      	str	r1, [sp, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	bfbb      	ittet	lt
 800c3a4:	425b      	neglt	r3, r3
 800c3a6:	f042 0202 	orrlt.w	r2, r2, #2
 800c3aa:	9307      	strge	r3, [sp, #28]
 800c3ac:	9307      	strlt	r3, [sp, #28]
 800c3ae:	bfb8      	it	lt
 800c3b0:	9204      	strlt	r2, [sp, #16]
 800c3b2:	7823      	ldrb	r3, [r4, #0]
 800c3b4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c3b6:	d10a      	bne.n	800c3ce <_vfiprintf_r+0x156>
 800c3b8:	7863      	ldrb	r3, [r4, #1]
 800c3ba:	2b2a      	cmp	r3, #42	@ 0x2a
 800c3bc:	d132      	bne.n	800c424 <_vfiprintf_r+0x1ac>
 800c3be:	9b03      	ldr	r3, [sp, #12]
 800c3c0:	1d1a      	adds	r2, r3, #4
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	9203      	str	r2, [sp, #12]
 800c3c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c3ca:	3402      	adds	r4, #2
 800c3cc:	9305      	str	r3, [sp, #20]
 800c3ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c4a4 <_vfiprintf_r+0x22c>
 800c3d2:	7821      	ldrb	r1, [r4, #0]
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	4650      	mov	r0, sl
 800c3d8:	f7f3 fefa 	bl	80001d0 <memchr>
 800c3dc:	b138      	cbz	r0, 800c3ee <_vfiprintf_r+0x176>
 800c3de:	9b04      	ldr	r3, [sp, #16]
 800c3e0:	eba0 000a 	sub.w	r0, r0, sl
 800c3e4:	2240      	movs	r2, #64	@ 0x40
 800c3e6:	4082      	lsls	r2, r0
 800c3e8:	4313      	orrs	r3, r2
 800c3ea:	3401      	adds	r4, #1
 800c3ec:	9304      	str	r3, [sp, #16]
 800c3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f2:	4829      	ldr	r0, [pc, #164]	@ (800c498 <_vfiprintf_r+0x220>)
 800c3f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3f8:	2206      	movs	r2, #6
 800c3fa:	f7f3 fee9 	bl	80001d0 <memchr>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d03f      	beq.n	800c482 <_vfiprintf_r+0x20a>
 800c402:	4b26      	ldr	r3, [pc, #152]	@ (800c49c <_vfiprintf_r+0x224>)
 800c404:	bb1b      	cbnz	r3, 800c44e <_vfiprintf_r+0x1d6>
 800c406:	9b03      	ldr	r3, [sp, #12]
 800c408:	3307      	adds	r3, #7
 800c40a:	f023 0307 	bic.w	r3, r3, #7
 800c40e:	3308      	adds	r3, #8
 800c410:	9303      	str	r3, [sp, #12]
 800c412:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c414:	443b      	add	r3, r7
 800c416:	9309      	str	r3, [sp, #36]	@ 0x24
 800c418:	e76a      	b.n	800c2f0 <_vfiprintf_r+0x78>
 800c41a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c41e:	460c      	mov	r4, r1
 800c420:	2001      	movs	r0, #1
 800c422:	e7a8      	b.n	800c376 <_vfiprintf_r+0xfe>
 800c424:	2300      	movs	r3, #0
 800c426:	3401      	adds	r4, #1
 800c428:	9305      	str	r3, [sp, #20]
 800c42a:	4619      	mov	r1, r3
 800c42c:	f04f 0c0a 	mov.w	ip, #10
 800c430:	4620      	mov	r0, r4
 800c432:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c436:	3a30      	subs	r2, #48	@ 0x30
 800c438:	2a09      	cmp	r2, #9
 800c43a:	d903      	bls.n	800c444 <_vfiprintf_r+0x1cc>
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d0c6      	beq.n	800c3ce <_vfiprintf_r+0x156>
 800c440:	9105      	str	r1, [sp, #20]
 800c442:	e7c4      	b.n	800c3ce <_vfiprintf_r+0x156>
 800c444:	fb0c 2101 	mla	r1, ip, r1, r2
 800c448:	4604      	mov	r4, r0
 800c44a:	2301      	movs	r3, #1
 800c44c:	e7f0      	b.n	800c430 <_vfiprintf_r+0x1b8>
 800c44e:	ab03      	add	r3, sp, #12
 800c450:	9300      	str	r3, [sp, #0]
 800c452:	462a      	mov	r2, r5
 800c454:	4b12      	ldr	r3, [pc, #72]	@ (800c4a0 <_vfiprintf_r+0x228>)
 800c456:	a904      	add	r1, sp, #16
 800c458:	4630      	mov	r0, r6
 800c45a:	f7fd fbc1 	bl	8009be0 <_printf_float>
 800c45e:	4607      	mov	r7, r0
 800c460:	1c78      	adds	r0, r7, #1
 800c462:	d1d6      	bne.n	800c412 <_vfiprintf_r+0x19a>
 800c464:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c466:	07d9      	lsls	r1, r3, #31
 800c468:	d405      	bmi.n	800c476 <_vfiprintf_r+0x1fe>
 800c46a:	89ab      	ldrh	r3, [r5, #12]
 800c46c:	059a      	lsls	r2, r3, #22
 800c46e:	d402      	bmi.n	800c476 <_vfiprintf_r+0x1fe>
 800c470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c472:	f7fe f93f 	bl	800a6f4 <__retarget_lock_release_recursive>
 800c476:	89ab      	ldrh	r3, [r5, #12]
 800c478:	065b      	lsls	r3, r3, #25
 800c47a:	f53f af1f 	bmi.w	800c2bc <_vfiprintf_r+0x44>
 800c47e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c480:	e71e      	b.n	800c2c0 <_vfiprintf_r+0x48>
 800c482:	ab03      	add	r3, sp, #12
 800c484:	9300      	str	r3, [sp, #0]
 800c486:	462a      	mov	r2, r5
 800c488:	4b05      	ldr	r3, [pc, #20]	@ (800c4a0 <_vfiprintf_r+0x228>)
 800c48a:	a904      	add	r1, sp, #16
 800c48c:	4630      	mov	r0, r6
 800c48e:	f7fd fe3f 	bl	800a110 <_printf_i>
 800c492:	e7e4      	b.n	800c45e <_vfiprintf_r+0x1e6>
 800c494:	0800d0ba 	.word	0x0800d0ba
 800c498:	0800d0c4 	.word	0x0800d0c4
 800c49c:	08009be1 	.word	0x08009be1
 800c4a0:	0800c255 	.word	0x0800c255
 800c4a4:	0800d0c0 	.word	0x0800d0c0

0800c4a8 <__swbuf_r>:
 800c4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c4aa:	460e      	mov	r6, r1
 800c4ac:	4614      	mov	r4, r2
 800c4ae:	4605      	mov	r5, r0
 800c4b0:	b118      	cbz	r0, 800c4ba <__swbuf_r+0x12>
 800c4b2:	6a03      	ldr	r3, [r0, #32]
 800c4b4:	b90b      	cbnz	r3, 800c4ba <__swbuf_r+0x12>
 800c4b6:	f7fd ffd5 	bl	800a464 <__sinit>
 800c4ba:	69a3      	ldr	r3, [r4, #24]
 800c4bc:	60a3      	str	r3, [r4, #8]
 800c4be:	89a3      	ldrh	r3, [r4, #12]
 800c4c0:	071a      	lsls	r2, r3, #28
 800c4c2:	d501      	bpl.n	800c4c8 <__swbuf_r+0x20>
 800c4c4:	6923      	ldr	r3, [r4, #16]
 800c4c6:	b943      	cbnz	r3, 800c4da <__swbuf_r+0x32>
 800c4c8:	4621      	mov	r1, r4
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 f82a 	bl	800c524 <__swsetup_r>
 800c4d0:	b118      	cbz	r0, 800c4da <__swbuf_r+0x32>
 800c4d2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c4d6:	4638      	mov	r0, r7
 800c4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	6922      	ldr	r2, [r4, #16]
 800c4de:	1a98      	subs	r0, r3, r2
 800c4e0:	6963      	ldr	r3, [r4, #20]
 800c4e2:	b2f6      	uxtb	r6, r6
 800c4e4:	4283      	cmp	r3, r0
 800c4e6:	4637      	mov	r7, r6
 800c4e8:	dc05      	bgt.n	800c4f6 <__swbuf_r+0x4e>
 800c4ea:	4621      	mov	r1, r4
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	f7ff fdc1 	bl	800c074 <_fflush_r>
 800c4f2:	2800      	cmp	r0, #0
 800c4f4:	d1ed      	bne.n	800c4d2 <__swbuf_r+0x2a>
 800c4f6:	68a3      	ldr	r3, [r4, #8]
 800c4f8:	3b01      	subs	r3, #1
 800c4fa:	60a3      	str	r3, [r4, #8]
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	1c5a      	adds	r2, r3, #1
 800c500:	6022      	str	r2, [r4, #0]
 800c502:	701e      	strb	r6, [r3, #0]
 800c504:	6962      	ldr	r2, [r4, #20]
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	429a      	cmp	r2, r3
 800c50a:	d004      	beq.n	800c516 <__swbuf_r+0x6e>
 800c50c:	89a3      	ldrh	r3, [r4, #12]
 800c50e:	07db      	lsls	r3, r3, #31
 800c510:	d5e1      	bpl.n	800c4d6 <__swbuf_r+0x2e>
 800c512:	2e0a      	cmp	r6, #10
 800c514:	d1df      	bne.n	800c4d6 <__swbuf_r+0x2e>
 800c516:	4621      	mov	r1, r4
 800c518:	4628      	mov	r0, r5
 800c51a:	f7ff fdab 	bl	800c074 <_fflush_r>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d0d9      	beq.n	800c4d6 <__swbuf_r+0x2e>
 800c522:	e7d6      	b.n	800c4d2 <__swbuf_r+0x2a>

0800c524 <__swsetup_r>:
 800c524:	b538      	push	{r3, r4, r5, lr}
 800c526:	4b29      	ldr	r3, [pc, #164]	@ (800c5cc <__swsetup_r+0xa8>)
 800c528:	4605      	mov	r5, r0
 800c52a:	6818      	ldr	r0, [r3, #0]
 800c52c:	460c      	mov	r4, r1
 800c52e:	b118      	cbz	r0, 800c538 <__swsetup_r+0x14>
 800c530:	6a03      	ldr	r3, [r0, #32]
 800c532:	b90b      	cbnz	r3, 800c538 <__swsetup_r+0x14>
 800c534:	f7fd ff96 	bl	800a464 <__sinit>
 800c538:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c53c:	0719      	lsls	r1, r3, #28
 800c53e:	d422      	bmi.n	800c586 <__swsetup_r+0x62>
 800c540:	06da      	lsls	r2, r3, #27
 800c542:	d407      	bmi.n	800c554 <__swsetup_r+0x30>
 800c544:	2209      	movs	r2, #9
 800c546:	602a      	str	r2, [r5, #0]
 800c548:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c54c:	81a3      	strh	r3, [r4, #12]
 800c54e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c552:	e033      	b.n	800c5bc <__swsetup_r+0x98>
 800c554:	0758      	lsls	r0, r3, #29
 800c556:	d512      	bpl.n	800c57e <__swsetup_r+0x5a>
 800c558:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c55a:	b141      	cbz	r1, 800c56e <__swsetup_r+0x4a>
 800c55c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c560:	4299      	cmp	r1, r3
 800c562:	d002      	beq.n	800c56a <__swsetup_r+0x46>
 800c564:	4628      	mov	r0, r5
 800c566:	f7fe ff2f 	bl	800b3c8 <_free_r>
 800c56a:	2300      	movs	r3, #0
 800c56c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c56e:	89a3      	ldrh	r3, [r4, #12]
 800c570:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c574:	81a3      	strh	r3, [r4, #12]
 800c576:	2300      	movs	r3, #0
 800c578:	6063      	str	r3, [r4, #4]
 800c57a:	6923      	ldr	r3, [r4, #16]
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	89a3      	ldrh	r3, [r4, #12]
 800c580:	f043 0308 	orr.w	r3, r3, #8
 800c584:	81a3      	strh	r3, [r4, #12]
 800c586:	6923      	ldr	r3, [r4, #16]
 800c588:	b94b      	cbnz	r3, 800c59e <__swsetup_r+0x7a>
 800c58a:	89a3      	ldrh	r3, [r4, #12]
 800c58c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c594:	d003      	beq.n	800c59e <__swsetup_r+0x7a>
 800c596:	4621      	mov	r1, r4
 800c598:	4628      	mov	r0, r5
 800c59a:	f000 f883 	bl	800c6a4 <__smakebuf_r>
 800c59e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a2:	f013 0201 	ands.w	r2, r3, #1
 800c5a6:	d00a      	beq.n	800c5be <__swsetup_r+0x9a>
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	60a2      	str	r2, [r4, #8]
 800c5ac:	6962      	ldr	r2, [r4, #20]
 800c5ae:	4252      	negs	r2, r2
 800c5b0:	61a2      	str	r2, [r4, #24]
 800c5b2:	6922      	ldr	r2, [r4, #16]
 800c5b4:	b942      	cbnz	r2, 800c5c8 <__swsetup_r+0xa4>
 800c5b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c5ba:	d1c5      	bne.n	800c548 <__swsetup_r+0x24>
 800c5bc:	bd38      	pop	{r3, r4, r5, pc}
 800c5be:	0799      	lsls	r1, r3, #30
 800c5c0:	bf58      	it	pl
 800c5c2:	6962      	ldrpl	r2, [r4, #20]
 800c5c4:	60a2      	str	r2, [r4, #8]
 800c5c6:	e7f4      	b.n	800c5b2 <__swsetup_r+0x8e>
 800c5c8:	2000      	movs	r0, #0
 800c5ca:	e7f7      	b.n	800c5bc <__swsetup_r+0x98>
 800c5cc:	20000108 	.word	0x20000108

0800c5d0 <_raise_r>:
 800c5d0:	291f      	cmp	r1, #31
 800c5d2:	b538      	push	{r3, r4, r5, lr}
 800c5d4:	4605      	mov	r5, r0
 800c5d6:	460c      	mov	r4, r1
 800c5d8:	d904      	bls.n	800c5e4 <_raise_r+0x14>
 800c5da:	2316      	movs	r3, #22
 800c5dc:	6003      	str	r3, [r0, #0]
 800c5de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5e2:	bd38      	pop	{r3, r4, r5, pc}
 800c5e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c5e6:	b112      	cbz	r2, 800c5ee <_raise_r+0x1e>
 800c5e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c5ec:	b94b      	cbnz	r3, 800c602 <_raise_r+0x32>
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	f000 f830 	bl	800c654 <_getpid_r>
 800c5f4:	4622      	mov	r2, r4
 800c5f6:	4601      	mov	r1, r0
 800c5f8:	4628      	mov	r0, r5
 800c5fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5fe:	f000 b817 	b.w	800c630 <_kill_r>
 800c602:	2b01      	cmp	r3, #1
 800c604:	d00a      	beq.n	800c61c <_raise_r+0x4c>
 800c606:	1c59      	adds	r1, r3, #1
 800c608:	d103      	bne.n	800c612 <_raise_r+0x42>
 800c60a:	2316      	movs	r3, #22
 800c60c:	6003      	str	r3, [r0, #0]
 800c60e:	2001      	movs	r0, #1
 800c610:	e7e7      	b.n	800c5e2 <_raise_r+0x12>
 800c612:	2100      	movs	r1, #0
 800c614:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c618:	4620      	mov	r0, r4
 800c61a:	4798      	blx	r3
 800c61c:	2000      	movs	r0, #0
 800c61e:	e7e0      	b.n	800c5e2 <_raise_r+0x12>

0800c620 <raise>:
 800c620:	4b02      	ldr	r3, [pc, #8]	@ (800c62c <raise+0xc>)
 800c622:	4601      	mov	r1, r0
 800c624:	6818      	ldr	r0, [r3, #0]
 800c626:	f7ff bfd3 	b.w	800c5d0 <_raise_r>
 800c62a:	bf00      	nop
 800c62c:	20000108 	.word	0x20000108

0800c630 <_kill_r>:
 800c630:	b538      	push	{r3, r4, r5, lr}
 800c632:	4d07      	ldr	r5, [pc, #28]	@ (800c650 <_kill_r+0x20>)
 800c634:	2300      	movs	r3, #0
 800c636:	4604      	mov	r4, r0
 800c638:	4608      	mov	r0, r1
 800c63a:	4611      	mov	r1, r2
 800c63c:	602b      	str	r3, [r5, #0]
 800c63e:	f7f4 ffab 	bl	8001598 <_kill>
 800c642:	1c43      	adds	r3, r0, #1
 800c644:	d102      	bne.n	800c64c <_kill_r+0x1c>
 800c646:	682b      	ldr	r3, [r5, #0]
 800c648:	b103      	cbz	r3, 800c64c <_kill_r+0x1c>
 800c64a:	6023      	str	r3, [r4, #0]
 800c64c:	bd38      	pop	{r3, r4, r5, pc}
 800c64e:	bf00      	nop
 800c650:	20002508 	.word	0x20002508

0800c654 <_getpid_r>:
 800c654:	f7f4 bf98 	b.w	8001588 <_getpid>

0800c658 <__swhatbuf_r>:
 800c658:	b570      	push	{r4, r5, r6, lr}
 800c65a:	460c      	mov	r4, r1
 800c65c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c660:	2900      	cmp	r1, #0
 800c662:	b096      	sub	sp, #88	@ 0x58
 800c664:	4615      	mov	r5, r2
 800c666:	461e      	mov	r6, r3
 800c668:	da0d      	bge.n	800c686 <__swhatbuf_r+0x2e>
 800c66a:	89a3      	ldrh	r3, [r4, #12]
 800c66c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c670:	f04f 0100 	mov.w	r1, #0
 800c674:	bf14      	ite	ne
 800c676:	2340      	movne	r3, #64	@ 0x40
 800c678:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c67c:	2000      	movs	r0, #0
 800c67e:	6031      	str	r1, [r6, #0]
 800c680:	602b      	str	r3, [r5, #0]
 800c682:	b016      	add	sp, #88	@ 0x58
 800c684:	bd70      	pop	{r4, r5, r6, pc}
 800c686:	466a      	mov	r2, sp
 800c688:	f000 f848 	bl	800c71c <_fstat_r>
 800c68c:	2800      	cmp	r0, #0
 800c68e:	dbec      	blt.n	800c66a <__swhatbuf_r+0x12>
 800c690:	9901      	ldr	r1, [sp, #4]
 800c692:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c696:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c69a:	4259      	negs	r1, r3
 800c69c:	4159      	adcs	r1, r3
 800c69e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6a2:	e7eb      	b.n	800c67c <__swhatbuf_r+0x24>

0800c6a4 <__smakebuf_r>:
 800c6a4:	898b      	ldrh	r3, [r1, #12]
 800c6a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6a8:	079d      	lsls	r5, r3, #30
 800c6aa:	4606      	mov	r6, r0
 800c6ac:	460c      	mov	r4, r1
 800c6ae:	d507      	bpl.n	800c6c0 <__smakebuf_r+0x1c>
 800c6b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	6123      	str	r3, [r4, #16]
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	6163      	str	r3, [r4, #20]
 800c6bc:	b003      	add	sp, #12
 800c6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6c0:	ab01      	add	r3, sp, #4
 800c6c2:	466a      	mov	r2, sp
 800c6c4:	f7ff ffc8 	bl	800c658 <__swhatbuf_r>
 800c6c8:	9f00      	ldr	r7, [sp, #0]
 800c6ca:	4605      	mov	r5, r0
 800c6cc:	4639      	mov	r1, r7
 800c6ce:	4630      	mov	r0, r6
 800c6d0:	f7fe feee 	bl	800b4b0 <_malloc_r>
 800c6d4:	b948      	cbnz	r0, 800c6ea <__smakebuf_r+0x46>
 800c6d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6da:	059a      	lsls	r2, r3, #22
 800c6dc:	d4ee      	bmi.n	800c6bc <__smakebuf_r+0x18>
 800c6de:	f023 0303 	bic.w	r3, r3, #3
 800c6e2:	f043 0302 	orr.w	r3, r3, #2
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	e7e2      	b.n	800c6b0 <__smakebuf_r+0xc>
 800c6ea:	89a3      	ldrh	r3, [r4, #12]
 800c6ec:	6020      	str	r0, [r4, #0]
 800c6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	9b01      	ldr	r3, [sp, #4]
 800c6f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c6fa:	b15b      	cbz	r3, 800c714 <__smakebuf_r+0x70>
 800c6fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c700:	4630      	mov	r0, r6
 800c702:	f000 f81d 	bl	800c740 <_isatty_r>
 800c706:	b128      	cbz	r0, 800c714 <__smakebuf_r+0x70>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f023 0303 	bic.w	r3, r3, #3
 800c70e:	f043 0301 	orr.w	r3, r3, #1
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	89a3      	ldrh	r3, [r4, #12]
 800c716:	431d      	orrs	r5, r3
 800c718:	81a5      	strh	r5, [r4, #12]
 800c71a:	e7cf      	b.n	800c6bc <__smakebuf_r+0x18>

0800c71c <_fstat_r>:
 800c71c:	b538      	push	{r3, r4, r5, lr}
 800c71e:	4d07      	ldr	r5, [pc, #28]	@ (800c73c <_fstat_r+0x20>)
 800c720:	2300      	movs	r3, #0
 800c722:	4604      	mov	r4, r0
 800c724:	4608      	mov	r0, r1
 800c726:	4611      	mov	r1, r2
 800c728:	602b      	str	r3, [r5, #0]
 800c72a:	f7f4 ff95 	bl	8001658 <_fstat>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	d102      	bne.n	800c738 <_fstat_r+0x1c>
 800c732:	682b      	ldr	r3, [r5, #0]
 800c734:	b103      	cbz	r3, 800c738 <_fstat_r+0x1c>
 800c736:	6023      	str	r3, [r4, #0]
 800c738:	bd38      	pop	{r3, r4, r5, pc}
 800c73a:	bf00      	nop
 800c73c:	20002508 	.word	0x20002508

0800c740 <_isatty_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d06      	ldr	r5, [pc, #24]	@ (800c75c <_isatty_r+0x1c>)
 800c744:	2300      	movs	r3, #0
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	f7f4 ff94 	bl	8001678 <_isatty>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	d102      	bne.n	800c75a <_isatty_r+0x1a>
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	b103      	cbz	r3, 800c75a <_isatty_r+0x1a>
 800c758:	6023      	str	r3, [r4, #0]
 800c75a:	bd38      	pop	{r3, r4, r5, pc}
 800c75c:	20002508 	.word	0x20002508

0800c760 <_init>:
 800c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c762:	bf00      	nop
 800c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c766:	bc08      	pop	{r3}
 800c768:	469e      	mov	lr, r3
 800c76a:	4770      	bx	lr

0800c76c <_fini>:
 800c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76e:	bf00      	nop
 800c770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c772:	bc08      	pop	{r3}
 800c774:	469e      	mov	lr, r3
 800c776:	4770      	bx	lr
